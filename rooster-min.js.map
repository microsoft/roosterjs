{"version":3,"file":"rooster-min.js","mappings":"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AEhC,C,iKC1CA,eAMa,EAAAukB,YAAqC,CAC9C,IACA,OACA,UACA,OACA,UACA,QACA,IACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,SACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,MACA,KACA,KACA,KACA,WACA,aACA,SACA,OACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,MACA,OACA,OACA,WACA,QACA,MACA,KACA,WACA,SACA,SACA,IACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,UACA,SACA,QACA,OACA,SACA,SACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QACA,OACA,KACA,KACA,IACA,KACA,MACA,MACA,OAMS,EAAAC,eAAwC,CACjD,SACA,QACA,OACA,WACA,QACA,QACA,WACA,SACA,OACA,OACA,WACA,SACA,QACA,SACA,OACA,SACA,QACA,WACA,QACA,QACA,SAGJ,IAAMC,EAAiB,iDACjBC,EAAkB,OAElBC,EAAoB,CACtB,SACA,QACA,MACA,UACA,OACA,QACA,QACA,OACA,UACA,cACA,SACA,WACA,UACA,MACA,UACA,WACA,WACA,OACA,UACA,SACA,SACA,OACA,OACA,WACA,QACA,OACA,QACA,OACA,OACA,MACA,MACA,YACA,QACA,MACA,WACA,OACA,UACA,UACA,cACA,WACA,MACA,WACA,WACA,OACA,UACA,QACA,WACA,QACA,OACA,QACA,OACA,aACA,MACA,UACA,SACA,QACA,OACA,QACA,WACA,SACA,QACA,YACA,OACA,SACA,SACA,QACA,QACA,OACA,WAGEC,EAAgD,CAClD,mBAAoB,cACpB,sBAAuB,eACvB,sBAAuB,OACvB,sBAAuB,MACvB,sBAAuB,IACvB,sBAAuB,UACvB,qBAAsB,OACtB,sBAAuB,OACvB,qBAAsB,IACtB,oBAAqB,eACrB,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","sources":["webpack://roosterjs/./node_modules/color-convert/conversions.js","webpack://roosterjs/./node_modules/color-convert/index.js","webpack://roosterjs/./node_modules/color-convert/route.js","webpack://roosterjs/./node_modules/color-name/index.js","webpack://roosterjs/./node_modules/color-string/index.js","webpack://roosterjs/./node_modules/color/index.js","webpack://roosterjs/./node_modules/is-arrayish/index.js","webpack://roosterjs/./node_modules/simple-swizzle/index.js","webpack://roosterjs/./packages/roosterjs-color-utils/lib/index.ts","webpack://roosterjs/./packages/roosterjs-color-utils/lib/utils/getDarkColor.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/index.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/block/setModelAlignment.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/block/setModelDirection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/block/setModelIndentation.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/block/splitSelectedParagraphByBr.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/block/toggleModelBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/common/clearModelFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/common/queryContentModelBlocks.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/common/reducedModelChildProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/common/wrapBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/entity/insertEntityModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/image/applyImageBorderFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/link/getLinkUrl.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/link/matchLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/link/promoteLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/list/findListItemsInSameThread.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/list/getListAnnounceData.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/list/setListType.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/list/setModelListStartNumber.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/list/setModelListStyle.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/selection/adjustSegmentSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/selection/adjustTrailingSpaceSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/selection/adjustWordSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/selection/collapseTableSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/alignTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/alignTableCell.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/canMergeCells.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/clearSelectedCells.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/createTableStructure.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/deleteTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/deleteTableColumn.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/deleteTableRow.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/ensureFocusableParagraphForTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/insertTableColumn.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/insertTableRow.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/mergeTableCells.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/mergeTableColumn.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/mergeTableRow.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/splitTableCellHorizontally.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/modelApi/table/splitTableCellVertically.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/setAlignment.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/setDirection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/setHeadingLevel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/setIndentation.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/setParagraphMargin.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/setSpacing.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/block/toggleBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/entity/insertEntity.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/format/clearFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/format/getFormatState.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/image/adjustImageSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/image/changeImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/image/insertImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/image/setImageAltText.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/image/setImageBorder.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/image/setImageBoxShadow.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/link/adjustLinkSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/link/insertLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/link/removeLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/list/setListStartNumber.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/list/setListStyle.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/list/toggleBullet.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/list/toggleNumbering.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/applySegmentFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/changeCapitalization.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/changeFontSize.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/setBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/setFontName.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/setFontSize.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/setTextColor.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/splitTextSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleBold.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleCode.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleItalic.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleStrikethrough.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleSubscript.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleSuperscript.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/segment/toggleUnderline.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/table/applyTableBorderFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/table/editTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/table/formatTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/table/insertTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/table/setTableCellShade.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/createEditorContextForEntity.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/formatImageWithContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/formatInsertPointWithContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/formatParagraphWithContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/formatSegmentWithContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/formatTableWithContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-api/lib/publicApi/utils/formatTextSegmentBeforeSelectionMarker.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/createModelFromHtml/convertInlineCss.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/createModelFromHtml/createDomToModelContextForSanitizing.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/createModelFromHtml/createModelFromHtml.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/createModelFromHtml/sanitizeElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/exportContent/exportContent.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/paste/cleanHtmlComments.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/paste/createPasteFragment.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/paste/generatePasteOptionFromPlugins.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/paste/mergePasteContent.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/paste/paste.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/paste/retrieveHtmlInfo.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/redo/redo.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/command/undo/undo.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/addUndoSnapshot/addUndoSnapshot.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/addUndoSnapshot/createSnapshotSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/addUndoSnapshot/getPath.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/announce/announce.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/attachDomEvent/attachDomEvent.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/coreApiMap.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/createContentModel/createContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/createEditorContext/createEditorContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/createEditorContext/getRootComputedStyleForContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/focus/focus.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/formatContentModel/formatContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/formatContentModel/scrollCaretIntoView.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/getDOMSelection/getDOMSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/getVisibleViewport/getVisibleViewport.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot/getPositionFromPath.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot/restoreSnapshotColors.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot/restoreSnapshotHTML.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot/restoreSnapshotLogicalRoot.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot/restoreSnapshotSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot/restoreUndoSnapshot.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setContentModel/setContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setDOMSelection/addRangeToSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setDOMSelection/findLastedCoInMergedCell.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setDOMSelection/findTableCellElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setDOMSelection/setDOMSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setDOMSelection/toggleCaret.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setEditorStyle/ensureUniqueId.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setEditorStyle/setEditorStyle.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/setLogicalRoot/setLogicalRoot.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/switchShadowEdit/switchShadowEdit.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/coreApi/triggerEvent/triggerEvent.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/cache/CachePlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/cache/ParagraphMapImpl.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/cache/areSameSelections.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/cache/domIndexerImpl.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/cache/textMutationObserver.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/cache/updateCache.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/contextMenu/ContextMenuPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/copyPaste/CopyPastePlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/copyPaste/utils/adjustImageSelectionOnSafari.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/copyPaste/utils/deleteEmptyList.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/copyPaste/utils/pruneUnselectedModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/createEditorCorePlugins.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/domEvent/DOMEventPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/entity/EntityPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/entity/adjustSelectionAroundEntity.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/entity/entityDelimiterUtils.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/entity/findAllEntities.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/format/FormatPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/format/applyDefaultFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/format/applyPendingFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/lifecycle/LifecyclePlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/selection/SelectionPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/selection/findCoordinate.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/selection/isSingleImageInSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/selection/normalizePos.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/undo/SnapshotsManagerImpl.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/corePlugin/undo/UndoPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/editor/Editor.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/editor/core/DOMHelperImpl.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/editor/core/DarkColorHandlerImpl.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/editor/core/createEditorCore.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/editor/core/createEditorDefaultSettings.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/index.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/containerSizeFormatParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/listMetadataApplier.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/pasteCopyBlockEntityParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/pasteDisplayFormatParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/pasteEntityProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/pasteGeneralProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/pasteTextProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/override/pasteWhiteSpaceFormatParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/utils/createAriaLiveElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-core/lib/utils/domCreator.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/config/defaultContentModelFormatMap.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/config/defaultHTMLStyleMap.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/BulletListType.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/ChangeSource.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/EmptySegmentFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/NumberingListType.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/OrderedListStyleMap.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/TableBorderFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/constants/UnorderedListStyleMap.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/context/createDomToModelContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/context/defaultProcessors.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/domToContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/blockProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/brProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/childProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/codeProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/delimiterProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/elementProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/entityProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/fontProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/formatContainerProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/generalProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/headingProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/hrProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/imageProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/knownElementProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/linkProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/listItemProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/listProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/pProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/tableProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/textProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/processors/textWithSelectionProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/addSelectionMarker.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/areSameFormats.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/buildSelectionMarker.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/getBoundingClientRect.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/getDefaultStyle.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/getRegularSelectionOffsets.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/isBlockElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/parseFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domToModel/utils/stackFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/entityUtils.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/event/cacheGetEventData.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/event/eventUtils.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/event/extractClipboardItems.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/getObjectKeys.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/getSafeIdSelector.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/hiddenProperties/hiddenProperty.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/hiddenProperties/imageState.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/hiddenProperties/paragraphMarker.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/hiddenProperties/undeletableLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/isElementOfType.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/isGenericRoleElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/isNodeOfType.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/isWhiteSpacePreserved.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/moveChildNodes.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/normalizeRect.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/readFile.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/reuseCachedElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/selection/getDOMInsertPointRect.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/selection/getSelectionRootNode.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/stringUtil.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/style/borderValues.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/style/isBold.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/style/normalizeFontFamily.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/style/transformColor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/table/parseTableCells.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/toArray.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/unwrap.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/domUtils/wrap.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/directionFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/displayFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/htmlAlignFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/lineHeightFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/marginFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/paddingFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/textAlignFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/textIndentFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/block/whiteSpaceFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/ariaFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/backgroundColorFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/borderBoxFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/borderFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/boxShadowFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/datasetFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/floatFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/idFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/sizeFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/verticalAlignFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/common/wordBreakFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/defaultFormatHandlers.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/entity/entityFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/list/listItemThreadFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/list/listLevelThreadFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/list/listStyleFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/boldFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/fontFamilyFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/fontSizeFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/imageStateFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/italicFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/letterSpacingFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/linkFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/strikeFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/superOrSubScriptFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/textColorFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/undeletableLinkFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/segment/underlineFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/table/tableLayoutFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/table/tableSpacingFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/table/textColorOnTableCellFormatHandler.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/utils/color.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/utils/dir.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/utils/parseValueWithUnit.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/formatHandlers/utils/shouldSetValue.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/index.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/block/copyFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/block/setParagraphNotImplicit.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/addBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/addDecorators.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/addSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/addTextSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/ensureParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/hasSpacesOnly.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/isEmpty.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/mergeTextSegments.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/mutate.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/normalizeContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/normalizeParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/normalizeSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/normalizeSegmentFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/common/unwrapBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createBr.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createContentModelDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createDivider.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createEmptyModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createEntity.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createFormatContainer.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createGeneralBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createGeneralSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createListItem.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createListLevel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createParagraphDecorator.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createSelectionMarker.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createTableCell.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createTableRow.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/creators/createText.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/applyTableFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/cloneModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/deleteBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/deleteExpandedSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/deleteSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/deleteSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/deleteSingleChar.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/getClosestAncestorBlockGroupIndex.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/getListStyleTypeFromString.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/getSegmentTextFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/mergeModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/normalizeTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/retrieveModelFormatState.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/runEditSteps.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/editing/setTableCellBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/list/getAutoListStyleType.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/list/getOrderedListNumberStr.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/definitionCreators.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/updateImageMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/updateListMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/updateMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/updateTableCellMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/updateTableMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/metadata/validate.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/collectSelections.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/getSelectedCells.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/hasSelectionInBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/hasSelectionInBlockGroup.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/hasSelectionInSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/iterateSelections.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/selection/setSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/typeCheck/isBlockGroupOfType.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelApi/typeCheck/isGeneralSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/contentModelToDom.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/context/createModelToDomContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/context/defaultContentModelHandlers.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBlockGroupChildren.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBr.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleDivider.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleEntity.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleFormatContainer.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleGeneralModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleList.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleListItem.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleSegmentDecorator.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/handlers/handleText.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/optimizers/mergeNode.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/optimizers/optimize.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/optimizers/removeUnnecessarySpan.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/utils/applyFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/utils/applyMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/utils/handleSegmentCommon.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToDom/utils/stackFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-dom/lib/modelToText/contentModelToText.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/constants/headings.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/index.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/appliers/applyLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/appliers/applySegmentFormatting.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/appliers/applyTextFormatting.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/convertMarkdownToContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/creators/createBlockGroupFromMarkdown.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/creators/createBlockQuoteFromMarkdown.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/creators/createImageSegment.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/creators/createListFromMarkdown.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/creators/createParagraphFromMarkdown.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/creators/createTableFromMarkdown.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/processor/markdownProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/utils/adjustHeading.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/utils/getHeadingDecorator.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/utils/isMarkdownTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/markdownToModel/utils/splitParagraphSegments.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/modelToMarkdown/convertContentModelToMarkdown.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/modelToMarkdown/creators/createMarkdownBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/modelToMarkdown/creators/createMarkdownBlockGroup.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/modelToMarkdown/creators/createMarkdownParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/modelToMarkdown/creators/createMarkdownTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-markdown/lib/modelToMarkdown/processor/modelProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/AutoFormatPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/horizontalLine/checkAndInsertHorizontalLine.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/hyphen/transformHyphen.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/link/createLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/link/unlink.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/list/convertAlphaToDecimals.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/list/getIndex.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/list/getListTypeStyle.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/list/getNumberingListStyle.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/list/keyboardListTrigger.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/numbers/transformFraction.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/autoFormat/numbers/transformOrdinals.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/contextMenuBase/ContextMenuPluginBase.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/customReplace/CustomReplacePlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/EditPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteAllSegmentBefore.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteCollapsedSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteEmptyQuote.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteList.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteWordSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/handleKeyboardEventCommon.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/inputSteps/handleAutoLink.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/inputSteps/handleEnterOnList.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/inputSteps/handleEnterOnParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/keyboardDelete.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/keyboardEnter.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/keyboardInput.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/keyboardTab.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/tabUtils/handleTabOnList.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/tabUtils/handleTabOnParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/tabUtils/handleTabOnTable.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/tabUtils/handleTabOnTableCell.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/utils/getLeafSiblingBlock.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/edit/utils/splitParagraph.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/hiddenProperty/HiddenPropertyPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/hiddenProperty/fixupHiddenProperties.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/hyperlink/HyperlinkPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Cropper/createImageCropper.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Cropper/cropperContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/ImageEditPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Resizer/createImageResizer.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Resizer/resizerContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Resizer/updateSideHandlesVisibility.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Rotator/createImageRotator.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Rotator/rotatorContext.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/Rotator/updateRotateHandle.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/constants/constants.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/types/ImageEditElementClass.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/applyChange.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/canRegenerateImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/checkEditInfoState.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/createImageWrapper.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/doubleCheckResize.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/findEditingImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/generateDataURL.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/generateImageSize.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/getDropAndDragHelpers.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/getHTMLImageOptions.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/getSelectedImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/imageEditUtils.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/normalizeImageSelection.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/updateHandleCursor.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/updateImageEditInfo.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/imageEdit/utils/updateWrapper.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/index.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/markdown/MarkdownPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/markdown/utils/setFormat.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/DefaultSanitizers.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/Excel/processPastedContentFromExcel.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/PastePlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/PowerPoint/processPastedContentFromPowerPoint.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/WacComponents/constants.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/WacComponents/processPastedContentWacComponents.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/WordDesktop/getStyleMetadata.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/WordDesktop/processPastedContentFromWordDesktop.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/WordDesktop/processWordComments.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/WordDesktop/processWordLists.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/oneNote/processPastedContentFromOneNote.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/parsers/deprecatedColorParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/parsers/linkParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/parsers/removeNegativeTextIndentParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/constants.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/documentContainWacElements.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/getPasteSource.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isExcelDesktopDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isExcelNonNativeEvent.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isExcelOnlineDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isGoogleSheetDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isOneNoteDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isPowerPointDesktopDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isWordDesktopDocument.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/shouldConvertToSingleImage.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/processors/pasteButtonProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/utils/addParser.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/utils/chainSanitizerCallback.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/utils/customListUtils.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/utils/getStyles.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/paste/utils/setProcessor.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/picker/PickerHelperImpl.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/picker/PickerPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/picker/getQueryString.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/pluginUtils/CreateElement/createElement.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/pluginUtils/DragAndDrop/DragAndDropHelper.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/pluginUtils/Rect/getIntersectedRect.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/shortcut/ShortcutPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/shortcut/shortcuts.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/shortcut/utils/setShortcutIndentationCommand.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/TableEditPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/TableEditor.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/features/CellResizer.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/features/TableEditFeature.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/features/TableInserter.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/features/TableMover.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/features/TableResizer.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/tableEdit/editors/utils/getTableFromContentModel.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/watermark/WatermarkPlugin.ts","webpack://roosterjs/./packages/roosterjs-content-model-plugins/lib/watermark/isModelEmptyFast.ts","webpack://roosterjs/./packages/roosterjs/lib/createEditor.ts","webpack://roosterjs/./packages/roosterjs/lib/index.ts","webpack://roosterjs/./node_modules/tslib/tslib.es6.mjs","webpack://roosterjs/webpack/bootstrap","webpack://roosterjs/webpack/runtime/define property getters","webpack://roosterjs/webpack/runtime/hasOwnProperty shorthand","webpack://roosterjs/webpack/runtime/make namespace object","webpack://roosterjs/webpack/startup"],"sourcesContent":["/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (obj == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","export { default as getDarkColor } from './utils/getDarkColor';\n","import * as Color from 'color';\n\nconst DefaultBaseLValue = 21.247; // L-value of #333333\n\n/**\n * Get dark mode color for a given color\n * @param color The color to calculate from\n * @param baseLValue The Light value for base dark color in LAB format. @default the Light value for #333333\n */\nexport default function getDarkColor(\n    color: string,\n    baseLValue: number = DefaultBaseLValue\n): string {\n    try {\n        const computedColor = Color(color || undefined);\n        const colorLab = computedColor.lab().array();\n        const newLValue = (100 - colorLab[0]) * ((100 - baseLValue) / 100) + baseLValue;\n        color = Color.lab(newLValue, colorLab[1], colorLab[2])\n            .rgb()\n            .alpha(computedColor.alpha())\n            .toString();\n    } catch {}\n\n    return color;\n}\n","export { insertTable } from './publicApi/table/insertTable';\nexport { formatTable } from './publicApi/table/formatTable';\nexport { setTableCellShade } from './publicApi/table/setTableCellShade';\nexport { editTable } from './publicApi/table/editTable';\nexport { applyTableBorderFormat } from './publicApi/table/applyTableBorderFormat';\nexport { toggleBullet } from './publicApi/list/toggleBullet';\nexport { toggleNumbering } from './publicApi/list/toggleNumbering';\nexport { toggleBold } from './publicApi/segment/toggleBold';\nexport { toggleItalic } from './publicApi/segment/toggleItalic';\nexport { toggleUnderline } from './publicApi/segment/toggleUnderline';\nexport { toggleStrikethrough } from './publicApi/segment/toggleStrikethrough';\nexport { toggleSubscript } from './publicApi/segment/toggleSubscript';\nexport { toggleSuperscript } from './publicApi/segment/toggleSuperscript';\nexport { setBackgroundColor } from './publicApi/segment/setBackgroundColor';\nexport { setFontName } from './publicApi/segment/setFontName';\nexport { setFontSize } from './publicApi/segment/setFontSize';\nexport { setTextColor } from './publicApi/segment/setTextColor';\nexport { changeFontSize } from './publicApi/segment/changeFontSize';\nexport { applySegmentFormat } from './publicApi/segment/applySegmentFormat';\nexport { changeCapitalization } from './publicApi/segment/changeCapitalization';\nexport { splitTextSegment } from './publicApi/segment/splitTextSegment';\nexport { insertImage } from './publicApi/image/insertImage';\nexport { setListStyle } from './publicApi/list/setListStyle';\nexport { setListStartNumber } from './publicApi/list/setListStartNumber';\nexport { setIndentation } from './publicApi/block/setIndentation';\nexport { setAlignment } from './publicApi/block/setAlignment';\nexport { setDirection } from './publicApi/block/setDirection';\nexport { setHeadingLevel } from './publicApi/block/setHeadingLevel';\nexport { toggleBlockQuote } from './publicApi/block/toggleBlockQuote';\nexport { setSpacing } from './publicApi/block/setSpacing';\nexport { setImageBorder } from './publicApi/image/setImageBorder';\nexport { setImageBoxShadow } from './publicApi/image/setImageBoxShadow';\nexport { changeImage } from './publicApi/image/changeImage';\nexport { getFormatState } from './publicApi/format/getFormatState';\nexport { clearFormat } from './publicApi/format/clearFormat';\nexport { insertLink } from './publicApi/link/insertLink';\nexport { removeLink } from './publicApi/link/removeLink';\nexport { adjustLinkSelection } from './publicApi/link/adjustLinkSelection';\nexport { setImageAltText } from './publicApi/image/setImageAltText';\nexport { adjustImageSelection } from './publicApi/image/adjustImageSelection';\nexport { setParagraphMargin } from './publicApi/block/setParagraphMargin';\nexport { toggleCode } from './publicApi/segment/toggleCode';\nexport { insertEntity } from './publicApi/entity/insertEntity';\nexport { insertTableRow } from './modelApi/table/insertTableRow';\nexport { insertTableColumn } from './modelApi/table/insertTableColumn';\nexport { clearSelectedCells } from './modelApi/table/clearSelectedCells';\n\nexport { createEditorContextForEntity } from './publicApi/utils/createEditorContextForEntity';\nexport { formatTableWithContentModel } from './publicApi/utils/formatTableWithContentModel';\nexport { formatImageWithContentModel } from './publicApi/utils/formatImageWithContentModel';\nexport { formatParagraphWithContentModel } from './publicApi/utils/formatParagraphWithContentModel';\nexport { formatSegmentWithContentModel } from './publicApi/utils/formatSegmentWithContentModel';\nexport { formatTextSegmentBeforeSelectionMarker } from './publicApi/utils/formatTextSegmentBeforeSelectionMarker';\nexport { formatInsertPointWithContentModel } from './publicApi/utils/formatInsertPointWithContentModel';\n\nexport { setListType } from './modelApi/list/setListType';\nexport { setModelListStyle } from './modelApi/list/setModelListStyle';\nexport { setModelListStartNumber } from './modelApi/list/setModelListStartNumber';\nexport { findListItemsInSameThread } from './modelApi/list/findListItemsInSameThread';\nexport { setModelIndentation } from './modelApi/block/setModelIndentation';\nexport { matchLink } from './modelApi/link/matchLink';\nexport { promoteLink } from './modelApi/link/promoteLink';\nexport { getListAnnounceData } from './modelApi/list/getListAnnounceData';\nexport { queryContentModelBlocks } from './modelApi/common/queryContentModelBlocks';\n","import { alignTable } from '../table/alignTable';\nimport { getOperationalBlocks, mutateBlock } from 'roosterjs-content-model-dom';\nimport { splitSelectedParagraphByBr } from './splitSelectedParagraphByBr';\nimport type {\n    ContentModelListItem,\n    ReadonlyContentModelDocument,\n    TableAlignOperation,\n} from 'roosterjs-content-model-types';\n\nconst ResultMap: Record<\n    'left' | 'center' | 'right' | 'justify',\n    Record<'ltr' | 'rtl', 'start' | 'center' | 'end' | 'justify'>\n> = {\n    left: {\n        ltr: 'start',\n        rtl: 'end',\n    },\n    center: {\n        ltr: 'center',\n        rtl: 'center',\n    },\n    right: {\n        ltr: 'end',\n        rtl: 'start',\n    },\n    justify: {\n        ltr: 'justify',\n        rtl: 'justify',\n    },\n};\n\nconst TableAlignMap: Record<\n    'left' | 'center' | 'right',\n    Record<'ltr' | 'rtl', TableAlignOperation>\n> = {\n    left: {\n        ltr: 'alignLeft',\n        rtl: 'alignRight',\n    },\n    center: {\n        ltr: 'alignCenter',\n        rtl: 'alignCenter',\n    },\n    right: {\n        ltr: 'alignRight',\n        rtl: 'alignLeft',\n    },\n};\n\n/**\n * @internal\n */\nexport function setModelAlignment(\n    model: ReadonlyContentModelDocument,\n    alignment: 'left' | 'center' | 'right' | 'justify'\n) {\n    splitSelectedParagraphByBr(model);\n\n    const paragraphOrListItemOrTable = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n\n    paragraphOrListItemOrTable.forEach(({ block: readonlyBlock }) => {\n        const block = mutateBlock(readonlyBlock);\n        const newAlignment = ResultMap[alignment][block.format.direction == 'rtl' ? 'rtl' : 'ltr'];\n\n        if (block.blockType === 'Table' && alignment !== 'justify') {\n            alignTable(\n                block,\n                TableAlignMap[alignment][block.format.direction == 'rtl' ? 'rtl' : 'ltr']\n            );\n        } else if (block) {\n            if (block.blockType === 'BlockGroup' && block.blockGroupType === 'ListItem') {\n                block.blocks.forEach(b => {\n                    const { format } = mutateBlock(b);\n                    format.textAlign = newAlignment;\n                });\n            }\n            const { format } = block;\n            format.textAlign = newAlignment;\n        }\n    });\n\n    return paragraphOrListItemOrTable.length > 0;\n}\n","import { findListItemsInSameThread } from '../list/findListItemsInSameThread';\nimport { splitSelectedParagraphByBr } from './splitSelectedParagraphByBr';\nimport {\n    applyTableFormat,\n    getOperationalBlocks,\n    isBlockGroupOfType,\n    mutateBlock,\n    updateTableCellMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    BorderFormat,\n    ContentModelListItem,\n    MarginFormat,\n    PaddingFormat,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelDocument,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setModelDirection(model: ReadonlyContentModelDocument, direction: 'ltr' | 'rtl') {\n    splitSelectedParagraphByBr(model);\n\n    const paragraphOrListItemOrTable = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n\n    paragraphOrListItemOrTable.forEach(({ block }) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const items = findListItemsInSameThread(model, block);\n\n            items.forEach(readonlyItem => {\n                const item = mutateBlock(readonlyItem);\n\n                item.levels.forEach(level => {\n                    level.format.direction = direction;\n                });\n\n                item.blocks.forEach(block => internalSetDirection(block, direction));\n            });\n        } else if (block) {\n            internalSetDirection(block, direction);\n        }\n    });\n\n    return paragraphOrListItemOrTable.length > 0;\n}\n\nfunction internalSetDirection(block: ReadonlyContentModelBlock, direction: 'ltr' | 'rtl') {\n    const wasRtl = block.format.direction == 'rtl';\n    const isRtl = direction == 'rtl';\n\n    if (wasRtl != isRtl) {\n        const { format } = mutateBlock(block);\n        format.direction = direction;\n\n        // Adjust margin when change direction\n        const marginLeft = format.marginLeft;\n        const paddingLeft = format.paddingLeft;\n\n        setProperty(format, 'marginLeft', format.marginRight);\n        setProperty(format, 'marginRight', marginLeft);\n        setProperty(format, 'paddingLeft', format.paddingRight);\n        setProperty(format, 'paddingRight', paddingLeft);\n\n        // If whole Table direction changed, flip cell side borders\n        if (block && block.blockType == 'Table') {\n            block.rows.forEach(row => {\n                row.cells.forEach(cell => {\n                    // Optimise by skipping cells with unchanged borders\n                    updateTableCellMetadata(mutateBlock(cell), metadata => {\n                        if (metadata?.borderOverride) {\n                            const storeBorderLeft = cell.format.borderLeft;\n                            setProperty(cell.format, 'borderLeft', cell.format.borderRight);\n                            setProperty(cell.format, 'borderRight', storeBorderLeft);\n                        }\n                        return metadata;\n                    });\n                });\n            });\n\n            // Apply changed borders\n            applyTableFormat(block, undefined /* newFormat */, true /* keepCellShade*/);\n        }\n    }\n}\n\nfunction setProperty(\n    format: MarginFormat & PaddingFormat & BorderFormat,\n    key: keyof (MarginFormat & PaddingFormat & BorderFormat),\n    value: string | undefined\n) {\n    if (value) {\n        format[key] = value;\n    } else {\n        delete format[key];\n    }\n}\n","import { findListItemsInSameThread } from '../list/findListItemsInSameThread';\nimport { getListAnnounceData } from '../list/getListAnnounceData';\nimport { splitSelectedParagraphByBr } from './splitSelectedParagraphByBr';\nimport {\n    createListLevel,\n    getOperationalBlocks,\n    isBlockGroupOfType,\n    mutateBlock,\n    parseValueWithUnit,\n    updateListMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelListItem,\n    ContentModelListLevel,\n    FormatContentModelContext,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelListItem,\n} from 'roosterjs-content-model-types';\n\nconst IndentStepInPixel = 40;\n\n/**\n * @param model The content model to set indentation\n * @param indentation The indentation type, 'indent' to indent, 'outdent' to outdent\n * @param length The length of indentation in pixel, default value is 40\n * Set indentation for selected list items or paragraphs\n */\nexport function setModelIndentation(\n    model: ReadonlyContentModelDocument,\n    indentation: 'indent' | 'outdent',\n    length: number = IndentStepInPixel,\n    context?: FormatContentModelContext\n) {\n    splitSelectedParagraphByBr(model);\n\n    const paragraphOrListItem = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n    const isIndent = indentation == 'indent';\n    const modifiedBlocks: ReadonlyContentModelBlock[] = [];\n\n    paragraphOrListItem.forEach(({ block, parent, path }) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const thread = findListItemsInSameThread(model, block);\n            const firstItem = thread[0];\n            //if the first item is selected and has only one level, we should add margin to the whole list\n            if (isSelected(firstItem) && firstItem.levels.length == 1) {\n                const level = block.levels[0];\n                const { format } = level;\n                const { marginLeft, marginRight } = format;\n                const newValue = calculateMarginValue(format, isIndent, length);\n                const isRtl = format.direction == 'rtl';\n                const originalValue = parseValueWithUnit(isRtl ? marginRight : marginLeft);\n\n                if (!isIndent && originalValue == 0) {\n                    block.levels.pop();\n                } else if (newValue !== null) {\n                    if (isRtl) {\n                        level.format.marginRight = newValue + 'px';\n                    } else {\n                        level.format.marginLeft = newValue + 'px';\n                    }\n                }\n                //if block has only one level, there is not need to check if it is multilevel selection\n            } else if (block.levels.length == 1 || !isMultilevelSelection(model, block, parent)) {\n                if (isIndent) {\n                    const threadIdx = thread.indexOf(block);\n                    const previousItem = thread[threadIdx - 1];\n                    const nextItem = thread[threadIdx + 1];\n                    const levelLength = block.levels.length;\n                    const lastLevel = block.levels[levelLength - 1];\n                    const newLevel: ContentModelListLevel = createListLevel(\n                        lastLevel?.listType || 'UL',\n                        lastLevel?.format,\n                        previousItem && previousItem.levels.length > levelLength\n                            ? previousItem.levels[levelLength].dataset\n                            : nextItem && nextItem.levels.length > levelLength\n                            ? nextItem.levels[levelLength].dataset\n                            : undefined\n                    );\n\n                    updateListMetadata(newLevel, metadata => {\n                        metadata = metadata || {};\n                        metadata.applyListStyleFromLevel = true;\n                        return metadata;\n                    });\n\n                    // New level is totally new, no need to have these attributes for now\n                    delete newLevel.format.startNumberOverride;\n\n                    block.levels.push(newLevel);\n                } else {\n                    block.levels.pop();\n                }\n\n                if (block.levels.length > 0 && context) {\n                    context.announceData = getListAnnounceData([block, ...path]);\n                }\n            }\n        } else if (block) {\n            let currentBlock: ReadonlyContentModelBlock = block;\n            let currentParent: ReadonlyContentModelBlockGroup = parent;\n\n            while (currentParent && modifiedBlocks.indexOf(currentBlock) < 0) {\n                const index = path.indexOf(currentParent);\n                const { format } = mutateBlock(currentBlock);\n                const newValue = calculateMarginValue(format, isIndent, length);\n\n                if (newValue !== null) {\n                    const isRtl = format.direction == 'rtl';\n\n                    if (isRtl) {\n                        format.marginRight = newValue + 'px';\n                    } else {\n                        format.marginLeft = newValue + 'px';\n                    }\n\n                    modifiedBlocks.push(currentBlock);\n\n                    break;\n                } else if (currentParent.blockGroupType == 'FormatContainer' && index >= 0) {\n                    mutateBlock(currentParent);\n\n                    currentBlock = currentParent;\n                    currentParent = path[index + 1];\n                } else {\n                    break;\n                }\n            }\n        }\n    });\n\n    return paragraphOrListItem.length > 0;\n}\n\nfunction isSelected(listItem: ReadonlyContentModelListItem) {\n    return listItem.blocks.some(block => {\n        if (block.blockType == 'Paragraph') {\n            return block.segments.some(segment => segment.isSelected);\n        }\n    });\n}\n\n/*\n * Check if the selection has list items with different levels and the first item of the list is selected, do not create a sub list.\n * Otherwise, the margin of the first item will be changed, and the sub list will be created, creating a unintentional margin difference between the list items.\n */\nfunction isMultilevelSelection(\n    model: ReadonlyContentModelDocument,\n    listItem: ReadonlyContentModelListItem,\n    parent: ReadonlyContentModelBlockGroup\n) {\n    const listIndex = parent.blocks.indexOf(listItem);\n    for (let i = listIndex - 1; i >= 0; i--) {\n        const block = parent.blocks[i];\n        if (\n            isBlockGroupOfType<ContentModelListItem>(block, 'ListItem') &&\n            block.levels.length == 1 &&\n            isSelected(block)\n        ) {\n            const firstItem = findListItemsInSameThread(model, block)[0];\n            return isSelected(firstItem);\n        }\n\n        if (!isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            return false;\n        }\n    }\n    return false;\n}\n\nfunction calculateMarginValue(\n    format: Readonly<ContentModelBlockFormat>,\n    isIndent: boolean,\n    length: number = IndentStepInPixel\n): number | null {\n    const { marginLeft, marginRight, direction } = format;\n    const isRtl = direction == 'rtl';\n    const originalValue = parseValueWithUnit(isRtl ? marginRight : marginLeft);\n    let newValue = (isIndent ? Math.ceil : Math.floor)(originalValue / length) * length;\n\n    if (newValue == originalValue) {\n        newValue = Math.max(newValue + length * (isIndent ? 1 : -1), 0);\n    }\n\n    if (newValue == originalValue) {\n        // Return null to let caller know nothing is changed\n        return null;\n    } else {\n        return newValue;\n    }\n}\n","import {\n    createParagraph,\n    getSelectedSegmentsAndParagraphs,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelParagraph,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * For all selected paragraphs, if it has BR in middle of other segments, split the paragraph into multiple paragraphs\n * @param model The model to process\n */\nexport function splitSelectedParagraphByBr(model: ReadonlyContentModelDocument) {\n    const selections = getSelectedSegmentsAndParagraphs(\n        model,\n        false /*includingFormatHolder*/,\n        false /*includingEntity*/\n    );\n\n    for (const [_, para, path] of selections) {\n        if (para?.segments.some(s => s.segmentType == 'Br')) {\n            let currentParagraph = shallowColonParagraph(para);\n            let hasVisibleSegment = false;\n            const newParagraphs: ShallowMutableContentModelParagraph[] = [];\n            const parent = mutateBlock(path[0]);\n            const index = parent.blocks.indexOf(para);\n\n            if (index >= 0) {\n                for (const segment of mutateBlock(para).segments) {\n                    if (segment.segmentType == 'Br') {\n                        if (!hasVisibleSegment) {\n                            currentParagraph.segments.push(segment);\n                        }\n\n                        if (currentParagraph.segments.length > 0) {\n                            newParagraphs.push(currentParagraph);\n                        }\n\n                        currentParagraph = shallowColonParagraph(para);\n                        hasVisibleSegment = false;\n                    } else {\n                        currentParagraph.segments.push(segment);\n\n                        if (segment.segmentType != 'SelectionMarker') {\n                            hasVisibleSegment = true;\n                        }\n                    }\n                }\n\n                if (currentParagraph.segments.length > 0) {\n                    newParagraphs.push(currentParagraph);\n                }\n\n                parent.blocks.splice(index, 1, ...newParagraphs);\n            }\n        }\n    }\n}\n\nfunction shallowColonParagraph(\n    para: ReadonlyContentModelParagraph\n): ShallowMutableContentModelParagraph {\n    return createParagraph(false /*isImplicit*/, para.format, para.segmentFormat, para.decorator);\n}\n","import { splitSelectedParagraphByBr } from './splitSelectedParagraphByBr';\nimport { wrapBlockStep1, wrapBlockStep2 } from '../common/wrapBlock';\nimport {\n    getOperationalBlocks,\n    isBlockGroupOfType,\n    areSameFormats,\n    createFormatContainer,\n    unwrapBlock,\n} from 'roosterjs-content-model-dom';\nimport type { WrapBlockStep1Result } from '../common/wrapBlock';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n    ContentModelListItem,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelFormatContainer,\n    ReadonlyContentModelListItem,\n    ReadonlyOperationalBlocks,\n    ShallowMutableContentModelBlock,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function toggleModelBlockQuote(\n    model: ReadonlyContentModelDocument,\n    formatLtr: ContentModelFormatContainerFormat,\n    formatRtl: ContentModelFormatContainerFormat\n): boolean {\n    splitSelectedParagraphByBr(model);\n\n    const paragraphOfQuote = getOperationalBlocks<\n        ContentModelFormatContainer | ContentModelListItem\n    >(model, ['FormatContainer', 'ListItem'], ['TableCell'], true /*deepFirst*/);\n\n    if (areAllBlockQuotes(paragraphOfQuote)) {\n        // All selections are already in quote, we need to unquote them\n        paragraphOfQuote.forEach(({ block, parent }) => {\n            unwrapBlock(parent, block);\n        });\n    } else {\n        const step1Results: WrapBlockStep1Result<ContentModelFormatContainer>[] = [];\n        const creator = (isRtl: boolean) =>\n            createFormatContainer('blockquote', isRtl ? formatRtl : formatLtr);\n        const canMerge = (\n            isRtl: boolean,\n            target: ShallowMutableContentModelBlock,\n            current?: ContentModelFormatContainer\n        ): target is ContentModelFormatContainer =>\n            canMergeQuote(target, current?.format || (isRtl ? formatRtl : formatLtr));\n\n        paragraphOfQuote.forEach(({ block, parent }) => {\n            if (isQuote(block)) {\n                // Already in quote, no op\n            } else {\n                wrapBlockStep1(step1Results, parent, block, creator, canMerge);\n            }\n        });\n\n        wrapBlockStep2(step1Results, canMerge);\n    }\n\n    return paragraphOfQuote.length > 0;\n}\n\nfunction canMergeQuote(\n    target: ShallowMutableContentModelBlock,\n    format: ContentModelFormatContainerFormat\n): target is ContentModelFormatContainer {\n    return isQuote(target) && areSameFormats(format, target.format);\n}\n\nfunction isQuote(block: ReadonlyContentModelBlock): block is ReadonlyContentModelFormatContainer {\n    return (\n        isBlockGroupOfType<ContentModelFormatContainer>(block, 'FormatContainer') &&\n        block.tagName == 'blockquote'\n    );\n}\n\nfunction areAllBlockQuotes(\n    blockAndParents: ReadonlyOperationalBlocks<\n        ReadonlyContentModelFormatContainer | ReadonlyContentModelListItem\n    >[]\n): blockAndParents is {\n    block: ContentModelFormatContainer;\n    parent: ContentModelBlockGroup;\n    path: ContentModelBlockGroup[];\n}[] {\n    return blockAndParents.every(blockAndParent => isQuote(blockAndParent.block));\n}\n","import { adjustWordSelection } from '../selection/adjustWordSelection';\nimport {\n    applyTableFormat,\n    createFormatContainer,\n    getClosestAncestorBlockGroupIndex,\n    iterateSelections,\n    mutateBlock,\n    mutateSegments,\n    updateTableCellMetadata,\n    updateTableMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelFormatContainer,\n    ReadonlyContentModelListItem,\n    ReadonlySelectable,\n    ReadonlyTableSelectionContext,\n    ShallowMutableContentModelBlock,\n    ShallowMutableContentModelFormatContainer,\n    ShallowMutableContentModelSegment,\n    ShallowMutableContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function clearModelFormat(\n    model: ReadonlyContentModelDocument,\n    blocksToClear: [ReadonlyContentModelBlockGroup[], ShallowMutableContentModelBlock][],\n    segmentsToClear: ShallowMutableContentModelSegment[],\n    tablesToClear: [ContentModelTable, boolean][]\n): boolean {\n    let pendingStructureChange = false;\n\n    iterateSelections(\n        model,\n        (path, tableContext, block, segments) => {\n            if (segments) {\n                if (block?.blockType == 'Paragraph') {\n                    const [, mutableSegments] = mutateSegments(block, segments);\n\n                    segmentsToClear.push(...mutableSegments);\n                } else if (\n                    path[0].blockGroupType == 'ListItem' &&\n                    segments.length == 1 &&\n                    path[0].formatHolder == segments[0]\n                ) {\n                    segmentsToClear.push(mutateBlock(path[0]).formatHolder);\n                }\n            }\n\n            if (block) {\n                blocksToClear.push([path, mutateBlock(block)]);\n            } else if (tableContext) {\n                clearTableCellFormat(tableContext, tablesToClear);\n            }\n        },\n        {\n            // When there is a default format to apply, we know how to handle segment format under list.\n            // So no need to clear format of list number.\n            // Otherwise, we will clear all format of selected text. And since they are under LI tag, we\n            // also need to clear the format of LI (format holder) so that the format is really cleared\n            includeListFormatHolder: model.format ? 'never' : 'anySegment',\n        }\n    );\n\n    const marker = segmentsToClear[0];\n\n    // 2. If selection is collapsed, add selection to whole word to clear if any\n    if (\n        blocksToClear.length == 1 &&\n        isOnlySelectionMarkerSelected(blocksToClear[0][1]) &&\n        blocksToClear.length == 1\n    ) {\n        segmentsToClear.splice(0, segmentsToClear.length, ...adjustWordSelection(model, marker));\n        pendingStructureChange = clearListFormat(blocksToClear[0][0]) || pendingStructureChange;\n    } else if (blocksToClear.length > 1 || blocksToClear.some(x => isWholeBlockSelected(x[1]))) {\n        // 2. If a full block or multiple blocks are selected, clear block format\n        for (let i = blocksToClear.length - 1; i >= 0; i--) {\n            const [path, block] = blocksToClear[i];\n\n            clearBlockFormat(path, block);\n            pendingStructureChange = clearListFormat(path) || pendingStructureChange;\n            clearContainerFormat(path, block);\n        }\n    }\n\n    // 3. Finally clear format for segments\n    clearSegmentsFormat(segmentsToClear, model.format);\n\n    // 4. Clear format for table if any\n    createTablesFormat(tablesToClear);\n\n    return pendingStructureChange;\n}\n\nfunction createTablesFormat(tablesToClear: [ContentModelTable, boolean][]) {\n    tablesToClear.forEach(x => {\n        const [table, isWholeTableSelected] = x;\n        if (isWholeTableSelected) {\n            table.format = {\n                useBorderBox: table.format.useBorderBox,\n                borderCollapse: table.format.borderCollapse,\n            };\n            updateTableMetadata(table, () => null);\n        }\n\n        applyTableFormat(table, undefined /*newFormat*/, true);\n    });\n}\n\nfunction clearSegmentsFormat(\n    segmentsToClear: ShallowMutableContentModelSegment[],\n    defaultSegmentFormat: Readonly<ContentModelSegmentFormat> | undefined\n) {\n    segmentsToClear.forEach(x => {\n        x.format = { ...(defaultSegmentFormat || {}) };\n\n        if (x.link) {\n            delete x.link.format.textColor;\n        }\n\n        delete x.code;\n    });\n}\n\nfunction clearTableCellFormat(\n    tableContext: ReadonlyTableSelectionContext | undefined,\n    tablesToClear: [ShallowMutableContentModelTable, boolean][]\n) {\n    if (tableContext) {\n        const { table, colIndex, rowIndex, isWholeTableSelected } = tableContext;\n        const cell = table.rows[rowIndex].cells[colIndex];\n\n        if (cell.isSelected) {\n            const mutableCell = mutateBlock(cell);\n\n            updateTableCellMetadata(mutableCell, () => null);\n            mutableCell.isHeader = false;\n            mutableCell.format = {\n                useBorderBox: cell.format.useBorderBox,\n            };\n        }\n\n        if (!tablesToClear.find(x => x[0] == table)) {\n            tablesToClear.push([mutateBlock(table), isWholeTableSelected]);\n        }\n    }\n}\n\nfunction clearContainerFormat(\n    path: ReadonlyContentModelBlockGroup[],\n    block: ShallowMutableContentModelBlock\n) {\n    const containerPathIndex = getClosestAncestorBlockGroupIndex(\n        path,\n        ['FormatContainer'],\n        ['TableCell']\n    );\n\n    if (containerPathIndex >= 0 && containerPathIndex < path.length - 1) {\n        const container = mutateBlock(\n            path[containerPathIndex] as ReadonlyContentModelFormatContainer\n        );\n        const containerIndex = path[containerPathIndex + 1].blocks.indexOf(container);\n        const blockIndex = container.blocks.indexOf(block);\n\n        if (blockIndex >= 0 && containerIndex >= 0) {\n            const newContainer: ShallowMutableContentModelFormatContainer = createFormatContainer(\n                container.tagName,\n                container.format\n            );\n\n            container.blocks.splice(blockIndex, 1);\n            newContainer.blocks = container.blocks.splice(blockIndex);\n\n            mutateBlock(path[containerPathIndex + 1]).blocks.splice(\n                containerIndex + 1,\n                0,\n                block,\n                newContainer\n            );\n        }\n    }\n}\n\nfunction clearListFormat(path: ReadonlyContentModelBlockGroup[]) {\n    const listItem = path[getClosestAncestorBlockGroupIndex(path, ['ListItem'], ['TableCell'])] as\n        | ReadonlyContentModelListItem\n        | undefined;\n\n    if (listItem) {\n        mutateBlock(listItem).levels = [];\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction clearBlockFormat(\n    path: ReadonlyContentModelBlockGroup[],\n    block: ShallowMutableContentModelBlock\n) {\n    if (block.blockType == 'Divider') {\n        const index = path[0].blocks.indexOf(block);\n\n        if (index >= 0) {\n            mutateBlock(path[0]).blocks.splice(index, 1);\n        }\n    } else if (block.blockType == 'Paragraph') {\n        block.format = {};\n        delete block.decorator;\n    }\n}\n\nfunction isOnlySelectionMarkerSelected(block: ReadonlyContentModelBlock) {\n    const segments = block.blockType == 'Paragraph' ? block.segments.filter(x => x.isSelected) : [];\n\n    return segments.length == 1 && segments[0].segmentType == 'SelectionMarker';\n}\n\nfunction isWholeBlockSelected(block: ReadonlyContentModelBlock) {\n    return (\n        (block as ReadonlySelectable).isSelected ||\n        (block.blockType == 'Paragraph' && block.segments.every(x => x.isSelected))\n    );\n}\n","import { createDomToModelContext, domToContentModel } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockType,\n    ContentModelEntity,\n    EditorContext,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockBase,\n    ReadonlyContentModelBlockGroup,\n} from 'roosterjs-content-model-types';\n\n/**\n * Query content model blocks\n * @param group The block group to query\n * @param type The type of block to query\n * @param filter Optional selector to filter the blocks\n * @param findFirstOnly True to return the first block only, false to return all blocks\n * @param shouldExpandEntity Optional function to determine if an entity's children should be recursively queried, should return a EditorContext if the entity should be expanded, or null if not\n */\nexport function queryContentModelBlocks<T extends ReadonlyContentModelBlock>(\n    group: ReadonlyContentModelBlockGroup,\n    type: T extends ReadonlyContentModelBlockBase<infer U> ? U : never,\n    filter?: (element: T) => element is T,\n    findFirstOnly?: boolean,\n    shouldExpandEntity?: (entity: ContentModelEntity) => EditorContext | null\n): T[] {\n    const elements: T[] = [];\n    for (let i = 0; i < group.blocks.length; i++) {\n        if (findFirstOnly && elements.length > 0) {\n            return elements;\n        }\n        const block = group.blocks[i];\n\n        switch (block.blockType) {\n            case 'Paragraph':\n            case 'Divider':\n            case 'Entity':\n                if (isExpectedBlockType(block, type, filter)) {\n                    elements.push(block);\n                }\n                if (block.blockType == 'Entity' && shouldExpandEntity) {\n                    const editorContext = shouldExpandEntity(block);\n                    if (editorContext) {\n                        const context = createDomToModelContext(editorContext);\n                        const model = domToContentModel(block.wrapper, context);\n                        const results = queryContentModelBlocks<T>(\n                            model,\n                            type,\n                            filter,\n                            findFirstOnly,\n                            shouldExpandEntity\n                        );\n                        elements.push(...results);\n                    }\n                }\n                break;\n            case 'BlockGroup':\n                if (isExpectedBlockType(block, type, filter)) {\n                    elements.push(block);\n                }\n                const results = queryContentModelBlocks<T>(\n                    block,\n                    type,\n                    filter,\n                    findFirstOnly,\n                    shouldExpandEntity\n                );\n                elements.push(...results);\n                break;\n            case 'Table':\n                if (isExpectedBlockType(block, type, filter)) {\n                    elements.push(block);\n                }\n                for (const row of block.rows) {\n                    for (const cell of row.cells) {\n                        const results = queryContentModelBlocks<T>(\n                            cell,\n                            type,\n                            filter,\n                            findFirstOnly,\n                            shouldExpandEntity\n                        );\n                        elements.push(...results);\n                    }\n                }\n                break;\n        }\n    }\n    return elements;\n}\n\nfunction isExpectedBlockType<T extends ReadonlyContentModelBlock>(\n    block: ReadonlyContentModelBlock,\n    type: ContentModelBlockType,\n    filter?: (element: T) => element is T\n): block is T {\n    return isBlockType<T>(block, type) && (!filter || filter(block));\n}\n\nfunction isBlockType<T extends ReadonlyContentModelBlock>(\n    block: ReadonlyContentModelBlock,\n    type: ContentModelBlockType\n): block is T {\n    return block.blockType == type;\n}\n","import {\n    getRegularSelectionOffsets,\n    getSelectionRootNode,\n    handleRegularSelection,\n    isNodeOfType,\n    processChildNode,\n} from 'roosterjs-content-model-dom';\nimport type { ContentModelBlockGroup, DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\ninterface FormatStateContext extends DomToModelContext {\n    /**\n     * An optional stack of parent elements to process. When provided, the child nodes of current parent element will be ignored,\n     * but use the top element in this stack instead in childProcessor.\n     */\n    nodeStack?: Node[];\n}\n\n/**\n * @internal\n * In order to get format, we can still use the regular child processor. However, to improve performance, we don't need to create\n * content model for the whole doc, instead we only need to traverse the tree path that can arrive current selected node.\n * This \"reduced\" child processor will first create a node stack that stores DOM node from root to current common ancestor node of selection,\n * then use this stack as a faked DOM tree to create a reduced content model which we can use to retrieve format state\n */\nexport function reducedModelChildProcessor(\n    group: ContentModelBlockGroup,\n    parent: ParentNode,\n    context: FormatStateContext\n) {\n    if (!context.nodeStack) {\n        const selectionRootNode = getSelectionRootNode(context.selection);\n        context.nodeStack = selectionRootNode ? createNodeStack(parent, selectionRootNode) : [];\n    }\n\n    const stackChild = context.nodeStack.pop();\n\n    if (stackChild) {\n        const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, parent);\n\n        // If selection is not on this node, skip getting node index to save some time since we don't need it here\n        const index =\n            nodeStartOffset >= 0 || nodeEndOffset >= 0 ? getChildIndex(parent, stackChild) : -1;\n\n        if (index >= 0) {\n            handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n        }\n\n        processChildNode(group, stackChild, context);\n\n        if (index >= 0) {\n            handleRegularSelection(index + 1, context, group, nodeStartOffset, nodeEndOffset);\n        }\n    } else {\n        // No child node from node stack, that means we have reached the deepest node of selection.\n        // Now we can use default child processor to perform full sub tree scanning for content model,\n        // So that all selected node will be included.\n        context.defaultElementProcessors.child(group, parent, context);\n    }\n}\n\nfunction createNodeStack(root: Node, startNode: Node): Node[] {\n    const result: Node[] = [];\n    let node: Node | null = startNode;\n\n    while (node && root != node && root.contains(node)) {\n        if (isNodeOfType(node, 'ELEMENT_NODE') && node.tagName == 'TABLE') {\n            // For table, we can't do a reduced model creation since we need to handle their cells and indexes,\n            // so clean up whatever we already have, and just put table into the stack\n            result.splice(0, result.length, node);\n        } else {\n            result.push(node);\n        }\n\n        node = node.parentNode;\n    }\n\n    return result;\n}\n\nfunction getChildIndex(parent: ParentNode, stackChild: Node) {\n    let index = 0;\n    let child = parent.firstChild;\n\n    while (child && child != stackChild) {\n        index++;\n        child = child.nextSibling;\n    }\n    return index;\n}\n","import { addBlock, mutateBlock, setParagraphNotImplicit } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ShallowMutableContentModelBlock,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface WrapBlockStep1Result<T extends ContentModelBlockGroup & ContentModelBlock> {\n    parent: ReadonlyContentModelBlockGroup;\n    wrapper: T;\n}\n\n/**\n * @internal\n */\nexport function wrapBlockStep1<T extends ContentModelBlockGroup & ContentModelBlock>(\n    step1Result: WrapBlockStep1Result<T>[],\n    readonlyParent: ReadonlyContentModelBlockGroup | null,\n    readonlyBlockToWrap: ReadonlyContentModelBlock,\n    creator: (isRtl: boolean) => T,\n    canMerge: (isRtl: boolean, target: ShallowMutableContentModelBlock) => target is T\n) {\n    const parent = readonlyParent ? mutateBlock(readonlyParent) : null;\n    const blockToWrap = mutateBlock(readonlyBlockToWrap);\n    const index = parent?.blocks.indexOf(blockToWrap) ?? -1;\n\n    if (parent && index >= 0) {\n        parent.blocks.splice(index, 1);\n\n        const readonlyPrevBlock: ReadonlyContentModelBlock = parent.blocks[index - 1];\n        const prevBlock = readonlyPrevBlock ? mutateBlock(readonlyPrevBlock) : null;\n        const isRtl = blockToWrap.format.direction == 'rtl';\n        const wrapper =\n            prevBlock && canMerge(isRtl, prevBlock)\n                ? prevBlock\n                : createAndAdd(parent, index, creator, isRtl);\n\n        setParagraphNotImplicit(blockToWrap);\n        addBlock(wrapper, blockToWrap);\n\n        // Use reverse order, so that we can merge from last to first to avoid modifying unmerged quotes\n        step1Result.unshift({ parent, wrapper });\n    }\n}\n\n/**\n * @internal\n */\nexport function wrapBlockStep2<T extends ContentModelBlockGroup & ContentModelBlock>(\n    step1Result: WrapBlockStep1Result<T>[],\n    canMerge: (isRtl: boolean, target: ShallowMutableContentModelBlock, current: T) => target is T\n) {\n    step1Result.forEach(({ parent, wrapper }) => {\n        const index = parent.blocks.indexOf(wrapper);\n        const readonlyNextBlock = parent.blocks[index + 1];\n        const nextBlock = readonlyNextBlock ? mutateBlock(readonlyNextBlock) : null;\n        const isRtl = wrapper.format.direction == 'rtl';\n\n        if (index >= 0 && nextBlock && canMerge(isRtl, nextBlock, wrapper)) {\n            wrapper.blocks.forEach(setParagraphNotImplicit);\n            wrapper.blocks.push(...nextBlock.blocks);\n            mutateBlock(parent).blocks.splice(index + 1, 1);\n        }\n    });\n}\n\nfunction createAndAdd<T extends ContentModelBlockGroup & ContentModelBlock>(\n    parent: ReadonlyContentModelBlockGroup,\n    index: number,\n    creator: (isRtl: boolean) => T,\n    isRtl: boolean\n): T {\n    const block = creator(isRtl);\n\n    mutateBlock(parent).blocks.splice(index, 0, block);\n\n    return block;\n}\n","import {\n    createBr,\n    createParagraph,\n    createSelectionMarker,\n    normalizeContentModel,\n    deleteSelection,\n    getClosestAncestorBlockGroupIndex,\n    setSelection,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelEntity,\n    FormatContentModelContext,\n    InsertEntityPosition,\n    InsertPoint,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelBlock,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function insertEntityModel(\n    model: ReadonlyContentModelDocument,\n    entityModel: ContentModelEntity,\n    position: InsertEntityPosition,\n    isBlock: boolean,\n    focusAfterEntity?: boolean,\n    context?: FormatContentModelContext,\n    insertPointOverride?: InsertPoint\n) {\n    let blockParent: ReadonlyContentModelBlockGroup | undefined;\n    let blockIndex = -1;\n    let insertPoint: InsertPoint | null;\n\n    if (position == 'begin' || position == 'end') {\n        blockParent = model;\n        blockIndex = position == 'begin' ? 0 : model.blocks.length;\n\n        if (!isBlock) {\n            Object.assign(entityModel.format, model.format);\n        }\n    } else if ((insertPoint = getInsertPoint(model, insertPointOverride, context))) {\n        const { marker, paragraph, path } = insertPoint;\n\n        if (!isBlock) {\n            const index = paragraph.segments.indexOf(marker);\n\n            Object.assign(entityModel.format, marker.format);\n\n            if (index >= 0) {\n                paragraph.segments.splice(focusAfterEntity ? index : index + 1, 0, entityModel);\n            }\n        } else {\n            const pathIndex =\n                position == 'root'\n                    ? getClosestAncestorBlockGroupIndex(path, ['TableCell', 'Document'])\n                    : 0;\n            blockParent = mutateBlock(path[pathIndex]);\n\n            const child = path[pathIndex - 1];\n            const directChild: ReadonlyContentModelBlock =\n                child?.blockGroupType == 'FormatContainer' ||\n                child?.blockGroupType == 'General' ||\n                child?.blockGroupType == 'ListItem'\n                    ? child\n                    : paragraph;\n            const childIndex = blockParent.blocks.indexOf(directChild);\n            blockIndex = childIndex >= 0 ? childIndex + 1 : -1;\n        }\n    }\n\n    if (blockIndex >= 0 && blockParent) {\n        const blocksToInsert: ShallowMutableContentModelBlock[] = [];\n        let nextParagraph: ShallowMutableContentModelParagraph | undefined;\n\n        if (isBlock) {\n            const nextBlock = blockParent.blocks[blockIndex];\n\n            blocksToInsert.push(entityModel);\n\n            if (nextBlock?.blockType == 'Paragraph') {\n                nextParagraph = mutateBlock(nextBlock);\n            } else if (!nextBlock || nextBlock.blockType == 'Entity' || focusAfterEntity) {\n                nextParagraph = createParagraph(false /*isImplicit*/, {}, model.format);\n                nextParagraph.segments.push(createBr(model.format));\n                blocksToInsert.push(nextParagraph);\n            }\n        } else {\n            nextParagraph = createParagraph(\n                false /*isImplicit*/,\n                undefined /*format*/,\n                model.format\n            );\n\n            nextParagraph.segments.push(entityModel);\n            blocksToInsert.push(nextParagraph);\n        }\n\n        mutateBlock(blockParent).blocks.splice(blockIndex, 0, ...blocksToInsert);\n\n        if (focusAfterEntity && nextParagraph) {\n            const marker = createSelectionMarker(nextParagraph.segments[0]?.format || model.format);\n            const segments = nextParagraph.segments;\n\n            isBlock ? segments.unshift(marker) : segments.push(marker);\n            setSelection(model, marker, marker);\n        }\n    }\n}\n\nfunction getInsertPoint(\n    model: ReadonlyContentModelDocument,\n    insertPointOverride?: InsertPoint,\n    context?: FormatContentModelContext\n): InsertPoint | null {\n    if (insertPointOverride) {\n        const { paragraph, marker, tableContext, path } = insertPointOverride;\n        const index = paragraph.segments.indexOf(marker);\n        const previousSegment = index > 0 ? paragraph.segments[index - 1] : null;\n\n        // It is possible that the real selection is right before the override selection marker.\n        // This happens when:\n        // [Override marker][Entity node to wrap][Real marker]\n        // Then we will move the entity node into entity wrapper, causes the override marker and real marker are at the same place\n        // And recreating content model causes real marker to appear before override marker.\n        // Once that happens, we need to use the real marker instead so that after insert entity, real marker can be placed\n        // after new entity (if insertPointOverride==true)\n        return previousSegment?.segmentType == 'SelectionMarker' && previousSegment.isSelected\n            ? {\n                  marker: previousSegment,\n                  paragraph,\n                  tableContext,\n                  path,\n              }\n            : insertPointOverride;\n    } else {\n        const deleteResult = deleteSelection(model, [], context);\n        const insertPoint = deleteResult.insertPoint;\n\n        if (deleteResult.deleteResult == 'range') {\n            normalizeContentModel(model);\n        }\n\n        return insertPoint;\n    }\n}\n","import { extractBorderValues, parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport type { Border, ContentModelImage } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function applyImageBorderFormat(\n    image: ContentModelImage,\n    border: Border | null,\n    borderRadius?: string\n) {\n    if (border) {\n        const format = image.format;\n        const { width, style, color } = border;\n        const borderKey = 'borderTop';\n        const extractedBorder = extractBorderValues(format[borderKey]);\n        const borderColor = extractedBorder.color;\n        const borderWidth = extractedBorder.width;\n        const borderStyle = extractedBorder.style;\n        let borderFormat = '';\n\n        if (width) {\n            borderFormat = parseValueWithUnit(width) + 'px';\n        } else if (borderWidth) {\n            borderFormat = borderWidth;\n        } else {\n            borderFormat = '1px';\n        }\n\n        if (style) {\n            borderFormat = `${borderFormat} ${style}`;\n        } else if (borderStyle) {\n            borderFormat = `${borderFormat} ${borderStyle}`;\n        } else {\n            borderFormat = `${borderFormat} solid`;\n        }\n\n        if (color) {\n            borderFormat = `${borderFormat} ${color}`;\n        } else if (borderColor) {\n            borderFormat = `${borderFormat} ${borderColor}`;\n        }\n        image.format.borderLeft = borderFormat;\n        image.format.borderTop = borderFormat;\n        image.format.borderBottom = borderFormat;\n        image.format.borderRight = borderFormat;\n    } else {\n        delete image.format.borderLeft;\n        delete image.format.borderTop;\n        delete image.format.borderBottom;\n        delete image.format.borderRight;\n    }\n\n    if (borderRadius) {\n        image.format.borderRadius = borderRadius;\n    }\n}\n","import { matchLink } from './matchLink';\nimport type { AutoLinkOptions } from 'roosterjs-content-model-types';\n\nconst COMMON_REGEX = `[\\s]*[a-zA-Z0-9+][\\s]*`;\nconst TELEPHONE_REGEX = `(T|t)el:${COMMON_REGEX}`;\nconst MAILTO_REGEX = `(M|m)ailto:${COMMON_REGEX}`;\n\n/**\n * @internal\n */\nexport function getLinkUrl(text: string, autoLinkOptions?: AutoLinkOptions): string | undefined {\n    const { autoLink, autoMailto, autoTel } = autoLinkOptions ?? {};\n    const linkMatch = autoLink ? matchLink(text)?.normalizedUrl : undefined;\n    const telMatch = autoTel ? matchTel(text) : undefined;\n    const mailtoMatch = autoMailto ? matchMailTo(text) : undefined;\n\n    return linkMatch || telMatch || mailtoMatch;\n}\n\nfunction matchTel(text: string) {\n    return text.match(TELEPHONE_REGEX) ? text.toLocaleLowerCase() : undefined;\n}\n\nfunction matchMailTo(text: string) {\n    return text.match(MAILTO_REGEX) ? text.toLocaleLowerCase() : undefined;\n}\n","import { getObjectKeys } from 'roosterjs-content-model-dom';\nimport type { LinkData } from 'roosterjs-content-model-types';\n\ninterface LinkMatchRule {\n    match: RegExp;\n    except?: RegExp;\n    normalizeUrl?: (url: string) => string;\n}\n\n// http exclude matching regex\n// invalid URL example (in particular on IE and Edge):\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\n// - http://www.bing.com%1, %1 is invalid\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\n// All above % cases if they're after ? (question mark) is then considered valid again\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\n// - http://www.bing.com?@name, is also valid since it is after ? (question mark)\n// The regex below is essentially a break down of:\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\n// ^[^?]+%$ => to exclude URL like www.bing.com%\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\n// , => to exclude url like www.bing,,com\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\n\n// via https://tools.ietf.org/html/rfc1035 Page 7\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexps below so don't bother including A-Z\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\n\nconst linkMatchRules: Record<string, LinkMatchRule> = {\n    http: {\n        match: new RegExp(\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\n            'i'\n        ),\n        except: httpExcludeRegEx,\n        normalizeUrl: url =>\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\n    },\n    https: {\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\n        except: httpExcludeRegEx,\n    },\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\n    ftp: {\n        match: new RegExp(\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\n            'i'\n        ),\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\n    },\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\n};\n\n/**\n * Try to match a given string with link match rules, return matched link\n * @param url Input url to match\n * @param option Link match option, exact or partial. If it is exact match, we need\n * to check the length of matched link and url\n * @param rules Optional link match rules, if not passed, only the default link match\n * rules will be applied\n * @returns The matched link data, or null if no match found.\n * The link data includes an original url and a normalized url\n */\nexport function matchLink(url: string): LinkData | null {\n    if (url) {\n        for (const schema of getObjectKeys(linkMatchRules)) {\n            const rule = linkMatchRules[schema];\n            const matches = url.match(rule.match);\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\n                return {\n                    scheme: schema,\n                    originalUrl: url,\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\n                };\n            }\n        }\n    }\n\n    return null;\n}\n","import { getLinkUrl } from './getLinkUrl';\nimport { splitTextSegment } from '../../publicApi/segment/splitTextSegment';\nimport type {\n    AutoLinkOptions,\n    ContentModelText,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Promote the given text segment to a hyper link when the segment text is ending with a valid link format.\n * When the whole text segment if of a link, promote the whole segment.\n * When the text segment ends with a link format, split the segment and promote the second part\n * When link is in middle of the text segment, no action.\n * This is mainly used for doing auto link when there is a link before cursor\n * @param segment The text segment to search link text from\n * @param paragraph Parent paragraph of the segment\n * @param options Options of auto link\n * @returns If a link is promoted, return this segment. Otherwise return null\n */\nexport function promoteLink(\n    segment: ContentModelText,\n    paragraph: ShallowMutableContentModelParagraph,\n    autoLinkOptions: AutoLinkOptions\n): ContentModelText | null {\n    const link = segment.text.split(' ').pop();\n    const url = link?.trim();\n    let linkUrl: string | undefined = undefined;\n\n    if (url && link && (linkUrl = getLinkUrl(url, autoLinkOptions))) {\n        const linkSegment = splitTextSegment(\n            segment,\n            paragraph,\n            segment.text.length - link.trimLeft().length,\n            segment.text.trimRight().length\n        );\n        linkSegment.link = {\n            format: {\n                href: linkUrl,\n                underline: true,\n            },\n            dataset: {},\n        };\n\n        return linkSegment;\n    }\n\n    return null;\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelListItem,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * Search for all list items in the same thread as the current list item\n * @param model The content model\n * @param currentItem The current list item\n */\nexport function findListItemsInSameThread(\n    group: ContentModelBlockGroup,\n    currentItem: ContentModelListItem\n): ContentModelListItem[];\n\n/**\n * Search for all list items in the same thread as the current list item (Readonly)\n * @param model The content model\n * @param currentItem The current list item\n */\nexport function findListItemsInSameThread(\n    group: ReadonlyContentModelBlockGroup,\n    currentItem: ReadonlyContentModelListItem\n): ReadonlyContentModelListItem[];\n\nexport function findListItemsInSameThread(\n    group: ReadonlyContentModelBlockGroup,\n    currentItem: ReadonlyContentModelListItem\n): ReadonlyContentModelListItem[] {\n    const items: (ContentModelListItem | null)[] = [];\n\n    findListItems(group, items);\n\n    return filterListItems(items, currentItem);\n}\n\nfunction findListItems(\n    group: ReadonlyContentModelBlockGroup,\n    result: (ReadonlyContentModelListItem | null)[]\n) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem') {\n                    result.push(block);\n                } else {\n                    pushNullIfNecessary(result);\n                    findListItems(block, result);\n                    pushNullIfNecessary(result);\n                }\n                break;\n\n            case 'Paragraph':\n                pushNullIfNecessary(result);\n\n                block.segments.forEach(segment => {\n                    if (segment.segmentType == 'General') {\n                        findListItems(segment, result);\n                    }\n                });\n\n                pushNullIfNecessary(result);\n                break;\n\n            case 'Table':\n                pushNullIfNecessary(result);\n\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        findListItems(cell, result);\n                    })\n                );\n                pushNullIfNecessary(result);\n\n                break;\n        }\n    });\n}\n\nfunction pushNullIfNecessary(result: (ReadonlyContentModelListItem | null)[]) {\n    const last = result[result.length - 1];\n\n    if (!last || last !== null) {\n        result.push(null);\n    }\n}\n\nfunction filterListItems(\n    items: (ReadonlyContentModelListItem | null)[],\n    currentItem: ReadonlyContentModelListItem\n) {\n    const result: ReadonlyContentModelListItem[] = [];\n    const currentIndex = items.indexOf(currentItem);\n    const levelLength = currentItem.levels.length;\n    const isOrderedList = currentItem.levels[levelLength - 1]?.listType == 'OL';\n\n    if (currentIndex >= 0) {\n        for (let i = currentIndex; i >= 0; i--) {\n            const item = items[i];\n\n            if (!item) {\n                if (isOrderedList) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            const startNumberOverride = hasStartNumberOverride(item, levelLength);\n\n            if (areListTypesCompatible(items, currentIndex, i)) {\n                result.unshift(item);\n\n                if (isOrderedList && startNumberOverride) {\n                    break;\n                }\n            } else if (\n                !isOrderedList ||\n                startNumberOverride ||\n                item.levels.length < currentItem.levels.length\n            ) {\n                break;\n            }\n        }\n\n        for (let i = currentIndex + 1; i < items.length; i++) {\n            const item = items[i];\n\n            if (!item) {\n                if (isOrderedList) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            const startNumberOverride = hasStartNumberOverride(item, levelLength);\n\n            if (areListTypesCompatible(items, currentIndex, i) && !startNumberOverride) {\n                result.push(item);\n            } else if (\n                !isOrderedList ||\n                startNumberOverride ||\n                item.levels.length < currentItem.levels.length\n            ) {\n                break;\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction areListTypesCompatible(\n    listItems: (ReadonlyContentModelListItem | null)[],\n    currentIndex: number,\n    compareToIndex: number\n): boolean {\n    const currentLevels = listItems[currentIndex]!.levels;\n    const compareToLevels = listItems[compareToIndex]!.levels;\n\n    return (\n        currentLevels.length <= compareToLevels.length &&\n        currentLevels.every(\n            (currentLevel, i) => currentLevel.listType == compareToLevels[i].listType\n        )\n    );\n}\n\nfunction hasStartNumberOverride(item: ReadonlyContentModelListItem, levelLength: number): boolean {\n    return item.levels\n        .slice(0, levelLength)\n        .some(level => level.format.startNumberOverride !== undefined);\n}\n","import { findListItemsInSameThread } from './findListItemsInSameThread';\nimport {\n    getAutoListStyleType,\n    getClosestAncestorBlockGroupIndex,\n    getListMetadata,\n    getOrderedListNumberStr,\n} from 'roosterjs-content-model-dom';\nimport type {\n    AnnounceData,\n    ContentModelListItem,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * Get announce data for list item\n * @param path Content model path that include the list item\n * @returns Announce data of current list item if any, or null\n */\nexport function getListAnnounceData(path: ReadonlyContentModelBlockGroup[]): AnnounceData | null {\n    const index = getClosestAncestorBlockGroupIndex(path, ['ListItem'], ['TableCell']);\n\n    if (index >= 0) {\n        const listItem = path[index] as ContentModelListItem;\n        const level = listItem.levels[listItem.levels.length - 1];\n\n        if (!level || level.format.displayForDummyItem) {\n            return null;\n        } else if (level.listType == 'OL') {\n            const listNumber = getListNumber(path, listItem);\n            const metadata = getListMetadata(level);\n            const listStyle = getAutoListStyleType(\n                'OL',\n                metadata ?? {},\n                listItem.levels.length - 1,\n                level.format.listStyleType\n            );\n\n            return listStyle === undefined\n                ? null\n                : {\n                      defaultStrings: 'announceListItemNumbering',\n                      formatStrings: [getOrderedListNumberStr(listStyle, listNumber)],\n                  };\n        } else {\n            return {\n                defaultStrings: 'announceListItemBullet',\n            };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction getListNumber(\n    path: ReadonlyContentModelBlockGroup[],\n    listItem: ReadonlyContentModelListItem\n) {\n    const items = findListItemsInSameThread(path[path.length - 1], listItem);\n    let listNumber = 0;\n\n    for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n\n        if (listNumber == 0 && item.levels.length == listItem.levels.length) {\n            listNumber = item.levels[item.levels.length - 1]?.format.startNumberOverride ?? 1;\n        }\n\n        if (item == listItem) {\n            // Found current item, so break and return\n            break;\n        } else if (item.levels.length < listItem.levels.length) {\n            // Found upper level item, reset list number\n            listNumber = 0;\n        } else if (item.levels.length > listItem.levels.length) {\n            // Found deeper level item, skip\n            continue;\n        } else if (!item.levels[item.levels.length - 1].format.displayForDummyItem) {\n            // Save level, and is not dummy, number plus one\n            listNumber++;\n        }\n    }\n    return listNumber;\n}\n","import { splitSelectedParagraphByBr } from '../block/splitSelectedParagraphByBr';\nimport {\n    copyFormat,\n    createListItem,\n    createListLevel,\n    getOperationalBlocks,\n    isBlockGroupOfType,\n    ListFormats,\n    ListFormatsToKeep,\n    ListFormatsToMove,\n    mutateBlock,\n    normalizeContentModel,\n    setParagraphNotImplicit,\n    updateListMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelListItem,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelListItem,\n    ShallowMutableContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * Set a list type to content model\n * @param model the model document\n * @param listType the list type OL | UL\n * @param removeMargins true to remove margins, false to keep margins @default false\n */\nexport function setListType(\n    model: ReadonlyContentModelDocument,\n    listType: 'OL' | 'UL',\n    removeMargins: boolean = false\n) {\n    splitSelectedParagraphByBr(model);\n\n    const paragraphOrListItems = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        [] // Set stop types to be empty so we can find list items even cross the boundary of table, then we can always operation on the list item if any\n    );\n    const alreadyInExpectedType = paragraphOrListItems.every(({ block }) =>\n        isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')\n            ? block.levels[block.levels.length - 1]?.listType == listType\n            : shouldIgnoreBlock(block)\n    );\n    let existingListItems: ReadonlyContentModelListItem[] = [];\n\n    paragraphOrListItems.forEach(({ block, parent }, itemIndex) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const level = block.levels.pop();\n\n            if (!alreadyInExpectedType && level) {\n                level.listType = listType;\n                block.levels.push(level);\n            } else if (block.blocks.length == 1) {\n                setParagraphNotImplicit(block.blocks[0]);\n            }\n\n            if (alreadyInExpectedType) {\n                // if the list item has margins or textAlign, we need to apply them to the block to preserve the indention and alignment\n                block.blocks.forEach(x => {\n                    copyFormat<ContentModelBlockFormat>(x.format, block.format, ListFormats);\n                });\n            }\n        } else {\n            const index = parent.blocks.indexOf(block);\n\n            if (index >= 0) {\n                if (paragraphOrListItems.length == 1 || !shouldIgnoreBlock(block)) {\n                    const prevBlock = parent.blocks[index - 1];\n                    const segmentFormat =\n                        (block.blockType == 'Paragraph' && block.segments[0]?.format) || {};\n                    const newListItem: ShallowMutableContentModelListItem = createListItem(\n                        [\n                            createListLevel(listType, {\n                                startNumberOverride:\n                                    itemIndex > 0 ||\n                                    (prevBlock?.blockType == 'BlockGroup' &&\n                                        prevBlock.blockGroupType == 'ListItem' &&\n                                        prevBlock.levels[0]?.listType == 'OL')\n                                        ? undefined\n                                        : 1,\n                                direction: block.format.direction,\n                                textAlign: block.format.textAlign,\n                                marginBottom: removeMargins ? '0px' : undefined,\n                                marginTop: removeMargins ? '0px' : undefined,\n                            }),\n                        ],\n                        // For list bullet, we only want to carry over these formats from segments:\n                        {\n                            fontFamily: segmentFormat.fontFamily,\n                            fontSize: segmentFormat.fontSize,\n                            textColor: segmentFormat.textColor,\n                        }\n                    );\n\n                    if (block.blockType == 'Paragraph') {\n                        setParagraphNotImplicit(block);\n                    }\n\n                    const mutableBlock = mutateBlock(block);\n\n                    newListItem.blocks.push(mutableBlock);\n\n                    copyFormat<ContentModelBlockFormat>(\n                        newListItem.format,\n                        mutableBlock.format,\n                        ListFormatsToMove,\n                        true /*deleteOriginalFormat*/\n                    );\n                    copyFormat<ContentModelBlockFormat>(\n                        newListItem.format,\n                        mutableBlock.format,\n                        ListFormatsToKeep\n                    );\n\n                    mutateBlock(parent).blocks.splice(index, 1, newListItem);\n                    existingListItems.push(newListItem);\n\n                    const levelIndex = newListItem.levels.length - 1;\n                    const level = mutateBlock(newListItem).levels[levelIndex];\n\n                    if (level) {\n                        updateListMetadata(level, metadata =>\n                            Object.assign({}, metadata, {\n                                applyListStyleFromLevel: true,\n                            })\n                        );\n                    }\n                } else {\n                    existingListItems.forEach(\n                        x => (mutateBlock(x).levels[0].format.marginBottom = '0px')\n                    );\n                    existingListItems = [];\n                }\n            }\n        }\n    });\n\n    normalizeContentModel(model);\n\n    return paragraphOrListItems.length > 0;\n}\n\nfunction shouldIgnoreBlock(block: ReadonlyContentModelBlock) {\n    switch (block.blockType) {\n        case 'Table':\n            return false;\n        case 'Paragraph':\n            return block.segments.every(\n                x => x.segmentType == 'Br' || x.segmentType == 'SelectionMarker'\n            );\n        default:\n            return true;\n    }\n}\n","import { getFirstSelectedListItem, mutateBlock } from 'roosterjs-content-model-dom';\nimport type { ReadonlyContentModelDocument } from 'roosterjs-content-model-types';\n\n/**\n * Set start number of a list item\n * @param model The model document\n * @param value The number to set to, must be equal or greater than 1\n */\nexport function setModelListStartNumber(model: ReadonlyContentModelDocument, value: number) {\n    const listItem = getFirstSelectedListItem(model);\n    const level = listItem ? mutateBlock(listItem).levels[listItem?.levels.length - 1] : null;\n\n    if (level) {\n        level.format.startNumberOverride = value;\n\n        return true;\n    } else {\n        return false;\n    }\n}\n","import { findListItemsInSameThread } from './findListItemsInSameThread';\nimport {\n    getFirstSelectedListItem,\n    mutateBlock,\n    updateListMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ListMetadataFormat,\n    ReadonlyContentModelDocument,\n} from 'roosterjs-content-model-types';\n\n/**\n * Set style of list items with in same thread of current item\n * @param model The model document\n * @param style The style to set\n */\nexport function setModelListStyle(model: ReadonlyContentModelDocument, style: ListMetadataFormat) {\n    const listItem = getFirstSelectedListItem(model);\n\n    if (listItem) {\n        const listItems = findListItemsInSameThread(model, listItem);\n        const levelIndex = listItem.levels.length - 1;\n\n        listItems.forEach(listItem => {\n            const level = mutateBlock(listItem).levels[levelIndex];\n\n            if (level) {\n                updateListMetadata(level, metadata => Object.assign({}, metadata, style));\n            }\n        });\n    }\n    return !!listItem;\n}\n","import { getSelectedParagraphs, setSelection } from 'roosterjs-content-model-dom';\nimport type {\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustSegmentSelection(\n    model: ReadonlyContentModelDocument,\n    firstMatcher: (\n        target: ReadonlyContentModelSegment,\n        paragraph: ReadonlyContentModelParagraph\n    ) => boolean,\n    siblingMatcher: (\n        target: ReadonlyContentModelSegment,\n        ref: ReadonlyContentModelSegment,\n        paragraph: ReadonlyContentModelParagraph\n    ) => boolean\n): boolean {\n    const paragraphs = getSelectedParagraphs(model);\n    let first: ReadonlyContentModelSegment | undefined;\n    let last: ReadonlyContentModelSegment | undefined;\n    let changed = false;\n\n    paragraphs.forEach(p => {\n        const index = first ? 0 : p.segments.findIndex(x => firstMatcher(x, p));\n        const segments = p.segments;\n\n        if (!first) {\n            first = segments[index];\n\n            for (let i = index; i > 0; i--) {\n                if (siblingMatcher(segments[i - 1], first, p)) {\n                    first = segments[i - 1];\n                    changed = changed || !segments[i - 1].isSelected;\n                } else {\n                    changed = changed || !!segments[i - 1].isSelected;\n                    break;\n                }\n            }\n        }\n\n        if (first) {\n            for (let i = index; i < p.segments.length; i++) {\n                if (i == index || siblingMatcher(segments[i], last || segments[index], p)) {\n                    last = segments[i];\n                    changed = changed || !segments[i].isSelected;\n                } else {\n                    changed = changed || !!segments[i].isSelected;\n                    break;\n                }\n            }\n        }\n    });\n\n    if (first && last) {\n        setSelection(model, first, last);\n    }\n\n    return changed;\n}\n","import { createText, iterateSelections, mutateSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * If a format cannot be applied to be applied to a trailing space, split the trailing space into a separate segment\n * @internal\n */\nexport function adjustTrailingSpaceSelection(model: ReadonlyContentModelDocument) {\n    iterateSelections(model, (_, __, block, segments) => {\n        if (block?.blockType === 'Paragraph' && segments && segments.length > 0) {\n            if (\n                segments.length === 1 &&\n                segments[0].segmentType === 'Text' &&\n                shouldSplitTrailingSpace(segments[0])\n            ) {\n                splitTextSegment(block, segments[0]);\n            } else {\n                const lastTextSegment =\n                    segments[segments.length - 1].segmentType === 'SelectionMarker'\n                        ? segments[segments.length - 2]\n                        : segments[segments.length - 1];\n                if (\n                    lastTextSegment &&\n                    lastTextSegment.segmentType === 'Text' &&\n                    shouldSplitTrailingSpace(lastTextSegment)\n                ) {\n                    splitTextSegment(block, lastTextSegment);\n                }\n            }\n        }\n\n        return false;\n    });\n}\n\nfunction shouldSplitTrailingSpace(segment: ReadonlyContentModelText) {\n    return segment.isSelected && hasTrailingSpace(segment.text) && !isTrailingSpace(segment.text);\n}\n\nfunction hasTrailingSpace(text: string) {\n    return text.trimRight() !== text;\n}\n\nfunction isTrailingSpace(text: string) {\n    return text.trimRight().length == 0;\n}\n\nfunction splitTextSegment(\n    readonlyBlock: ReadonlyContentModelParagraph,\n    readonlyTextSegment: ReadonlyContentModelText\n) {\n    mutateSegment(readonlyBlock, readonlyTextSegment, (textSegment, block) => {\n        const text = textSegment.text.trimRight();\n        const trailingSpace = textSegment.text.substring(text.length);\n        const newText = createText(text, textSegment.format, textSegment.link, textSegment.code);\n        newText.isSelected = true;\n        const trailingSpaceLink = textSegment.link\n            ? {\n                  ...textSegment.link,\n                  format: {\n                      ...textSegment.link?.format,\n                      underline: false, // Remove underline for trailing space link\n                  },\n              }\n            : undefined;\n        const trailingSpaceSegment = createText(\n            trailingSpace,\n            undefined,\n            trailingSpaceLink,\n            textSegment.code\n        );\n        trailingSpaceSegment.isSelected = true;\n        const index = block.segments.indexOf(textSegment);\n        block.segments.splice(index, 1, newText, trailingSpaceSegment);\n    });\n}\n","import {\n    createText,\n    isPunctuation,\n    isSpace,\n    iterateSelections,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelText,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelParagraph,\n    ShallowMutableContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustWordSelection(\n    model: ReadonlyContentModelDocument,\n    marker: ShallowMutableContentModelSegment\n): ShallowMutableContentModelSegment[] {\n    let markerBlock: ShallowMutableContentModelParagraph | undefined;\n\n    iterateSelections(model, (_, __, block, segments) => {\n        //Find the block with the selection marker\n        if (block?.blockType == 'Paragraph' && segments?.length == 1 && segments[0] == marker) {\n            markerBlock = mutateBlock(block);\n        }\n        return true;\n    });\n\n    const tempSegments = markerBlock ? [...markerBlock.segments] : undefined;\n\n    if (tempSegments && markerBlock) {\n        const segments: ShallowMutableContentModelSegment[] = [];\n        let markerSelectionIndex = tempSegments.indexOf(marker);\n        for (let i = markerSelectionIndex - 1; i >= 0; i--) {\n            const currentSegment = tempSegments[i];\n            if (currentSegment.segmentType == 'Text') {\n                const found = findDelimiter(currentSegment, false /*moveRightward*/);\n                if (found > -1) {\n                    if (found == currentSegment.text.length) {\n                        break;\n                    }\n\n                    splitTextSegment(tempSegments, currentSegment, i, found);\n\n                    segments.push(tempSegments[i + 1]);\n\n                    break;\n                } else {\n                    segments.push(tempSegments[i]);\n                }\n            } else {\n                break;\n            }\n        }\n\n        markerSelectionIndex = tempSegments.indexOf(marker);\n        segments.push(marker);\n\n        // Marker is at start of word\n        if (segments.length <= 1) {\n            return segments;\n        }\n\n        for (let i = markerSelectionIndex + 1; i < tempSegments.length; i++) {\n            const currentSegment = tempSegments[i];\n            if (currentSegment.segmentType == 'Text') {\n                const found = findDelimiter(currentSegment, true /*moveRightward*/);\n                if (found > -1) {\n                    if (found == 0) {\n                        break;\n                    }\n                    splitTextSegment(tempSegments, currentSegment, i, found);\n                    segments.push(tempSegments[i]);\n                    break;\n                } else {\n                    segments.push(tempSegments[i]);\n                }\n            } else {\n                break;\n            }\n        }\n\n        // Marker is at end of word\n        if (segments[segments.length - 1] == marker) {\n            return [marker];\n        }\n\n        markerBlock.segments = tempSegments;\n        return segments;\n    } else {\n        return [marker];\n    }\n}\n\n/*\n// These are unicode characters mostly from the Category Space Separator (Zs)\nhttps://unicode.org/Public/UNIDATA/Scripts.txt\n\n\\u2000 = EN QUAD\n\\u2009 = THIN SPACE\n\\u200a = HAIR SPACE\n​\\u200b = ZERO WIDTH SPACE\n​\\u202f = NARROW NO-BREAK SPACE\n\\u205f​ = MEDIUM MATHEMATICAL SPACE\n\\u3000 = IDEOGRAPHIC SPACE\n*/\nfunction findDelimiter(segment: ContentModelText, moveRightward: boolean): number {\n    const word = segment.text;\n    let offset = -1;\n    if (moveRightward) {\n        for (let i = 0; i < word.length; i++) {\n            const char = word[i];\n\n            if (isPunctuation(char) || isSpace(char)) {\n                offset = i;\n                break;\n            }\n        }\n    } else {\n        for (let i = word.length - 1; i >= 0; i--) {\n            const char = word[i];\n\n            if (isPunctuation(char) || isSpace(char)) {\n                offset = i + 1;\n                break;\n            }\n        }\n    }\n    return offset;\n}\n\nfunction splitTextSegment(\n    segments: ShallowMutableContentModelSegment[],\n    textSegment: Readonly<ContentModelText>,\n    index: number,\n    found: number\n) {\n    const text = textSegment.text;\n    const newSegmentLeft = createText(\n        text.substring(0, found),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n    const newSegmentRight = createText(\n        text.substring(found, text.length),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n    segments.splice(index, 1, newSegmentLeft, newSegmentRight);\n}\n","import { addSegment, createSelectionMarker, mutateBlock } from 'roosterjs-content-model-dom';\nimport type {\n    ShallowMutableContentModelTableRow,\n    TableSelectionCoordinates,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function collapseTableSelection(\n    rows: ShallowMutableContentModelTableRow[],\n    selection: TableSelectionCoordinates\n) {\n    const { firstColumn, firstRow } = selection;\n    const cell = rows[firstRow]?.cells[firstColumn];\n    if (cell) {\n        addSegment(mutateBlock(cell), createSelectionMarker());\n    }\n}\n","import type {\n    ShallowMutableContentModelTable,\n    TableAlignOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function alignTable(table: ShallowMutableContentModelTable, operation: TableAlignOperation) {\n    table.format.marginLeft = operation == 'alignLeft' ? '' : 'auto';\n    table.format.marginRight = operation == 'alignRight' ? '' : 'auto';\n}\n","import {\n    getSelectedCells,\n    mutateBlock,\n    updateTableCellMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ShallowMutableContentModelTable,\n    ShallowMutableContentModelTableCell,\n    TableCellHorizontalAlignOperation,\n    TableCellVerticalAlignOperation,\n} from 'roosterjs-content-model-types';\n\nconst TextAlignValueMap: Partial<Record<\n    TableCellHorizontalAlignOperation,\n    'start' | 'center' | 'end'\n>> = {\n    alignCellLeft: 'start',\n    alignCellCenter: 'center',\n    alignCellRight: 'end',\n};\n\nconst VerticalAlignValueMap: Partial<Record<\n    TableCellVerticalAlignOperation,\n    'top' | 'middle' | 'bottom'\n>> = {\n    alignCellTop: 'top',\n    alignCellMiddle: 'middle',\n    alignCellBottom: 'bottom',\n};\n\n/**\n * @internal\n */\nexport function alignTableCellHorizontally(\n    table: ShallowMutableContentModelTable,\n    operation: TableCellHorizontalAlignOperation\n) {\n    alignTableCellInternal(table, cell => {\n        cell.format.textAlign = TextAlignValueMap[operation];\n    });\n}\n\n/**\n * @internal\n */\nexport function alignTableCellVertically(\n    table: ShallowMutableContentModelTable,\n    operation: TableCellVerticalAlignOperation\n) {\n    alignTableCellInternal(table, cell => {\n        cell.format.verticalAlign = VerticalAlignValueMap[operation];\n\n        updateTableCellMetadata(cell, metadata => {\n            metadata = metadata || {};\n            metadata.vAlignOverride = true;\n            return metadata;\n        });\n    });\n}\n\nfunction alignTableCellInternal(\n    table: ShallowMutableContentModelTable,\n    callback: (cell: ShallowMutableContentModelTableCell) => void\n) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n                const cell = table.rows[rowIndex]?.cells[colIndex];\n                const format = cell?.format;\n\n                if (format) {\n                    callback(mutateBlock(cell));\n\n                    cell.blocks.forEach(block => {\n                        if (block.blockType === 'Paragraph' && block.format.textAlign) {\n                            delete mutateBlock(block).format.textAlign;\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n","import type { ReadonlyContentModelTableRow } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function canMergeCells(\n    rows: ReadonlyContentModelTableRow[],\n    firstRow: number,\n    firstCol: number,\n    lastRow: number,\n    lastCol: number\n): boolean {\n    const noSpanAbove =\n        firstCol == lastCol ||\n        rows[firstRow].cells.every(\n            (cell, colIndex) => colIndex < firstCol || colIndex > lastCol || !cell.spanAbove\n        );\n    const noSpanLeft =\n        firstRow == lastRow ||\n        rows.every(\n            (row, rowIndex) =>\n                rowIndex < firstRow || rowIndex > lastRow || !row.cells[firstCol].spanLeft\n        );\n\n    const noDifferentBelowSpan = rows[lastRow].cells\n        .map((_, colIndex) =>\n            colIndex >= firstCol && colIndex <= lastCol\n                ? getBelowSpanCount(rows, lastRow, colIndex)\n                : -1\n        )\n        .every((x, _, a) => x < 0 || x == a[firstCol]);\n    const noDifferentRightSpan = rows\n        .map((_, rowIndex) =>\n            rowIndex >= firstRow && rowIndex <= lastRow\n                ? getRightSpanCount(rows, rowIndex, lastCol)\n                : -1\n        )\n        .every((x, _, a) => x < 0 || x == a[firstRow]);\n\n    return noSpanAbove && noSpanLeft && noDifferentBelowSpan && noDifferentRightSpan;\n}\n\nfunction getBelowSpanCount(\n    rows: ReadonlyContentModelTableRow[],\n    rowIndex: number,\n    colIndex: number\n) {\n    let spanCount = 0;\n\n    for (let row = rowIndex + 1; row < rows.length; row++) {\n        if (rows[row]?.cells[colIndex]?.spanAbove) {\n            spanCount++;\n        } else {\n            break;\n        }\n    }\n\n    return spanCount;\n}\n\nfunction getRightSpanCount(\n    rows: ReadonlyContentModelTableRow[],\n    rowIndex: number,\n    colIndex: number\n) {\n    let spanCount = 0;\n\n    for (let col = colIndex + 1; col < rows[rowIndex]?.cells.length; col++) {\n        if (rows[rowIndex]?.cells[col]?.spanLeft) {\n            spanCount++;\n        } else {\n            break;\n        }\n    }\n\n    return spanCount;\n}\n","import { mutateBlock, setSelection } from 'roosterjs-content-model-dom';\nimport type {\n    ReadonlyContentModelTable,\n    TableSelectionCoordinates,\n} from 'roosterjs-content-model-types';\n\n/**\n * Clear selection of a table.\n * @param table The table model where the selection is to be cleared\n * @param sel The selection coordinates to be cleared\n */\nexport function clearSelectedCells(\n    table: ReadonlyContentModelTable,\n    sel: TableSelectionCoordinates\n) {\n    if (\n        sel.firstColumn >= 0 &&\n        sel.firstRow >= 0 &&\n        sel.lastRow < table.rows.length &&\n        sel.lastColumn < table.rows[sel.lastRow].cells.length\n    ) {\n        for (let i = sel.firstRow; i <= sel.lastRow; i++) {\n            const row = table.rows[i];\n\n            for (let j = sel.firstColumn; j <= sel.lastColumn; j++) {\n                const cell = row.cells[j];\n\n                if (cell) {\n                    if (cell.isSelected) {\n                        mutateBlock(cell).isSelected = false;\n                    }\n\n                    setSelection(cell);\n                }\n            }\n        }\n    }\n}\n","import { addBlock, createTable, createTableCell } from 'roosterjs-content-model-dom';\nimport type { ContentModelBlockGroup, ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createTableStructure(\n    parent: ContentModelBlockGroup,\n    columns: number,\n    rows: number\n): ContentModelTable {\n    const table = createTable(rows);\n\n    addBlock(parent, table);\n\n    table.rows.forEach(row => {\n        for (let i = 0; i < columns; i++) {\n            const cell = createTableCell();\n\n            row.cells.push(cell);\n        }\n    });\n\n    return table;\n}\n","import type { ShallowMutableContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTable(table: ShallowMutableContentModelTable) {\n    table.rows = [];\n}\n","import { collapseTableSelection } from '../selection/collapseTableSelection';\nimport { getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type { ShallowMutableContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTableColumn(table: ShallowMutableContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = 0; rowIndex < table.rows.length; rowIndex++) {\n            const cellInNextCol = table.rows[rowIndex].cells[sel.lastColumn + 1];\n\n            if (cellInNextCol) {\n                mutateBlock(cellInNextCol).spanLeft =\n                    cellInNextCol.spanLeft && table.rows[rowIndex].cells[sel.firstColumn].spanLeft;\n            }\n\n            table.rows[rowIndex].cells.splice(\n                sel.firstColumn,\n                sel.lastColumn - sel.firstColumn + 1\n            );\n        }\n\n        table.widths.splice(sel.firstColumn, sel.lastColumn - sel.firstColumn + 1);\n        collapseTableSelection(table.rows, sel);\n    }\n}\n","import { collapseTableSelection } from '../selection/collapseTableSelection';\nimport { getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type { ShallowMutableContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTableRow(table: ShallowMutableContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        table.rows[sel.firstRow].cells.forEach((cell, colIndex) => {\n            const cellInNextCell = table.rows[sel.lastRow + 1]?.cells[colIndex];\n\n            if (cellInNextCell) {\n                mutateBlock(cellInNextCell).spanAbove = cellInNextCell.spanAbove && cell.spanAbove;\n            }\n        });\n\n        table.rows.splice(sel.firstRow, sel.lastRow - sel.firstRow + 1);\n\n        collapseTableSelection(table.rows, sel);\n    }\n}\n","import { createBr, createParagraph, mutateBlock } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelParagraph,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * After edit table, it maybe in a abnormal state, e.g. selected table cell is removed, or all rows are removed causes no place to put cursor.\n * We need to make sure table is in normal state, and there is a place to put cursor.\n * @returns a new paragraph that can but put focus in, or undefined if not needed\n */\nexport function ensureFocusableParagraphForTable(\n    model: ReadonlyContentModelDocument,\n    path: ReadonlyContentModelBlockGroup[],\n    table: ReadonlyContentModelTable\n): ContentModelParagraph | undefined {\n    let paragraph: ContentModelParagraph | undefined;\n    const firstCell = table.rows.filter(row => row.cells.length > 0)[0]?.cells[0];\n\n    if (firstCell) {\n        // When there is a valid cell to put focus, use it\n        paragraph = firstCell.blocks.filter(\n            (block): block is ContentModelParagraph => block.blockType == 'Paragraph'\n        )[0];\n\n        if (!paragraph) {\n            // If there is not a paragraph under this cell, create one\n            paragraph = createEmptyParagraph(model);\n            mutateBlock(firstCell).blocks.push(paragraph);\n        }\n    } else {\n        // No table cell at all, which means the whole table is deleted. So we need to remove it from content model.\n        let block: ReadonlyContentModelBlock = table;\n        let parent: ReadonlyContentModelBlockGroup | undefined;\n        paragraph = createEmptyParagraph(model);\n\n        // If the table is the only block of its parent and parent is a FormatContainer, remove the parent as well.\n        // We need to do this in a loop in case there are multiple layer of FormatContainer that match this case\n        while ((parent = path.shift())) {\n            const index = parent.blocks.indexOf(block) ?? -1;\n\n            if (parent && index >= 0) {\n                mutateBlock(parent).blocks.splice(index, 1, paragraph);\n            }\n\n            if (\n                parent.blockGroupType == 'FormatContainer' &&\n                parent.blocks.length == 1 &&\n                parent.blocks[0] == paragraph\n            ) {\n                // If the new paragraph is the only child of parent format container, unwrap parent as well\n                block = parent;\n            } else {\n                // Otherwise, just stop here and keep processing the new paragraph\n                break;\n            }\n        }\n    }\n\n    return paragraph;\n}\n\nfunction createEmptyParagraph(model: ReadonlyContentModelDocument) {\n    const newPara = createParagraph(false /*isImplicit*/, undefined /*blockFormat*/, model.format);\n    const br = createBr(model.format);\n\n    newPara.segments.push(br);\n\n    return newPara;\n}\n","import { clearSelectedCells } from './clearSelectedCells';\nimport { createTableCell, getSelectedCells } from 'roosterjs-content-model-dom';\nimport type {\n    ShallowMutableContentModelTable,\n    TableHorizontalInsertOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * Insert a column to the table\n * @param table The table model where the column is to be inserted\n * @param operation The operation to be performed\n */\nexport function insertTableColumn(\n    table: ShallowMutableContentModelTable,\n    operation: TableHorizontalInsertOperation\n) {\n    const sel = getSelectedCells(table);\n    const insertLeft = operation == 'insertLeft';\n\n    if (sel) {\n        clearSelectedCells(table, sel);\n        for (let i = sel?.firstColumn; i <= sel.lastColumn; i++) {\n            table.rows.forEach(row => {\n                const cell = row.cells[insertLeft ? sel.firstColumn : sel.lastColumn];\n\n                const newCell = createTableCell(\n                    cell.spanLeft,\n                    cell.spanAbove,\n                    cell.isHeader,\n                    cell.format,\n                    cell.dataset\n                );\n                newCell.isSelected = true;\n\n                row.cells.splice(insertLeft ? sel.firstColumn : sel.lastColumn + 1, 0, newCell);\n            });\n            table.widths.splice(\n                insertLeft ? sel.firstColumn : sel.lastColumn + 1,\n                0,\n                table.widths[insertLeft ? sel.firstColumn : sel.lastColumn]\n            );\n        }\n    }\n}\n","import { clearSelectedCells } from './clearSelectedCells';\nimport { createTableCell, getSelectedCells } from 'roosterjs-content-model-dom';\nimport type {\n    ShallowMutableContentModelTable,\n    TableVerticalInsertOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * Insert a row to the table\n * @param table The table model where the row is to be inserted\n * @param operation The operation to be performed\n */\nexport function insertTableRow(\n    table: ShallowMutableContentModelTable,\n    operation: TableVerticalInsertOperation\n) {\n    const sel = getSelectedCells(table);\n    const insertAbove = operation == 'insertAbove';\n\n    if (sel) {\n        clearSelectedCells(table, sel);\n\n        for (let i = sel.firstRow; i <= sel.lastRow; i++) {\n            const sourceRow = table.rows[insertAbove ? sel.firstRow : sel.lastRow];\n\n            table.rows.splice(insertAbove ? sel.firstRow : sel.lastRow + 1, 0, {\n                format: { ...sourceRow.format },\n                cells: sourceRow.cells.map(cell => {\n                    const newCell = createTableCell(\n                        cell.spanLeft,\n                        cell.spanAbove,\n                        cell.isHeader,\n                        cell.format,\n                        cell.dataset\n                    );\n                    newCell.isSelected = true;\n                    return newCell;\n                }),\n                height: sourceRow.height,\n            });\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type { ShallowMutableContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableCells(table: ShallowMutableContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (\n        sel &&\n        canMergeCells(table.rows, sel.firstRow, sel.firstColumn, sel.lastRow, sel.lastColumn)\n    ) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n                const cell = table.rows[rowIndex].cells[colIndex];\n\n                if (cell) {\n                    const mutableCell = mutateBlock(cell);\n\n                    mutableCell.spanLeft = colIndex > sel.firstColumn;\n                    mutableCell.spanAbove = rowIndex > sel.firstRow;\n                }\n            }\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type {\n    ShallowMutableContentModelTable,\n    TableHorizontalMergeOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableColumn(\n    table: ShallowMutableContentModelTable,\n    operation: TableHorizontalMergeOperation\n) {\n    const sel = getSelectedCells(table);\n    const mergeLeft = operation == 'mergeLeft';\n\n    if (sel) {\n        const mergingColIndex = mergeLeft ? sel.firstColumn : sel.lastColumn + 1;\n\n        if (mergingColIndex > 0 && mergingColIndex < table.rows[0].cells.length) {\n            for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n                const cell = table.rows[rowIndex]?.cells[mergingColIndex];\n\n                if (\n                    cell &&\n                    canMergeCells(\n                        table.rows,\n                        rowIndex,\n                        mergingColIndex - 1,\n                        rowIndex,\n                        mergingColIndex\n                    )\n                ) {\n                    mutateBlock(cell).spanLeft = true;\n\n                    let newSelectedCol = mergingColIndex;\n\n                    while (table.rows[rowIndex]?.cells[newSelectedCol]?.spanLeft) {\n                        mutateBlock(table.rows[rowIndex].cells[newSelectedCol]);\n                        newSelectedCol--;\n                    }\n\n                    const newCell = table.rows[rowIndex]?.cells[newSelectedCol];\n                    if (newCell) {\n                        mutateBlock(newCell).isSelected = true;\n                    }\n                }\n            }\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type {\n    ShallowMutableContentModelTable,\n    TableVerticalMergeOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableRow(\n    table: ShallowMutableContentModelTable,\n    operation: TableVerticalMergeOperation\n) {\n    const sel = getSelectedCells(table);\n    const mergeAbove = operation == 'mergeAbove';\n\n    if (sel) {\n        const mergingRowIndex = mergeAbove ? sel.firstRow : sel.lastRow + 1;\n\n        if (mergingRowIndex > 0 && mergingRowIndex < table.rows.length) {\n            for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n                const cell = table.rows[mergingRowIndex].cells[colIndex];\n\n                if (\n                    cell &&\n                    canMergeCells(\n                        table.rows,\n                        mergingRowIndex - 1,\n                        colIndex,\n                        mergingRowIndex,\n                        colIndex\n                    )\n                ) {\n                    mutateBlock(cell).spanAbove = true;\n\n                    let newSelectedRow = mergingRowIndex;\n\n                    while (table.rows[newSelectedRow]?.cells[colIndex]?.spanAbove) {\n                        mutateBlock(table.rows[newSelectedRow].cells[colIndex]);\n                        newSelectedRow--;\n                    }\n\n                    const newCell = table.rows[newSelectedRow]?.cells[colIndex];\n\n                    if (newCell) {\n                        mutateBlock(newCell).isSelected = true;\n                    }\n                }\n            }\n        }\n    }\n}\n","import { createTableCell, getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type { ShallowMutableContentModelTable } from 'roosterjs-content-model-types';\n\nconst MIN_WIDTH = 30;\n\n/**\n * @internal\n */\nexport function splitTableCellHorizontally(table: ShallowMutableContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let colIndex = sel.lastColumn; colIndex >= sel.firstColumn; colIndex--) {\n            if (\n                table.rows.every(\n                    (row, rowIndex) =>\n                        rowIndex < sel.firstRow ||\n                        rowIndex > sel.lastRow ||\n                        row.cells[colIndex + 1]?.spanLeft\n                )\n            ) {\n                table.rows.forEach((row, rowIndex) => {\n                    mutateBlock(row.cells[colIndex]);\n\n                    if (rowIndex >= sel.firstRow && rowIndex <= sel.lastRow) {\n                        mutateBlock(row.cells[colIndex + 1]).spanLeft = false;\n                    }\n                });\n            } else {\n                table.rows.forEach((row, rowIndex) => {\n                    const cell = row.cells[colIndex];\n                    if (cell) {\n                        const mutableCell = mutateBlock(cell);\n\n                        delete mutableCell.format.width;\n\n                        const newCell = createTableCell(\n                            cell.spanLeft,\n                            cell.spanAbove,\n                            cell.isHeader,\n                            mutableCell.format\n                        );\n\n                        newCell.dataset = { ...cell.dataset };\n\n                        if (rowIndex < sel.firstRow || rowIndex > sel.lastRow) {\n                            newCell.spanLeft = true;\n                        } else {\n                            newCell.isSelected = cell.isSelected;\n                        }\n                        row.cells.splice(colIndex + 1, 0, newCell);\n\n                        mutateBlock(row.cells[colIndex]);\n                    }\n                });\n\n                const newWidth = Math.max(table.widths[colIndex] / 2, MIN_WIDTH);\n\n                table.widths.splice(colIndex, 1, newWidth, newWidth);\n            }\n        }\n    }\n}\n","import { createTableCell, getSelectedCells, mutateBlock } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelTableRow,\n    ShallowMutableContentModelTable,\n} from 'roosterjs-content-model-types';\n\nconst MIN_HEIGHT = 22;\n\n/**\n * @internal\n */\nexport function splitTableCellVertically(table: ShallowMutableContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = sel.lastRow; rowIndex >= sel.firstRow; rowIndex--) {\n            const row = table.rows[rowIndex];\n            const belowRow = table.rows[rowIndex + 1];\n\n            row.cells.forEach(mutateBlock);\n\n            if (\n                belowRow?.cells.every(\n                    (belowCell, colIndex) =>\n                        colIndex < sel.firstColumn ||\n                        colIndex > sel.lastColumn ||\n                        belowCell.spanAbove\n                )\n            ) {\n                belowRow.cells.forEach((belowCell, colIndex) => {\n                    if (colIndex >= sel.firstColumn && colIndex <= sel.lastColumn) {\n                        mutateBlock(belowCell).spanAbove = false;\n                    }\n                });\n            } else {\n                const newHeight = Math.max((row.height /= 2), MIN_HEIGHT);\n                const newRow: ContentModelTableRow = {\n                    format: { ...row.format },\n                    height: newHeight,\n                    cells: row.cells.map((cell, colIndex) => {\n                        const mutableCell = mutateBlock(cell);\n\n                        delete mutableCell.format.height;\n\n                        const newCell = createTableCell(\n                            cell.spanLeft,\n                            cell.spanAbove,\n                            cell.isHeader,\n                            mutableCell.format\n                        );\n\n                        newCell.dataset = { ...cell.dataset };\n\n                        if (colIndex < sel.firstColumn || colIndex > sel.lastColumn) {\n                            newCell.spanAbove = true;\n                        } else {\n                            newCell.isSelected = cell.isSelected;\n                        }\n\n                        return newCell;\n                    }),\n                };\n\n                row.height = newHeight;\n                table.rows.splice(rowIndex + 1, 0, newRow);\n            }\n        }\n    }\n}\n","import { setModelAlignment } from '../../modelApi/block/setModelAlignment';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set text alignment of selected paragraphs\n * @param editor The editor to set alignment\n * @param alignment Alignment value: left, center or right\n */\nexport function setAlignment(editor: IEditor, alignment: 'left' | 'center' | 'right' | 'justify') {\n    editor.focus();\n\n    editor.formatContentModel(model => setModelAlignment(model, alignment), {\n        apiName: 'setAlignment',\n    });\n}\n","import { setModelDirection } from '../../modelApi/block/setModelDirection';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set text direction of selected paragraphs (Left to right or Right to left)\n * @param editor The editor to set alignment\n * @param direction Direction value: ltr (Left to right) or rtl (Right to left)\n */\nexport function setDirection(editor: IEditor, direction: 'ltr' | 'rtl') {\n    editor.focus();\n\n    editor.formatContentModel(model => setModelDirection(model, direction), {\n        apiName: 'setDirection',\n    });\n}\n","import { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { ContentModelParagraphDecorator, IEditor } from 'roosterjs-content-model-types';\n\ntype HeadingLevelTags = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nconst HeaderFontSizes: Record<HeadingLevelTags, string> = {\n    h1: '2em',\n    h2: '1.5em',\n    h3: '1.17em',\n    h4: '1em',\n    h5: '0.83em',\n    h6: '0.67em',\n};\n\n/**\n * Set heading level of selected paragraphs\n * @param editor The editor to set heading level to\n * @param headingLevel Level of heading, from 1 to 6. Set to 0 means set it back to a regular paragraph\n */\nexport function setHeadingLevel(editor: IEditor, headingLevel: 0 | 1 | 2 | 3 | 4 | 5 | 6) {\n    editor.focus();\n\n    formatParagraphWithContentModel(editor, 'setHeadingLevel', para => {\n        const tagName =\n            headingLevel > 0\n                ? (('h' + headingLevel) as HeadingLevelTags | null)\n                : getExistingHeadingTag(para.decorator);\n\n        if (headingLevel > 0) {\n            para.decorator = {\n                tagName: tagName!,\n                format: tagName\n                    ? {\n                          fontWeight: 'bold',\n                          fontSize: HeaderFontSizes[tagName],\n                      }\n                    : {},\n            };\n\n            // Remove existing formats since tags have default font size and weight\n            para.segments.forEach(segment => {\n                delete segment.format.fontSize;\n                delete segment.format.fontWeight;\n            });\n        } else if (tagName) {\n            delete para.decorator;\n        }\n    });\n}\n\nfunction getExistingHeadingTag(\n    decorator?: ContentModelParagraphDecorator\n): HeadingLevelTags | null {\n    const tag = decorator?.tagName || '';\n    const level = parseInt(tag.substring(1));\n\n    return level >= 1 && level <= 6 ? (tag as HeadingLevelTags) : null;\n}\n","import { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { setModelIndentation } from '../../modelApi/block/setModelIndentation';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Indent or outdent to selected paragraphs\n * @param editor The editor to operate on\n * @param indentation Whether indent or outdent\n * @param length The length of pixel to indent/outdent @default 40\n */\nexport function setIndentation(\n    editor: IEditor,\n    indentation: 'indent' | 'outdent',\n    length?: number\n) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            const result = setModelIndentation(model, indentation, length);\n\n            if (result) {\n                normalizeContentModel(model);\n            }\n\n            context.newPendingFormat = 'preserve';\n\n            return result;\n        },\n        {\n            apiName: 'setIndentation',\n        }\n    );\n}\n","import { createParagraphDecorator } from 'roosterjs-content-model-dom';\nimport { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggles the current block(s) margin properties.\n * null deletes any existing value, undefined is ignored\n * @param editor The editor to operate on\n * @param marginTop value for top margin\n * @param marginBottom value for bottom margin\n */\nexport function setParagraphMargin(\n    editor: IEditor,\n    marginTop?: string | null,\n    marginBottom?: string | null\n) {\n    editor.focus();\n\n    formatParagraphWithContentModel(editor, 'setParagraphMargin', para => {\n        if (!para.decorator) {\n            para.decorator = createParagraphDecorator('p');\n        }\n\n        if (marginTop) {\n            para.format.marginTop = marginTop;\n        } else if (marginTop === null) {\n            delete para.format.marginTop;\n        }\n\n        if (marginBottom) {\n            para.format.marginBottom = marginBottom;\n        } else if (marginBottom === null) {\n            delete para.format.marginBottom;\n        }\n    });\n}\n","import { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Sets current selected block(s) line-height property and wipes such property from child segments\n * @param editor The editor to operate on\n * @param spacing Unitless/px value to set line height\n */\nexport function setSpacing(editor: IEditor, spacing: number | string) {\n    editor.focus();\n\n    formatParagraphWithContentModel(editor, 'setSpacing', paragraph => {\n        paragraph.format.lineHeight = spacing.toString();\n        paragraph.segments.forEach(segment => {\n            if (segment.format.lineHeight) {\n                delete segment.format.lineHeight;\n            }\n        });\n    });\n}\n","import { toggleModelBlockQuote } from '../../modelApi/block/toggleModelBlockQuote';\nimport type { ContentModelFormatContainerFormat, IEditor } from 'roosterjs-content-model-types';\n\nconst DefaultQuoteFormatLtr: ContentModelFormatContainerFormat = {\n    borderLeft: '3px solid rgb(200, 200, 200)',\n    textColor: 'rgb(102, 102, 102)',\n};\nconst DefaultQuoteFormatRtl: ContentModelFormatContainerFormat = {\n    borderRight: '3px solid rgb(200, 200, 200)',\n    textColor: 'rgb(102, 102, 102)',\n};\nconst BuildInQuoteFormat: ContentModelFormatContainerFormat = {\n    marginTop: '1em',\n    marginBottom: '1em',\n    marginLeft: '40px',\n    marginRight: '40px',\n};\n\n/**\n * Toggle BLOCKQUOTE state of selected paragraphs.\n * If any selected paragraph is not under a BLOCKQUOTE, wrap them into a BLOCKQUOTE.\n * Otherwise, unwrap all related BLOCKQUOTEs.\n * @param editor The editor object to toggle BLOCKQUOTE onto\n * @param quoteFormat @optional Block format for the new quote object\n */\nexport function toggleBlockQuote(\n    editor: IEditor,\n    quoteFormat?: ContentModelFormatContainerFormat,\n    quoteFormatRtl?: ContentModelFormatContainerFormat\n) {\n    const fullQuoteFormatLtr: ContentModelFormatContainerFormat = {\n        ...BuildInQuoteFormat,\n        paddingLeft: '10px',\n        ...(quoteFormat ?? DefaultQuoteFormatLtr),\n    };\n    const fullQuoteFormatRtl: ContentModelFormatContainerFormat = {\n        ...BuildInQuoteFormat,\n        paddingRight: '10px',\n        direction: 'rtl',\n        ...(quoteFormatRtl ?? quoteFormat ?? DefaultQuoteFormatRtl),\n    };\n\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            context.newPendingFormat = 'preserve';\n\n            return toggleModelBlockQuote(model, fullQuoteFormatLtr, fullQuoteFormatRtl);\n        },\n        {\n            apiName: 'toggleBlockQuote',\n        }\n    );\n}\n","import { formatInsertPointWithContentModel } from '../utils/formatInsertPointWithContentModel';\nimport { insertEntityModel } from '../../modelApi/entity/insertEntityModel';\nimport {\n    ChangeSource,\n    createEntity,\n    normalizeContentModel,\n    parseEntityFormat,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelEntity,\n    InsertEntityPosition,\n    InsertEntityOptions,\n    IEditor,\n    EntityState,\n    DOMInsertPoint,\n    FormatContentModelOptions,\n    FormatContentModelContext,\n    InsertPoint,\n    ShallowMutableContentModelDocument,\n} from 'roosterjs-content-model-types';\n\nconst BlockEntityTag = 'div';\nconst InlineEntityTag = 'span';\n\n/**\n * Insert an entity into editor\n * @param editor The editor object\n * @param type Type of entity\n * @param isBlock True to insert a block entity, false to insert an inline entity\n * @param position Position of the entity to insert. It can be\n * Value of InsertEntityPosition: see InsertEntityPosition\n * selectionRangeEx: Use this range instead of current focus position to insert. After insert, focus will be moved to\n * the beginning of this range (when focusAfterEntity is not set to true) or after the new entity (when focusAfterEntity is set to true)\n * @param options Move options to insert. See InsertEntityOptions\n */\nexport function insertEntity(\n    editor: IEditor,\n    type: string,\n    isBlock: boolean,\n    position: 'focus' | 'begin' | 'end' | DOMInsertPoint,\n    options?: InsertEntityOptions\n): ContentModelEntity | null;\n\n/**\n * Insert a block entity into editor\n * @param editor The editor object\n * @param type Type of entity\n * @param isBlock Must be true for a block entity\n * @param position Position of the entity to insert. It can be\n * Value of InsertEntityPosition: see InsertEntityPosition\n * selectionRangeEx: Use this range instead of current focus position to insert. After insert, focus will be moved to\n * the beginning of this range (when focusAfterEntity is not set to true) or after the new entity (when focusAfterEntity is set to true)\n * @param options Move options to insert. See InsertEntityOptions\n */\nexport function insertEntity(\n    editor: IEditor,\n    type: string,\n    isBlock: true,\n    position: InsertEntityPosition | DOMInsertPoint,\n    options?: InsertEntityOptions\n): ContentModelEntity | null;\n\nexport function insertEntity(\n    editor: IEditor,\n    type: string,\n    isBlock: boolean,\n    position?: InsertEntityPosition | DOMInsertPoint,\n    options?: InsertEntityOptions\n): ContentModelEntity | null {\n    const { contentNode, focusAfterEntity, wrapperDisplay, skipUndoSnapshot, initialEntityState } =\n        options || {};\n    const document = editor.getDocument();\n    const wrapper = document.createElement(isBlock ? BlockEntityTag : InlineEntityTag);\n    const display = wrapperDisplay ?? (isBlock ? undefined : 'inline-block');\n\n    wrapper.style.setProperty('display', display || null);\n\n    if (display == undefined && isBlock) {\n        wrapper.style.setProperty('width', '100%');\n        wrapper.style.setProperty('display', 'inline-block');\n    }\n\n    if (contentNode) {\n        wrapper.appendChild(contentNode);\n    }\n\n    const entityModel = createEntity(wrapper, true /* isReadonly */, undefined /*format*/, type);\n\n    if (!skipUndoSnapshot) {\n        editor.takeSnapshot();\n    }\n\n    const formatOptions: FormatContentModelOptions = {\n        changeSource: ChangeSource.InsertEntity,\n        getChangeData: () => ({\n            wrapper,\n            type,\n            id: '',\n            isReadonly: true,\n        }),\n        apiName: 'insertEntity',\n    };\n\n    const callback = (\n        model: ShallowMutableContentModelDocument,\n        context: FormatContentModelContext,\n        insertPoint?: InsertPoint\n    ) => {\n        insertEntityModel(\n            model,\n            entityModel,\n            typeof position == 'string' ? position : 'focus',\n            isBlock,\n            focusAfterEntity,\n            context,\n            insertPoint\n        );\n\n        normalizeContentModel(model);\n\n        context.skipUndoSnapshot = true;\n        context.newEntities.push(entityModel);\n\n        return true;\n    };\n\n    if (typeof position == 'object') {\n        formatInsertPointWithContentModel(editor, position, callback, formatOptions);\n    } else {\n        editor.formatContentModel(callback, formatOptions);\n    }\n\n    if (!skipUndoSnapshot) {\n        let entityState: EntityState | undefined;\n\n        if (initialEntityState) {\n            const format = parseEntityFormat(wrapper);\n            const { id, entityType } = format;\n\n            entityState =\n                id && entityType\n                    ? {\n                          id: id,\n                          type: entityType,\n                          state: initialEntityState,\n                      }\n                    : undefined;\n        }\n\n        editor.takeSnapshot(entityState);\n    }\n\n    return entityModel;\n}\n","import { clearModelFormat } from '../../modelApi/common/clearModelFormat';\nimport { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type {\n    IEditor,\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\n\nconst MAX_TRY = 3;\n\n/**\n * Clear format of selection\n * @param editor The editor to clear format from\n */\nexport function clearFormat(editor: IEditor) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            let changed = false;\n            let needtoRun = true;\n            let triedTimes = 0;\n\n            while (needtoRun && triedTimes++ < MAX_TRY) {\n                const blocksToClear: [ContentModelBlockGroup[], ContentModelBlock][] = [];\n                const segmentsToClear: ContentModelSegment[] = [];\n                const tablesToClear: [ContentModelTable, boolean][] = [];\n\n                needtoRun = clearModelFormat(model, blocksToClear, segmentsToClear, tablesToClear);\n\n                normalizeContentModel(model);\n\n                changed =\n                    changed ||\n                    blocksToClear.length > 0 ||\n                    segmentsToClear.length > 0 ||\n                    tablesToClear.length > 0;\n            }\n\n            return changed;\n        },\n        {\n            apiName: 'clearFormat',\n        }\n    );\n}\n","import { reducedModelChildProcessor } from '../../modelApi/common/reducedModelChildProcessor';\nimport { retrieveModelFormatState } from 'roosterjs-content-model-dom';\nimport type {\n    IEditor,\n    ContentModelFormatState,\n    ConflictFormatSolution,\n} from 'roosterjs-content-model-types';\n\n/**\n * Get current format state\n * @param editor The editor to get format from\n * @param conflictSolution The strategy for handling format conflicts\n */\nexport function getFormatState(\n    editor: IEditor,\n    conflictSolution: ConflictFormatSolution = 'remove'\n): ContentModelFormatState {\n    const pendingFormat = editor.getPendingFormat();\n    const manager = editor.getSnapshotsManager();\n    const result: ContentModelFormatState = {\n        canUndo: manager.hasNewContent || manager.canMove(-1),\n        canRedo: manager.canMove(1),\n        isDarkMode: editor.isDarkMode(),\n    };\n\n    editor.formatContentModel(\n        model => {\n            retrieveModelFormatState(\n                model,\n                pendingFormat,\n                result,\n                conflictSolution,\n                editor.getDOMHelper()\n            );\n\n            return false;\n        },\n        undefined /*options*/,\n        {\n            processorOverride: {\n                child: reducedModelChildProcessor,\n            },\n            tryGetFromCache: true,\n        }\n    );\n\n    return result;\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { mutateSegment } from 'roosterjs-content-model-dom';\nimport type { ContentModelImage, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Adjust selection to make sure select an image if any\n * @return Content Model Image object if an image is select, or null\n */\nexport function adjustImageSelection(editor: IEditor): ContentModelImage | null {\n    let image: ContentModelImage | null = null;\n\n    editor.formatContentModel(\n        model =>\n            adjustSegmentSelection(\n                model,\n                (target, paragraph) => {\n                    if (target.isSelected && target.segmentType == 'Image') {\n                        mutateSegment(paragraph, target, segment => {\n                            image = segment;\n                        });\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n                (target, ref) => target == ref\n            ),\n        {\n            apiName: 'adjustImageSelection',\n        }\n    );\n\n    return image;\n}\n","import { formatImageWithContentModel } from '../utils/formatImageWithContentModel';\nimport { getImageMetadata, readFile } from 'roosterjs-content-model-dom';\nimport type { ContentModelImage, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Change the selected image src\n * @param editor The editor instance\n * @param file The image file\n */\nexport function changeImage(editor: IEditor, file: File) {\n    editor.focus();\n\n    const selection = editor.getDOMSelection();\n    readFile(file, dataUrl => {\n        if (dataUrl && !editor.isDisposed() && selection?.type === 'image') {\n            formatImageWithContentModel(editor, 'changeImage', (image: ContentModelImage) => {\n                const originalSrc = getImageMetadata(image)?.src ?? '';\n                const previousSrc = image.src;\n\n                image.src = dataUrl;\n                image.dataset = {};\n                image.format.width = '';\n                image.format.height = '';\n                image.alt = '';\n\n                editor.triggerEvent('editImage', {\n                    image: selection.image,\n                    previousSrc,\n                    newSrc: dataUrl,\n                    originalSrc,\n                });\n            });\n        }\n    });\n}\n","import {\n    mergeModel,\n    readFile,\n    addSegment,\n    createContentModelDocument,\n    createImage,\n    setSelection,\n} from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Insert an image into current selected position\n * @param editor The editor to operate on\n * @param file Image Blob file or source string\n */\nexport function insertImage(editor: IEditor, imageFileOrSrc: File | string) {\n    editor.focus();\n\n    if (typeof imageFileOrSrc == 'string') {\n        insertImageWithSrc(editor, imageFileOrSrc);\n    } else {\n        readFile(imageFileOrSrc, dataUrl => {\n            if (dataUrl && !editor.isDisposed()) {\n                insertImageWithSrc(editor, dataUrl);\n            }\n        });\n    }\n}\n\nfunction insertImageWithSrc(editor: IEditor, src: string) {\n    editor.formatContentModel(\n        (model, context) => {\n            const image = createImage(src, { backgroundColor: '' });\n            const doc = createContentModelDocument();\n\n            addSegment(doc, image);\n            mergeModel(model, doc, context, {\n                mergeFormat: 'mergeAll',\n            });\n            image.isSelected = true;\n            setSelection(model, image);\n\n            return true;\n        },\n        {\n            apiName: 'insertImage',\n        }\n    );\n}\n","import { formatImageWithContentModel } from '../utils/formatImageWithContentModel';\nimport type { ContentModelImage, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set image alt text for all selected images at selection. If no images is contained\n * in selection, do nothing.\n * @param editor The editor instance\n * @param altText The image alt text\n */\nexport function setImageAltText(editor: IEditor, altText: string) {\n    editor.focus();\n\n    formatImageWithContentModel(editor, 'setImageAltText', (image: ContentModelImage) => {\n        image.alt = altText;\n    });\n}\n","import { applyImageBorderFormat } from '../../modelApi/image/applyImageBorderFormat';\nimport { formatImageWithContentModel } from '../utils/formatImageWithContentModel';\nimport type { Border, ContentModelImage, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set image border style for all selected images at selection.\n * @param editor The editor instance\n * @param border the border format object. Ex: { color: 'red', width: '10px', style: 'solid'}, if one of the value in object is undefined\n * its value will not be changed. Passing null instead of an object will remove the border\n * @param borderRadius the border radius value, if undefined, the border radius will keep the actual value\n */\nexport function setImageBorder(editor: IEditor, border: Border | null, borderRadius?: string) {\n    editor.focus();\n\n    formatImageWithContentModel(editor, 'setImageBorder', (image: ContentModelImage) => {\n        applyImageBorderFormat(image, border, borderRadius);\n    });\n}\n","import { formatImageWithContentModel } from '../utils/formatImageWithContentModel';\nimport type { ContentModelImage, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set image box shadow for all selected images at selection.\n * @param editor The editor instance\n * @param boxShadow The image box boxShadow\n * @param margin The image margin for all sides (eg. \"4px\"), null to remove margin\n */\nexport function setImageBoxShadow(editor: IEditor, boxShadow: string, margin?: string | null) {\n    editor.focus();\n\n    formatImageWithContentModel(editor, 'setImageBoxShadow', (image: ContentModelImage) => {\n        image.format.boxShadow = boxShadow;\n        if (margin) {\n            image.format.marginBottom = margin;\n            image.format.marginLeft = margin;\n            image.format.marginRight = margin;\n            image.format.marginTop = margin;\n        } else if (margin === null) {\n            delete image.format.marginBottom;\n            delete image.format.marginLeft;\n            delete image.format.marginRight;\n            delete image.format.marginTop;\n        }\n    });\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { adjustWordSelection } from '../../modelApi/selection/adjustWordSelection';\nimport { getSelectedSegments, setSelection } from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Adjust selection to make sure select a hyperlink if any, or a word if original selection is collapsed\n * @return A combination of existing link display text and url if any. If there is no existing link, return selected text and null\n */\nexport function adjustLinkSelection(editor: IEditor): [string, string | null] {\n    let text = '';\n    let url: string | null = null;\n\n    editor.formatContentModel(\n        model => {\n            let changed = adjustSegmentSelection(\n                model,\n                target => !!target.isSelected && !!target.link,\n                (target, ref) => !!target.link && target.link.format.href == ref.link!.format.href\n            );\n            let segments = getSelectedSegments(\n                model,\n                false /*includingFormatHolder*/,\n                true /*mutate*/\n            );\n            const firstSegment = segments[0];\n\n            if (segments.length == 1 && firstSegment.segmentType == 'SelectionMarker') {\n                segments = adjustWordSelection(model, firstSegment);\n\n                if (segments.length > 1) {\n                    changed = true;\n                    setSelection(model, segments[0], segments[segments.length - 1]);\n                }\n            }\n\n            text = segments.map(x => (x.segmentType == 'Text' ? x.text : '')).join('');\n            url = segments[0]?.link?.format.href || null;\n\n            return changed;\n        },\n        {\n            apiName: 'adjustLinkSelection',\n        }\n    );\n\n    return [text, url];\n}\n","import { adjustTrailingSpaceSelection } from '../../modelApi/selection/adjustTrailingSpaceSelection';\nimport { matchLink } from '../../modelApi/link/matchLink';\nimport {\n    addLink,\n    addSegment,\n    ChangeSource,\n    createContentModelDocument,\n    createText,\n    getSelectedSegments,\n    mergeModel,\n} from 'roosterjs-content-model-dom';\nimport type { ContentModelLink, IEditor } from 'roosterjs-content-model-types';\n\n// Regex matching Uri scheme\nconst URI_REGEX = /^[a-zA-Z]+:/i;\n// Regex matching begin of email address\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\nconst FTP_REGEX = /^ftp\\./i;\n\n/**\n * Insert a hyperlink at cursor.\n * When there is a selection, hyperlink will be applied to the selection,\n * otherwise a hyperlink will be inserted to the cursor position.\n * @param editor Editor object\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\n * When protocol is not specified, a best matched protocol will be predicted.\n * @param anchorTitle Optional alt text of the link, will be shown when hover on the link\n * @param displayText Optional display text for the link.\n * @param target Optional display target for the link (\"_blank\"|\"_self\"|\"_parent\"|\"_top\"|\"{framename}\")\n * If specified, the display text of link will be replaced with this text.\n * If not specified and there wasn't a link, the link url will be used as display text.\n */\nexport function insertLink(\n    editor: IEditor,\n    link: string,\n    anchorTitle?: string,\n    displayText?: string,\n    target?: string\n) {\n    editor.focus();\n\n    const url = (checkXss(link) || '').trim();\n    if (url) {\n        const linkData = matchLink(url);\n        const linkUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\n        const links: ContentModelLink[] = [];\n        let anchorNode: Node | undefined;\n\n        editor.formatContentModel(\n            (model, context) => {\n                const segments = getSelectedSegments(\n                    model,\n                    false /*includingFormatHolder*/,\n                    true /*mutate*/\n                );\n\n                const originalText = segments\n                    .map(x => (x.segmentType == 'Text' ? x.text : ''))\n                    .join('');\n                const text = displayText || originalText || '';\n\n                if (\n                    (segments.some(x => x.segmentType != 'SelectionMarker') &&\n                        originalText == text) ||\n                    (segments.length == 1 && segments[0].segmentType == 'Image')\n                ) {\n                    segments.forEach(x => {\n                        const link = createLink(\n                            linkUrl,\n                            anchorTitle,\n                            target,\n                            x.segmentType == 'Text'\n                        );\n                        addLink(x, link);\n                        if (x.link) {\n                            links.push(x.link);\n                        }\n                    });\n                } else if (\n                    segments.every(x => x.segmentType == 'SelectionMarker') ||\n                    (!!text && text != originalText)\n                ) {\n                    const segment = createText(text || (linkData ? linkData.originalUrl : url), {\n                        ...segments[0]?.format,\n                        ...editor.getPendingFormat(),\n                    });\n                    const doc = createContentModelDocument();\n                    const link = createLink(linkUrl, anchorTitle, target);\n\n                    addLink(segment, link);\n                    addSegment(doc, segment);\n\n                    if (segment.link) {\n                        links.push(segment.link);\n                    }\n\n                    mergeModel(model, doc, context, {\n                        mergeFormat: 'mergeAll',\n                    });\n                }\n\n                adjustTrailingSpaceSelection(model);\n                return segments.length > 0;\n            },\n            {\n                changeSource: ChangeSource.CreateLink,\n                onNodeCreated: (modelElement, node) => {\n                    if (!anchorNode && links.indexOf(modelElement as ContentModelLink) >= 0) {\n                        anchorNode = node;\n                    }\n                },\n                getChangeData: () => anchorNode,\n                apiName: 'insertLink',\n            }\n        );\n    }\n}\n\nconst createLink = (\n    url: string,\n    anchorTitle?: string,\n    target?: string,\n    underline: boolean = true\n): ContentModelLink => {\n    return {\n        dataset: {},\n        format: {\n            href: url,\n            anchorTitle,\n            target,\n            underline: underline,\n        },\n    };\n};\n\nfunction applyLinkPrefix(url: string): string {\n    if (!url) {\n        return url;\n    }\n\n    // Add link prefix per rule:\n    // (a) if the url always starts with a URI scheme, leave it as it is\n    // (b) if the url is an email address, xxx@... add mailto: prefix\n    // (c) if the url starts with ftp., add ftp:// prefix\n    // (d) rest, add http:// prefix\n    let prefix = '';\n    if (url.search(URI_REGEX) < 0) {\n        if (url.search(MAILTO_REGEX) == 0) {\n            prefix = 'mailto:';\n        } else if (url.search(FTP_REGEX) == 0) {\n            prefix = 'ftp://';\n        } else {\n            // fallback to http://\n            prefix = 'http://';\n        }\n    }\n\n    return prefix + url;\n}\n\nfunction checkXss(link: string): string {\n    return link.match(/s\\n*c\\n*r\\n*i\\n*p\\n*t\\n*:/i) ? '' : link;\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { getSelectedSegments } from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Remove link at selection. If no links at selection, do nothing.\n * If selection contains multiple links, all of the link styles will be removed.\n * If only part of a link is selected, the whole link style will be removed.\n * @param editor The editor instance\n */\nexport function removeLink(editor: IEditor) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            adjustSegmentSelection(\n                model,\n                target => !!target.isSelected && !!target.link,\n                (target, ref) =>\n                    target.isSelected || // Expand the selection to any link that is involved. So we can remove multiple links together\n                    (!!target.link && target.link.format.href == ref.link!.format.href)\n            );\n\n            const segments = getSelectedSegments(\n                model,\n                false /*includingFormatHolder*/,\n                true /*mutate*/\n            );\n            let isChanged = false;\n\n            segments.forEach(segment => {\n                if (segment.link) {\n                    isChanged = true;\n\n                    delete segment.link;\n                }\n            });\n\n            return isChanged;\n        },\n        {\n            apiName: 'removeLink',\n        }\n    );\n}\n","import { setModelListStartNumber } from '../../modelApi/list/setModelListStartNumber';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set start number of a list item\n * @param editor The editor to operate on\n * @param value The number to set to, must be equal or greater than 1\n */\nexport function setListStartNumber(editor: IEditor, value: number) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            return setModelListStartNumber(model, value);\n        },\n        {\n            apiName: 'setListStartNumber',\n        }\n    );\n}\n","import { setModelListStyle } from '../../modelApi/list/setModelListStyle';\nimport type { IEditor, ListMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Set style of list items with in same thread of current item\n * @param editor The editor to operate on\n * @param style The target list item style to set\n */\nexport function setListStyle(editor: IEditor, style: ListMetadataFormat) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            return setModelListStyle(model, style);\n        },\n        {\n            apiName: 'setListStyle',\n        }\n    );\n}\n","import { setListType } from '../../modelApi/list/setListType';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle bullet list type\n * - When there are some blocks not in bullet list, set all blocks to the given type\n * - When all blocks are already in bullet list, turn off / outdent there list type\n * @param editor The editor to operate on\n * @param removeMargins true to remove margins, false to keep margins @default false\n */\nexport function toggleBullet(editor: IEditor, removeMargins: boolean = false) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            context.newPendingFormat = 'preserve';\n\n            return setListType(model, 'UL', removeMargins);\n        },\n        {\n            apiName: 'toggleBullet',\n        }\n    );\n}\n","import { setListType } from '../../modelApi/list/setListType';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle numbering list type\n * - When there are some blocks not in numbering list, set all blocks to the given type\n * - When all blocks are already in numbering list, turn off / outdent there list type\n * @param editor The editor to operate on\n * @param removeMargins true to remove margins, false to keep margins @default false\n */\nexport function toggleNumbering(editor: IEditor, removeMargins: boolean = false) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            context.newPendingFormat = 'preserve';\n\n            return setListType(model, 'OL', removeMargins);\n        },\n        {\n            apiName: 'toggleNumbering',\n        }\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { ContentModelSegmentFormat, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Bulk apply segment format to all selected content. This is usually used for format painter.\n * @param editor The editor to operate on\n * @param newFormat The segment format to apply\n */\nexport function applySegmentFormat(\n    editor: IEditor,\n    newFormat: Readonly<ContentModelSegmentFormat>\n) {\n    formatSegmentWithContentModel(\n        editor,\n        'applySegmentFormat',\n        format => {\n            format.backgroundColor = newFormat.backgroundColor;\n            format.fontFamily = newFormat.fontFamily;\n            format.fontSize = newFormat.fontSize;\n            format.fontWeight = newFormat.fontWeight;\n            format.italic = newFormat.italic;\n            format.strikethrough = newFormat.strikethrough;\n            format.superOrSubScriptSequence = newFormat.superOrSubScriptSequence;\n            format.textColor = newFormat.textColor;\n            format.underline = newFormat.underline;\n        },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Change the capitalization of text in the selection\n * @param editor The editor instance\n * @param capitalization The case option\n * @param language Optional parameter for language string that should comply to \"IETF BCP 47 Tags for\n * Identifying Languages\". For example: 'en' or 'en-US' for English, 'tr' for Turkish.\n * Default is the host environment’s current locale.\n */\nexport function changeCapitalization(\n    editor: IEditor,\n    capitalization: 'sentence' | 'lowerCase' | 'upperCase' | 'capitalize',\n    language?: string\n) {\n    editor.focus();\n\n    formatSegmentWithContentModel(editor, 'changeCapitalization', (_, __, segment) => {\n        if (segment?.segmentType == 'Text') {\n            switch (capitalization) {\n                case 'lowerCase':\n                    segment.text = segment.text.toLocaleLowerCase(language);\n                    break;\n\n                case 'upperCase':\n                    segment.text = segment.text.toLocaleUpperCase(language);\n                    break;\n\n                case 'capitalize':\n                    const wordArray = segment.text.toLocaleLowerCase(language).split(' ');\n\n                    for (let i = 0; i < wordArray.length; i++) {\n                        wordArray[i] =\n                            wordArray[i].charAt(0).toLocaleUpperCase(language) +\n                            wordArray[i].slice(1);\n                    }\n\n                    segment.text = wordArray.join(' ');\n                    break;\n\n                case 'sentence':\n                    const punctuationMarks = '[\\\\.\\\\!\\\\?]';\n                    // Find a match of a word character either:\n                    // - At the beginning of a string with or without preceding whitespace, for\n                    // example: '  hello world' and 'hello world' strings would both match 'h'.\n                    // - Or preceded by a punctuation mark and at least one whitespace, for\n                    // example 'yes. hello world' would match 'y' and 'h'.\n                    const regex = new RegExp('^\\\\s*\\\\w|' + punctuationMarks + '\\\\s+\\\\w', 'g');\n\n                    segment.text = segment.text\n                        .toLocaleLowerCase(language)\n                        .replace(regex, match => match.toLocaleUpperCase(language));\n                    break;\n            }\n        }\n    });\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport { setFontSizeInternal } from './setFontSize';\nimport type {\n    ContentModelSegmentFormat,\n    IEditor,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\n */\nconst FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\nconst MIN_FONT_SIZE = 1;\nconst MAX_FONT_SIZE = 1000;\n\n/**\n * Increase or decrease font size in selection\n * @param editor The editor instance\n * @param change Whether increase or decrease font size\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\n */\nexport function changeFontSize(\n    editor: IEditor,\n    change: 'increase' | 'decrease',\n    fontSizes: number[] = FONT_SIZES\n) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'changeFontSize',\n        (format, _, __, paragraph) => changeFontSizeInternal(change, format, paragraph, fontSizes),\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n\nfunction changeFontSizeInternal(\n    change: 'increase' | 'decrease',\n    format: ContentModelSegmentFormat,\n    paragraph: ShallowMutableContentModelParagraph | null,\n    fontSizes: number[]\n) {\n    if (format.fontSize) {\n        const sizeInPt = parseValueWithUnit(format.fontSize, undefined /*element*/, 'pt');\n\n        if (sizeInPt > 0) {\n            const newSize = getNewFontSize(sizeInPt, change == 'increase' ? 1 : -1, fontSizes);\n\n            setFontSizeInternal(newSize + 'pt', format, paragraph);\n        }\n    }\n}\n\nfunction getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\n    const last = fontSizes[fontSizes.length - 1];\n    if (pt <= fontSizes[0]) {\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\n    } else if (pt > last || (pt == last && changeBase == 1)) {\n        pt = pt / 10;\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\n    } else if (changeBase == 1) {\n        for (let i = 0; i < fontSizes.length; i++) {\n            if (pt < fontSizes[i]) {\n                pt = fontSizes[i];\n                break;\n            }\n        }\n    } else {\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\n            if (pt > fontSizes[i]) {\n                pt = fontSizes[i];\n                break;\n            }\n        }\n    }\n    return pt;\n}\n","import { createSelectionMarker, setSelection } from 'roosterjs-content-model-dom';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor, ShallowMutableContentModelParagraph } from 'roosterjs-content-model-types';\n\n/**\n * Set background color\n * @param editor The editor to operate on\n * @param backgroundColor The color to set. Pass null to remove existing color.\n */\nexport function setBackgroundColor(editor: IEditor, backgroundColor: string | null) {\n    editor.focus();\n\n    let lastParagraph: ShallowMutableContentModelParagraph | null = null;\n    let lastSegmentIndex: number = -1;\n\n    formatSegmentWithContentModel(\n        editor,\n        'setBackgroundColor',\n        (format, _, segment, paragraph) => {\n            if (backgroundColor === null) {\n                delete format.backgroundColor;\n            } else {\n                format.backgroundColor = backgroundColor;\n            }\n\n            if (segment && paragraph && segment.segmentType != 'SelectionMarker') {\n                lastParagraph = paragraph;\n                lastSegmentIndex = lastParagraph.segments.indexOf(segment);\n            }\n        },\n        undefined /*segmentHasStyleCallback*/,\n        undefined /*includingFormatHolder*/,\n        model => {\n            if (lastParagraph && lastSegmentIndex >= 0) {\n                const marker = createSelectionMarker(\n                    lastParagraph.segments[lastSegmentIndex]?.format\n                );\n\n                lastParagraph.segments.splice(lastSegmentIndex + 1, 0, marker);\n                setSelection(model, marker, marker);\n            }\n        }\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set font name\n * @param editor The editor to operate on\n * @param fontName The font name to set\n */\nexport function setFontName(editor: IEditor, fontName: string) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'setFontName',\n        (format, _, segment) => {\n            format.fontFamily = fontName;\n\n            if (segment?.code) {\n                segment.code.format.fontFamily = fontName;\n            }\n        },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type {\n    ContentModelSegmentFormat,\n    IEditor,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Set font size\n * @param editor The editor to operate on\n * @param fontSize The font size to set\n */\nexport function setFontSize(editor: IEditor, fontSize: string) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'setFontSize',\n        (format, _, __, paragraph) => setFontSizeInternal(fontSize, format, paragraph),\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n\n/**\n * @internal\n * Internal set font function shared by setFontSize and changeFontSize\n */\nexport function setFontSizeInternal(\n    fontSize: string,\n    format: ContentModelSegmentFormat,\n    paragraph: ShallowMutableContentModelParagraph | null\n) {\n    format.fontSize = fontSize;\n\n    // Since we have set font size to segment, it can be smaller than the one in paragraph format, so delete font size from paragraph\n    if (paragraph?.segmentFormat?.fontSize) {\n        const size = paragraph.segmentFormat.fontSize;\n\n        paragraph.segments.forEach(segment => {\n            if (!segment.format.fontSize) {\n                segment.format.fontSize = size;\n            }\n        });\n\n        delete paragraph.segmentFormat.fontSize;\n    }\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set text color\n * @param editor The editor to operate on\n * @param textColor The text color to set. Pass null to remove existing color.\n */\nexport function setTextColor(editor: IEditor, textColor: string | null) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'setTextColor',\n        textColor === null\n            ? (format, _, segment) => {\n                  delete format.textColor;\n\n                  if (segment?.link) {\n                      delete segment.link.format.textColor;\n                  }\n              }\n            : (format, _, segment) => {\n                  format.textColor = textColor;\n\n                  if (segment?.link) {\n                      segment.link.format.textColor = textColor;\n                  }\n              },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { createText } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelText,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Split given text segments from the given range\n * @param textSegment segment to split\n * @param parent parent paragraph the text segment exist in\n * @param start starting point of the split\n * @param end ending point of the split\n * @returns text segment from the indicated split.\n */\nexport function splitTextSegment(\n    textSegment: ContentModelText,\n    parent: ShallowMutableContentModelParagraph,\n    start: number,\n    end: number\n): ContentModelText {\n    const text = textSegment.text;\n    const index = parent.segments.indexOf(textSegment);\n    const middleSegment = createText(\n        text.substring(start, end),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n\n    const newSegments: ContentModelText[] = [middleSegment];\n    if (start > 0) {\n        newSegments.unshift(\n            createText(\n                text.substring(0, start),\n                textSegment.format,\n                textSegment.link,\n                textSegment.code\n            )\n        );\n    }\n    if (end < text.length) {\n        newSegments.push(\n            createText(text.substring(end), textSegment.format, textSegment.link, textSegment.code)\n        );\n    }\n\n    newSegments.forEach(segment => (segment.isSelected = textSegment.isSelected));\n    parent.segments.splice(index, 1, ...newSegments);\n\n    return middleSegment;\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { isBold } from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle bold style\n * @param editor The editor to operate on\n */\nexport function toggleBold(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleBold',\n        (format, isTurningOn) => {\n            format.fontWeight = isTurningOn ? 'bold' : 'normal';\n        },\n        (format, _, paragraph) =>\n            isBold(\n                typeof format.fontWeight == 'undefined'\n                    ? paragraph?.decorator?.format.fontWeight\n                    : format.fontWeight\n            )\n    );\n}\n","import { addCode } from 'roosterjs-content-model-dom';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { ContentModelCode, IEditor } from 'roosterjs-content-model-types';\n\nconst DefaultCode: ContentModelCode = {\n    format: {\n        fontFamily: 'monospace',\n    },\n};\n\n/**\n * Toggle italic style\n * @param editor The editor to operate on\n */\nexport function toggleCode(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleCode',\n        (_, isTurningOn, segment) => {\n            if (segment) {\n                if (isTurningOn) {\n                    addCode(segment, DefaultCode);\n                } else {\n                    delete segment.code;\n                }\n            }\n        },\n        (_, segment) => !!segment?.code\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle italic style\n * @param editor The editor to operate on\n */\nexport function toggleItalic(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleItalic',\n        (format, isTurningOn) => {\n            format.italic = !!isTurningOn;\n        },\n        format => !!format.italic\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle strikethrough style\n * @param editor The editor to operate on\n */\nexport function toggleStrikethrough(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleStrikethrough',\n        (format, isTurningOn) => {\n            format.strikethrough = !!isTurningOn;\n        },\n        format => !!format.strikethrough\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle subscript style\n * @param editor The editor to operate on\n */\nexport function toggleSubscript(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleSubscript',\n        (format, isTurningOn) => {\n            format.superOrSubScriptSequence = isTurningOn ? 'sub' : '';\n        },\n        format => format.superOrSubScriptSequence?.split(' ').pop() == 'sub'\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle superscript style\n * @param editor The editor to operate on\n */\nexport function toggleSuperscript(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleSuperscript',\n        (format, isTurningOn) => {\n            format.superOrSubScriptSequence = isTurningOn ? 'super' : '';\n        },\n        format => format.superOrSubScriptSequence?.split(' ').pop() == 'super'\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle underline style\n * @param editor The editor to operate on\n */\nexport function toggleUnderline(editor: IEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleUnderline',\n        (format, isTurningOn, segment) => {\n            format.underline = !!isTurningOn;\n\n            if (segment?.link) {\n                segment.link.format.underline = !!isTurningOn;\n            }\n        },\n        (format, segment) => !!format.underline || !!segment?.link?.format?.underline,\n        false /*includingFormatHolder*/\n    );\n}\n","import {\n    extractBorderValues,\n    getFirstSelectedTable,\n    getSelectedCells,\n    mutateBlock,\n    getTableMetadata,\n    parseValueWithUnit,\n    setFirstColumnFormatBorders,\n    updateTableCellMetadata,\n} from 'roosterjs-content-model-dom';\nimport type {\n    IEditor,\n    Border,\n    BorderOperations,\n    TableSelectionCoordinates,\n    ReadonlyContentModelTableCell,\n    ReadonlyContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Border positions\n */\ntype BorderPositions = 'borderTop' | 'borderBottom' | 'borderLeft' | 'borderRight';\n\n/**\n * @internal\n * Perimeter of the table selection\n * Used to determine where to apply border to the cells adjacent to the selection.\n */\ntype Perimeter = {\n    Top: boolean;\n    Bottom: boolean;\n    Left: boolean;\n    Right: boolean;\n};\n\n/**\n * Operations to apply border\n * @param editor The editor instance\n * @param border The border to apply\n * @param operation The operation to apply\n */\nexport function applyTableBorderFormat(\n    editor: IEditor,\n    border: Border,\n    operation: BorderOperations\n) {\n    editor.formatContentModel(\n        model => {\n            const [tableModel] = getFirstSelectedTable(model);\n\n            if (tableModel) {\n                const sel = getSelectedCells(tableModel);\n                const perimeter: Perimeter = {\n                    Top: false,\n                    Bottom: false,\n                    Left: false,\n                    Right: false,\n                };\n\n                // Create border format with table format as backup\n                let borderFormat = '';\n                const format = tableModel.format;\n                const { width, style, color } = border;\n                const extractedBorder = extractBorderValues(format.borderTop);\n                const borderColor = extractedBorder.color;\n                const borderWidth = extractedBorder.width;\n                const borderStyle = extractedBorder.style;\n\n                if (width) {\n                    borderFormat = parseValueWithUnit(width) + 'px';\n                } else if (borderWidth) {\n                    borderFormat = borderWidth;\n                } else {\n                    borderFormat = '1px';\n                }\n\n                if (style) {\n                    borderFormat = `${borderFormat} ${style}`;\n                } else if (borderStyle) {\n                    borderFormat = `${borderFormat} ${borderStyle}`;\n                } else {\n                    borderFormat = `${borderFormat} solid`;\n                }\n\n                if (color) {\n                    borderFormat = `${borderFormat} ${color}`;\n                } else if (borderColor) {\n                    borderFormat = `${borderFormat} ${borderColor}`;\n                }\n\n                // undefined is treated as Left to Right\n                const isRtl = tableModel.format.direction == 'rtl';\n\n                if (sel) {\n                    const operations: BorderOperations[] = [operation];\n                    while (operations.length) {\n                        switch (operations.pop()) {\n                            case 'noBorders':\n                                // Do All borders but with empty border format\n                                borderFormat = '';\n                                operations.push('allBorders');\n                                break;\n                            case 'allBorders':\n                                const allBorders: BorderPositions[] = [\n                                    'borderTop',\n                                    'borderBottom',\n                                    'borderLeft',\n                                    'borderRight',\n                                ];\n                                for (\n                                    let rowIndex = sel.firstRow;\n                                    rowIndex <= sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    for (\n                                        let colIndex = sel.firstColumn;\n                                        colIndex <= sel.lastColumn;\n                                        colIndex++\n                                    ) {\n                                        const cell = tableModel.rows[rowIndex].cells[colIndex];\n                                        // Format cells - All borders\n                                        applyBorderFormat(cell, borderFormat, allBorders);\n                                    }\n                                }\n\n                                // Format perimeter\n                                perimeter.Top = true;\n                                perimeter.Bottom = true;\n                                perimeter.Left = true;\n                                perimeter.Right = true;\n                                break;\n                            case 'leftBorders':\n                                const leftBorder: BorderPositions[] = ['borderLeft'];\n                                for (\n                                    let rowIndex = sel.firstRow;\n                                    rowIndex <= sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell =\n                                        tableModel.rows[rowIndex].cells[\n                                            isRtl ? sel.lastColumn : sel.firstColumn\n                                        ];\n                                    // Format cells - Left border\n                                    applyBorderFormat(cell, borderFormat, leftBorder);\n                                }\n\n                                // Format perimeter\n                                isRtl ? (perimeter.Right = true) : (perimeter.Left = true);\n                                break;\n                            case 'rightBorders':\n                                const rightBorder: BorderPositions[] = ['borderRight'];\n                                for (\n                                    let rowIndex = sel.firstRow;\n                                    rowIndex <= sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell =\n                                        tableModel.rows[rowIndex].cells[\n                                            isRtl ? sel.firstColumn : sel.lastColumn\n                                        ];\n                                    // Format cells - Right border\n                                    applyBorderFormat(cell, borderFormat, rightBorder);\n                                }\n\n                                // Format perimeter\n                                isRtl ? (perimeter.Left = true) : (perimeter.Right = true);\n                                break;\n                            case 'topBorders':\n                                const topBorder: BorderPositions[] = ['borderTop'];\n                                for (\n                                    let colIndex = sel.firstColumn;\n                                    colIndex <= sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.firstRow].cells[colIndex];\n                                    // Format cells - Top border\n                                    applyBorderFormat(cell, borderFormat, topBorder);\n                                }\n\n                                // Format perimeter\n                                perimeter.Top = true;\n                                break;\n                            case 'bottomBorders':\n                                const bottomBorder: BorderPositions[] = ['borderBottom'];\n                                for (\n                                    let colIndex = sel.firstColumn;\n                                    colIndex <= sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.lastRow].cells[colIndex];\n                                    // Format cells - Bottom border\n                                    applyBorderFormat(cell, borderFormat, bottomBorder);\n                                }\n\n                                // Format perimeter\n                                perimeter.Bottom = true;\n                                break;\n                            case 'insideBorders':\n                                // Format cells - Inside borders\n                                const singleCol = sel.lastColumn == sel.firstColumn;\n                                const singleRow = sel.lastRow == sel.firstRow;\n                                // Single cell selection\n                                if (singleCol && singleRow) {\n                                    break;\n                                }\n                                // Single column selection\n                                if (singleCol) {\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.firstRow].cells[sel.firstColumn],\n                                        borderFormat,\n                                        ['borderBottom']\n                                    );\n                                    for (\n                                        let rowIndex = sel.firstRow + 1;\n                                        rowIndex <= sel.lastRow - 1;\n                                        rowIndex++\n                                    ) {\n                                        const cell =\n                                            tableModel.rows[rowIndex].cells[sel.firstColumn];\n                                        applyBorderFormat(cell, borderFormat, [\n                                            'borderTop',\n                                            'borderBottom',\n                                        ]);\n                                    }\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.lastRow].cells[sel.firstColumn],\n                                        borderFormat,\n                                        ['borderTop']\n                                    );\n                                    break;\n                                }\n                                // Single row selection\n                                if (singleRow) {\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.firstRow].cells[\n                                            isRtl ? sel.lastColumn : sel.firstColumn\n                                        ],\n                                        borderFormat,\n                                        ['borderRight']\n                                    );\n                                    for (\n                                        let colIndex = sel.firstColumn + 1;\n                                        colIndex <= sel.lastColumn - 1;\n                                        colIndex++\n                                    ) {\n                                        const cell = tableModel.rows[sel.firstRow].cells[colIndex];\n                                        applyBorderFormat(cell, borderFormat, [\n                                            'borderLeft',\n                                            'borderRight',\n                                        ]);\n                                    }\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.firstRow].cells[\n                                            isRtl ? sel.firstColumn : sel.lastColumn\n                                        ],\n                                        borderFormat,\n                                        ['borderLeft']\n                                    );\n                                    break;\n                                }\n\n                                // For multiple rows and columns selections\n                                // Top left cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.firstRow].cells[\n                                        isRtl ? sel.lastColumn : sel.firstColumn\n                                    ],\n                                    borderFormat,\n                                    ['borderBottom', 'borderRight']\n                                );\n                                // Top right cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.firstRow].cells[\n                                        isRtl ? sel.firstColumn : sel.lastColumn\n                                    ],\n                                    borderFormat,\n                                    ['borderBottom', 'borderLeft']\n                                );\n                                // Bottom left cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.lastRow].cells[\n                                        isRtl ? sel.lastColumn : sel.firstColumn\n                                    ],\n                                    borderFormat,\n                                    ['borderTop', 'borderRight']\n                                );\n                                // Bottom right cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.lastRow].cells[\n                                        isRtl ? sel.firstColumn : sel.lastColumn\n                                    ],\n                                    borderFormat,\n                                    ['borderTop', 'borderLeft']\n                                );\n                                // First row\n                                for (\n                                    let colIndex = sel.firstColumn + 1;\n                                    colIndex < sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.firstRow].cells[colIndex];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderBottom',\n                                        'borderLeft',\n                                        'borderRight',\n                                    ]);\n                                }\n                                // Last row\n                                for (\n                                    let colIndex = sel.firstColumn + 1;\n                                    colIndex < sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.lastRow].cells[colIndex];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderTop',\n                                        'borderLeft',\n                                        'borderRight',\n                                    ]);\n                                }\n                                // First column\n                                for (\n                                    let rowIndex = sel.firstRow + 1;\n                                    rowIndex < sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell = tableModel.rows[rowIndex].cells[sel.firstColumn];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderTop',\n                                        'borderBottom',\n                                        isRtl ? 'borderLeft' : 'borderRight',\n                                    ]);\n                                }\n                                // Last column\n                                for (\n                                    let rowIndex = sel.firstRow + 1;\n                                    rowIndex < sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell = tableModel.rows[rowIndex].cells[sel.lastColumn];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderTop',\n                                        'borderBottom',\n                                        isRtl ? 'borderRight' : 'borderLeft',\n                                    ]);\n                                }\n                                // Inner cells\n                                sel.firstColumn++;\n                                sel.firstRow++;\n                                sel.lastColumn--;\n                                sel.lastRow--;\n                                operations.push('allBorders');\n                                break;\n                            case 'outsideBorders':\n                                // Format cells - Outside borders\n                                operations.push('topBorders');\n                                operations.push('bottomBorders');\n                                operations.push('leftBorders');\n                                operations.push('rightBorders');\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n\n                    //Format perimeter if necessary or possible\n                    modifyPerimeter(tableModel, sel, borderFormat, perimeter, isRtl);\n                }\n\n                const tableMeta = getTableMetadata(tableModel);\n                if (tableMeta) {\n                    // Enforce first column format if necessary\n                    setFirstColumnFormatBorders(mutateBlock(tableModel).rows, tableMeta);\n                }\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'tableBorder',\n        }\n    );\n}\n\n/**\n * @internal\n * Apply border format to a cell\n * @param cell The cell to apply border format\n * @param borderFormat The border format to apply\n * @param positions The positions to apply\n */\nfunction applyBorderFormat(\n    cell: ReadonlyContentModelTableCell,\n    borderFormat: string,\n    positions: BorderPositions[]\n) {\n    const mutableCell = mutateBlock(cell);\n\n    positions.forEach(pos => {\n        mutableCell.format[pos] = borderFormat;\n    });\n\n    updateTableCellMetadata(mutableCell, metadata => {\n        metadata = metadata || {};\n        metadata.borderOverride = true;\n        return metadata;\n    });\n}\n\n/**\n * @internal\n * Modify the perimeter of the table selection\n * @param tableModel The table model\n * @param sel The table selection\n * @param borderFormat The border format to apply\n * If borderFormat is empty, the border will be removed\n * @param perimeter Where in the perimeter to apply\n */\nfunction modifyPerimeter(\n    tableModel: ReadonlyContentModelTable,\n    sel: TableSelectionCoordinates,\n    borderFormat: string,\n    perimeter: Perimeter,\n    isRtl: boolean\n) {\n    // Top of selection\n    if (perimeter.Top && sel.firstRow - 1 >= 0) {\n        for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n            const cell = tableModel.rows[sel.firstRow - 1].cells[colIndex];\n            applyBorderFormat(cell, borderFormat, ['borderBottom']);\n        }\n    }\n    // Bottom of selection\n    if (perimeter.Bottom && sel.lastRow + 1 < tableModel.rows.length) {\n        for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n            const cell = tableModel.rows[sel.lastRow + 1].cells[colIndex];\n            applyBorderFormat(cell, borderFormat, ['borderTop']);\n        }\n    }\n    // Left of selection\n    if (perimeter.Left && sel.firstColumn - 1 >= 0) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            const cell = tableModel.rows[rowIndex].cells[sel.firstColumn - 1];\n            applyBorderFormat(cell, borderFormat, [isRtl ? 'borderLeft' : 'borderRight']);\n        }\n    }\n    // Right of selection\n    if (perimeter.Right && sel.lastColumn + 1 < tableModel.rows[0].cells.length) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            const cell = tableModel.rows[rowIndex].cells[sel.lastColumn + 1];\n            applyBorderFormat(cell, borderFormat, [isRtl ? 'borderRight' : 'borderLeft']);\n        }\n    }\n}\n","import { alignTable } from '../../modelApi/table/alignTable';\nimport { deleteTable } from '../../modelApi/table/deleteTable';\nimport { deleteTableColumn } from '../../modelApi/table/deleteTableColumn';\nimport { deleteTableRow } from '../../modelApi/table/deleteTableRow';\nimport { formatTableWithContentModel } from '../utils/formatTableWithContentModel';\nimport { insertTableColumn } from '../../modelApi/table/insertTableColumn';\nimport { insertTableRow } from '../../modelApi/table/insertTableRow';\nimport { mergeTableCells } from '../../modelApi/table/mergeTableCells';\nimport { mergeTableColumn } from '../../modelApi/table/mergeTableColumn';\nimport { mergeTableRow } from '../../modelApi/table/mergeTableRow';\nimport { splitTableCellHorizontally } from '../../modelApi/table/splitTableCellHorizontally';\nimport { splitTableCellVertically } from '../../modelApi/table/splitTableCellVertically';\nimport type { TableOperation, IEditor } from 'roosterjs-content-model-types';\nimport {\n    alignTableCellHorizontally,\n    alignTableCellVertically,\n} from '../../modelApi/table/alignTableCell';\n\n/**\n * Format current focused table with the given format\n * @param editor The editor instance\n * @param operation The table operation to apply\n */\nexport function editTable(editor: IEditor, operation: TableOperation) {\n    editor.focus();\n\n    fixUpSafariSelection(editor);\n\n    formatTableWithContentModel(editor, 'editTable', tableModel => {\n        switch (operation) {\n            case 'alignCellLeft':\n            case 'alignCellCenter':\n            case 'alignCellRight':\n                alignTableCellHorizontally(tableModel, operation);\n                break;\n            case 'alignCellTop':\n            case 'alignCellMiddle':\n            case 'alignCellBottom':\n                alignTableCellVertically(tableModel, operation);\n                break;\n            case 'alignCenter':\n            case 'alignLeft':\n            case 'alignRight':\n                alignTable(tableModel, operation);\n                break;\n\n            case 'deleteColumn':\n                deleteTableColumn(tableModel);\n                break;\n\n            case 'deleteRow':\n                deleteTableRow(tableModel);\n                break;\n\n            case 'deleteTable':\n                deleteTable(tableModel);\n                break;\n\n            case 'insertAbove':\n            case 'insertBelow':\n                insertTableRow(tableModel, operation);\n                break;\n\n            case 'insertLeft':\n            case 'insertRight':\n                insertTableColumn(tableModel, operation);\n                break;\n\n            case 'mergeAbove':\n            case 'mergeBelow':\n                mergeTableRow(tableModel, operation);\n                break;\n\n            case 'mergeCells':\n                mergeTableCells(tableModel);\n                break;\n\n            case 'mergeLeft':\n            case 'mergeRight':\n                mergeTableColumn(tableModel, operation);\n                break;\n\n            case 'splitHorizontally':\n                splitTableCellHorizontally(tableModel);\n                break;\n\n            case 'splitVertically':\n                splitTableCellVertically(tableModel);\n                break;\n        }\n    });\n}\n\n// In safari, when open context menu under a table, it may expand the range selection to the beginning of next table cell.\n// So we make a workaround here to collapse the selection when need, to avoid unexpected table editing behavior\n// (e.g. insert two columns but actually need one only)\nfunction fixUpSafariSelection(editor: IEditor) {\n    if (editor.getEnvironment().isSafari) {\n        const selection = editor.getDOMSelection();\n\n        if (selection?.type == 'range' && !selection.range.collapsed) {\n            selection.range.collapse(true /*toStart*/);\n            editor.setDOMSelection({\n                type: 'range',\n                range: selection.range,\n                isReverted: false,\n            });\n        }\n    }\n}\n","import {\n    applyTableFormat,\n    getFirstSelectedTable,\n    mutateBlock,\n    updateTableCellMetadata,\n} from 'roosterjs-content-model-dom';\nimport type { IEditor, TableMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Format current focused table with the given format\n * @param editor The editor instance\n * @param format The table format to apply\n * @param keepCellShade Whether keep existing shade color when apply format if there is a manually set shade color\n */\nexport function formatTable(editor: IEditor, format: TableMetadataFormat, keepCellShade?: boolean) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const [tableModel] = getFirstSelectedTable(model);\n\n            if (tableModel) {\n                // Wipe border metadata\n                tableModel.rows.forEach(row => {\n                    row.cells.forEach(cell => {\n                        updateTableCellMetadata(mutateBlock(cell), metadata => {\n                            if (metadata) {\n                                delete metadata.borderOverride;\n                            }\n                            return metadata;\n                        });\n                    });\n                });\n                applyTableFormat(tableModel, format, keepCellShade);\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'formatTable',\n        }\n    );\n}\n","import { createTableStructure } from '../../modelApi/table/createTableStructure';\nimport {\n    createContentModelDocument,\n    createSelectionMarker,\n    applyTableFormat,\n    deleteSelection,\n    mergeModel,\n    normalizeTable,\n    setSelection,\n} from 'roosterjs-content-model-dom';\nimport type { IEditor, TableMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Insert table into editor at current selection\n * @param editor The editor instance\n * @param columns Number of columns in table, it also controls the default table cell width:\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\n * @param rows Number of rows in table\n * @param format (Optional) The table format. If not passed, the default format will be applied:\n * background color: #FFF; border color: #ABABAB\n */\nexport function insertTable(\n    editor: IEditor,\n    columns: number,\n    rows: number,\n    format?: Partial<TableMetadataFormat>\n) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            const insertPosition = deleteSelection(model, [], context).insertPoint;\n\n            if (insertPosition) {\n                const doc = createContentModelDocument();\n                const table = createTableStructure(doc, columns, rows);\n\n                normalizeTable(table, editor.getPendingFormat() || insertPosition.marker.format);\n                // Assign default vertical align\n                format = format || { verticalAlign: 'top' };\n                applyTableFormat(table, format);\n                mergeModel(model, doc, context, {\n                    insertPosition,\n                    mergeFormat: 'mergeAll',\n                });\n\n                const firstBlock = table.rows[0]?.cells[0]?.blocks[0];\n\n                if (firstBlock?.blockType == 'Paragraph') {\n                    const marker = createSelectionMarker(firstBlock.segments[0]?.format);\n                    firstBlock.segments.unshift(marker);\n                    setSelection(model, marker);\n                }\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'insertTable',\n        }\n    );\n}\n","import {\n    hasSelectionInBlockGroup,\n    getFirstSelectedTable,\n    setTableCellBackgroundColor,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set table cell shade color\n * @param editor The editor instance\n * @param color The color to set. Pass null to remove existing shade color\n */\nexport function setTableCellShade(editor: IEditor, color: string | null) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const [table] = getFirstSelectedTable(model);\n\n            if (table) {\n                table.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        if (hasSelectionInBlockGroup(cell)) {\n                            setTableCellBackgroundColor(\n                                mutateBlock(cell),\n                                color,\n                                true /*isColorOverride*/\n                            );\n                        }\n                    })\n                );\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'setTableCellShade',\n        }\n    );\n}\n","import type { ContentModelEntity, EditorContext, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Create an EditorContext for an entity\n * @param editor The editor object\n * @param entity The entity to create the context for\n * @returns The generated EditorContext for the entity\n */\nexport function createEditorContextForEntity(\n    editor: IEditor,\n    entity: ContentModelEntity\n): EditorContext {\n    const domHelper = editor.getDOMHelper();\n    const context: EditorContext = {\n        isDarkMode: editor.isDarkMode(),\n        defaultFormat: { ...entity.format },\n        darkColorHandler: editor.getColorManager(),\n        addDelimiterForEntity: false,\n        allowCacheElement: false,\n        domIndexer: undefined,\n        zoomScale: domHelper.calculateZoomScale(),\n        experimentalFeatures: [],\n    };\n\n    if (editor.getDocument().defaultView?.getComputedStyle(entity.wrapper).direction == 'rtl') {\n        context.isRootRtl = true;\n    }\n\n    return context;\n}\n","import { formatSegmentWithContentModel } from './formatSegmentWithContentModel';\nimport type { ContentModelImage, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Invoke a callback to format the selected image using Content Model\n * @param editor The editor object\n * @param apiName Name of API this calling this function. This is mostly for logging.\n * @param callback The callback to format the image. It will be called with current selected table. If no table is selected, it will not be called.\n */\nexport function formatImageWithContentModel(\n    editor: IEditor,\n    apiName: string,\n    callback: (segment: ContentModelImage) => void\n) {\n    formatSegmentWithContentModel(\n        editor,\n        apiName,\n        (_, __, segment) => {\n            if (segment?.segmentType == 'Image') {\n                callback(segment);\n            }\n        },\n        undefined /** segmentHasStyleCallback **/,\n        undefined /** includingFormatHolder */\n    );\n}\n","import {\n    addSegment,\n    addTextSegment,\n    buildSelectionMarker,\n    getRegularSelectionOffsets,\n    mutateBlock,\n    processChildNode,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ElementProcessor,\n    DOMInsertPoint,\n    FormatContentModelOptions,\n    IEditor,\n    InsertPoint,\n    DomToModelContext,\n    ContentModelBlockGroup,\n    FormatContentModelContext,\n    ShallowMutableContentModelDocument,\n} from 'roosterjs-content-model-types';\n\n/**\n * Invoke a callback to format the content in a specific position  using Content Model\n * @param editor The editor object\n * @param insertPoint The insert position.\n * @param callback The callback to insert the format.\n * @param options More options, @see FormatContentModelOptions\n */\nexport function formatInsertPointWithContentModel(\n    editor: IEditor,\n    insertPoint: DOMInsertPoint,\n    callback: (\n        model: ShallowMutableContentModelDocument,\n        context: FormatContentModelContext,\n        insertPoint?: InsertPoint\n    ) => void,\n    options?: FormatContentModelOptions\n) {\n    const bundle: InsertPointBundle = {\n        input: insertPoint,\n    };\n\n    editor.formatContentModel(\n        (model, context) => {\n            callback(model, context, bundle.result);\n\n            if (bundle?.result) {\n                const { paragraph, marker } = bundle.result;\n                const index = paragraph.segments.indexOf(marker);\n\n                if (index >= 0) {\n                    mutateBlock(paragraph).segments.splice(index, 1);\n                }\n            }\n            return true;\n        },\n        options,\n        {\n            processorOverride: {\n                child: getShadowChildProcessor(bundle),\n                textWithSelection: getShadowTextProcessor(bundle),\n            },\n            tryGetFromCache: false,\n        }\n    );\n}\n\ninterface InsertPointBundle {\n    input: DOMInsertPoint;\n    result?: InsertPoint;\n}\n\ninterface DomToModelContextWithPath extends DomToModelContext {\n    /**\n     * Block group path of this insert point, from direct parent group to the root group\n     */\n    path?: ContentModelBlockGroup[];\n}\n\nfunction getShadowChildProcessor(bundle: InsertPointBundle): ElementProcessor<ParentNode> {\n    return (group, parent, context) => {\n        const contextWithPath = context as DomToModelContextWithPath;\n\n        contextWithPath.path = contextWithPath.path || [];\n\n        let shouldShiftPath = false;\n        if (contextWithPath.path[0] != group) {\n            contextWithPath.path.unshift(group);\n            shouldShiftPath = true;\n        }\n\n        const offsets = getShadowSelectionOffsets(context, bundle, parent);\n        let index = 0;\n\n        for (let child = parent.firstChild; child; child = child.nextSibling) {\n            handleElementShadowSelection(bundle, index, context, group, offsets, parent);\n\n            processChildNode(group, child, context);\n\n            index++;\n        }\n\n        handleElementShadowSelection(bundle, index, context, group, offsets, parent);\n\n        if (shouldShiftPath) {\n            contextWithPath.path.shift();\n        }\n    };\n}\n\nfunction handleElementShadowSelection(\n    bundle: InsertPointBundle,\n    index: number,\n    context: DomToModelContext,\n    group: ContentModelBlockGroup,\n    offsets: [number, number, number],\n    container?: Node\n) {\n    if (\n        index == offsets[2] &&\n        (index <= offsets[0] || offsets[0] < 0) &&\n        (index < offsets[1] || offsets[1] < 0)\n    ) {\n        addSelectionMarker(group, context, container, index, bundle);\n        offsets[2] = -1;\n    }\n\n    if (index == offsets[0]) {\n        context.isInSelection = true;\n        addSelectionMarker(group, context, container, index);\n    }\n\n    if (index == offsets[2] && (index < offsets[1] || offsets[1] < 0)) {\n        addSelectionMarker(group, context, container, index, bundle);\n        offsets[2] = -1;\n    }\n\n    if (index == offsets[1]) {\n        addSelectionMarker(group, context, container, index);\n        context.isInSelection = false;\n    }\n\n    if (index == offsets[2]) {\n        addSelectionMarker(group, context, container, index, bundle);\n    }\n}\n\nconst getShadowTextProcessor = (bundle: InsertPointBundle): ElementProcessor<Text> => (\n    group,\n    textNode,\n    context\n) => {\n    let txt = textNode.nodeValue || '';\n    const offsets = getShadowSelectionOffsets(context, bundle, textNode);\n    const [start, end, shadow] = offsets;\n\n    const handleTextSelection = (\n        subtract: number,\n        originalOffset: number,\n        bundle?: InsertPointBundle\n    ) => {\n        addTextSegment(group, txt.substring(0, subtract), context);\n        addSelectionMarker(group, context, textNode, originalOffset, bundle);\n\n        offsets[0] -= subtract;\n        offsets[1] -= subtract;\n        offsets[2] = bundle ? -1 : offsets[2] - subtract;\n\n        txt = txt.substring(subtract);\n    };\n\n    if (\n        offsets[2] >= 0 &&\n        (offsets[2] <= offsets[0] || offsets[0] < 0) &&\n        (offsets[2] < offsets[1] || offsets[1] < 0)\n    ) {\n        handleTextSelection(offsets[2], shadow, bundle);\n    }\n\n    if (offsets[0] >= 0) {\n        handleTextSelection(offsets[0], start);\n\n        context.isInSelection = true;\n    }\n\n    if (offsets[2] >= 0 && offsets[2] > offsets[0] && (offsets[2] < offsets[1] || offsets[1] < 0)) {\n        handleTextSelection(offsets[2], shadow, bundle);\n    }\n\n    if (offsets[1] >= 0) {\n        handleTextSelection(offsets[1], end);\n\n        context.isInSelection = false;\n    }\n\n    if (offsets[2] >= 0 && offsets[2] >= offsets[1]) {\n        handleTextSelection(offsets[2], shadow, bundle);\n    }\n\n    addTextSegment(group, txt, context);\n};\n\nfunction addSelectionMarker(\n    group: ContentModelBlockGroup,\n    context: DomToModelContextWithPath,\n    container?: Node,\n    offset?: number,\n    bundle?: InsertPointBundle\n) {\n    const marker = buildSelectionMarker(group, context, container, offset);\n\n    marker.isSelected = !bundle;\n\n    const para = addSegment(group, marker, context.blockFormat, marker.format);\n\n    if (bundle && context.path) {\n        bundle.result = {\n            path: [...context.path],\n            paragraph: para,\n            marker,\n        };\n    }\n}\n\nfunction getShadowSelectionOffsets(\n    context: DomToModelContext,\n    bundle: InsertPointBundle,\n    currentContainer: Node\n): [number, number, number] {\n    const [start, end] = getRegularSelectionOffsets(context, currentContainer);\n    const shadow = bundle.input.node == currentContainer ? bundle.input.offset : -1;\n\n    return [start, end, shadow];\n}\n","import { getSelectedParagraphs } from 'roosterjs-content-model-dom';\nimport { splitSelectedParagraphByBr } from '../../modelApi/block/splitSelectedParagraphByBr';\nimport type { IEditor, ShallowMutableContentModelParagraph } from 'roosterjs-content-model-types';\n\n/**\n * Invoke a callback to format the selected paragraph using Content Model\n * @param editor The editor object\n * @param apiName Name of API this calling this function. This is mostly for logging.\n * @param setStyleCallback The callback to format the paragraph. It will be called with current selected table. If no table is selected, it will not be called.\n */\nexport function formatParagraphWithContentModel(\n    editor: IEditor,\n    apiName: string,\n    setStyleCallback: (paragraph: ShallowMutableContentModelParagraph) => void\n) {\n    editor.formatContentModel(\n        (model, context) => {\n            splitSelectedParagraphByBr(model);\n\n            const paragraphs = getSelectedParagraphs(model, true /*mutate*/);\n\n            paragraphs.forEach(setStyleCallback);\n            context.newPendingFormat = 'preserve';\n\n            return paragraphs.length > 0;\n        },\n        {\n            apiName,\n        }\n    );\n}\n","import {\n    contentModelToDom,\n    createDomToModelContext,\n    createModelToDomContext,\n    domToContentModel,\n    getSelectedSegmentsAndParagraphs,\n    mergeTextSegments,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelSegmentFormat,\n    FormattableRoot,\n    IEditor,\n    PluginEventData,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelParagraph,\n    ShallowMutableContentModelSegment,\n} from 'roosterjs-content-model-types';\nimport { adjustWordSelection } from '../../modelApi/selection/adjustWordSelection';\nimport { createEditorContextForEntity } from './createEditorContextForEntity';\n\n/**\n * Invoke a callback to format the selected segment using Content Model\n * @param editor The editor object\n * @param apiName Name of API this calling this function. This is mostly for logging.\n * @param toggleStyleCallback The callback to format the segment. It will be called with current selected table. If no table is selected, it will not be called.\n * @param segmentHasStyleCallback The callback used for checking if the given segment already has required format\n * @param includingFormatHolder True to also include format holder of list item when search selected segments\n * @param afterFormatCallback A callback to invoke after format is applied to all selected segments and before the change is applied to DOM tree\n */\nexport function formatSegmentWithContentModel(\n    editor: IEditor,\n    apiName: string,\n    toggleStyleCallback: (\n        format: ContentModelSegmentFormat,\n        isTuringOn: boolean,\n        segment: ShallowMutableContentModelSegment | null,\n        paragraph: ShallowMutableContentModelParagraph | null\n    ) => void,\n    segmentHasStyleCallback?: (\n        format: ContentModelSegmentFormat,\n        segment: ShallowMutableContentModelSegment | null,\n        paragraph: ShallowMutableContentModelParagraph | null\n    ) => boolean,\n    includingFormatHolder?: boolean,\n    afterFormatCallback?: (model: ReadonlyContentModelDocument) => void\n) {\n    editor.formatContentModel(\n        (model, context) => {\n            let segmentAndParagraphs = getSelectedSegmentsAndParagraphs(\n                model,\n                !!includingFormatHolder,\n                true /*includingEntity*/,\n                true /*mutate*/\n            );\n            let isCollapsedSelection =\n                segmentAndParagraphs.length >= 1 &&\n                segmentAndParagraphs.every(x => x[0].segmentType == 'SelectionMarker');\n\n            // 1. adjust selection to a word if selection is collapsed\n            if (isCollapsedSelection) {\n                const para = segmentAndParagraphs[0][1];\n                const path = segmentAndParagraphs[0][2];\n\n                segmentAndParagraphs = adjustWordSelection(\n                    model,\n                    segmentAndParagraphs[0][0]\n                ).map(x => [x, para, path]);\n\n                if (segmentAndParagraphs.length > 1) {\n                    isCollapsedSelection = false;\n                }\n            }\n\n            // 2. expand selection for entities if any\n            const formatsAndSegments: [\n                ContentModelSegmentFormat,\n                ShallowMutableContentModelSegment | null,\n                ShallowMutableContentModelParagraph | null\n            ][] = [];\n            const modelsFromEntities: [\n                ContentModelEntity,\n                FormattableRoot,\n                ContentModelDocument\n            ][] = [];\n\n            segmentAndParagraphs.forEach(item => {\n                if (item[0].segmentType == 'Entity') {\n                    expandEntitySelections(editor, item[0], formatsAndSegments, modelsFromEntities);\n                } else {\n                    formatsAndSegments.push([item[0].format, item[0], item[1]]);\n                }\n            });\n\n            // 3. check if we should turn format on (when not all selection has the required format already)\n            // or off (all selections already have the required format)\n            const isTurningOff = segmentHasStyleCallback\n                ? formatsAndSegments.every(([format, segment, paragraph]) =>\n                      segmentHasStyleCallback(format, segment, paragraph)\n                  )\n                : false;\n\n            // 4. invoke the callback function to apply the format\n            formatsAndSegments.forEach(([format, segment, paragraph]) => {\n                toggleStyleCallback(format, !isTurningOff, segment, paragraph);\n            });\n\n            // 5. after format is applied to all selections, invoke another callback to do some clean up before write the change back\n            afterFormatCallback?.(model);\n\n            // 6. finally merge segments if possible, to avoid fragmentation\n            formatsAndSegments.forEach(([_, __, paragraph]) => {\n                if (paragraph) {\n                    mergeTextSegments(paragraph);\n                }\n            });\n\n            // 7. Write back models that we got from entities (if any)\n            writeBackEntities(editor, modelsFromEntities);\n\n            // 8. if the selection is still collapsed, it means we didn't actually applied format, set a pending format so it can be applied when user type\n            // otherwise, write back to editor\n            if (isCollapsedSelection) {\n                context.newPendingFormat = segmentAndParagraphs[0][0].format;\n                editor.focus();\n                return false;\n            } else {\n                return formatsAndSegments.length > 0;\n            }\n        },\n        {\n            apiName,\n        }\n    );\n}\n\nfunction expandEntitySelections(\n    editor: IEditor,\n    entity: ContentModelEntity,\n    formatsAndSegments: [\n        ContentModelSegmentFormat,\n        ShallowMutableContentModelSegment | null,\n        ShallowMutableContentModelParagraph | null\n    ][],\n    modelsFromEntities: [ContentModelEntity, FormattableRoot, ContentModelDocument][]\n) {\n    const { id, entityType: type, isReadonly } = entity.entityFormat;\n\n    if (id && type) {\n        const formattableRoots: FormattableRoot[] = [];\n        const entityOperationEventData: PluginEventData<'entityOperation'> = {\n            entity: { id, type, isReadonly: !!isReadonly, wrapper: entity.wrapper },\n            operation: 'beforeFormat',\n            formattableRoots,\n        };\n\n        editor.triggerEvent('entityOperation', entityOperationEventData);\n\n        formattableRoots.forEach(root => {\n            if (entity.wrapper.contains(root.element)) {\n                const editorContext = createEditorContextForEntity(editor, entity);\n                const context = createDomToModelContext(editorContext, root.domToModelOptions);\n\n                // Treat everything as selected since the parent entity is selected\n                context.isInSelection = true;\n\n                const model = domToContentModel(root.element, context);\n                const selections = getSelectedSegmentsAndParagraphs(\n                    model,\n                    false /*includingFormatHolder*/,\n                    false /*includingEntity*/,\n                    true /*mutate*/\n                );\n\n                selections.forEach(item => {\n                    formatsAndSegments.push([item[0].format, item[0], item[1]]);\n                });\n\n                modelsFromEntities.push([entity, root, model]);\n            }\n        });\n    }\n}\n\nfunction writeBackEntities(\n    editor: IEditor,\n    modelsFromEntities: [ContentModelEntity, FormattableRoot, ContentModelDocument][]\n) {\n    modelsFromEntities.forEach(([entity, root, model]) => {\n        const editorContext = createEditorContextForEntity(editor, entity);\n        const modelToDomContext = createModelToDomContext(editorContext, root.modelToDomOptions);\n\n        contentModelToDom(editor.getDocument(), root.element, model, modelToDomContext);\n    });\n}\n","import { ensureFocusableParagraphForTable } from '../../modelApi/table/ensureFocusableParagraphForTable';\nimport {\n    createSelectionMarker,\n    hasMetadata,\n    setParagraphNotImplicit,\n    hasSelectionInBlock,\n    applyTableFormat,\n    getFirstSelectedTable,\n    normalizeTable,\n    setSelection,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    IEditor,\n    ShallowMutableContentModelTable,\n    TableSelection,\n} from 'roosterjs-content-model-types';\n\n/**\n * Invoke a callback to format the selected table using Content Model\n * @param editor The editor object\n * @param apiName Name of API this calling this function. This is mostly for logging.\n * @param callback The callback to format the table. It will be called with current selected table. If no table is selected, it will not be called.\n * @param selectionOverride Override the current selection. If we want to format a table even currently it is not selected, we can use this parameter to override current selection\n */\nexport function formatTableWithContentModel(\n    editor: IEditor,\n    apiName: string,\n    callback: (tableModel: ShallowMutableContentModelTable) => void,\n    selectionOverride?: TableSelection\n) {\n    editor.formatContentModel(\n        model => {\n            const [readonlyTableModel, path] = getFirstSelectedTable(model);\n\n            if (readonlyTableModel) {\n                const tableModel = mutateBlock(readonlyTableModel);\n\n                callback(tableModel);\n\n                if (!hasSelectionInBlock(tableModel)) {\n                    const paragraph = ensureFocusableParagraphForTable(model, path, tableModel);\n\n                    if (paragraph) {\n                        const marker = createSelectionMarker(model.format);\n\n                        paragraph.segments.unshift(marker);\n                        setParagraphNotImplicit(paragraph);\n                        setSelection(model, marker);\n                    }\n                }\n\n                normalizeTable(tableModel, model.format);\n\n                if (hasMetadata(tableModel)) {\n                    applyTableFormat(tableModel, undefined /*newFormat*/, true /*keepCellShade*/);\n                }\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName,\n            selectionOverride,\n        },\n        {\n            recalculateTableSize: 'selected',\n        }\n    );\n}\n","import { getSelectedSegmentsAndParagraphs, mutateSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelSegmentFormat,\n    ContentModelText,\n    FormatContentModelContext,\n    FormatContentModelOptions,\n    IEditor,\n    ShallowMutableContentModelDocument,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Invoke a callback to format the text segment before the selection marker using Content Model\n * @param editor The editor object\n * @param callback The callback to format the text segment.\n * @returns True if the segment before cursor is found and callback is called, otherwise false\n */\nexport function formatTextSegmentBeforeSelectionMarker(\n    editor: IEditor,\n    callback: (\n        model: ShallowMutableContentModelDocument,\n        previousSegment: ContentModelText,\n        paragraph: ShallowMutableContentModelParagraph,\n        markerFormat: ContentModelSegmentFormat,\n        context: FormatContentModelContext\n    ) => boolean,\n    options?: FormatContentModelOptions\n): boolean {\n    let result = false;\n\n    editor.formatContentModel((model, context) => {\n        const selectedSegmentsAndParagraphs = getSelectedSegmentsAndParagraphs(\n            model,\n            false /*includeFormatHolder*/\n        );\n        let rewrite = false;\n\n        if (\n            selectedSegmentsAndParagraphs.length > 0 &&\n            selectedSegmentsAndParagraphs[0][0].segmentType == 'SelectionMarker' &&\n            selectedSegmentsAndParagraphs[0][1]\n        ) {\n            mutateSegment(\n                selectedSegmentsAndParagraphs[0][1],\n                selectedSegmentsAndParagraphs[0][0],\n                (marker, paragraph, markerIndex) => {\n                    const previousSegment = paragraph.segments[markerIndex - 1];\n\n                    if (previousSegment && previousSegment.segmentType === 'Text') {\n                        result = true;\n\n                        // Preserve pending format if any when format text segment, so if there is pending format (e.g. from paste)\n                        // and some auto action happens after paste, the pending format will still take effect\n                        context.newPendingFormat = 'preserve';\n\n                        rewrite = callback(\n                            model,\n                            previousSegment,\n                            paragraph,\n                            marker.format,\n                            context\n                        );\n                    }\n                }\n            );\n        }\n\n        return rewrite;\n    }, options);\n\n    return result;\n}\n","import { toArray } from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\nexport interface CssRule {\n    selectors: string[];\n    text: string;\n}\n\n/**\n * @internal\n *\n * Splits CSS selectors, avoiding splits within parentheses\n * @param selectorText The CSS selector string\n * @return Array of trimmed selectors\n */\nfunction splitSelectors(selectorText: string) {\n    const regex = /(?![^(]*\\)),/;\n    return selectorText.split(regex).map(s => s.trim());\n}\n\n/**\n * @internal\n */\nexport function retrieveCssRules(doc: Document): CssRule[] {\n    const styles = toArray(doc.querySelectorAll('style'));\n    const result: CssRule[] = [];\n\n    styles.forEach(styleNode => {\n        const sheet = styleNode.sheet;\n\n        if (sheet) {\n            for (let ruleIndex = 0; ruleIndex < sheet.cssRules.length; ruleIndex++) {\n                const rule = sheet.cssRules[ruleIndex] as CSSStyleRule;\n\n                if (rule.type == CSSRule.STYLE_RULE && rule.selectorText) {\n                    result.push({\n                        selectors: splitSelectors(rule.selectorText),\n                        text: rule.style.cssText,\n                    });\n                }\n            }\n        }\n\n        styleNode.parentNode?.removeChild(styleNode);\n    });\n\n    return result;\n}\n\n/**\n * @internal\n */\nexport function convertInlineCss(root: ParentNode, cssRules: CssRule[]) {\n    for (let i = cssRules.length - 1; i >= 0; i--) {\n        const { selectors, text } = cssRules[i];\n\n        for (const selector of selectors) {\n            if (!selector || !selector.trim()) {\n                continue;\n            }\n\n            const nodes = toArray(root.querySelectorAll(selector));\n\n            // Always put existing styles after so that they have higher priority\n            // Which means if both global style and inline style apply to the same element,\n            // inline style will have higher priority\n            nodes.forEach(node =>\n                node.setAttribute('style', text + (node.getAttribute('style') || ''))\n            );\n        }\n    }\n}\n","import { containerSizeFormatParser } from '../../override/containerSizeFormatParser';\nimport { createDomToModelContext } from 'roosterjs-content-model-dom';\nimport { createPasteEntityProcessor } from '../../override/pasteEntityProcessor';\nimport { createPasteGeneralProcessor } from '../../override/pasteGeneralProcessor';\nimport { getRootComputedStyleForContext } from '../../coreApi/createEditorContext/getRootComputedStyleForContext';\nimport { pasteBlockEntityParser } from '../../override/pasteCopyBlockEntityParser';\nimport { pasteDisplayFormatParser } from '../../override/pasteDisplayFormatParser';\nimport { pasteTextProcessor } from '../../override/pasteTextProcessor';\nimport { pasteWhiteSpaceFormatParser } from '../../override/pasteWhiteSpaceFormatParser';\nimport type {\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    DomToModelOption,\n    DomToModelOptionForSanitizing,\n} from 'roosterjs-content-model-types';\n\nconst DefaultSanitizingOption: DomToModelOptionForSanitizing = {\n    processorOverride: {},\n    formatParserOverride: {},\n    additionalFormatParsers: {},\n    additionalAllowedTags: [],\n    additionalDisallowedTags: [],\n    styleSanitizers: {},\n    attributeSanitizers: {},\n};\n\n/**\n * @internal\n */\nexport function createDomToModelContextForSanitizing(\n    document: Document,\n    defaultFormat?: ContentModelSegmentFormat,\n    defaultOption?: DomToModelOption,\n    additionalSanitizingOption?: Partial<DomToModelOptionForSanitizing>\n): DomToModelContext {\n    const sanitizingOption: DomToModelOptionForSanitizing = {\n        ...DefaultSanitizingOption,\n        ...additionalSanitizingOption,\n    };\n\n    return createDomToModelContext(\n        {\n            defaultFormat,\n            ...getRootComputedStyleForContext(document),\n            experimentalFeatures: [],\n        },\n        defaultOption,\n        {\n            processorOverride: {\n                '#text': pasteTextProcessor,\n                entity: createPasteEntityProcessor(sanitizingOption),\n                '*': createPasteGeneralProcessor(sanitizingOption),\n            },\n            formatParserOverride: {\n                display: pasteDisplayFormatParser,\n                whiteSpace: pasteWhiteSpaceFormatParser,\n            },\n            additionalFormatParsers: {\n                container: [containerSizeFormatParser],\n                entity: [pasteBlockEntityParser],\n            },\n        },\n        sanitizingOption\n    );\n}\n","import { convertInlineCss, retrieveCssRules } from './convertInlineCss';\nimport { createDOMCreator } from '../../utils/domCreator';\nimport { createDomToModelContextForSanitizing } from './createDomToModelContextForSanitizing';\nimport { createEmptyModel, domToContentModel, parseFormat } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n    DomToModelOptionForSanitizing,\n    TrustedHTMLHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create Content Model from HTML string\n * @param html The source HTML string\n * @param options Options for DOM to Content Model conversion\n * @param trustedHTMLHandler A string handler to convert string to trusted string\n * @returns A Content Model Document object that contains the Content Model from the give HTML, or undefined if failed to parse the source HTML\n */\nexport function createModelFromHtml(\n    html: string,\n    options?: Partial<DomToModelOptionForSanitizing>,\n    trustedHTMLHandler?: TrustedHTMLHandler,\n    defaultSegmentFormat?: ContentModelSegmentFormat\n): ContentModelDocument {\n    const doc = html ? createDOMCreator(trustedHTMLHandler).htmlToDOM(html) : null;\n\n    if (doc?.body) {\n        const context = createDomToModelContextForSanitizing(\n            doc,\n            defaultSegmentFormat,\n            undefined /*defaultOptions*/,\n            options\n        );\n        const cssRules = doc ? retrieveCssRules(doc) : [];\n\n        convertInlineCss(doc, cssRules);\n        parseFormat(doc.body, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n\n        return domToContentModel(doc.body, context);\n    } else {\n        return createEmptyModel(defaultSegmentFormat);\n    }\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { ValueSanitizer } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const AllowedTags: ReadonlyArray<string> = [\n    'a',\n    'abbr',\n    'address',\n    'area',\n    'article',\n    'aside',\n    'b',\n    'bdi',\n    'bdo',\n    'blockquote',\n    'body',\n    'br',\n    'button',\n    'canvas',\n    'caption',\n    'center',\n    'cite',\n    'code',\n    'col',\n    'colgroup',\n    'data',\n    'datalist',\n    'dd',\n    'del',\n    'details',\n    'dfn',\n    'dialog',\n    'dir',\n    'div',\n    'dl',\n    'dt',\n    'em',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'font',\n    'footer',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'head',\n    'header',\n    'hgroup',\n    'hr',\n    'html',\n    'i',\n    'img',\n    'input',\n    'ins',\n    'kbd',\n    'label',\n    'legend',\n    'li',\n    'main',\n    'map',\n    'mark',\n    'menu',\n    'menuitem',\n    'meter',\n    'nav',\n    'ol',\n    'optgroup',\n    'option',\n    'output',\n    'p',\n    'picture',\n    'pre',\n    'progress',\n    'q',\n    'rp',\n    'rt',\n    'ruby',\n    's',\n    'samp',\n    'section',\n    'select',\n    'small',\n    'span',\n    'strike',\n    'strong',\n    'sub',\n    'summary',\n    'sup',\n    'table',\n    'tbody',\n    'td',\n    'textarea',\n    'tfoot',\n    'th',\n    'thead',\n    'time',\n    'tr',\n    'tt',\n    'u',\n    'ul',\n    'var',\n    'wbr',\n    'xmp',\n];\n\n/**\n * @internal\n */\nexport const DisallowedTags: ReadonlyArray<string> = [\n    'applet',\n    'audio',\n    'base',\n    'basefont',\n    'embed',\n    'frame',\n    'frameset',\n    'iframe',\n    'link',\n    'meta',\n    'noscript',\n    'object',\n    'param',\n    'script',\n    'slot',\n    'source',\n    'style',\n    'template',\n    'title',\n    'track',\n    'video',\n];\n\nconst VARIABLE_REGEX = /^\\s*var\\(\\s*[a-zA-Z0-9-_]+\\s*(,\\s*(.*))?\\)\\s*$/;\nconst VARIABLE_PREFIX = 'var(';\n\nconst AllowedAttributes = [\n    'accept',\n    'align',\n    'alt',\n    'checked',\n    'cite',\n    'class',\n    'color',\n    'cols',\n    'colspan',\n    'contextmenu',\n    'coords',\n    'datetime',\n    'default',\n    'dir',\n    'dirname',\n    'disabled',\n    'download',\n    'face',\n    'headers',\n    'height',\n    'hidden',\n    'high',\n    'href',\n    'hreflang',\n    'ismap',\n    'kind',\n    'label',\n    'lang',\n    'list',\n    'low',\n    'max',\n    'maxlength',\n    'media',\n    'min',\n    'multiple',\n    'open',\n    'optimum',\n    'pattern',\n    'placeholder',\n    'readonly',\n    'rel',\n    'required',\n    'reversed',\n    'rows',\n    'rowspan',\n    'scope',\n    'selected',\n    'shape',\n    'size',\n    'sizes',\n    'span',\n    'spellcheck',\n    'src',\n    'srclang',\n    'srcset',\n    'start',\n    'step',\n    'style',\n    'tabindex',\n    'target',\n    'title',\n    'translate',\n    'type',\n    'usemap',\n    'valign',\n    'value',\n    'width',\n    'wrap',\n    'bgColor',\n];\n\nconst DefaultStyleValue: { [name: string]: string } = {\n    'background-color': 'transparent',\n    'border-bottom-color': 'rgb(0, 0, 0)',\n    'border-bottom-style': 'none',\n    'border-bottom-width': '0px',\n    'border-image-outset': '0',\n    'border-image-repeat': 'stretch',\n    'border-image-slice': '100%',\n    'border-image-source': 'none',\n    'border-image-width': '1',\n    'border-left-color': 'rgb(0, 0, 0)',\n    'border-left-style': 'none',\n    'border-left-width': '0px',\n    'border-right-color': 'rgb(0, 0, 0)',\n    'border-right-style': 'none',\n    'border-right-width': '0px',\n    'border-top-color': 'rgb(0, 0, 0)',\n    'border-top-style': 'none',\n    'border-top-width': '0px',\n    'outline-color': 'transparent',\n    'outline-style': 'none',\n    'outline-width': '0px',\n    overflow: 'visible',\n    '-webkit-text-stroke-width': '0px',\n    'word-wrap': 'break-word',\n    'margin-left': '0px',\n    'margin-right': '0px',\n    padding: '0px',\n    'padding-top': '0px',\n    'padding-left': '0px',\n    'padding-right': '0px',\n    'padding-bottom': '0px',\n    border: '0px',\n    'border-top': '0px',\n    'border-left': '0px',\n    'border-right': '0px',\n    'border-bottom': '0px',\n    'vertical-align': 'baseline',\n    float: 'none',\n    'font-style': 'normal',\n    'font-variant-ligatures': 'normal',\n    'font-variant-caps': 'normal',\n    'font-weight': '400',\n    'letter-spacing': 'normal',\n    orphans: '2',\n    'text-align': 'start',\n    'text-indent': '0px',\n    'text-transform': 'none',\n    widows: '2',\n    'word-spacing': '0px',\n    'white-space': 'normal',\n};\n\n/**\n * @internal\n */\nexport function sanitizeElement(\n    element: HTMLElement,\n    allowedTags: ReadonlyArray<string>,\n    disallowedTags: ReadonlyArray<string>,\n    styleSanitizers?: Readonly<Record<string, ValueSanitizer>>,\n    attributeSanitizers?: Readonly<Record<string, ValueSanitizer>>\n): HTMLElement | null {\n    const tag = element.tagName.toLowerCase();\n    const sanitizedElement =\n        disallowedTags.indexOf(tag) >= 0\n            ? null\n            : createSanitizedElement(\n                  element.ownerDocument,\n                  allowedTags.indexOf(tag) >= 0 ? tag : 'span',\n                  element.attributes,\n                  styleSanitizers,\n                  attributeSanitizers\n              );\n\n    if (sanitizedElement) {\n        for (let child = element.firstChild; child; child = child.nextSibling) {\n            const newChild = isNodeOfType(child, 'ELEMENT_NODE')\n                ? sanitizeElement(\n                      child,\n                      allowedTags,\n                      disallowedTags,\n                      styleSanitizers,\n                      attributeSanitizers\n                  )\n                : isNodeOfType(child, 'TEXT_NODE')\n                ? child.cloneNode()\n                : null;\n\n            if (newChild) {\n                sanitizedElement?.appendChild(newChild);\n            }\n        }\n    }\n\n    return sanitizedElement;\n}\n\n/**\n * @internal\n */\nexport function createSanitizedElement(\n    doc: Document,\n    tag: string,\n    attributes: NamedNodeMap,\n    styleSanitizers?: Readonly<Record<string, ValueSanitizer>>,\n    attributeSanitizers?: Readonly<Record<string, ValueSanitizer>>\n): HTMLElement {\n    const element = doc.createElement(tag);\n\n    for (let i = 0; i < attributes.length; i++) {\n        const attribute = attributes[i];\n        const name = attribute.name.toLowerCase().trim();\n        const value = attribute.value;\n\n        const sanitizer = attributeSanitizers?.[name];\n        const newValue =\n            name == 'style'\n                ? processStyles(tag, value, styleSanitizers)\n                : typeof sanitizer == 'function'\n                ? sanitizer(value, tag)\n                : typeof sanitizer === 'boolean'\n                ? sanitizer\n                    ? value\n                    : null\n                : AllowedAttributes.indexOf(name) >= 0 || name.indexOf('data-') == 0\n                ? value\n                : null;\n\n        if (\n            newValue !== null &&\n            newValue !== undefined &&\n            !newValue.match(/s\\n*c\\n*r\\n*i\\n*p\\n*t\\n*:/i) // match script: with any NewLine inside. Browser will ignore those NewLine char and still treat it as script prefix\n        ) {\n            element.setAttribute(name, newValue);\n        }\n    }\n\n    return element;\n}\n\nfunction processStyles(\n    tagName: string,\n    value: string,\n    styleSanitizers?: Readonly<Record<string, ValueSanitizer>>\n) {\n    const pairs = value.split(';');\n    const result: string[] = [];\n\n    pairs.forEach(pair => {\n        const valueIndex = pair.indexOf(':');\n        const name = pair.slice(0, valueIndex).trim();\n        let value: string = pair.slice(valueIndex + 1).trim();\n\n        if (name && value) {\n            if (isCssVariable(value)) {\n                value = processCssVariable(value);\n            }\n\n            const sanitizer = styleSanitizers?.[name];\n            const sanitizedValue =\n                typeof sanitizer == 'function'\n                    ? sanitizer(value, tagName)\n                    : sanitizer === false\n                    ? null\n                    : value;\n\n            if (\n                !!sanitizedValue &&\n                sanitizedValue != 'inherit' &&\n                sanitizedValue != 'initial' &&\n                sanitizedValue.indexOf('expression') < 0 &&\n                !name.startsWith('-') &&\n                DefaultStyleValue[name] != sanitizedValue\n            ) {\n                result.push(`${name}:${sanitizedValue}`);\n            }\n        }\n    });\n\n    return result.join(';');\n}\n\nfunction processCssVariable(value: string): string {\n    const match = VARIABLE_REGEX.exec(value);\n    return match?.[2] || ''; // Without fallback value, we don't know what does the original value mean, so ignore it\n}\n\nfunction isCssVariable(value: string): boolean {\n    return value.indexOf(VARIABLE_PREFIX) == 0;\n}\n","import {\n    contentModelToDom,\n    contentModelToText,\n    createModelToDomContext,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ExportContentMode,\n    IEditor,\n    ModelToDomOption,\n    ModelToTextCallbacks,\n} from 'roosterjs-content-model-types';\n\n/**\n * Export HTML content. If there are entities, this will cause EntityOperation event with option = 'replaceTemporaryContent' to get a dehydrated entity\n * @param editor The editor to get content from\n * @param mode Specify HTML to get plain text result. This is the default option\n * @param options @optional Options for Model to DOM conversion\n */\nexport function exportContent(editor: IEditor, mode?: 'HTML', options?: ModelToDomOption): string;\n\n/**\n * Export plain text content\n * @param editor The editor to get content from\n * @param mode Specify PlainText to get plain text result\n * @param callbacks @optional Callbacks to customize conversion behavior\n */\nexport function exportContent(\n    editor: IEditor,\n    mode: 'PlainText',\n    callbacks?: ModelToTextCallbacks\n): string;\n\n/**\n * Export plain text using editor's textContent property directly\n * @param editor The editor to get content from\n * @param mode Specify PlainTextFast to get plain text result using textContent property\n * @param options @optional Options for Model to DOM conversion\n */\nexport function exportContent(editor: IEditor, mode: 'PlainTextFast'): string;\n\nexport function exportContent(\n    editor: IEditor,\n    mode: ExportContentMode = 'HTML',\n    optionsOrCallbacks?: ModelToDomOption | ModelToTextCallbacks\n): string {\n    if (mode == 'PlainTextFast') {\n        return editor.getDOMHelper().getTextContent();\n    } else {\n        const model = editor.getContentModelCopy('clean');\n\n        if (mode == 'PlainText') {\n            return contentModelToText(\n                model,\n                undefined /*separator*/,\n                optionsOrCallbacks as ModelToTextCallbacks\n            );\n        } else {\n            const doc = editor.getDocument();\n            const div = doc.createElement('div');\n\n            contentModelToDom(\n                doc,\n                div,\n                model,\n                createModelToDomContext(\n                    undefined /*editorContext*/,\n                    optionsOrCallbacks as ModelToDomOption\n                )\n            );\n\n            editor.triggerEvent('extractContentWithDom', { clonedRoot: div }, true /*broadcast*/);\n\n            return div.innerHTML;\n        }\n    }\n}\n","const HtmlCommentStart = '\\x3C!--';\nconst HtmlCommentStart2 = '<!--';\nconst HtmlCommentEnd = '-->';\nconst styleTag = '<style';\nconst styleClosingTag = '</style>';\nconst nonWordCharacterRegex = /\\W/;\n\n/**\n * @internal\n * Exported only for unit test\n */\nexport function cleanHtmlComments(html: string) {\n    let { styleIndex, styleEndIndex } = extractHtmlIndexes(html);\n\n    while (styleIndex > -1) {\n        html = removeCommentsFromHtml(html, HtmlCommentStart, styleEndIndex, styleIndex);\n        html = removeCommentsFromHtml(html, HtmlCommentStart2, styleEndIndex, styleIndex);\n        html = removeCommentsFromHtml(html, HtmlCommentEnd, styleEndIndex, styleIndex);\n\n        ({ styleIndex, styleEndIndex } = extractHtmlIndexes(html, styleEndIndex + 1));\n    }\n\n    return html;\n}\n\nfunction extractHtmlIndexes(html: string, startIndex: number = 0) {\n    const htmlLowercase = html.toLowerCase();\n    let styleIndex = htmlLowercase.indexOf(styleTag, startIndex);\n    let currentIndex = styleIndex + styleTag.length;\n    let nextChar = html.substring(currentIndex, currentIndex + 1);\n\n    while (!nonWordCharacterRegex.test(nextChar) && styleIndex > -1) {\n        styleIndex = htmlLowercase.indexOf(styleTag, styleIndex + 1);\n        currentIndex = styleIndex + styleTag.length;\n        nextChar = html.substring(currentIndex, currentIndex + 1);\n    }\n\n    const styleEndIndex = htmlLowercase.indexOf(styleClosingTag, startIndex);\n    return { styleIndex, styleEndIndex };\n}\n\nfunction removeCommentsFromHtml(\n    html: string,\n    marker: string,\n    endId: number,\n    startId: number\n): string {\n    let id = html.indexOf(marker, startId);\n    while (id > -1 && id < endId) {\n        html = html.substring(0, id) + html.substring(id + marker.length);\n        id = html.indexOf(marker, id + 1);\n    }\n    return html;\n}\n","import { moveChildNodes, wrap } from 'roosterjs-content-model-dom';\nimport type { ClipboardData, PasteType } from 'roosterjs-content-model-types';\n\nconst NBSP_HTML = '\\u00A0';\nconst ENSP_HTML = '\\u2002';\nconst TAB_SPACES = 6;\n\n/**\n * @internal\n */\nexport function createPasteFragment(\n    document: Document,\n    clipboardData: ClipboardData,\n    pasteType: PasteType,\n    root: HTMLElement | undefined\n): DocumentFragment {\n    if (!clipboardData.text && pasteType === 'asPlainText' && root) {\n        clipboardData.text = root.textContent || clipboardData.text;\n    }\n\n    const { imageDataUri, text } = clipboardData;\n    const fragment = document.createDocumentFragment();\n\n    if (\n        (pasteType == 'asImage' && imageDataUri) ||\n        (pasteType != 'asPlainText' && !text && imageDataUri)\n    ) {\n        // Paste image\n        const img = document.createElement('img');\n        img.style.maxWidth = '100%';\n        img.src = imageDataUri;\n        fragment.appendChild(img);\n    } else if (pasteType != 'asPlainText' && root) {\n        moveChildNodes(fragment, root);\n    } else if (text) {\n        text.split('\\n').forEach((line, index, lines) => {\n            line = line\n                .replace(/^ /g, NBSP_HTML)\n                .replace(/ $/g, NBSP_HTML)\n                .replace(/\\r/g, '')\n                .replace(/ {2}/g, ' ' + NBSP_HTML);\n\n            if (line.includes('\\t')) {\n                line = transformTabCharacters(line);\n            }\n\n            const textNode = document.createTextNode(line);\n\n            // There are 3 scenarios:\n            // 1. Single line: Paste as it is\n            // 2. Two lines: Add <br> between the lines\n            // 3. 3 or More lines, For first and last line, paste as it is. For middle lines, wrap with DIV, and add BR if it is empty line\n            if (lines.length == 2 && index == 0) {\n                // 1 of 2 lines scenario, add BR\n                fragment.appendChild(textNode);\n                fragment.appendChild(document.createElement('br'));\n            } else if (index > 0 && index < lines.length - 1) {\n                // Middle line of >=3 lines scenario, wrap with DIV\n                fragment.appendChild(\n                    wrap(document, line == '' ? document.createElement('br') : textNode, 'div')\n                );\n            } else {\n                // All others, paste as it is\n                fragment.appendChild(textNode);\n            }\n        });\n    }\n\n    return fragment;\n}\n\n/**\n * Transform \\t characters into EN SPACE characters\n * @param input string NOT containing \\n characters\n * @example t(\"\\thello\", 2) => \"&ensp;&ensp;&ensp;&ensp;hello\"\n */\nfunction transformTabCharacters(input: string, initialOffset: number = 0) {\n    let line = input;\n    let tIndex: number;\n    while ((tIndex = line.indexOf('\\t')) != -1) {\n        const lineBefore = line.slice(0, tIndex);\n        const lineAfter = line.slice(tIndex + 1);\n        const tabCount = TAB_SPACES - ((lineBefore.length + initialOffset) % TAB_SPACES);\n        const tabStr = Array(tabCount).fill(ENSP_HTML).join('');\n        line = lineBefore + tabStr + lineAfter;\n    }\n    return line;\n}\n","import type { HtmlFromClipboard } from './retrieveHtmlInfo';\nimport type {\n    BeforePasteEvent,\n    ClipboardData,\n    DomToModelOptionForSanitizing,\n    PasteType,\n    IEditor,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function generatePasteOptionFromPlugins(\n    editor: IEditor,\n    clipboardData: ClipboardData,\n    fragment: DocumentFragment,\n    htmlFromClipboard: HtmlFromClipboard,\n    pasteType: PasteType\n): BeforePasteEvent {\n    const domToModelOption: DomToModelOptionForSanitizing = {\n        additionalAllowedTags: [],\n        additionalDisallowedTags: [],\n        additionalFormatParsers: {},\n        formatParserOverride: {},\n        processorOverride: {},\n        styleSanitizers: {},\n        attributeSanitizers: {},\n    };\n\n    const event: BeforePasteEvent = {\n        eventType: 'beforePaste',\n        clipboardData,\n        fragment,\n        htmlBefore: htmlFromClipboard.htmlBefore ?? '',\n        htmlAfter: htmlFromClipboard.htmlAfter ?? '',\n        htmlAttributes: htmlFromClipboard.metadata,\n        pasteType: pasteType,\n        domToModelOption,\n        containsBlockElements: !!htmlFromClipboard.containsBlockElements,\n    };\n\n    return editor.triggerEvent('beforePaste', event, true /* broadcast */);\n}\n","import { createDomToModelContextForSanitizing } from '../createModelFromHtml/createDomToModelContextForSanitizing';\nimport {\n    ChangeSource,\n    EmptySegmentFormat,\n    cloneModel,\n    domToContentModel,\n    getSegmentTextFormat,\n    getSelectedSegments,\n    mergeModel,\n} from 'roosterjs-content-model-dom';\nimport type {\n    BeforePasteEvent,\n    CloneModelOptions,\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n    IEditor,\n    MergeModelOption,\n    PasteType,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelDocument,\n} from 'roosterjs-content-model-types';\n\nconst BlackColor = 'rgb(0,0,0)';\n\nconst CloneOption: CloneModelOptions = {\n    includeCachedElement: (node, type) => (type == 'cache' ? undefined : node),\n};\n\n/**\n * @internal\n */\nexport function cloneModelForPaste(model: ReadonlyContentModelDocument) {\n    return cloneModel(model, CloneOption);\n}\n\n/**\n * @internal\n */\nexport function mergePasteContent(\n    editor: IEditor,\n    eventResult: BeforePasteEvent,\n    isFirstPaste: boolean\n) {\n    const {\n        fragment,\n        domToModelOption,\n        customizedMerge,\n        pasteType,\n        clipboardData,\n        containsBlockElements,\n    } = eventResult;\n\n    editor.formatContentModel(\n        (model, context) => {\n            if (!isFirstPaste && clipboardData.modelBeforePaste) {\n                const clonedModel = cloneModelForPaste(clipboardData.modelBeforePaste);\n                model.blocks = clonedModel.blocks;\n            }\n\n            const domToModelContext = createDomToModelContextForSanitizing(\n                editor.getDocument(),\n                undefined /*defaultFormat*/,\n                editor.getEnvironment().domToModelSettings.customized,\n                domToModelOption\n            );\n\n            domToModelContext.segmentFormat = getSegmentFormatForPaste(model, pasteType);\n\n            const pasteModel = domToContentModel(fragment, domToModelContext);\n            const mergeOption: MergeModelOption = {\n                mergeFormat: pasteType == 'mergeFormat' ? 'keepSourceEmphasisFormat' : 'none',\n                mergeTable: shouldMergeTable(pasteModel),\n                addParagraphAfterMergedContent: containsBlockElements,\n            };\n\n            const insertPoint = customizedMerge\n                ? customizedMerge(model, pasteModel)\n                : mergeModel(model, pasteModel, context, mergeOption);\n\n            if (insertPoint) {\n                context.newPendingFormat = {\n                    ...EmptySegmentFormat,\n                    ...model.format,\n                    ...(pasteType == 'normal' && !containsBlockElements\n                        ? getLastSegmentFormat(pasteModel)\n                        : insertPoint.marker.format),\n                };\n            }\n\n            return true;\n        },\n        {\n            changeSource: ChangeSource.Paste,\n            getChangeData: () => clipboardData,\n            scrollCaretIntoView: true,\n            apiName: 'paste',\n        }\n    );\n}\n\nfunction getSegmentFormatForPaste(\n    model: ShallowMutableContentModelDocument,\n    pasteType: PasteType\n): ContentModelSegmentFormat {\n    const selectedSegment = getSelectedSegments(model, true /*includeFormatHolder*/)[0];\n\n    if (selectedSegment) {\n        const result = getSegmentTextFormat(selectedSegment);\n        if (pasteType == 'normal') {\n            // When using normal paste (Keep source formatting) set the default text color to black when creating the\n            // Model from the clipboard content, so the elements that do not contain any text color in their style\n            // Are set to black. Otherwise, These segments would get the selected segments format or the default text set in the content.\n            result.textColor = BlackColor;\n        }\n\n        return result;\n    }\n\n    return {};\n}\n\nfunction shouldMergeTable(pasteModel: ContentModelDocument): boolean | undefined {\n    // If model contains a table and a paragraph element after the table with a single BR segment, remove the Paragraph after the table\n    if (\n        pasteModel.blocks.length == 2 &&\n        pasteModel.blocks[0].blockType === 'Table' &&\n        pasteModel.blocks[1].blockType === 'Paragraph' &&\n        pasteModel.blocks[1].segments.length === 1 &&\n        pasteModel.blocks[1].segments[0].segmentType === 'Br'\n    ) {\n        pasteModel.blocks.splice(1);\n    }\n    // Only merge table when the document contain a single table.\n    return pasteModel.blocks.length === 1 && pasteModel.blocks[0].blockType === 'Table';\n}\n\nfunction getLastSegmentFormat(pasteModel: ContentModelDocument): ContentModelSegmentFormat {\n    if (pasteModel.blocks.length == 1) {\n        const [firstBlock] = pasteModel.blocks;\n\n        if (firstBlock.blockType == 'Paragraph') {\n            const segment = firstBlock.segments[firstBlock.segments.length - 1];\n\n            return {\n                ...segment.format,\n            };\n        }\n    }\n\n    return {};\n}\n","import { cleanHtmlComments } from './cleanHtmlComments';\nimport { cloneModelForPaste, mergePasteContent } from './mergePasteContent';\nimport { convertInlineCss } from '../createModelFromHtml/convertInlineCss';\nimport { createPasteFragment } from './createPasteFragment';\nimport { generatePasteOptionFromPlugins } from './generatePasteOptionFromPlugins';\nimport { retrieveHtmlInfo } from './retrieveHtmlInfo';\nimport type {\n    PasteTypeOrGetter,\n    ClipboardData,\n    IEditor,\n    DOMCreator,\n} from 'roosterjs-content-model-types';\n\n/**\n * Paste into editor using a clipboardData object\n * @param editor The Editor object.\n * @param clipboardData Clipboard data retrieved from clipboard\n * @param pasteTypeOrGetter Type of content to paste or function that returns the Paste Type to use based on the document and the clipboard Data. @default normal\n */\nexport function paste(\n    editor: IEditor,\n    clipboardData: ClipboardData,\n    pasteTypeOrGetter: PasteTypeOrGetter = 'normal'\n) {\n    editor.focus();\n    let isFirstPaste = false;\n\n    if (!clipboardData.modelBeforePaste) {\n        isFirstPaste = true;\n\n        editor.formatContentModel(model => {\n            clipboardData.modelBeforePaste = cloneModelForPaste(model);\n\n            return false;\n        });\n    }\n\n    // 1. Prepare variables\n    const domCreator = editor.getDOMCreator();\n    if (!domCreator.isBypassed && clipboardData.rawHtml) {\n        clipboardData.rawHtml = cleanHtmlComments(clipboardData.rawHtml);\n    }\n    const doc = createDOMFromHtml(clipboardData.rawHtml, domCreator);\n    const pasteType =\n        typeof pasteTypeOrGetter == 'function'\n            ? pasteTypeOrGetter(doc, clipboardData)\n            : pasteTypeOrGetter;\n\n    // 2. Handle HTML from clipboard\n    const htmlFromClipboard = retrieveHtmlInfo(doc, clipboardData);\n\n    // 3. Create target fragment\n    const sourceFragment = createPasteFragment(\n        editor.getDocument(),\n        clipboardData,\n        pasteType,\n        (clipboardData.rawHtml == clipboardData.html\n            ? doc\n            : createDOMFromHtml(clipboardData.html, domCreator)\n        )?.body\n    );\n\n    // 4. Trigger BeforePaste event to allow plugins modify the fragment\n    const eventResult = generatePasteOptionFromPlugins(\n        editor,\n        clipboardData,\n        sourceFragment,\n        htmlFromClipboard,\n        pasteType\n    );\n\n    // 5. Convert global CSS to inline CSS\n    convertInlineCss(eventResult.fragment, htmlFromClipboard.globalCssRules);\n\n    // 6. Merge pasted content into main Content Model\n    mergePasteContent(editor, eventResult, isFirstPaste);\n}\n\nfunction createDOMFromHtml(\n    html: string | null | undefined,\n    domCreator: DOMCreator\n): Document | null {\n    return html ? domCreator.htmlToDOM(html) : null;\n}\n","import { isBlockElement, isNodeOfType, toArray } from 'roosterjs-content-model-dom';\nimport { retrieveCssRules } from '../createModelFromHtml/convertInlineCss';\nimport type { ClipboardData } from 'roosterjs-content-model-types';\nimport type { CssRule } from '../createModelFromHtml/convertInlineCss';\n\nconst START_FRAGMENT = '<!--StartFragment-->';\nconst END_FRAGMENT = '<!--EndFragment-->';\n\n/**\n * @internal\n */\nexport interface HtmlFromClipboard {\n    metadata: Record<string, string>;\n    globalCssRules: CssRule[];\n    htmlBefore?: string;\n    htmlAfter?: string;\n    containsBlockElements?: boolean;\n}\n\n/**\n * @internal\n */\nexport function retrieveHtmlInfo(\n    doc: Document | null,\n    clipboardData: Partial<ClipboardData>\n): HtmlFromClipboard {\n    let result: HtmlFromClipboard = {\n        metadata: {},\n        globalCssRules: [],\n    };\n\n    if (doc) {\n        result = {\n            ...retrieveHtmlStrings(clipboardData),\n            globalCssRules: retrieveCssRules(doc),\n            metadata: retrieveMetadata(doc),\n            containsBlockElements: checkBlockElements(doc),\n        };\n\n        clipboardData.htmlFirstLevelChildTags = retrieveTopLevelTags(doc);\n    }\n\n    return result;\n}\n\nfunction retrieveTopLevelTags(doc: Document): string[] {\n    const topLevelTags: string[] = [];\n\n    for (let child = doc.body.firstChild; child; child = child.nextSibling) {\n        if (isNodeOfType(child, 'TEXT_NODE')) {\n            const trimmedString = child.nodeValue?.replace(/(\\r\\n|\\r|\\n)/gm, '').trim();\n\n            if (trimmedString) {\n                topLevelTags.push(''); // Push an empty string as tag for text node\n            }\n        } else if (isNodeOfType(child, 'ELEMENT_NODE')) {\n            topLevelTags.push(child.tagName);\n        }\n    }\n\n    return topLevelTags;\n}\n\nfunction retrieveMetadata(doc: Document): Record<string, string> {\n    const result: Record<string, string> = {};\n    const attributes = doc.querySelector('html')?.attributes;\n\n    (attributes ? toArray(attributes) : []).forEach(attr => {\n        result[attr.name] = attr.value;\n    });\n\n    toArray(doc.querySelectorAll('meta')).forEach(meta => {\n        result[meta.name] = meta.content;\n    });\n\n    return result;\n}\n\nfunction retrieveHtmlStrings(\n    clipboardData: Partial<ClipboardData>\n): {\n    htmlBefore: string;\n    htmlAfter: string;\n} {\n    const rawHtml = clipboardData.rawHtml ?? '';\n    const startIndex = rawHtml.indexOf(START_FRAGMENT);\n    const endIndex = rawHtml.lastIndexOf(END_FRAGMENT);\n    let htmlBefore = '';\n    let htmlAfter = '';\n\n    if (startIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\n        htmlBefore = rawHtml.substring(0, startIndex);\n        htmlAfter = rawHtml.substring(endIndex + END_FRAGMENT.length);\n        clipboardData.html = rawHtml.substring(startIndex + START_FRAGMENT.length, endIndex);\n    } else {\n        clipboardData.html = rawHtml;\n    }\n\n    return { htmlBefore, htmlAfter };\n}\n\nfunction checkBlockElements(doc: Document): boolean {\n    const elements = toArray(doc.body.querySelectorAll('*'));\n\n    return elements.some(el => isNodeOfType(el, 'ELEMENT_NODE') && isBlockElement(el));\n}\n","import type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Redo to next undo snapshot\n * @param editor The editor to undo with\n */\nexport function redo(editor: IEditor): void {\n    editor.focus();\n\n    const manager = editor.getSnapshotsManager();\n    const snapshot = manager.move(1);\n\n    if (snapshot) {\n        editor.restoreSnapshot(snapshot);\n    }\n}\n","import type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * Undo to last undo snapshot\n * @param editor The editor to undo with\n */\nexport function undo(editor: IEditor): void {\n    editor.focus();\n\n    const manager = editor.getSnapshotsManager();\n\n    if (manager.hasNewContent) {\n        editor.takeSnapshot();\n    }\n\n    const snapshot = manager.move(-1);\n\n    if (snapshot) {\n        editor.restoreSnapshot(snapshot);\n    }\n}\n","import { findClosestEntityWrapper, parseEntityFormat } from 'roosterjs-content-model-dom';\nimport type {\n    AddUndoSnapshot,\n    EntityOperationEvent,\n    Snapshot,\n} from 'roosterjs-content-model-types';\nimport { createSnapshotSelection } from './createSnapshotSelection';\nimport { getPath } from './getPath';\n\n/**\n * @internal\n * Add an undo snapshot to current undo snapshot stack\n * @param core The EditorCore object\n * @param canUndoByBackspace True if this action can be undone when user press Backspace key (aka Auto Complete).\n * @param entityStates @optional Entity states related to this snapshot.\n * Each entity state will cause an EntityOperation event with operation = EntityOperation.UpdateEntityState\n * when undo/redo to this snapshot\n */\nexport const addUndoSnapshot: AddUndoSnapshot = (core, canUndoByBackspace, entityStates) => {\n    const { lifecycle, physicalRoot, logicalRoot, undo } = core;\n    let snapshot: Snapshot | null = null;\n\n    if (!lifecycle.shadowEditFragment) {\n        // Need to create snapshot selection before retrieve innerHTML since HTML can be changed during creating selection when normalize table\n        const selection = createSnapshotSelection(core);\n        const html = physicalRoot.innerHTML;\n\n        // Give plugins the chance to share entity states to include in the snapshot if the logical root is in an entity\n        if (logicalRoot !== physicalRoot) {\n            const entityWrapper = findClosestEntityWrapper(logicalRoot, core.domHelper);\n            if (!entityStates && entityWrapper) {\n                const entityFormat = parseEntityFormat(entityWrapper);\n                if (entityFormat.entityType && entityFormat.id) {\n                    const event = <EntityOperationEvent>{\n                        eventType: 'entityOperation',\n                        operation: 'snapshotEntityState',\n                        entity: {\n                            type: entityFormat.entityType,\n                            id: entityFormat.id,\n                            wrapper: entityWrapper,\n                            isReadonly: entityFormat.isReadonly,\n                        },\n                        state: undefined,\n                    };\n\n                    core.api.triggerEvent(core, event, false);\n\n                    // Copy out any entity states from the plugins\n                    if (event.state) {\n                        entityStates = [\n                            {\n                                type: entityFormat.entityType,\n                                id: entityFormat.id,\n                                state: event.state,\n                            },\n                        ];\n                    }\n                }\n            }\n        }\n\n        snapshot = {\n            html,\n            entityStates,\n            isDarkMode: !!lifecycle.isDarkMode,\n            selection,\n        };\n\n        if (logicalRoot !== physicalRoot) {\n            snapshot.logicalRootPath = getPath(logicalRoot, 0, physicalRoot);\n        }\n\n        undo.snapshotsManager.addSnapshot(snapshot, !!canUndoByBackspace);\n        undo.snapshotsManager.hasNewContent = false;\n    }\n\n    return snapshot;\n};\n","import { isElementOfType, isNodeOfType, moveChildNodes } from 'roosterjs-content-model-dom';\nimport type { EditorCore, SnapshotSelection } from 'roosterjs-content-model-types';\nimport { getPath } from './getPath';\n\n/**\n * @internal\n */\nexport function createSnapshotSelection(core: EditorCore): SnapshotSelection {\n    const { physicalRoot, api } = core;\n    const selection = api.getDOMSelection(core);\n\n    // Normalize tables to ensure they have TBODY element between TABLE and TR so that the selection path will include correct values\n    if (selection?.type == 'range') {\n        const { startContainer, startOffset, endContainer, endOffset } = selection.range;\n        let isDOMChanged = normalizeTableTree(startContainer, physicalRoot);\n\n        if (endContainer != startContainer) {\n            isDOMChanged = normalizeTableTree(endContainer, physicalRoot) || isDOMChanged;\n        }\n\n        if (isDOMChanged) {\n            const newRange = physicalRoot.ownerDocument.createRange();\n\n            newRange.setStart(startContainer, startOffset);\n            newRange.setEnd(endContainer, endOffset);\n            api.setDOMSelection(\n                core,\n                {\n                    type: 'range',\n                    range: newRange,\n                    isReverted: !!selection.isReverted,\n                },\n                true /*skipSelectionChangedEvent*/\n            );\n        }\n    }\n\n    switch (selection?.type) {\n        case 'image':\n            return {\n                type: 'image',\n                imageId: selection.image.id,\n            };\n\n        case 'table':\n            return {\n                type: 'table',\n                tableId: selection.table.id,\n                firstColumn: selection.firstColumn,\n                lastColumn: selection.lastColumn,\n                firstRow: selection.firstRow,\n                lastRow: selection.lastRow,\n            };\n\n        case 'range':\n            const range = selection.range;\n\n            return {\n                type: 'range',\n                start: getPath(range.startContainer, range.startOffset, physicalRoot),\n                end: getPath(range.endContainer, range.endOffset, physicalRoot),\n                isReverted: !!selection.isReverted,\n            };\n\n        default:\n            return {\n                type: 'range',\n                start: [],\n                end: [],\n                isReverted: false,\n            };\n    }\n}\n\nfunction normalizeTableTree(startNode: Node, root: Node) {\n    let node: Node | null = startNode;\n    let isDOMChanged = false;\n\n    while (node && root.contains(node)) {\n        if (isNodeOfType(node, 'ELEMENT_NODE') && isElementOfType(node, 'table')) {\n            isDOMChanged = normalizeTable(node) || isDOMChanged;\n        }\n\n        node = node.parentNode;\n    }\n\n    return isDOMChanged;\n}\n\nfunction normalizeTable(table: HTMLTableElement): boolean {\n    let isDOMChanged = false;\n    let tbody: HTMLTableSectionElement | null = null;\n\n    for (let child = table.firstChild; child; child = child.nextSibling) {\n        const tag = isNodeOfType(child, 'ELEMENT_NODE') ? child.tagName : null;\n\n        switch (tag) {\n            case 'TR':\n                if (!tbody) {\n                    tbody = table.ownerDocument.createElement('tbody');\n                    table.insertBefore(tbody, child);\n                }\n\n                tbody.appendChild(child);\n                child = tbody;\n                isDOMChanged = true;\n\n                break;\n            case 'TBODY':\n                if (tbody) {\n                    moveChildNodes(tbody, child, true /*keepExistingChildren*/);\n                    child.parentNode?.removeChild(child);\n                    child = tbody;\n                    isDOMChanged = true;\n                } else {\n                    tbody = child as HTMLTableSectionElement;\n                }\n                break;\n            default:\n                tbody = null;\n                break;\n        }\n    }\n\n    const colgroups = table.querySelectorAll('colgroup');\n    const thead = table.querySelector('thead');\n\n    if (thead) {\n        colgroups.forEach(colgroup => {\n            if (!thead.contains(colgroup)) {\n                thead.appendChild(colgroup);\n            }\n        });\n    }\n\n    return isDOMChanged;\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n *\n * Get the path of the node relative to rootNode.\n * The path of the node is an array of integer indices into the childNodes of the given node.\n *\n * The node path will be what the node path will be on a _normalized_ dom\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\n *\n * @param rootNode the node the path will be relative to\n * @param position the position to get indexes from. Follows the same semantics\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\n * If node is of type Element, it is the index of a child in that Element node.)\n */\nexport function getPath(node: Node | null, offset: number, rootNode: Node): number[] {\n    const result: number[] = [];\n    let parent: Node | null;\n\n    if (!node || !rootNode.contains(node)) {\n        return result;\n    }\n\n    if (isNodeOfType(node, 'TEXT_NODE')) {\n        parent = node.parentNode;\n\n        while (node.previousSibling && isNodeOfType(node.previousSibling, 'TEXT_NODE')) {\n            offset += node.previousSibling.nodeValue?.length || 0;\n            node = node.previousSibling;\n        }\n\n        result.unshift(offset);\n    } else {\n        parent = node;\n        node = node.childNodes[offset];\n    }\n\n    do {\n        offset = 0;\n        let isPreviousText = false;\n\n        for (let c: Node | null = parent?.firstChild || null; c && c != node; c = c.nextSibling) {\n            if (isNodeOfType(c, 'TEXT_NODE')) {\n                if (c.nodeValue?.length === 0 || isPreviousText) {\n                    continue;\n                }\n\n                isPreviousText = true;\n            } else {\n                isPreviousText = false;\n            }\n\n            offset++;\n        }\n\n        result.unshift(offset);\n        node = parent;\n        parent = parent?.parentNode || null;\n    } while (node && node != rootNode);\n\n    return result;\n}\n","import { createAriaLiveElement } from '../../utils/createAriaLiveElement';\nimport type { Announce } from 'roosterjs-content-model-types';\n\nconst DOT_STRING = '.';\n\n/**\n * @internal\n * Announce the given data\n * @param core The EditorCore object\n * @param announceData Data to announce\n */\nexport const announce: Announce = (core, announceData) => {\n    const { text, defaultStrings, formatStrings = [], ariaLiveMode = 'assertive' } = announceData;\n    const { announcerStringGetter } = core.lifecycle;\n    const template = defaultStrings && announcerStringGetter?.(defaultStrings);\n    let textToAnnounce = formatString(template || text, formatStrings);\n\n    if (!core.lifecycle.announceContainer) {\n        core.lifecycle.announceContainer = createAriaLiveElement(core.physicalRoot.ownerDocument);\n    }\n\n    if (textToAnnounce && core.lifecycle.announceContainer) {\n        const { announceContainer } = core.lifecycle;\n        if (announceContainer.ariaLive != ariaLiveMode) {\n            announceContainer.ariaLive = ariaLiveMode;\n        }\n\n        if (textToAnnounce == announceContainer.textContent) {\n            textToAnnounce += DOT_STRING;\n        }\n\n        if (announceContainer) {\n            announceContainer.textContent = textToAnnounce;\n        }\n    }\n};\n\nfunction formatString(text: string | undefined, formatStrings: string[]) {\n    if (text == undefined) {\n        return text;\n    }\n\n    text = text.replace(/\\{(\\d+)\\}/g, (_, sub: string) => {\n        const index = parseInt(sub);\n        const replace = formatStrings[index];\n        return replace ?? '';\n    });\n\n    return text;\n}\n","import { getObjectKeys } from 'roosterjs-content-model-dom';\nimport type { AttachDomEvent, PluginEvent } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Attach a DOM event to the editor content DIV\n * @param core The EditorCore object\n * @param eventName The DOM event name\n * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\n * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\n */\nexport const attachDomEvent: AttachDomEvent = (core, eventMap) => {\n    const disposers = getObjectKeys(eventMap || {}).map(key => {\n        const { pluginEventType, beforeDispatch } = eventMap[key];\n        const eventName = key as keyof HTMLElementEventMap;\n        const onEvent = (event: HTMLElementEventMap[typeof eventName]) => {\n            if (beforeDispatch) {\n                beforeDispatch(event);\n            }\n\n            if (pluginEventType != null) {\n                core.api.triggerEvent(\n                    core,\n                    <PluginEvent>{\n                        eventType: pluginEventType,\n                        rawEvent: event,\n                    },\n                    false /*broadcast*/\n                );\n            }\n        };\n\n        core.logicalRoot.addEventListener(eventName, onEvent);\n\n        return () => {\n            core.logicalRoot.removeEventListener(eventName, onEvent);\n        };\n    });\n\n    return () => disposers.forEach(disposers => disposers());\n};\n","import { addUndoSnapshot } from './addUndoSnapshot/addUndoSnapshot';\nimport { announce } from './announce/announce';\nimport { attachDomEvent } from './attachDomEvent/attachDomEvent';\nimport { createContentModel } from './createContentModel/createContentModel';\nimport { createEditorContext } from './createEditorContext/createEditorContext';\nimport { focus } from './focus/focus';\nimport { formatContentModel } from './formatContentModel/formatContentModel';\nimport { getDOMSelection } from './getDOMSelection/getDOMSelection';\nimport { getVisibleViewport } from './getVisibleViewport/getVisibleViewport';\nimport { restoreUndoSnapshot } from './restoreUndoSnapshot/restoreUndoSnapshot';\nimport { setContentModel } from './setContentModel/setContentModel';\nimport { setDOMSelection } from './setDOMSelection/setDOMSelection';\nimport { setEditorStyle } from './setEditorStyle/setEditorStyle';\nimport { setLogicalRoot } from './setLogicalRoot/setLogicalRoot';\nimport { switchShadowEdit } from './switchShadowEdit/switchShadowEdit';\nimport { triggerEvent } from './triggerEvent/triggerEvent';\nimport type { CoreApiMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Core API map for Editor\n */\nexport const coreApiMap: CoreApiMap = {\n    createContentModel: createContentModel,\n    createEditorContext: createEditorContext,\n    formatContentModel: formatContentModel,\n    setContentModel: setContentModel,\n    setLogicalRoot: setLogicalRoot,\n\n    getDOMSelection: getDOMSelection,\n    setDOMSelection: setDOMSelection,\n    focus: focus,\n\n    addUndoSnapshot: addUndoSnapshot,\n    restoreUndoSnapshot: restoreUndoSnapshot,\n\n    attachDomEvent: attachDomEvent,\n    triggerEvent: triggerEvent,\n\n    switchShadowEdit: switchShadowEdit,\n    getVisibleViewport: getVisibleViewport,\n    setEditorStyle: setEditorStyle,\n\n    announce: announce,\n};\n","import { updateCache } from '../../corePlugin/cache/updateCache';\nimport {\n    cloneModel,\n    createDomToModelContext,\n    createDomToModelContextWithConfig,\n    domToContentModel,\n} from 'roosterjs-content-model-dom';\nimport type { CreateContentModel } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create Content Model from DOM tree in this editor\n * @param core The editor core object\n * @param option The option to customize the behavior of DOM to Content Model conversion\n * @param selectionOverride When passed, use this selection range instead of current selection in editor\n */\nexport const createContentModel: CreateContentModel = (core, option, selectionOverride) => {\n    // Flush all mutations if any, so that we can get an up-to-date Content Model\n    core.cache.textMutationObserver?.flushMutations();\n    const tryGetFromCache =\n        !option || (option.tryGetFromCache && typeof option.recalculateTableSize === 'undefined');\n\n    if (!selectionOverride && tryGetFromCache) {\n        const cachedModel = core.cache.cachedModel;\n\n        if (cachedModel) {\n            // When in shadow edit, use a cloned model so we won't pollute the cached one\n            return core.lifecycle.shadowEditFragment\n                ? cloneModel(cachedModel, { includeCachedElement: true })\n                : cachedModel;\n        }\n    }\n\n    const selection =\n        selectionOverride == 'none'\n            ? undefined\n            : selectionOverride || core.api.getDOMSelection(core) || undefined;\n    const saveIndex = !option && !selectionOverride;\n    const editorContext = core.api.createEditorContext(core, saveIndex);\n\n    editorContext.recalculateTableSize = option?.recalculateTableSize;\n\n    const settings = core.environment.domToModelSettings;\n    const domToModelContext = option\n        ? createDomToModelContext(editorContext, settings.builtIn, settings.customized, option)\n        : createDomToModelContextWithConfig(settings.calculated, editorContext);\n\n    if (selection) {\n        domToModelContext.selection = selection;\n    }\n\n    const model = domToContentModel(core.logicalRoot, domToModelContext);\n\n    if (saveIndex) {\n        updateCache(core.cache, model, selection);\n    }\n\n    return model;\n};\n","import { getRootComputedStyleForContext } from './getRootComputedStyleForContext';\nimport type { EditorContext, CreateEditorContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create a EditorContext object used by ContentModel API\n */\nexport const createEditorContext: CreateEditorContext = (core, saveIndex) => {\n    const { lifecycle, format, darkColorHandler, logicalRoot, cache, domHelper } = core;\n\n    saveIndex = saveIndex && !core.lifecycle.shadowEditFragment;\n\n    const context: EditorContext = {\n        isDarkMode: lifecycle.isDarkMode,\n        defaultFormat: format.defaultFormat,\n        pendingFormat: format.pendingFormat ?? undefined,\n        darkColorHandler: darkColorHandler,\n        addDelimiterForEntity: true,\n        allowCacheElement: true,\n        domIndexer: saveIndex ? cache.domIndexer : undefined,\n        zoomScale: domHelper.calculateZoomScale(),\n        experimentalFeatures: core.experimentalFeatures ?? [],\n        paragraphMap: core.cache.paragraphMap,\n        ...getRootComputedStyleForContext(logicalRoot.ownerDocument),\n    };\n\n    if (core.domHelper.isRightToLeft()) {\n        context.isRootRtl = true;\n    }\n\n    return context;\n};\n","import { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport type { EditorContext } from 'roosterjs-content-model-types';\n\nconst DefaultRootFontSize = 16;\n\n/**\n * @internal\n */\nexport function getRootComputedStyleForContext(\n    document: Document\n): Pick<EditorContext, 'rootFontSize'> {\n    const rootComputedStyle = document.defaultView?.getComputedStyle(document.documentElement);\n    return { rootFontSize: parseValueWithUnit(rootComputedStyle?.fontSize) || DefaultRootFontSize };\n}\n","import type { Focus } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Focus to editor. If there is a cached selection range, use it as current selection\n * @param core The EditorCore object\n */\nexport const focus: Focus = core => {\n    if (!core.lifecycle.shadowEditFragment) {\n        const { api, domHelper, selection } = core;\n\n        if (!domHelper.hasFocus() && selection.selection?.type == 'range') {\n            api.setDOMSelection(core, selection.selection, true /*skipSelectionChangedEvent*/);\n        }\n\n        // fallback, in case editor still have no focus\n        if (!domHelper.hasFocus()) {\n            core.logicalRoot.focus();\n        }\n    }\n};\n","import { ChangeSource } from 'roosterjs-content-model-dom';\nimport { scrollCaretIntoView } from './scrollCaretIntoView';\nimport type {\n    ChangedEntity,\n    ContentChangedEvent,\n    DOMSelection,\n    FormatContentModel,\n    FormatContentModelContext,\n    EditorCore,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * The general API to do format change with Content Model\n * It will grab a Content Model for current editor content, and invoke a callback function\n * to do format change. Then according to the return value, write back the modified content model into editor.\n * If there is cached model, it will be used and updated.\n * @param core The EditorCore object\n * @param formatter Formatter function, see ContentModelFormatter\n * @param options More options, see FormatContentModelOptions\n */\nexport const formatContentModel: FormatContentModel = (\n    core,\n    formatter,\n    options,\n    domToModelOptions\n) => {\n    const { onNodeCreated, rawEvent, selectionOverride, scrollCaretIntoView: scroll } =\n        options || {};\n    const model = core.api.createContentModel(core, domToModelOptions, selectionOverride);\n    const context: FormatContentModelContext = {\n        newEntities: [],\n        deletedEntities: [],\n        rawEvent,\n        newImages: [],\n        paragraphIndexer: core.cache.paragraphMap,\n    };\n\n    const hasFocus = core.domHelper.hasFocus();\n\n    const changed = formatter(model, context);\n    const { skipUndoSnapshot, clearModelCache, entityStates, canUndoByBackspace } = context;\n\n    if (changed) {\n        const isNested = core.undo.isNested;\n        const shouldAddSnapshot =\n            (!skipUndoSnapshot || skipUndoSnapshot == 'DoNotSkip') && !isNested;\n        const shouldMarkNewContent =\n            (skipUndoSnapshot === true || skipUndoSnapshot == 'MarkNewContent') && !isNested;\n        let selection: DOMSelection | undefined;\n\n        if (shouldAddSnapshot) {\n            core.undo.isNested = true;\n\n            core.api.addUndoSnapshot(core, !!canUndoByBackspace, entityStates);\n        }\n\n        try {\n            handleImages(core, context);\n\n            selection =\n                core.api.setContentModel(\n                    core,\n                    model,\n                    hasFocus ? undefined : { ignoreSelection: true }, // If editor did not have focus before format, do not set focus after format\n                    onNodeCreated\n                ) ?? undefined;\n\n            handlePendingFormat(core, context, selection);\n\n            if (scroll && (selection?.type == 'range' || selection?.type == 'image')) {\n                scrollCaretIntoView(core, selection);\n            }\n\n            const eventData: ContentChangedEvent = {\n                eventType: 'contentChanged',\n                contentModel: clearModelCache ? undefined : model,\n                selection: clearModelCache ? undefined : selection,\n                source: options?.changeSource || ChangeSource.Format,\n                data: options?.getChangeData?.(),\n                formatApiName: options?.apiName,\n                changedEntities: getChangedEntities(context, rawEvent),\n            };\n\n            core.api.triggerEvent(core, eventData, true /*broadcast*/);\n\n            if (canUndoByBackspace && selection?.type == 'range') {\n                core.undo.autoCompleteInsertPoint = {\n                    node: selection.range.startContainer,\n                    offset: selection.range.startOffset,\n                };\n            }\n\n            if (shouldAddSnapshot) {\n                core.api.addUndoSnapshot(core, false /*canUndoByBackspace*/, entityStates);\n            }\n\n            if (shouldMarkNewContent) {\n                core.undo.snapshotsManager.hasNewContent = true;\n            }\n        } finally {\n            if (!isNested) {\n                core.undo.isNested = false;\n            }\n        }\n    } else {\n        if (clearModelCache) {\n            core.cache.cachedModel = undefined;\n            core.cache.cachedSelection = undefined;\n        }\n\n        handlePendingFormat(core, context, core.api.getDOMSelection(core));\n    }\n\n    if (context.announceData) {\n        core.api.announce(core, context.announceData);\n    }\n};\n\nfunction handleImages(core: EditorCore, context: FormatContentModelContext) {\n    if (context.newImages.length > 0) {\n        const width = core.domHelper.getClientWidth();\n        const minMaxImageSize = 10;\n        const maxWidth = Math.max(width, minMaxImageSize);\n        context.newImages.forEach(image => {\n            image.format.maxWidth = `${maxWidth}px`;\n        });\n    }\n}\n\nfunction handlePendingFormat(\n    core: EditorCore,\n    context: FormatContentModelContext,\n    selection?: DOMSelection | null\n) {\n    const pendingFormat =\n        context.newPendingFormat == 'preserve'\n            ? core.format.pendingFormat?.format\n            : context.newPendingFormat;\n    const pendingParagraphFormat =\n        context.newPendingParagraphFormat == 'preserve'\n            ? core.format.pendingFormat?.paragraphFormat\n            : context.newPendingParagraphFormat;\n\n    if (\n        (pendingFormat || pendingParagraphFormat) &&\n        selection?.type == 'range' &&\n        selection.range.collapsed\n    ) {\n        core.format.pendingFormat = {\n            format: pendingFormat ? { ...pendingFormat } : undefined,\n            paragraphFormat: pendingParagraphFormat ? { ...pendingParagraphFormat } : undefined,\n            insertPoint: {\n                node: selection.range.startContainer,\n                offset: selection.range.startOffset,\n            },\n        };\n    }\n}\n\nfunction getChangedEntities(\n    context: FormatContentModelContext,\n    rawEvent?: Event\n): ChangedEntity[] | undefined {\n    return context.autoDetectChangedEntities\n        ? undefined\n        : context.newEntities\n              .map(\n                  (entity): ChangedEntity => ({\n                      entity,\n                      operation: 'newEntity',\n                      rawEvent,\n                  })\n              )\n              .concat(\n                  context.deletedEntities.map(entry => ({\n                      entity: entry.entity,\n                      operation: entry.operation,\n                      rawEvent,\n                  }))\n              );\n}\n","import { getDOMInsertPointRect } from 'roosterjs-content-model-dom';\nimport type { EditorCore, ImageSelection, RangeSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function scrollCaretIntoView(core: EditorCore, selection: RangeSelection | ImageSelection) {\n    const rect = getDOMInsertPointRect(\n        core.physicalRoot.ownerDocument,\n        selection.type == 'image'\n            ? {\n                  node: selection.image,\n                  offset: 0,\n              }\n            : selection.isReverted\n            ? {\n                  node: selection.range.startContainer,\n                  offset: selection.range.startOffset,\n              }\n            : {\n                  node: selection.range.endContainer,\n                  offset: selection.range.endOffset,\n              }\n    );\n    const visibleRect = core.api.getVisibleViewport(core);\n    const scrollContainer = core.domEvent.scrollContainer;\n\n    if (rect && visibleRect) {\n        if (rect.bottom > visibleRect.bottom) {\n            const zoomScale = core.domHelper.calculateZoomScale();\n\n            scrollContainer.scrollTop += (rect.bottom - visibleRect.bottom) / zoomScale;\n        } else if (rect.top < visibleRect.top) {\n            const zoomScale = core.domHelper.calculateZoomScale();\n\n            scrollContainer.scrollTop += (rect.top - visibleRect.top) / zoomScale;\n        }\n    }\n}\n","import type { DOMSelection, GetDOMSelection, EditorCore } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const getDOMSelection: GetDOMSelection = core => {\n    if (core.lifecycle.shadowEditFragment) {\n        return null;\n    } else {\n        const selection = core.selection.selection;\n\n        return selection && (selection.type != 'range' || !core.domHelper.hasFocus())\n            ? selection\n            : getNewSelection(core);\n    }\n};\n\nfunction getNewSelection(core: EditorCore): DOMSelection | null {\n    const selection = core.logicalRoot.ownerDocument.defaultView?.getSelection();\n    const range = selection && selection.rangeCount > 0 ? selection.getRangeAt(0) : null;\n\n    return selection && range && core.logicalRoot.contains(range.commonAncestorContainer)\n        ? {\n              type: 'range',\n              range,\n              isReverted:\n                  selection.focusNode != range.endContainer ||\n                  selection.focusOffset != range.endOffset,\n          }\n        : null;\n}\n","import { normalizeRect } from 'roosterjs-content-model-dom';\nimport type { GetVisibleViewport, Rect } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Retrieves the rect of the visible viewport of the editor.\n * @param core The EditorCore object\n */\nexport const getVisibleViewport: GetVisibleViewport = core => {\n    const scrollContainer = core.domEvent.scrollContainer;\n\n    return getIntersectedRect(\n        scrollContainer == core.physicalRoot\n            ? [scrollContainer]\n            : [scrollContainer, core.physicalRoot]\n    );\n};\n\n/**\n * Get the intersected Rect of elements provided\n *\n * @example\n * The result of the following Elements Rects would be:\n    {\n        top: Element2.top,\n        bottom: Element1.bottom,\n        left: Element2.left,\n        right: Element2.right\n    }\n    +-------------------------+\n    | Element 1               |\n    |   +-----------------+   |\n    |   | Element2        |   |\n    |   |                 |   |\n    |   |                 |   |\n    +-------------------------+\n        |                 |\n        +-----------------+\n\n * @param elements Elements to use.\n * @param additionalRects additional rects to use\n * @returns If the Rect is valid return the rect, if not, return null.\n */\nfunction getIntersectedRect(elements: HTMLElement[], additionalRects: Rect[] = []): Rect | null {\n    const rects = elements\n        .map(element => normalizeRect(element.getBoundingClientRect()))\n        .concat(additionalRects)\n        .filter((rect: Rect | null): rect is Rect => !!rect);\n\n    const result: Rect = {\n        top: Math.max(...rects.map(r => r.top)),\n        bottom: Math.min(...rects.map(r => r.bottom)),\n        left: Math.max(...rects.map(r => r.left)),\n        right: Math.min(...rects.map(r => r.right)),\n    };\n\n    return result.top < result.bottom && result.left < result.right ? result : null;\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { DOMInsertPoint } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n *\n * Use with paths generated by `getPath`.\n */\nexport function getPositionFromPath(node: Node, path: number[]): DOMInsertPoint {\n    // Iterate with a for loop to avoid mutating the passed in element path stack\n    // or needing to copy it.\n    let offset: number = 0;\n\n    for (let i = 0; i < path.length; i++) {\n        offset = path[i];\n\n        if (\n            i < path.length - 1 &&\n            node &&\n            isNodeOfType(node, 'ELEMENT_NODE') &&\n            node.childNodes.length > offset\n        ) {\n            node = node.childNodes[offset];\n        } else {\n            break;\n        }\n    }\n\n    return { node, offset };\n}\n","import { transformColor } from 'roosterjs-content-model-dom';\nimport type { EditorCore, Snapshot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function restoreSnapshotColors(core: EditorCore, snapshot: Snapshot) {\n    const isDarkMode = core.lifecycle.isDarkMode;\n\n    core.darkColorHandler.updateKnownColor(isDarkMode); // Pass no parameter to force update all colors\n\n    if (!!snapshot.isDarkMode != !!isDarkMode) {\n        transformColor(\n            core.physicalRoot,\n            false /*includeSelf*/,\n            isDarkMode ? 'lightToDark' : 'darkToLight',\n            core.darkColorHandler\n        );\n    }\n}\n","import {\n    getAllEntityWrappers,\n    isBlockEntityContainer,\n    isEntityDelimiter,\n    isEntityElement,\n    isNodeOfType,\n    parseEntityFormat,\n    reuseCachedElement,\n} from 'roosterjs-content-model-dom';\nimport type { Snapshot, EditorCore, KnownEntityItem } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function restoreSnapshotHTML(core: EditorCore, snapshot: Snapshot) {\n    const {\n        physicalRoot,\n        entity: { entityMap },\n    } = core;\n    let refNode: Node | null = physicalRoot.firstChild;\n\n    const body = core.domCreator.htmlToDOM(snapshot.html).body;\n\n    for (let currentNode = body.firstChild; currentNode; ) {\n        const next = currentNode.nextSibling;\n        const originalEntityElement = tryGetEntityElement(entityMap, currentNode);\n\n        if (originalEntityElement) {\n            // After restoring the snapshot, we need to clear the delimiter indexes since cached model will be cleared\n            if (isBlockEntityContainer(originalEntityElement)) {\n                for (let node = originalEntityElement.firstChild; node; node = node.nextSibling) {\n                    if (isNodeOfType(node, 'ELEMENT_NODE') && isEntityDelimiter(node)) {\n                        core.cache.domIndexer?.clearIndex(node);\n                    }\n                }\n            }\n\n            refNode = reuseCachedElement(physicalRoot, originalEntityElement, refNode);\n        } else {\n            physicalRoot.insertBefore(currentNode, refNode);\n\n            if (isNodeOfType(currentNode, 'ELEMENT_NODE')) {\n                const childEntities = getAllEntityWrappers(currentNode);\n\n                childEntities.forEach(element => {\n                    const wrapper = tryGetEntityElement(entityMap, element);\n\n                    if (wrapper) {\n                        if (wrapper == refNode) {\n                            // In case the node we are moving is just the ref node,\n                            // We create a temporary clone and insert it before the refNode, and use this cloned node as refNode\n                            // After replaceChild(), the original refNode will be moved away\n                            const markerNode = wrapper.cloneNode();\n\n                            physicalRoot.insertBefore(markerNode, refNode);\n                            refNode = markerNode;\n                        }\n\n                        element.parentNode?.replaceChild(wrapper, element);\n                    }\n                });\n            }\n        }\n        currentNode = next;\n    }\n\n    while (refNode) {\n        const next = refNode.nextSibling;\n\n        refNode.parentNode?.removeChild(refNode);\n        refNode = next;\n    }\n}\n\nfunction tryGetEntityElement(\n    entityMap: Record<string, KnownEntityItem>,\n    node: Node\n): HTMLElement | null {\n    let result: HTMLElement | null = null;\n\n    if (isNodeOfType(node, 'ELEMENT_NODE')) {\n        if (isEntityElement(node)) {\n            const format = parseEntityFormat(node);\n\n            result = getEntityWrapperForReuse(entityMap, format.id);\n        } else if (isBlockEntityContainer(node)) {\n            result = tryGetEntityFromContainer(node, entityMap);\n        }\n    }\n\n    return result;\n}\n\nfunction tryGetEntityFromContainer(\n    element: HTMLElement,\n    entityMap: Record<string, KnownEntityItem>\n): HTMLElement | null {\n    for (let node = element.firstChild; node; node = node.nextSibling) {\n        if (isEntityElement(node) && isNodeOfType(node, 'ELEMENT_NODE')) {\n            const format = parseEntityFormat(node);\n            const parent = getEntityWrapperForReuse(entityMap, format.id)?.parentElement;\n\n            return isNodeOfType(parent, 'ELEMENT_NODE') && isBlockEntityContainer(parent)\n                ? parent\n                : null;\n        }\n    }\n\n    return null;\n}\n\nfunction getEntityWrapperForReuse(\n    entityMap: Record<string, KnownEntityItem>,\n    entityId: string | undefined\n): HTMLElement | null {\n    const entry = entityId ? entityMap[entityId] : undefined;\n\n    return entry?.canPersist ? entry.element : null;\n}\n","import type { EditorCore, Snapshot } from 'roosterjs-content-model-types';\nimport { getPositionFromPath } from './getPositionFromPath';\n\n/**\n * @internal\n */\nexport function restoreSnapshotLogicalRoot(core: EditorCore, snapshot: Snapshot) {\n    if (snapshot.logicalRootPath && snapshot.logicalRootPath.length > 0) {\n        const restoredLogicalRoot = getPositionFromPath(core.physicalRoot, snapshot.logicalRootPath)\n            .node as HTMLDivElement;\n        if (restoredLogicalRoot !== core.logicalRoot) {\n            core.api.setLogicalRoot(core, restoredLogicalRoot);\n        }\n    } else {\n        core.api.setLogicalRoot(core, null);\n    }\n}\n","import { getPositionFromPath } from './getPositionFromPath';\nimport { getSafeIdSelector } from 'roosterjs-content-model-dom';\nimport type { DOMSelection, EditorCore, Snapshot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function restoreSnapshotSelection(core: EditorCore, snapshot: Snapshot) {\n    const snapshotSelection = snapshot.selection;\n    const { physicalRoot } = core;\n    let domSelection: DOMSelection | null = null;\n\n    try {\n        // might fail if the selection is not present, but we do not want to crash\n        if (snapshotSelection) {\n            switch (snapshotSelection.type) {\n                case 'range':\n                    const startPos = getPositionFromPath(physicalRoot, snapshotSelection.start);\n                    const endPos = getPositionFromPath(physicalRoot, snapshotSelection.end);\n                    const range = physicalRoot.ownerDocument.createRange();\n\n                    range.setStart(startPos.node, startPos.offset);\n                    range.setEnd(endPos.node, endPos.offset);\n\n                    domSelection = {\n                        type: 'range',\n                        range,\n                        isReverted: snapshotSelection.isReverted,\n                    };\n                    break;\n                case 'table':\n                    const table = physicalRoot.querySelector(\n                        getSafeIdSelector(snapshotSelection.tableId)\n                    ) as HTMLTableElement;\n\n                    if (table) {\n                        domSelection = {\n                            type: 'table',\n                            table: table,\n                            firstColumn: snapshotSelection.firstColumn,\n                            firstRow: snapshotSelection.firstRow,\n                            lastColumn: snapshotSelection.lastColumn,\n                            lastRow: snapshotSelection.lastRow,\n                        };\n                    }\n                    break;\n                case 'image':\n                    const image = physicalRoot.querySelector(\n                        getSafeIdSelector(snapshotSelection.imageId)\n                    ) as HTMLImageElement;\n\n                    if (image) {\n                        domSelection = {\n                            type: 'image',\n                            image: image,\n                        };\n                    }\n                    break;\n            }\n        }\n\n        if (domSelection) {\n            core.api.setDOMSelection(core, domSelection);\n        }\n    } catch {}\n}\n","import { ChangeSource } from 'roosterjs-content-model-dom';\nimport { restoreSnapshotColors } from './restoreSnapshotColors';\nimport { restoreSnapshotHTML } from './restoreSnapshotHTML';\nimport { restoreSnapshotLogicalRoot } from './restoreSnapshotLogicalRoot';\nimport { restoreSnapshotSelection } from './restoreSnapshotSelection';\nimport type { ContentChangedEvent, RestoreUndoSnapshot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Restore an undo snapshot into editor\n * @param core The editor core object\n * @param step Steps to move, can be 0, positive or negative\n */\nexport const restoreUndoSnapshot: RestoreUndoSnapshot = (core, snapshot) => {\n    core.api.triggerEvent(\n        core,\n        {\n            eventType: 'beforeSetContent',\n            newContent: snapshot.html,\n        },\n        true /*broadcast*/\n    );\n\n    try {\n        core.undo.isRestoring = true;\n\n        restoreSnapshotHTML(core, snapshot);\n        restoreSnapshotLogicalRoot(core, snapshot);\n        restoreSnapshotSelection(core, snapshot);\n        restoreSnapshotColors(core, snapshot);\n\n        const event: ContentChangedEvent = {\n            eventType: 'contentChanged',\n            entityStates: snapshot.entityStates,\n            source: ChangeSource.SetContent,\n        };\n\n        core.api.triggerEvent(core, event, false /*broadcast*/);\n    } finally {\n        core.undo.isRestoring = false;\n    }\n};\n","import { updateCache } from '../../corePlugin/cache/updateCache';\nimport {\n    contentModelToDom,\n    createModelToDomContext,\n    createModelToDomContextWithConfig,\n} from 'roosterjs-content-model-dom';\nimport type { SetContentModel } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Set content with content model\n * @param core The editor core object\n * @param model The content model to set\n * @param option Additional options to customize the behavior of Content Model to DOM conversion\n * @param onNodeCreated An optional callback that will be called when a DOM node is created\n * @param isInitializing True means editor is being initialized then it will save modification nodes onto\n * lifecycleState instead of triggering events, false means other cases\n */\nexport const setContentModel: SetContentModel = (\n    core,\n    model,\n    option,\n    onNodeCreated,\n    isInitializing\n) => {\n    const editorContext = core.api.createEditorContext(core, true /*saveIndex*/);\n    const modelToDomContext = option\n        ? createModelToDomContext(\n              editorContext,\n              core.environment.modelToDomSettings.builtIn,\n              core.environment.modelToDomSettings.customized,\n              option\n          )\n        : createModelToDomContextWithConfig(\n              core.environment.modelToDomSettings.calculated,\n              editorContext\n          );\n\n    modelToDomContext.onNodeCreated = onNodeCreated;\n\n    core.onFixUpModel?.(model);\n\n    const selection = contentModelToDom(\n        core.logicalRoot.ownerDocument,\n        core.logicalRoot,\n        model,\n        modelToDomContext\n    );\n\n    if (!core.lifecycle.shadowEditFragment) {\n        // Clear pending mutations since we will use our latest model object to replace existing cache\n        core.cache.textMutationObserver?.flushMutations(true /*ignoreMutations*/);\n\n        updateCache(core.cache, model, selection);\n\n        if (!option?.ignoreSelection && selection) {\n            core.api.setDOMSelection(core, selection);\n        } else {\n            core.selection.selection = selection;\n        }\n    }\n\n    if (isInitializing) {\n        // When initialize, we should not trigger event until all plugins are initialized, so put these node in lifecycle state temporarily\n        core.lifecycle.rewriteFromModel = modelToDomContext.rewriteFromModel;\n    } else {\n        // Otherwise, trigger RewriteFromModel event immediately\n        core.api.triggerEvent(\n            core,\n            {\n                eventType: 'rewriteFromModel',\n                ...modelToDomContext.rewriteFromModel,\n            },\n            true /*broadcast*/\n        );\n    }\n\n    return selection;\n};\n","import { areSameRanges } from '../../corePlugin/cache/areSameSelections';\n\n/**\n * @internal\n */\nexport function addRangeToSelection(doc: Document, range: Range, isReverted: boolean = false) {\n    const selection = doc.defaultView?.getSelection();\n\n    if (selection) {\n        const currentRange = selection.rangeCount > 0 && selection.getRangeAt(0);\n        if (currentRange && areSameRanges(currentRange, range)) {\n            return;\n        }\n        selection.removeAllRanges();\n\n        if (!isReverted) {\n            selection.addRange(range);\n        } else {\n            selection.setBaseAndExtent(\n                range.endContainer,\n                range.endOffset,\n                range.startContainer,\n                range.startOffset\n            );\n        }\n    }\n}\n","import type { ParsedTable, TableCellCoordinate } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Try to find the last logic cell of a merged table cell\n * @param parsedTable The parsed table\n * @param row Row index\n * @param col Column index\n */\nexport function findLastedCoInMergedCell(\n    parsedTable: ParsedTable,\n    coordinate: TableCellCoordinate\n): TableCellCoordinate | null {\n    let { row, col } = coordinate;\n\n    while (\n        row >= 0 &&\n        col >= 0 &&\n        row < parsedTable.length &&\n        col < (parsedTable[row]?.length ?? 0)\n    ) {\n        const right = parsedTable[row]?.[col + 1];\n        const below = parsedTable[row + 1]?.[col];\n\n        if (right == 'spanLeft' || right == 'spanBoth') {\n            col++;\n        } else if (below == 'spanTop' || below == 'spanBoth') {\n            row++;\n        } else {\n            return { row, col };\n        }\n    }\n    return null;\n}\n","import type { ParsedTable, TableCellCoordinate } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface TableCellCoordinateWithCell extends TableCellCoordinate {\n    cell: HTMLTableCellElement;\n}\n\n/**\n * @internal\n * Try to find a TD/TH element from the given row and col number from the given parsed table\n * @param parsedTable The parsed table\n * @param row Row index\n * @param col Column index\n * @param findLast True to find last merged cell instead of the first cell\n */\nexport function findTableCellElement(\n    parsedTable: ParsedTable,\n    coordinate: TableCellCoordinate\n): TableCellCoordinateWithCell | null {\n    let { row, col } = coordinate;\n\n    while (\n        row >= 0 &&\n        col >= 0 &&\n        row < parsedTable.length &&\n        col < (parsedTable[row]?.length ?? 0)\n    ) {\n        const cell = parsedTable[row]?.[col];\n\n        if (!cell) {\n            break;\n        } else if (typeof cell == 'object') {\n            return { cell, row, col };\n        } else if (cell == 'spanLeft' || cell == 'spanBoth') {\n            col--;\n        } else {\n            row--;\n        }\n    }\n    return null;\n}\n","import { addRangeToSelection } from './addRangeToSelection';\nimport { areSameSelections } from '../../corePlugin/cache/areSameSelections';\nimport { ensureUniqueId } from '../setEditorStyle/ensureUniqueId';\nimport { findLastedCoInMergedCell } from './findLastedCoInMergedCell';\nimport { findTableCellElement } from './findTableCellElement';\nimport { toggleCaret } from './toggleCaret';\nimport {\n    getSafeIdSelector,\n    isNodeOfType,\n    parseTableCells,\n    toArray,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ParsedTable,\n    SelectionChangedEvent,\n    SetDOMSelection,\n    TableCellCoordinate,\n} from 'roosterjs-content-model-types';\n\nconst DOM_SELECTION_CSS_KEY = '_DOMSelection';\nconst HIDE_SELECTION_CSS_KEY = '_DOMSelectionHideSelection';\nconst IMAGE_ID = 'image';\nconst TABLE_ID = 'table';\nconst TRANSPARENT_SELECTION_CSS_RULE = 'background-color: transparent !important;';\nconst SELECTION_SELECTOR = '*::selection';\nconst DEFAULT_SELECTION_BORDER_COLOR = '#DB626C';\n\n/**\n * @internal\n */\nexport const setDOMSelection: SetDOMSelection = (core, selection, skipSelectionChangedEvent) => {\n    const existingSelection = core.api.getDOMSelection(core);\n\n    if (existingSelection && selection && areSameSelections(existingSelection, selection)) {\n        return;\n    }\n\n    // We are applying a new selection, so we don't need to apply cached selection in DOMEventPlugin.\n    // Set skipReselectOnFocus to skip this behavior\n    const skipReselectOnFocus = core.selection.skipReselectOnFocus;\n\n    const doc = core.physicalRoot.ownerDocument;\n    const isDarkMode = core.lifecycle.isDarkMode;\n    core.selection.skipReselectOnFocus = true;\n    core.api.setEditorStyle(core, DOM_SELECTION_CSS_KEY, null /*cssRule*/);\n    core.api.setEditorStyle(core, HIDE_SELECTION_CSS_KEY, null /*cssRule*/);\n\n    toggleCaret(core, false /* hide */);\n\n    try {\n        switch (selection?.type) {\n            case 'image':\n                const image = selection.image;\n\n                core.selection.selection = selection;\n\n                const imageSelectionColor = isDarkMode\n                    ? core.selection.imageSelectionBorderColorDark\n                    : core.selection.imageSelectionBorderColor;\n\n                core.api.setEditorStyle(\n                    core,\n                    DOM_SELECTION_CSS_KEY,\n                    `outline-style:solid!important; outline-color:${\n                        imageSelectionColor || DEFAULT_SELECTION_BORDER_COLOR\n                    }!important;`,\n                    [getSafeIdSelector(ensureUniqueId(image, IMAGE_ID))]\n                );\n                core.api.setEditorStyle(\n                    core,\n                    HIDE_SELECTION_CSS_KEY,\n                    TRANSPARENT_SELECTION_CSS_RULE,\n                    [SELECTION_SELECTOR]\n                );\n\n                setRangeSelection(doc, image, false /* collapse */);\n                break;\n            case 'table':\n                const { table, firstColumn, firstRow, lastColumn, lastRow } = selection;\n                const parsedTable = parseTableCells(selection.table);\n                let firstCell = {\n                    row: Math.min(firstRow, lastRow),\n                    col: Math.min(firstColumn, lastColumn),\n                    cell: <HTMLTableCellElement | null>null,\n                };\n                let lastCell = {\n                    row: Math.max(firstRow, lastRow),\n                    col: Math.max(firstColumn, lastColumn),\n                };\n\n                firstCell = findTableCellElement(parsedTable, firstCell) || firstCell;\n                lastCell = findLastedCoInMergedCell(parsedTable, lastCell) || lastCell;\n\n                if (\n                    isNaN(firstCell.row) ||\n                    isNaN(firstCell.col) ||\n                    isNaN(lastCell.row) ||\n                    isNaN(lastCell.col)\n                ) {\n                    return;\n                }\n\n                selection = {\n                    type: 'table',\n                    table,\n                    firstRow: firstCell.row,\n                    firstColumn: firstCell.col,\n                    lastRow: lastCell.row,\n                    lastColumn: lastCell.col,\n                };\n\n                const tableId = ensureUniqueId(table, TABLE_ID);\n                const tableSelector = getSafeIdSelector(tableId);\n\n                const tableSelectors =\n                    firstCell.row == 0 &&\n                    firstCell.col == 0 &&\n                    lastCell.row == parsedTable.length - 1 &&\n                    lastCell.col == (parsedTable[lastCell.row]?.length ?? 0) - 1\n                        ? [tableSelector, `${tableSelector} *`]\n                        : handleTableSelected(\n                              parsedTable,\n                              tableSelector,\n                              table,\n                              firstCell,\n                              lastCell\n                          );\n\n                core.selection.selection = selection;\n\n                const tableSelectionColor = isDarkMode\n                    ? core.selection.tableCellSelectionBackgroundColorDark\n                    : core.selection.tableCellSelectionBackgroundColor;\n                core.api.setEditorStyle(\n                    core,\n                    DOM_SELECTION_CSS_KEY,\n                    `background-color:${tableSelectionColor}!important;`,\n                    tableSelectors\n                );\n                core.api.setEditorStyle(\n                    core,\n                    HIDE_SELECTION_CSS_KEY,\n                    TRANSPARENT_SELECTION_CSS_RULE,\n                    [SELECTION_SELECTOR]\n                );\n\n                toggleCaret(core, true /* hide */);\n\n                const nodeToSelect = firstCell.cell?.firstElementChild || firstCell.cell;\n\n                if (nodeToSelect) {\n                    setRangeSelection(\n                        doc,\n                        (nodeToSelect as HTMLElement) || undefined,\n                        true /* collapse */\n                    );\n                }\n\n                break;\n            case 'range':\n                addRangeToSelection(doc, selection.range, selection.isReverted);\n\n                core.selection.selection = core.domHelper.hasFocus() ? null : selection;\n                break;\n\n            default:\n                core.selection.selection = null;\n                break;\n        }\n    } finally {\n        core.selection.skipReselectOnFocus = skipReselectOnFocus;\n    }\n\n    if (!skipSelectionChangedEvent) {\n        const eventData: SelectionChangedEvent = {\n            eventType: 'selectionChanged',\n            newSelection: selection,\n        };\n\n        core.api.triggerEvent(core, eventData, true /*broadcast*/);\n    }\n};\n\nfunction handleTableSelected(\n    parsedTable: ParsedTable,\n    tableSelector: string,\n    table: HTMLTableElement,\n    firstCell: TableCellCoordinate,\n    lastCell: TableCellCoordinate\n) {\n    const selectors: string[] = [];\n\n    // Get whether table has thead, tbody or tfoot, then Set the start and end of each of the table children,\n    // so we can build the selector according the element between the table and the row.\n    let cont = 0;\n    const indexes = toArray(table.childNodes)\n        .filter(\n            (node): node is HTMLTableSectionElement =>\n                ['THEAD', 'TBODY', 'TFOOT'].indexOf(\n                    isNodeOfType(node, 'ELEMENT_NODE') ? node.tagName : ''\n                ) > -1\n        )\n        .map(node => {\n            const result = {\n                el: node.tagName,\n                start: cont,\n                end: node.childNodes.length + cont,\n            };\n\n            cont = result.end;\n            return result;\n        });\n\n    parsedTable.forEach((row, rowIndex) => {\n        let tdCount = 0;\n\n        //Get current TBODY/THEAD/TFOOT\n        const midElement = indexes.filter(ind => ind.start <= rowIndex && ind.end > rowIndex)[0];\n        const middleElSelector = midElement ? '>' + midElement.el + '>' : '>';\n        const currentRow =\n            midElement && rowIndex + 1 >= midElement.start\n                ? rowIndex + 1 - midElement.start\n                : rowIndex + 1;\n\n        for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n            const cell = row[cellIndex];\n\n            if (typeof cell == 'object') {\n                tdCount++;\n\n                if (\n                    rowIndex >= firstCell.row &&\n                    rowIndex <= lastCell.row &&\n                    cellIndex >= firstCell.col &&\n                    cellIndex <= lastCell.col\n                ) {\n                    const selector = `${tableSelector}${middleElSelector} tr:nth-child(${currentRow})>${cell.tagName}:nth-child(${tdCount})`;\n\n                    selectors.push(selector, selector + ' *');\n                }\n            }\n        }\n    });\n\n    return selectors;\n}\n\nfunction setRangeSelection(doc: Document, element: HTMLElement | undefined, collapse: boolean) {\n    if (element && doc.contains(element)) {\n        const range = doc.createRange();\n        let isReverted: boolean | undefined = undefined;\n\n        range.selectNode(element);\n        if (collapse) {\n            range.collapse();\n        } else {\n            const selection = doc.defaultView?.getSelection();\n            const range = selection && selection.rangeCount > 0 && selection.getRangeAt(0);\n            if (selection && range) {\n                isReverted =\n                    selection.focusNode != range.endContainer ||\n                    selection.focusOffset != range.endOffset;\n            }\n        }\n\n        addRangeToSelection(doc, range, isReverted);\n    }\n}\n","import type { EditorCore } from 'roosterjs-content-model-types';\n\nconst CARET_CSS_RULE = 'caret-color: transparent';\nconst HIDE_CURSOR_CSS_KEY = '_DOMSelectionHideCursor';\n\n/**\n * @internal Show/Hide caret in editor\n * @param core The editor core\n * @param isHiding True to hide caret, false to show caret\n */\nexport function toggleCaret(core: EditorCore, isHiding: boolean) {\n    core.api.setEditorStyle(core, HIDE_CURSOR_CSS_KEY, isHiding ? CARET_CSS_RULE : null);\n}\n","import { getSafeIdSelector } from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\nexport function ensureUniqueId(element: HTMLElement, idPrefix: string): string {\n    idPrefix = element.id || idPrefix;\n\n    const doc = element.ownerDocument;\n    let i = 0;\n\n    while (!element.id || doc.querySelectorAll(getSafeIdSelector(element.id)).length > 1) {\n        element.id = idPrefix + '_' + i++;\n    }\n\n    return element.id;\n}\n","import { ensureUniqueId } from './ensureUniqueId';\nimport { getSafeIdSelector } from 'roosterjs-content-model-dom';\nimport type { SetEditorStyle } from 'roosterjs-content-model-types';\n\nconst MAX_RULE_SELECTOR_LENGTH = 9000;\nconst CONTENT_DIV_ID = 'contentDiv';\n\n/**\n * @internal\n */\nexport const setEditorStyle: SetEditorStyle = (\n    core,\n    key,\n    cssRule,\n    subSelectors,\n    maxRuleLength = MAX_RULE_SELECTOR_LENGTH\n) => {\n    let styleElement = core.lifecycle.styleElements[key];\n\n    if (!styleElement && cssRule) {\n        const doc = core.physicalRoot.ownerDocument;\n\n        styleElement = doc.createElement('style');\n        doc.head.appendChild(styleElement);\n\n        styleElement.dataset.roosterjsStyleKey = key;\n        core.lifecycle.styleElements[key] = styleElement;\n    }\n\n    const sheet = styleElement?.sheet;\n\n    if (sheet) {\n        for (let i = sheet.cssRules.length - 1; i >= 0; i--) {\n            sheet.deleteRule(i);\n        }\n\n        if (cssRule) {\n            const rootSelector = getSafeIdSelector(\n                ensureUniqueId(core.physicalRoot, CONTENT_DIV_ID)\n            );\n            const selectors = !subSelectors\n                ? [rootSelector]\n                : typeof subSelectors === 'string'\n                ? [`${rootSelector}::${subSelectors}`]\n                : buildSelectors(\n                      rootSelector,\n                      subSelectors,\n                      maxRuleLength - cssRule.length - 3 // minus 3 for \" {}\"\n                  );\n\n            selectors.forEach(selector => {\n                sheet.insertRule(`${selector} {${cssRule}}`);\n            });\n        }\n    }\n};\n\nfunction buildSelectors(rootSelector: string, subSelectors: string[], maxLen: number): string[] {\n    const result: string[] = [];\n\n    let stringBuilder: string[] = [];\n    let len = 0;\n\n    subSelectors.forEach(subSelector => {\n        if (len >= maxLen) {\n            result.push(stringBuilder.join(','));\n            stringBuilder = [];\n            len = 0;\n        }\n\n        const selector = `${rootSelector} ${subSelector}`;\n\n        len += selector.length + 1; // Add 1 for potential \",\" between selectors\n        stringBuilder.push(selector);\n    });\n\n    result.push(stringBuilder.join(','));\n\n    return result;\n}\n","import type { LogicalRootChangedEvent, SetLogicalRoot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Change which node is the current logical root\n * @param core The StandaloneEditorCore object\n * @param logicalRoot The new logical root (has to be child of physicalRoot), pass null to use physicalRoot as logical root\n */\nexport const setLogicalRoot: SetLogicalRoot = (core, logicalRoot) => {\n    // make sure we either want to reset to physical root or the logical root is a child of physical root\n    if (!logicalRoot || core.physicalRoot.contains(logicalRoot)) {\n        // if null, reset to physical root\n        if (!logicalRoot) {\n            logicalRoot = core.physicalRoot;\n        }\n\n        // if the logical root changed\n        if (logicalRoot !== core.logicalRoot) {\n            // make sure the old logical root is not content editable and the new one is\n            core.logicalRoot.contentEditable = 'false';\n            logicalRoot.contentEditable = 'true';\n\n            // update the logical root\n            core.logicalRoot = logicalRoot;\n\n            // clear internal caches\n            core.selection.selection = null;\n            core.cache.cachedModel = undefined;\n            core.cache.cachedSelection = undefined;\n\n            // tell plugins in case they need to clear their caches\n            const event: LogicalRootChangedEvent = {\n                eventType: 'logicalRootChanged',\n                logicalRoot,\n            };\n            core.api.triggerEvent(core, event, false /*broadcast*/);\n        }\n    } else {\n        return null;\n    }\n};\n","import { iterateSelections, moveChildNodes } from 'roosterjs-content-model-dom';\nimport { toggleCaret } from '../setDOMSelection/toggleCaret';\nimport type { SwitchShadowEdit } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Switch the Shadow Edit mode of editor On/Off\n * @param editorCore The EditorCore object\n * @param isOn True to switch On, False to switch Off\n */\nexport const switchShadowEdit: SwitchShadowEdit = (editorCore, isOn): void => {\n    const core = editorCore;\n\n    if (isOn != !!core.lifecycle.shadowEditFragment) {\n        if (isOn) {\n            const model = !core.cache.cachedModel ? core.api.createContentModel(core) : null;\n            const fragment = core.logicalRoot.ownerDocument.createDocumentFragment();\n            const clonedRoot = core.logicalRoot.cloneNode(true /*deep*/);\n\n            moveChildNodes(fragment, clonedRoot);\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: 'enteredShadowEdit',\n                },\n                false /*broadcast*/\n            );\n\n            // This need to be done after EnteredShadowEdit event is triggered since EnteredShadowEdit event will cause a SelectionChanged event\n            // if current selection is table selection or image selection\n            if (!core.cache.cachedModel && model) {\n                core.cache.cachedModel = model;\n            }\n\n            toggleCaret(core, true /* hide */);\n\n            core.lifecycle.shadowEditFragment = fragment;\n        } else {\n            core.lifecycle.shadowEditFragment = null;\n\n            toggleCaret(core, false /* hide */);\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: 'leavingShadowEdit',\n                },\n                false /*broadcast*/\n            );\n\n            if (core.cache.cachedModel) {\n                // Force clear cached element from selected block\n                iterateSelections(core.cache.cachedModel, () => {});\n\n                core.api.setContentModel(core, core.cache.cachedModel, {\n                    ignoreSelection: true, // Do not set focus and selection when quit shadow edit, focus may remain in UI control (picker, ...)\n                });\n            }\n        }\n    }\n};\n","import type {\n    EditorPlugin,\n    PluginEvent,\n    PluginEventType,\n    TriggerEvent,\n} from 'roosterjs-content-model-types';\n\nconst allowedEventsInShadowEdit: PluginEventType[] = [\n    'editorReady',\n    'beforeDispose',\n    'extractContentWithDom',\n    'zoomChanged',\n];\n\n/**\n * @internal\n * Trigger a plugin event\n * @param core The EditorCore object\n * @param pluginEvent The event object to trigger\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\n */\nexport const triggerEvent: TriggerEvent = (core, pluginEvent, broadcast) => {\n    if (\n        (!core.lifecycle.shadowEditFragment ||\n            allowedEventsInShadowEdit.indexOf(pluginEvent.eventType as PluginEventType) >= 0) &&\n        (broadcast || !core.plugins.some(plugin => handledExclusively(pluginEvent, plugin)))\n    ) {\n        core.plugins.forEach(plugin => {\n            if (plugin.onPluginEvent) {\n                plugin.onPluginEvent(pluginEvent);\n            }\n        });\n    }\n};\n\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\n    if (plugin.onPluginEvent && plugin.willHandleEventExclusively?.(event)) {\n        plugin.onPluginEvent(event);\n        return true;\n    }\n\n    return false;\n}\n","import { areSameSelections } from './areSameSelections';\nimport { createParagraphMap } from './ParagraphMapImpl';\nimport { createTextMutationObserver } from './textMutationObserver';\nimport { DomIndexerImpl } from './domIndexerImpl';\nimport { updateCache } from './updateCache';\nimport type { Mutation } from './MutationType';\nimport type {\n    CachePluginState,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n    EditorOptions,\n} from 'roosterjs-content-model-types';\n\n/**\n * ContentModel cache plugin manages cached Content Model, and refresh the cache when necessary\n */\nclass CachePlugin implements PluginWithState<CachePluginState> {\n    private editor: IEditor | null = null;\n    private state: CachePluginState;\n\n    /**\n     * Construct a new instance of CachePlugin class\n     * @param option The editor option\n     * @param contentDiv The editor content DIV\n     */\n    constructor(option: EditorOptions, contentDiv: HTMLDivElement) {\n        this.state = {};\n\n        if (!option.disableCache) {\n            this.state.domIndexer = new DomIndexerImpl(\n                option.experimentalFeatures &&\n                    option.experimentalFeatures.indexOf('PersistCache') >= 0,\n                option.experimentalFeatures &&\n                    option.experimentalFeatures.indexOf(\n                        'KeepSelectionMarkerWhenEnteringTextNode'\n                    ) >= 0\n            );\n            this.state.textMutationObserver = createTextMutationObserver(\n                contentDiv,\n                this.onMutation\n            );\n        }\n\n        if (option.enableParagraphMap) {\n            this.state.paragraphMap = createParagraphMap();\n        }\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'Cache';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.editor.getDocument().addEventListener('selectionchange', this.onNativeSelectionChange);\n\n        this.state.textMutationObserver?.startObserving();\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.state.textMutationObserver?.stopObserving();\n\n        if (this.editor) {\n            this.editor\n                .getDocument()\n                .removeEventListener('selectionchange', this.onNativeSelectionChange);\n            this.editor = null;\n        }\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState(): CachePluginState {\n        return this.state;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case 'logicalRootChanged':\n                this.invalidateCache();\n\n                if (this.state.textMutationObserver) {\n                    this.state.textMutationObserver.stopObserving();\n                    this.state.textMutationObserver = createTextMutationObserver(\n                        event.logicalRoot,\n                        this.onMutation\n                    );\n                    this.state.textMutationObserver.startObserving();\n                }\n                break;\n\n            case 'keyDown':\n            case 'input':\n                if (!this.state.textMutationObserver) {\n                    // When updating cache is not enabled, need to clear the cache to make sure other plugins can get an up-to-date content model\n                    this.invalidateCache();\n                }\n                break;\n\n            case 'selectionChanged':\n                this.updateCachedModel(this.editor);\n                break;\n\n            case 'contentChanged':\n                const { contentModel, selection } = event;\n\n                if (contentModel && this.state.domIndexer) {\n                    updateCache(this.state, contentModel, selection);\n                } else {\n                    this.invalidateCache();\n                }\n\n                break;\n        }\n    }\n\n    private onMutation = (mutation: Mutation) => {\n        if (this.editor) {\n            switch (mutation.type) {\n                case 'childList':\n                    if (\n                        !this.state.domIndexer?.reconcileChildList(\n                            mutation.addedNodes,\n                            mutation.removedNodes\n                        )\n                    ) {\n                        this.invalidateCache();\n                    }\n                    break;\n\n                case 'text':\n                    this.updateCachedModel(this.editor, true /*forceUpdate*/);\n                    break;\n\n                case 'elementId':\n                    const element = mutation.element;\n\n                    if (!this.state.domIndexer?.reconcileElementId(element)) {\n                        this.invalidateCache();\n                    }\n\n                    break;\n\n                case 'unknown':\n                    this.invalidateCache();\n                    break;\n            }\n        }\n    };\n\n    private onNativeSelectionChange = () => {\n        if (this.editor?.hasFocus()) {\n            this.updateCachedModel(this.editor);\n        }\n    };\n\n    private invalidateCache() {\n        if (!this.editor?.isInShadowEdit()) {\n            this.state.cachedModel = undefined;\n            this.state.cachedSelection = undefined;\n\n            // Clear paragraph indexer to prevent stale references to old paragraphs\n            // It will be rebuild next time when we create a new Content Model\n            this.state.paragraphMap?.clear();\n        }\n    }\n\n    private updateCachedModel(editor: IEditor, forceUpdate?: boolean) {\n        if (editor.isInShadowEdit()) {\n            return;\n        }\n\n        const cachedSelection = this.state.cachedSelection;\n        this.state.cachedSelection = undefined; // Clear it to force getDOMSelection() retrieve the latest selection range\n\n        const newRangeEx = editor.getDOMSelection() || undefined;\n        const model = this.state.cachedModel;\n        const isSelectionChanged =\n            forceUpdate ||\n            !cachedSelection ||\n            !newRangeEx ||\n            !areSameSelections(newRangeEx, cachedSelection);\n\n        if (isSelectionChanged) {\n            if (\n                !model ||\n                !newRangeEx ||\n                !this.state.domIndexer?.reconcileSelection(model, newRangeEx, cachedSelection)\n            ) {\n                this.invalidateCache();\n            } else {\n                updateCache(this.state, model, newRangeEx);\n            }\n        } else {\n            this.state.cachedSelection = cachedSelection;\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of CachePlugin class.\n * @param option The editor option\n * @param contentDiv The editor content DIV\n */\nexport function createCachePlugin(\n    option: EditorOptions,\n    contentDiv: HTMLDivElement\n): PluginWithState<CachePluginState> {\n    return new CachePlugin(option, contentDiv);\n}\n","import { getParagraphMarker, setParagraphMarker } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelParagraph,\n    ContentModelParagraphCommon,\n    ParagraphIndexer,\n    ParagraphMap,\n    ReadonlyContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\ninterface ParagraphWithMarker extends ContentModelParagraphCommon {\n    _marker?: string;\n}\n\n/**\n * @internal, used by test code only\n */\nexport interface ParagraphMapReset {\n    _reset(): void;\n    _getMap(): { [key: string]: ReadonlyContentModelParagraph };\n}\n\nconst idPrefix = 'paragraph';\n\nclass ParagraphMapImpl implements ParagraphMap, ParagraphIndexer, ParagraphMapReset {\n    private static prefixNum = 0;\n    private nextId = 0;\n    private paragraphMap: { [key: string]: ReadonlyContentModelParagraph } = {};\n\n    constructor() {\n        ParagraphMapImpl.prefixNum++;\n    }\n\n    assignMarkerToModel(element: HTMLElement, paragraph: ContentModelParagraph): void {\n        const marker = getParagraphMarker(element);\n        const paragraphWithMarker = paragraph as ParagraphWithMarker;\n\n        if (marker) {\n            paragraphWithMarker._marker = marker;\n\n            this.paragraphMap[marker] = paragraph;\n        } else {\n            paragraphWithMarker._marker = this.generateId();\n\n            this.applyMarkerToDom(element, paragraph);\n        }\n    }\n\n    applyMarkerToDom(element: HTMLElement, paragraph: ContentModelParagraph): void {\n        const paragraphWithMarker = paragraph as ParagraphWithMarker;\n\n        if (!paragraphWithMarker._marker) {\n            paragraphWithMarker._marker = this.generateId();\n        }\n\n        const marker = paragraphWithMarker._marker;\n\n        if (marker) {\n            setParagraphMarker(element, marker);\n\n            this.paragraphMap[marker] = paragraph;\n        }\n    }\n\n    /**\n     * Get paragraph using a previously marked paragraph\n     * @param markedParagraph The previously marked paragraph to get\n     */\n    getParagraphFromMarker(\n        markerParagraph: ReadonlyContentModelParagraph\n    ): ReadonlyContentModelParagraph | null {\n        const marker = (markerParagraph as ParagraphWithMarker)._marker;\n\n        return marker ? this.paragraphMap[marker] || null : null;\n    }\n\n    clear() {\n        this.paragraphMap = {};\n    }\n\n    //#region For test code only\n    _reset() {\n        ParagraphMapImpl.prefixNum = 0;\n        this.nextId = 0;\n    }\n\n    _getMap() {\n        return this.paragraphMap;\n    }\n    //#endregion\n\n    private generateId() {\n        return `${idPrefix}_${ParagraphMapImpl.prefixNum}_${this.nextId++}`;\n    }\n}\n\n/**\n * @internal\n */\nexport function createParagraphMap(): ParagraphMap & ParagraphIndexer {\n    return new ParagraphMapImpl();\n}\n","import type {\n    CacheSelection,\n    DOMSelection,\n    RangeSelection,\n    RangeSelectionForCache,\n    TableSelection,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Check if the given selections are the same\n */\nexport function areSameSelections(\n    sel1: DOMSelection,\n    sel2: DOMSelection | CacheSelection\n): boolean {\n    if (sel1 == sel2) {\n        return true;\n    }\n\n    switch (sel1.type) {\n        case 'image':\n            return sel2.type == 'image' && sel2.image == sel1.image;\n\n        case 'table':\n            return sel2.type == 'table' && areSameTableSelections(sel1, sel2);\n\n        case 'range':\n        default:\n            if (sel2.type == 'range') {\n                const range1 = sel1.range;\n\n                if (isCacheSelection(sel2)) {\n                    const { start, end } = sel2;\n\n                    return (\n                        range1.startContainer == start.node &&\n                        range1.endContainer == end.node &&\n                        range1.startOffset == start.offset &&\n                        range1.endOffset == end.offset\n                    );\n                } else {\n                    return areSameRanges(range1, sel2.range);\n                }\n            } else {\n                return false;\n            }\n    }\n}\n\nfunction areSame<O>(o1: O, o2: O, keys: (keyof O)[]) {\n    return keys.every(k => o1[k] == o2[k]);\n}\n\nconst TableSelectionKeys: (keyof TableSelection)[] = [\n    'table',\n    'firstColumn',\n    'lastColumn',\n    'firstRow',\n    'lastRow',\n];\nconst RangeKeys: (keyof Range)[] = ['startContainer', 'endContainer', 'startOffset', 'endOffset'];\n\n/**\n * @internal\n */\nexport function areSameTableSelections(t1: TableSelection, t2: TableSelection): boolean {\n    return areSame(t1, t2, TableSelectionKeys);\n}\n\n/**\n * @internal\n */\nexport function areSameRanges(r1: Range, r2: Range): boolean {\n    return areSame(r1, r2, RangeKeys);\n}\n\nfunction isCacheSelection(\n    sel: RangeSelectionForCache | RangeSelection\n): sel is RangeSelectionForCache {\n    return !!(sel as RangeSelectionForCache).start;\n}\n","import {\n    EmptySegmentFormat,\n    addCode,\n    addLink,\n    createParagraph,\n    createSelectionMarker,\n    createText,\n    getObjectKeys,\n    isElementOfType,\n    isEntityDelimiter,\n    isNodeOfType,\n    setSelection,\n} from 'roosterjs-content-model-dom';\nimport type {\n    CacheSelection,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    ContentModelSelectionMarker,\n    ContentModelTable,\n    ContentModelText,\n    DomIndexer,\n    DOMSelection,\n    RangeSelectionForCache,\n    Selectable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal Export for test only\n */\nexport interface SegmentItem {\n    paragraph: ContentModelParagraph;\n    segments: ContentModelSegment[];\n}\n\n/**\n * @internal Export for test only\n */\nexport interface TableItem {\n    table: ContentModelTable;\n}\n\n/**\n * @internal Export for test only\n */\nexport interface BlockEntityDelimiterItem {\n    entity: ContentModelEntity;\n    parent: ContentModelBlockGroup;\n}\n\n/**\n * @internal Export for test only\n */\nexport interface IndexedSegmentNode extends Node {\n    __roosterjsContentModel: SegmentItem;\n}\n\n/**\n * @internal Export for test only\n */\nexport interface IndexedTableElement extends HTMLTableElement {\n    __roosterjsContentModel: TableItem;\n}\n\n/**\n * @internal Export for test only\n */\nexport interface IndexedEntityDelimiter extends Text {\n    __roosterjsContentModel: BlockEntityDelimiterItem;\n}\n\n/**\n * Context object used by DomIndexer when reconcile mutations with child list\n */\ninterface ReconcileChildListContext {\n    /**\n     * Index of segment in current paragraph\n     */\n    segIndex: number;\n\n    /**\n     * The current paragraph that we are handling\n     */\n    paragraph?: ContentModelParagraph;\n\n    /**\n     * Text node that is added from mutation but has not been handled. This can happen when we first see an added node then later we see a removed one.\n     * e.g. Type text in an empty paragraph (&lt;div&gt;&lt;br&gt;&lt;/div&gt;), so a text node will be added and &lt;BR&gt; will be removed.\n     * Set to a valid text node means we need to handle it later. If it is finally not handled, that means we need to clear cache\n     * Set to undefined (initial value) means no pending text node is hit yet (valid case)\n     * Set to null means there was a pending text node which is already handled, so if we see another pending text node,\n     * we should clear cache since we don't know how to handle it\n     */\n    pendingTextNode?: Text | null;\n\n    /**\n     * Format of the removed segment, this will be used as the format for newly created segment\n     */\n    format?: ContentModelSegmentFormat;\n}\n\nfunction isIndexedSegment(node: Node): node is IndexedSegmentNode {\n    const { paragraph, segments } = (node as IndexedSegmentNode).__roosterjsContentModel ?? {};\n\n    return (\n        paragraph &&\n        paragraph.blockType == 'Paragraph' &&\n        Array.isArray(paragraph.segments) &&\n        Array.isArray(segments) &&\n        segments.every(segment => paragraph.segments.includes(segment))\n    );\n}\n\nfunction isIndexedDelimiter(node: Node): node is IndexedEntityDelimiter {\n    const { entity, parent } = (node as IndexedEntityDelimiter).__roosterjsContentModel ?? {};\n\n    return (\n        entity?.blockType == 'Entity' &&\n        entity.wrapper &&\n        parent?.blockGroupType &&\n        Array.isArray(parent.blocks)\n    );\n}\n\nfunction getIndexedSegmentItem(node: Node | null): SegmentItem | null {\n    return node && isIndexedSegment(node) ? node.__roosterjsContentModel : null;\n}\n\nfunction getIndexedTableItem(element: HTMLTableElement): TableItem | null {\n    const index = (element as IndexedTableElement).__roosterjsContentModel;\n    const table = index?.table;\n\n    if (\n        table?.blockType == 'Table' &&\n        Array.isArray(table.rows) &&\n        table.rows.every(\n            x => Array.isArray(x?.cells) && x.cells.every(y => y?.blockGroupType == 'TableCell')\n        )\n    ) {\n        return index;\n    } else {\n        return null;\n    }\n}\n\n// Make a node not indexed. Do not export this function since we should not let code outside here know this detail\nfunction unindex(node: Partial<IndexedSegmentNode>) {\n    delete node.__roosterjsContentModel;\n}\n\n/**\n * @internal\n * Implementation of DomIndexer\n */\nexport class DomIndexerImpl implements DomIndexer {\n    constructor(\n        private readonly persistCache?: boolean,\n        private readonly keepSelectionMarkerWhenEnteringTextNode?: boolean\n    ) {}\n\n    onSegment(segmentNode: Node, paragraph: ContentModelParagraph, segment: ContentModelSegment[]) {\n        const indexedText = segmentNode as IndexedSegmentNode;\n        indexedText.__roosterjsContentModel = {\n            paragraph,\n            segments: segment,\n        };\n    }\n\n    onParagraph(paragraphElement: HTMLElement) {\n        let previousText: Text | null = null;\n\n        for (let child = paragraphElement.firstChild; child; child = child.nextSibling) {\n            if (isNodeOfType(child, 'TEXT_NODE')) {\n                if (!previousText) {\n                    previousText = child;\n                } else {\n                    const item = getIndexedSegmentItem(previousText);\n\n                    if (item && isIndexedSegment(child)) {\n                        item.segments = item.segments.concat(\n                            child.__roosterjsContentModel.segments\n                        );\n                        child.__roosterjsContentModel.segments = [];\n                    }\n                }\n            } else if (isNodeOfType(child, 'ELEMENT_NODE')) {\n                previousText = null;\n\n                this.onParagraph(child);\n            } else {\n                previousText = null;\n            }\n        }\n    }\n\n    onTable(tableElement: HTMLTableElement, table: ContentModelTable) {\n        const indexedTable = tableElement as IndexedTableElement;\n        indexedTable.__roosterjsContentModel = { table };\n    }\n\n    onBlockEntity(entity: ContentModelEntity, group: ContentModelBlockGroup) {\n        this.onBlockEntityDelimiter(entity.wrapper.previousSibling, entity, group);\n        this.onBlockEntityDelimiter(entity.wrapper.nextSibling, entity, group);\n    }\n\n    onMergeText(targetText: Text, sourceText: Text) {\n        if (isIndexedSegment(targetText) && isIndexedSegment(sourceText)) {\n            if (targetText.nextSibling == sourceText) {\n                targetText.__roosterjsContentModel.segments.push(\n                    ...sourceText.__roosterjsContentModel.segments\n                );\n\n                unindex(sourceText);\n            }\n        } else {\n            unindex(sourceText);\n            unindex(targetText);\n        }\n    }\n\n    clearIndex(container: Node) {\n        internalClearIndex(container);\n    }\n\n    reconcileSelection(\n        model: ContentModelDocument,\n        newSelection: DOMSelection,\n        oldSelection?: CacheSelection\n    ): boolean {\n        let selectionMarker: ContentModelSelectionMarker | undefined;\n        if (oldSelection) {\n            let startNode: Node | undefined;\n\n            if (\n                oldSelection.type == 'range' &&\n                this.isCollapsed(oldSelection) &&\n                (startNode = oldSelection.start.node) &&\n                isNodeOfType(startNode, 'TEXT_NODE') &&\n                isIndexedSegment(startNode) &&\n                startNode.__roosterjsContentModel.segments.length > 0\n            ) {\n                this.reconcileTextSelection(startNode);\n            } else {\n                selectionMarker = this.selectionMarkerToKeepWhenEnteringTextNode(\n                    oldSelection,\n                    newSelection\n                );\n\n                setSelection(model);\n            }\n        }\n\n        switch (newSelection.type) {\n            case 'image':\n                const indexedImage = getIndexedSegmentItem(newSelection.image);\n                const image = indexedImage?.segments[0];\n\n                if (image) {\n                    image.isSelected = true;\n                    setSelection(model, image);\n\n                    return true;\n                } else {\n                    return false;\n                }\n\n            case 'table':\n                const indexedTable = getIndexedTableItem(newSelection.table);\n\n                if (indexedTable) {\n                    const firstCell =\n                        indexedTable.table.rows[newSelection.firstRow]?.cells[\n                            newSelection.firstColumn\n                        ];\n                    const lastCell =\n                        indexedTable.table.rows[newSelection.lastRow]?.cells[\n                            newSelection.lastColumn\n                        ];\n\n                    if (firstCell && lastCell) {\n                        setSelection(model, firstCell, lastCell);\n\n                        return true;\n                    }\n                }\n\n                return false;\n\n            case 'range':\n                const newRange = newSelection.range;\n                if (newRange) {\n                    const {\n                        startContainer,\n                        startOffset,\n                        endContainer,\n                        endOffset,\n                        collapsed,\n                    } = newRange;\n\n                    delete model.hasRevertedRangeSelection;\n\n                    if (collapsed) {\n                        return !!this.reconcileNodeSelection(\n                            startContainer,\n                            startOffset,\n                            model.format\n                        );\n                    } else if (\n                        startContainer == endContainer &&\n                        isNodeOfType(startContainer, 'TEXT_NODE')\n                    ) {\n                        if (newSelection.isReverted) {\n                            model.hasRevertedRangeSelection = true;\n                        }\n\n                        return (\n                            isIndexedSegment(startContainer) &&\n                            !!this.reconcileTextSelection(\n                                startContainer,\n                                startOffset,\n                                endOffset,\n                                selectionMarker\n                            )\n                        );\n                    } else {\n                        const marker1 = this.reconcileNodeSelection(startContainer, startOffset);\n                        const marker2 = this.reconcileNodeSelection(endContainer, endOffset);\n\n                        if (marker1 && marker2) {\n                            if (newSelection.isReverted) {\n                                model.hasRevertedRangeSelection = true;\n                            }\n\n                            setSelection(model, marker1, marker2);\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n\n                break;\n        }\n\n        return false;\n    }\n\n    reconcileChildList(addedNodes: ArrayLike<Node>, removedNodes: ArrayLike<Node>): boolean {\n        if (!this.persistCache) {\n            return false;\n        }\n\n        let canHandle = true;\n        const context: ReconcileChildListContext = {\n            segIndex: -1,\n        };\n\n        // First process added nodes\n        const addedNode = addedNodes[0];\n\n        if (addedNodes.length == 1 && isNodeOfType(addedNode, 'TEXT_NODE')) {\n            canHandle = this.reconcileAddedNode(addedNode, context);\n        } else if (addedNodes.length > 0) {\n            canHandle = false;\n        }\n\n        // Second, process removed nodes\n        const removedNode = removedNodes[0];\n\n        if (canHandle && removedNodes.length == 1) {\n            canHandle = this.reconcileRemovedNode(removedNode, context);\n        } else if (removedNodes.length > 0) {\n            canHandle = false;\n        }\n\n        return canHandle && !context.pendingTextNode;\n    }\n\n    reconcileElementId(element: HTMLElement) {\n        if (isElementOfType(element, 'img')) {\n            const indexedImg = getIndexedSegmentItem(element);\n\n            if (indexedImg?.segments[0]?.segmentType == 'Image') {\n                indexedImg.segments[0].format.id = element.id;\n\n                return true;\n            } else {\n                return false;\n            }\n        } else if (isElementOfType(element, 'table')) {\n            const indexedTable = getIndexedTableItem(element);\n\n            if (indexedTable) {\n                indexedTable.table.format.id = element.id;\n\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    private onBlockEntityDelimiter(\n        node: Node | null,\n        entity: ContentModelEntity,\n        parent: ContentModelBlockGroup\n    ) {\n        if (isNodeOfType(node, 'ELEMENT_NODE') && isEntityDelimiter(node) && node.firstChild) {\n            const indexedDelimiter = node.firstChild as IndexedEntityDelimiter;\n\n            indexedDelimiter.__roosterjsContentModel = { entity, parent };\n        }\n    }\n\n    private isCollapsed(selection: RangeSelectionForCache): boolean {\n        const { start, end } = selection;\n\n        return start.node == end.node && start.offset == end.offset;\n    }\n\n    private reconcileNodeSelection(\n        node: Node,\n        offset: number,\n        defaultFormat?: ContentModelSegmentFormat\n    ): Selectable | undefined {\n        if (isNodeOfType(node, 'TEXT_NODE')) {\n            if (isIndexedSegment(node)) {\n                return this.reconcileTextSelection(node, offset);\n            } else if (isIndexedDelimiter(node)) {\n                return this.reconcileDelimiterSelection(node, defaultFormat);\n            } else {\n                return undefined;\n            }\n        } else if (offset >= node.childNodes.length) {\n            return this.insertMarker(node.lastChild, true /*isAfter*/);\n        } else {\n            return this.insertMarker(node.childNodes[offset], false /*isAfter*/);\n        }\n    }\n\n    private insertMarker(node: Node | null, isAfter: boolean): Selectable | undefined {\n        let marker: ContentModelSelectionMarker | undefined;\n        const segmentItem = node && getIndexedSegmentItem(node);\n\n        if (segmentItem) {\n            const { paragraph, segments } = segmentItem;\n            const index = paragraph.segments.indexOf(segments[0]);\n\n            if (index >= 0) {\n                const formatSegment =\n                    (!isAfter && paragraph.segments[index - 1]) || paragraph.segments[index];\n                marker = createSelectionMarker(formatSegment.format);\n\n                paragraph.segments.splice(isAfter ? index + 1 : index, 0, marker);\n            }\n        }\n\n        return marker;\n    }\n\n    private reconcileTextSelection(\n        textNode: IndexedSegmentNode,\n        startOffset?: number,\n        endOffset?: number,\n        selectionMarker?: ContentModelSelectionMarker\n    ) {\n        const { paragraph, segments } = textNode.__roosterjsContentModel;\n        const first = segments[0];\n        const last = segments[segments.length - 1];\n        let selectable: Selectable | undefined;\n\n        if (first?.segmentType == 'Text' && last?.segmentType == 'Text') {\n            const newSegments: ContentModelSegment[] = [];\n            const txt = textNode.nodeValue || '';\n            const textSegments: ContentModelText[] = [];\n\n            if (startOffset === undefined) {\n                first.text = txt;\n                newSegments.push(first);\n                textSegments.push(first);\n            } else {\n                if (startOffset > 0) {\n                    first.text = txt.substring(0, startOffset);\n                    newSegments.push(first);\n                    textSegments.push(first);\n                }\n\n                if (endOffset === undefined) {\n                    const marker = createSelectionMarker(selectionMarker?.format ?? first.format);\n                    newSegments.push(marker);\n\n                    if (startOffset < (textNode.nodeValue ?? '').length) {\n                        if (first.link) {\n                            addLink(marker, first.link);\n                        }\n\n                        if (first.code) {\n                            addCode(marker, first.code);\n                        }\n                    }\n\n                    selectable = marker;\n                    endOffset = startOffset;\n                } else if (endOffset > startOffset) {\n                    const middle = createText(\n                        txt.substring(startOffset, endOffset),\n                        selectionMarker?.format ?? first.format,\n                        first.link,\n                        first.code\n                    );\n\n                    middle.isSelected = true;\n                    newSegments.push(middle);\n                    textSegments.push(middle);\n                    selectable = middle;\n                }\n\n                if (endOffset < txt.length) {\n                    const newLast = createText(\n                        txt.substring(endOffset),\n                        selectionMarker?.format ?? first.format,\n                        first.link,\n                        first.code\n                    );\n                    newSegments.push(newLast);\n                    textSegments.push(newLast);\n                }\n            }\n\n            let firstIndex = paragraph.segments.indexOf(first);\n            let lastIndex = paragraph.segments.indexOf(last);\n\n            if (firstIndex >= 0 && lastIndex >= 0) {\n                while (\n                    firstIndex > 0 &&\n                    paragraph.segments[firstIndex - 1].segmentType == 'SelectionMarker'\n                ) {\n                    firstIndex--;\n                }\n\n                while (\n                    lastIndex < paragraph.segments.length - 1 &&\n                    paragraph.segments[lastIndex + 1].segmentType == 'SelectionMarker'\n                ) {\n                    lastIndex++;\n                }\n\n                paragraph.segments.splice(firstIndex, lastIndex - firstIndex + 1, ...newSegments);\n            }\n\n            this.onSegment(textNode, paragraph, textSegments);\n\n            if (!this.persistCache) {\n                delete paragraph.cachedElement;\n            }\n        } else if (first?.segmentType == 'Entity' && first == last) {\n            const wrapper = first.wrapper;\n            const index = paragraph.segments.indexOf(first);\n            const delimiter = textNode.parentElement;\n            const isBefore = wrapper.previousSibling == delimiter;\n            const isAfter = wrapper.nextSibling == delimiter;\n\n            if (index >= 0 && delimiter && isEntityDelimiter(delimiter) && (isBefore || isAfter)) {\n                const marker = createSelectionMarker(\n                    selectionMarker?.format ??\n                        (paragraph.segments[isAfter ? index + 1 : index - 1] ?? first).format\n                );\n\n                paragraph.segments.splice(isAfter ? index + 1 : index, 0, marker);\n\n                selectable = marker;\n            }\n        }\n\n        return selectable;\n    }\n\n    private reconcileDelimiterSelection(\n        node: IndexedEntityDelimiter,\n        defaultFormat?: ContentModelSegmentFormat\n    ) {\n        let marker: ContentModelSelectionMarker | undefined;\n\n        const { entity, parent } = node.__roosterjsContentModel;\n        const index = parent.blocks.indexOf(entity);\n        const delimiter = node.parentElement;\n        const wrapper = entity.wrapper;\n        const isBefore = wrapper.previousSibling == delimiter;\n        const isAfter = wrapper.nextSibling == delimiter;\n\n        if (index >= 0 && delimiter && isEntityDelimiter(delimiter) && (isBefore || isAfter)) {\n            marker = createSelectionMarker(defaultFormat);\n\n            const para = createParagraph(\n                true /*isImplicit*/,\n                undefined /*blockFormat*/,\n                defaultFormat\n            );\n\n            para.segments.push(marker);\n            parent.blocks.splice(isBefore ? index : index + 1, 0, para);\n        }\n\n        return marker;\n    }\n\n    private reconcileAddedNode(node: Text, context: ReconcileChildListContext): boolean {\n        let segmentItem: SegmentItem | null = null;\n        let index = -1;\n        let existingSegment: ContentModelSegment;\n        const { previousSibling, nextSibling } = node;\n\n        if (\n            (segmentItem = getIndexedSegmentItem(getLastLeaf(previousSibling))) &&\n            (existingSegment = segmentItem.segments[segmentItem.segments.length - 1]) &&\n            (index = segmentItem.paragraph.segments.indexOf(existingSegment)) >= 0\n        ) {\n            // When we can find indexed segment before current one, use it as the insert index\n            this.indexNode(segmentItem.paragraph, index + 1, node, existingSegment.format);\n        } else if (\n            (segmentItem = getIndexedSegmentItem(getFirstLeaf(nextSibling))) &&\n            (existingSegment = segmentItem.segments[0]) &&\n            (index = segmentItem.paragraph.segments.indexOf(existingSegment)) >= 0\n        ) {\n            // When we can find indexed segment after current one, use it as the insert index\n            this.indexNode(segmentItem.paragraph, index, node, existingSegment.format);\n        } else if (context.paragraph && context.segIndex >= 0) {\n            // When there is indexed paragraph from removed nodes, we can use it as the insert index\n            this.indexNode(context.paragraph, context.segIndex, node, context.format);\n        } else if (context.pendingTextNode === undefined) {\n            // When we can't find the insert index, set current node as pending node\n            // so later we can pick it up when we have enough info when processing removed node\n            // Only do this when pendingTextNode is undefined. If it is null it means there was already a pending node before\n            // and in that case we should return false since we can't handle two pending text node\n            context.pendingTextNode = node;\n        } else {\n            return false;\n        }\n\n        return true;\n    }\n\n    private reconcileRemovedNode(node: Node, context: ReconcileChildListContext): boolean {\n        let segmentItem: SegmentItem | null = null;\n        let removingSegment: ContentModelSegment;\n\n        if (\n            context.segIndex < 0 &&\n            !context.paragraph && // No previous removed segment or related paragraph found, and\n            (segmentItem = getIndexedSegmentItem(node)) && // The removed node is indexed, and\n            (removingSegment = segmentItem.segments[0]) // There is at least one related segment\n        ) {\n            // Now we can remove the indexed segment from the paragraph, and remember it, later we may need to use it\n            context.format = removingSegment.format;\n            context.paragraph = segmentItem.paragraph;\n            context.segIndex = segmentItem.paragraph.segments.indexOf(segmentItem.segments[0]);\n\n            if (context.segIndex < 0) {\n                // Indexed segment is not under paragraph, something wrong happens, we cannot keep handling\n                return false;\n            }\n\n            for (let i = 0; i < segmentItem.segments.length; i++) {\n                const index = segmentItem.paragraph.segments.indexOf(segmentItem.segments[i]);\n\n                if (index >= 0) {\n                    segmentItem.paragraph.segments.splice(index, 1);\n                }\n            }\n\n            if (context.pendingTextNode) {\n                // If we have pending text node added but not indexed, do it now\n                this.indexNode(\n                    context.paragraph,\n                    context.segIndex,\n                    context.pendingTextNode,\n                    segmentItem.segments[0].format\n                );\n\n                // Set to null since we have processed it.\n                // Next time we see a pending node we know we have already processed one so it is a situation we cannot handle\n                context.pendingTextNode = null;\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private indexNode(\n        paragraph: ContentModelParagraph,\n        index: number,\n        textNode: Text,\n        format?: ContentModelSegmentFormat\n    ) {\n        const copiedFormat = format ? { ...format } : undefined;\n\n        if (copiedFormat) {\n            getObjectKeys(copiedFormat).forEach(key => {\n                if (EmptySegmentFormat[key] === undefined) {\n                    delete copiedFormat[key];\n                }\n            });\n        }\n\n        const text = createText(textNode.textContent ?? '', copiedFormat);\n\n        paragraph.segments.splice(index, 0, text);\n        this.onSegment(textNode, paragraph, [text]);\n    }\n\n    private selectionMarkerToKeepWhenEnteringTextNode(\n        oldSelection: CacheSelection,\n        newSelection: DOMSelection\n    ): ContentModelSelectionMarker | undefined {\n        // For CJK keyboard input on mobile, we may have a situation like this:\n        // User toggle bold/italic/underline on an empty div, the pending format will be applied on the selection marker\n        // then type some text, the selection move to the text node and the selection marker will be recreated during the reconciliation and lose its original formatting\n        // In this case, we need to keep the original formatting of the selection marker to match the pending format\n\n        if (\n            this.keepSelectionMarkerWhenEnteringTextNode &&\n            oldSelection.type == 'range' &&\n            this.isCollapsed(oldSelection) &&\n            newSelection.type == 'range' &&\n            isNodeOfType(newSelection.range.commonAncestorContainer, 'TEXT_NODE') &&\n            newSelection.range.commonAncestorContainer.parentElement == oldSelection.start.node &&\n            isIndexedSegment(newSelection.range.commonAncestorContainer) &&\n            newSelection.range.commonAncestorContainer.__roosterjsContentModel.paragraph.segments[0]\n                .segmentType == 'SelectionMarker'\n        ) {\n            return newSelection.range.commonAncestorContainer.__roosterjsContentModel.paragraph\n                .segments[0];\n        }\n        return undefined;\n    }\n}\n\nfunction getLastLeaf(node: Node | null): Node | null {\n    while (node?.lastChild) {\n        node = node.lastChild;\n    }\n\n    return node;\n}\n\nfunction getFirstLeaf(node: Node | null): Node | null {\n    while (node?.firstChild) {\n        node = node.firstChild;\n    }\n\n    return node;\n}\n\nfunction internalClearIndex(container: Node) {\n    unindex(container as IndexedSegmentNode);\n\n    for (let node = container.firstChild; node; node = node.nextSibling) {\n        internalClearIndex(node);\n    }\n}\n","import { createDOMHelper } from '../../editor/core/DOMHelperImpl';\nimport {\n    findClosestBlockEntityContainer,\n    findClosestEntityWrapper,\n    isNodeOfType,\n} from 'roosterjs-content-model-dom';\nimport type { DOMHelper, TextMutationObserver } from 'roosterjs-content-model-types';\nimport type { Mutation } from './MutationType';\n\nclass TextMutationObserverImpl implements TextMutationObserver {\n    private observer: MutationObserver;\n    private domHelper: DOMHelper;\n\n    constructor(\n        private contentDiv: HTMLDivElement,\n        private onMutation: (mutation: Mutation) => void\n    ) {\n        this.observer = new MutationObserver(this.onMutationInternal);\n        this.domHelper = createDOMHelper(contentDiv);\n    }\n\n    startObserving() {\n        this.observer.observe(this.contentDiv, {\n            subtree: true,\n            childList: true,\n            attributes: true,\n            characterData: true,\n        });\n    }\n\n    stopObserving() {\n        this.observer.disconnect();\n    }\n\n    flushMutations(ignoreMutations?: boolean) {\n        const mutations = this.observer.takeRecords();\n\n        if (!ignoreMutations) {\n            this.onMutationInternal(mutations);\n        }\n    }\n\n    private onMutationInternal = (mutations: MutationRecord[]) => {\n        let canHandle = true;\n        let firstTarget: Node | null = null;\n        let lastTextChangeNode: Node | null = null;\n        let addedNodes: Node[] = [];\n        let removedNodes: Node[] = [];\n        let reconcileText = false;\n\n        const ignoredNodes = new Set<Node>();\n        const includedNodes = new Set<Node>();\n\n        for (let i = 0; i < mutations.length && canHandle; i++) {\n            const mutation = mutations[i];\n            const target = mutation.target;\n\n            if (ignoredNodes.has(target)) {\n                continue;\n            } else if (!includedNodes.has(target)) {\n                if (\n                    findClosestEntityWrapper(target, this.domHelper) ||\n                    findClosestBlockEntityContainer(target, this.domHelper)\n                ) {\n                    ignoredNodes.add(target);\n\n                    continue;\n                } else {\n                    includedNodes.add(target);\n                }\n            }\n\n            switch (mutation.type) {\n                case 'attributes':\n                    if (this.domHelper.isNodeInEditor(target, true /*excludingSelf*/)) {\n                        if (\n                            mutation.attributeName == 'id' &&\n                            isNodeOfType(target, 'ELEMENT_NODE')\n                        ) {\n                            this.onMutation({ type: 'elementId', element: target });\n                        } else {\n                            // We cannot handle attributes changes on editor content for now\n                            canHandle = false;\n                        }\n                    }\n                    break;\n\n                case 'characterData':\n                    if (lastTextChangeNode && lastTextChangeNode != mutation.target) {\n                        // Multiple text nodes got changed, we don't know how to handle it\n                        canHandle = false;\n                    } else {\n                        lastTextChangeNode = mutation.target;\n                        reconcileText = true;\n                    }\n                    break;\n\n                case 'childList':\n                    if (!firstTarget) {\n                        firstTarget = mutation.target;\n                    } else if (firstTarget != mutation.target) {\n                        canHandle = false;\n                    }\n\n                    if (canHandle) {\n                        addedNodes = addedNodes.concat(Array.from(mutation.addedNodes));\n                        removedNodes = removedNodes.concat(Array.from(mutation.removedNodes));\n                    }\n\n                    break;\n            }\n        }\n\n        if (canHandle) {\n            if (addedNodes.length > 0 || removedNodes.length > 0) {\n                this.onMutation({\n                    type: 'childList',\n                    addedNodes,\n                    removedNodes,\n                });\n            }\n\n            if (reconcileText) {\n                this.onMutation({ type: 'text' });\n            }\n        } else {\n            this.onMutation({ type: 'unknown' });\n        }\n    };\n}\n\n/**\n * @internal\n */\nexport function createTextMutationObserver(\n    contentDiv: HTMLDivElement,\n    onMutation: (mutation: Mutation) => void\n): TextMutationObserver {\n    return new TextMutationObserverImpl(contentDiv, onMutation);\n}\n","import type {\n    CachePluginState,\n    ContentModelDocument,\n    DOMSelection,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function updateCache(\n    state: CachePluginState,\n    model: ContentModelDocument,\n    selection: DOMSelection | null | undefined\n) {\n    state.cachedModel = model;\n\n    if (selection?.type == 'range') {\n        const {\n            range: { startContainer, startOffset, endContainer, endOffset },\n            isReverted,\n        } = selection;\n        state.cachedSelection = {\n            type: 'range',\n            isReverted: isReverted,\n            start: {\n                node: startContainer,\n                offset: startOffset,\n            },\n            end: {\n                node: endContainer,\n                offset: endOffset,\n            },\n        };\n    } else {\n        state.cachedSelection = selection ?? undefined;\n    }\n}\n","import { getSelectionRootNode } from 'roosterjs-content-model-dom';\nimport type {\n    ContextMenuPluginState,\n    ContextMenuProvider,\n    IEditor,\n    PluginWithState,\n    EditorOptions,\n} from 'roosterjs-content-model-types';\n\nconst ContextMenuButton = 2;\n\n/**\n * Edit Component helps handle Content edit features\n */\nclass ContextMenuPlugin implements PluginWithState<ContextMenuPluginState> {\n    private editor: IEditor | null = null;\n    private state: ContextMenuPluginState;\n    private disposer: (() => void) | null = null;\n\n    /**\n     * Construct a new instance of EditPlugin\n     * @param options The editor options\n     */\n    constructor(options: EditorOptions) {\n        this.state = {\n            contextMenuProviders:\n                options.plugins?.filter<ContextMenuProvider<any>>(isContextMenuProvider) || [],\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'ContextMenu';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.attachDomEvent({\n            contextmenu: {\n                beforeDispatch: this.onContextMenuEvent,\n            },\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onContextMenuEvent = (e: Event) => {\n        if (this.editor) {\n            const allItems: any[] = [];\n            const mouseEvent = e as MouseEvent;\n\n            // ContextMenu event can be triggered from mouse right click or keyboard (e.g. Shift+F10 on Windows)\n            // Need to check if this is from keyboard, we need to get target node from selection because in that case\n            // event.target is always the element that attached context menu event, here it will be editor content div.\n            const targetNode =\n                mouseEvent.button == ContextMenuButton\n                    ? (mouseEvent.target as Node)\n                    : this.getFocusedNode(this.editor);\n\n            if (targetNode) {\n                this.state.contextMenuProviders.forEach(provider => {\n                    const items = provider.getContextMenuItems(targetNode) ?? [];\n                    if (items?.length > 0) {\n                        if (allItems.length > 0) {\n                            allItems.push(null);\n                        }\n\n                        allItems.push(...items);\n                    }\n                });\n            }\n\n            this.editor?.triggerEvent('contextMenu', {\n                rawEvent: mouseEvent,\n                items: allItems,\n            });\n        }\n    };\n\n    private getFocusedNode(editor: IEditor) {\n        const selection = editor.getDOMSelection();\n\n        if (selection) {\n            if (selection.type == 'range') {\n                selection.range.collapse(true /*toStart*/);\n            }\n\n            return getSelectionRootNode(selection) || null;\n        } else {\n            return null;\n        }\n    }\n}\n\nfunction isContextMenuProvider(source: unknown): source is ContextMenuProvider<any> {\n    return !!(<ContextMenuProvider<any>>source)?.getContextMenuItems;\n}\n\n/**\n * @internal\n * Create a new instance of EditPlugin.\n */\nexport function createContextMenuPlugin(\n    options: EditorOptions\n): PluginWithState<ContextMenuPluginState> {\n    return new ContextMenuPlugin(options);\n}\n","import { addRangeToSelection } from '../../coreApi/setDOMSelection/addRangeToSelection';\nimport { adjustImageSelectionOnSafari } from './utils/adjustImageSelectionOnSafari';\nimport { deleteEmptyList } from './utils/deleteEmptyList';\nimport { onCreateCopyEntityNode } from '../../override/pasteCopyBlockEntityParser';\nimport { paste } from '../../command/paste/paste';\nimport { pruneUnselectedModel } from './utils/pruneUnselectedModel';\nimport {\n    ChangeSource,\n    contentModelToDom,\n    contentModelToText,\n    createModelToDomContext,\n    deleteSelection,\n    extractClipboardItems,\n    getSelectedCells,\n    isElementOfType,\n    isNodeOfType,\n    iterateSelections,\n    moveChildNodes,\n    normalizeContentModel,\n    toArray,\n    wrap,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ClipboardData,\n    CopyPastePluginState,\n    ContentModelTable,\n    DOMSelection,\n    IEditor,\n    OnNodeCreated,\n    EditorOptions,\n    PluginWithState,\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ReadonlyTableSelectionContext,\n} from 'roosterjs-content-model-types';\n\nconst TEMP_DIV_ID = 'roosterJS_copyCutTempDiv';\n\n/**\n * Copy and paste plugin for handling onCopy and onPaste event\n */\nclass CopyPastePlugin implements PluginWithState<CopyPastePluginState> {\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n    private state: CopyPastePluginState;\n    private customCopyCutEnabled: boolean = false;\n\n    /**\n     * Construct a new instance of CopyPastePlugin\n     * @param option The editor option\n     */\n    constructor(option: EditorOptions) {\n        this.state = {\n            allowedCustomPasteType: option.allowedCustomPasteType || [],\n            tempDiv: null,\n            defaultPasteType: option.defaultPasteType,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'CopyPaste';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.attachDomEvent({\n            paste: {\n                beforeDispatch: e => this.onPaste(e),\n            },\n            copy: {\n                beforeDispatch: e => this.onCutCopy(e, false /*isCut*/),\n            },\n            cut: {\n                beforeDispatch: e => this.onCutCopy(e, true /*isCut*/),\n            },\n        });\n        this.customCopyCutEnabled = editor.isExperimentalFeatureEnabled('CustomCopyCut');\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        if (this.state.tempDiv) {\n            this.state.tempDiv.parentNode?.removeChild(this.state.tempDiv);\n            this.state.tempDiv = null;\n        }\n\n        if (this.disposer) {\n            this.disposer();\n        }\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onCutCopy(event: Event, isCut: boolean) {\n        if (!this.editor) {\n            return;\n        }\n\n        const doc = this.editor.getDocument();\n        const selection = this.editor.getDOMSelection();\n\n        adjustImageSelectionOnSafari(this.editor, selection);\n\n        if (selection && (selection.type != 'range' || !selection.range.collapsed)) {\n            const pasteModel = this.editor.getContentModelCopy('disconnected');\n\n            pruneUnselectedModel(pasteModel);\n\n            if (selection.type === 'table') {\n                iterateSelections(pasteModel, (_, tableContext) => {\n                    if (tableContext?.table) {\n                        preprocessTable(tableContext.table);\n\n                        return true;\n                    }\n                    return false;\n                });\n            } else if (selection.type === 'range') {\n                adjustSelectionForCopyCut(pasteModel);\n            }\n\n            const tempDiv = this.getTempDiv(this.editor.getDocument());\n            const context = createModelToDomContext();\n\n            context.onNodeCreated = onNodeCreated;\n\n            const selectionForCopy = contentModelToDom(\n                tempDiv.ownerDocument,\n                tempDiv,\n                pasteModel,\n                context\n            );\n\n            let newRange: Range | null = selectionForCopy\n                ? domSelectionToRange(doc, selectionForCopy)\n                : null;\n\n            if (newRange) {\n                newRange = this.editor.triggerEvent('beforeCutCopy', {\n                    clonedRoot: tempDiv,\n                    range: newRange,\n                    rawEvent: event as ClipboardEvent,\n                    isCut,\n                }).range;\n\n                if (this.customCopyCutEnabled && isClipboardEvent(event)) {\n                    event.preventDefault();\n                    const text = contentModelToText(pasteModel);\n                    event.clipboardData?.setData('text/html', tempDiv.innerHTML);\n                    event.clipboardData?.setData('text/plain', text);\n                } else if (newRange) {\n                    addRangeToSelection(doc, newRange);\n                }\n\n                doc.defaultView?.requestAnimationFrame(() => {\n                    if (!this.editor) {\n                        return;\n                    }\n\n                    cleanUpAndRestoreSelection(tempDiv);\n                    this.editor.setDOMSelection(selection);\n                    this.editor.focus();\n\n                    if (isCut) {\n                        this.editor.formatContentModel(\n                            (model, context) => {\n                                if (\n                                    deleteSelection(model, [deleteEmptyList], context)\n                                        .deleteResult == 'range'\n                                ) {\n                                    normalizeContentModel(model);\n                                }\n\n                                return true;\n                            },\n                            {\n                                apiName: 'cut',\n                                changeSource: ChangeSource.Cut,\n                            }\n                        );\n                    }\n                });\n            } else {\n                cleanUpAndRestoreSelection(tempDiv);\n            }\n        }\n    }\n\n    private onPaste = (event: Event) => {\n        if (this.editor && isClipboardEvent(event)) {\n            const editor = this.editor;\n\n            const dataTransfer = event.clipboardData;\n\n            if (shouldPreventDefaultPaste(dataTransfer, editor)) {\n                event.preventDefault();\n                extractClipboardItems(\n                    toArray(dataTransfer!.items),\n                    this.state.allowedCustomPasteType\n                ).then((clipboardData: ClipboardData) => {\n                    if (!editor.isDisposed()) {\n                        paste(editor, clipboardData, this.state.defaultPasteType);\n                    }\n                });\n            }\n        }\n    };\n\n    private getTempDiv(doc: Document) {\n        if (!this.state.tempDiv) {\n            const tempDiv = doc.createElement('div');\n\n            tempDiv.style.width = '600px';\n            tempDiv.style.height = '1px';\n            tempDiv.style.overflow = 'hidden';\n            tempDiv.style.position = 'fixed';\n            tempDiv.style.top = '0';\n            tempDiv.style.left = '0';\n            tempDiv.style.userSelect = 'text';\n            tempDiv.contentEditable = 'true';\n\n            if (!this.customCopyCutEnabled) {\n                doc.body.appendChild(tempDiv);\n            }\n\n            this.state.tempDiv = tempDiv;\n        }\n\n        const div = this.state.tempDiv;\n\n        div.style.backgroundColor = 'white';\n        div.style.color = 'black';\n        div.childNodes.forEach(node => div.removeChild(node));\n\n        div.style.display = '';\n        div.id = TEMP_DIV_ID;\n        div.focus();\n\n        return div;\n    }\n}\n/**\n * @internal\n * Exported only for unit testing\n */\nexport function adjustSelectionForCopyCut(pasteModel: ContentModelDocument) {\n    let selectionMarker: ContentModelSegment | undefined;\n    let firstBlock: ContentModelParagraph | undefined;\n    let tableContext: ReadonlyTableSelectionContext | undefined;\n\n    iterateSelections(pasteModel, (_, tableCtxt, block, segments) => {\n        if (selectionMarker) {\n            if (tableCtxt != tableContext && firstBlock?.segments.includes(selectionMarker)) {\n                firstBlock.segments.splice(firstBlock.segments.indexOf(selectionMarker), 1);\n            }\n            return true;\n        }\n\n        const marker = segments?.find(segment => segment.segmentType == 'SelectionMarker');\n        if (!selectionMarker && marker) {\n            tableContext = tableCtxt;\n            firstBlock = block?.blockType == 'Paragraph' ? block : undefined;\n            selectionMarker = marker;\n        }\n\n        return false;\n    });\n}\n\nfunction cleanUpAndRestoreSelection(tempDiv: HTMLDivElement) {\n    tempDiv.style.backgroundColor = '';\n    tempDiv.style.color = '';\n    tempDiv.style.display = 'none';\n    moveChildNodes(tempDiv);\n}\n\nfunction isClipboardEvent(event: Event): event is ClipboardEvent {\n    return !!(event as ClipboardEvent).clipboardData;\n}\n\nfunction domSelectionToRange(doc: Document, selection: DOMSelection): Range | null {\n    let newRange: Range | null = null;\n\n    if (selection.type === 'table') {\n        const table = selection.table;\n        const elementToSelect =\n            table.parentElement?.childElementCount == 1 ? table.parentElement : table;\n\n        newRange = doc.createRange();\n        newRange.selectNode(elementToSelect);\n    } else if (selection.type === 'image') {\n        newRange = doc.createRange();\n        newRange.selectNode(selection.image);\n    } else {\n        newRange = selection.range;\n    }\n\n    return newRange;\n}\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport const onNodeCreated: OnNodeCreated = (modelElement, node): void => {\n    if (isNodeOfType(node, 'ELEMENT_NODE') && isElementOfType(node, 'table')) {\n        wrap(node.ownerDocument, node, 'div');\n    }\n    if (isNodeOfType(node, 'ELEMENT_NODE') && !node.isContentEditable) {\n        node.removeAttribute('contenteditable');\n    }\n    onCreateCopyEntityNode(modelElement, node);\n};\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport function preprocessTable(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n    table.rows = table.rows\n        .map(row => {\n            return {\n                ...row,\n                cells: row.cells.filter(cell => cell.isSelected),\n            };\n        })\n        .filter(row => row.cells.length > 0);\n\n    delete table.format.width;\n\n    table.widths = sel\n        ? table.widths.filter((_, index) => index >= sel?.firstColumn && index <= sel?.lastColumn)\n        : [];\n}\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport function shouldPreventDefaultPaste(\n    dataTransfer: DataTransfer | null,\n    editor: IEditor\n): boolean {\n    if (!dataTransfer?.items) {\n        return false;\n    }\n\n    if (!editor.getEnvironment().isAndroid) {\n        return true;\n    }\n\n    // On Android, the clipboard data from Office apps is a file, which can't be loaded\n    // so we have to allow the default browser behavior\n    return toArray(dataTransfer.items).some(item => {\n        const { type } = item;\n        const isNormalFile = item.kind === 'file' && type !== '';\n        const isText = type.indexOf('text/') === 0;\n        return isNormalFile || isText;\n    });\n}\n\n/**\n * @internal\n * Create a new instance of CopyPastePlugin\n * @param option The editor option\n */\nexport function createCopyPastePlugin(\n    option: EditorOptions\n): PluginWithState<CopyPastePluginState> {\n    return new CopyPastePlugin(option);\n}\n","import type { IEditor, DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Adjust Image selection, so the copy by keyboard does not remove image selection.\n */\nexport function adjustImageSelectionOnSafari(editor: IEditor, selection: DOMSelection | null) {\n    if (editor.getEnvironment().isSafari && selection?.type == 'image') {\n        const range = new Range();\n        range.setStartBefore(selection.image);\n        range.setEndAfter(selection.image);\n        editor.setDOMSelection({\n            range,\n            type: 'range',\n            isReverted: false,\n        });\n    }\n}\n","import {\n    getClosestAncestorBlockGroupIndex,\n    hasSelectionInBlock,\n    hasSelectionInBlockGroup,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DeleteSelectionContext,\n    DeleteSelectionStep,\n    ReadonlyContentModelBlock,\n} from 'roosterjs-content-model-types';\n\nfunction isEmptyBlock(block: ReadonlyContentModelBlock | undefined): boolean {\n    if (block && block.blockType == 'Paragraph') {\n        return block.segments.every(\n            segment => segment.segmentType !== 'SelectionMarker' && segment.segmentType == 'Br'\n        );\n    }\n\n    if (block && block.blockType == 'BlockGroup') {\n        return block.blocks.every(isEmptyBlock);\n    }\n\n    return !!block;\n}\n\n/**\n * @internal\n * If the first item o the list is selected in a expanded selection, we need to remove the list item levels\n * @param context A context object provided by formatContentModel API\n */\nexport const deleteEmptyList: DeleteSelectionStep = (context: DeleteSelectionContext) => {\n    const { insertPoint, deleteResult } = context;\n    if (deleteResult == 'range' && insertPoint?.path) {\n        const index = getClosestAncestorBlockGroupIndex(\n            insertPoint.path,\n            ['ListItem'],\n            ['TableCell']\n        );\n        const item = insertPoint.path[index];\n        if (index >= 0 && item && item.blockGroupType == 'ListItem') {\n            const listItemIndex = insertPoint.path[index + 1].blocks.indexOf(item);\n            const previousBlock =\n                listItemIndex > -1\n                    ? insertPoint.path[index + 1].blocks[listItemIndex - 1]\n                    : undefined;\n            const nextBlock =\n                listItemIndex > -1\n                    ? insertPoint.path[index + 1].blocks[listItemIndex + 1]\n                    : undefined;\n            if (\n                hasSelectionInBlockGroup(item) &&\n                (!previousBlock || hasSelectionInBlock(previousBlock)) &&\n                nextBlock &&\n                isEmptyBlock(nextBlock)\n            ) {\n                mutateBlock(item).levels = [];\n            }\n        }\n    }\n};\n","import type {\n    ContentModelBlockGroupBase,\n    ContentModelBlockGroupType,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelTableCell,\n    ContentModelTableRow,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function pruneUnselectedModel(\n    model: ContentModelBlockGroupBase<ContentModelBlockGroupType, HTMLElement>\n) {\n    pruneUnselectedModelInternal(model, false /* isSelectionAfterElement */);\n\n    unwrap(model);\n}\n\nfunction pruneUnselectedModelInternal(\n    model: ContentModelBlockGroupBase<ContentModelBlockGroupType, HTMLElement>,\n    isSelectionAfterElement: boolean\n) {\n    for (let index = model.blocks.length - 1; index >= 0; index--) {\n        const block = model.blocks[index];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                pruneUnselectedModelInternal(block, isSelectionAfterElement);\n                if (\n                    block.blockGroupType == 'General'\n                        ? block.blocks.length == 0 && !block.isSelected\n                        : block.blocks.length == 0\n                ) {\n                    model.blocks.splice(index, 1);\n                }\n                break;\n            case 'Divider':\n            case 'Entity':\n                if (!block.isSelected) {\n                    model.blocks.splice(index, 1);\n                } else {\n                    isSelectionAfterElement = true;\n                }\n                break;\n            case 'Paragraph':\n                const newSegments: ContentModelSegment[] = [];\n                for (const segment of block.segments) {\n                    if (segment.segmentType == 'General') {\n                        pruneUnselectedModel(segment);\n                        if (segment.blocks.length > 0 || segment.isSelected) {\n                            newSegments.push(segment);\n                        }\n                    } else if (segment.isSelected && segment.segmentType != 'SelectionMarker') {\n                        newSegments.push(segment);\n                    }\n                }\n                block.segments = newSegments;\n                if (block.segments.length == 0) {\n                    model.blocks.splice(index, 1);\n                } else {\n                    isSelectionAfterElement = true;\n                }\n                break;\n            case 'Table':\n                const filteredRows: ContentModelTableRow[] = [];\n                for (let i = 0; i < block.rows.length; i++) {\n                    const row = block.rows[i];\n                    for (let j = 0; j < row.cells.length; j++) {\n                        const cell = row.cells[j];\n                        if (!cell.isSelected) {\n                            pruneUnselectedModelInternal(cell, isSelectionAfterElement);\n                        } else {\n                            isSelectionAfterElement = true;\n                        }\n                    }\n\n                    const newCells: ContentModelTableCell[] = [];\n                    for (let k = 0; k < row.cells.length; k++) {\n                        const cell = row.cells[k];\n                        if (cell.isSelected || cell.blocks.length > 0) {\n                            newCells.push(cell);\n                        }\n                    }\n                    row.cells = newCells;\n\n                    if (row.cells.length > 0) {\n                        filteredRows.push(row);\n                    }\n                }\n\n                if (\n                    !isSelectionAfterElement &&\n                    filteredRows.length == 1 &&\n                    filteredRows[0].cells.length == 1 &&\n                    !filteredRows[0].cells[0].isSelected\n                ) {\n                    const cell = filteredRows[0].cells[0];\n                    model.blocks.splice(index, 1, ...cell.blocks);\n                } else if (filteredRows.length == 0) {\n                    model.blocks.splice(index, 1);\n                } else {\n                    block.rows = filteredRows;\n                }\n                break;\n        }\n    }\n    return isSelectionAfterElement;\n}\n\nfunction unwrap(model: ContentModelBlockGroupBase<ContentModelBlockGroupType, HTMLElement>) {\n    let block = model.blocks[0];\n    if (model.blocks.length == 1) {\n        while (block.blockType == 'BlockGroup') {\n            model.blocks = block.blocks;\n            block = model.blocks[0];\n\n            if (model.blocks.length > 1) {\n                return;\n            }\n        }\n\n        if (block.blockType == 'Paragraph') {\n            block.isImplicit = true;\n            block.format = {};\n            inheritSegmentFormatToChildren(block);\n        }\n    }\n}\n\nfunction inheritSegmentFormatToChildren(parent: ContentModelParagraph) {\n    const value = parent.segmentFormat;\n    if (value !== undefined) {\n        for (let index = 0; index < parent.segments.length; index++) {\n            const segment = parent.segments[index];\n            segment.format = {\n                ...parent.segmentFormat,\n                ...segment.format,\n            };\n        }\n    }\n}\n","import { createCachePlugin } from './cache/CachePlugin';\nimport { createContextMenuPlugin } from './contextMenu/ContextMenuPlugin';\nimport { createCopyPastePlugin } from './copyPaste/CopyPastePlugin';\nimport { createDOMEventPlugin } from './domEvent/DOMEventPlugin';\nimport { createEntityPlugin } from './entity/EntityPlugin';\nimport { createFormatPlugin } from './format/FormatPlugin';\nimport { createLifecyclePlugin } from './lifecycle/LifecyclePlugin';\nimport { createSelectionPlugin } from './selection/SelectionPlugin';\nimport { createUndoPlugin } from './undo/UndoPlugin';\nimport type { EditorCorePlugins, EditorOptions } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create core plugins for editor\n * @param options Options of editor\n */\nexport function createEditorCorePlugins(\n    options: EditorOptions,\n    contentDiv: HTMLDivElement\n): EditorCorePlugins {\n    return {\n        cache: createCachePlugin(options, contentDiv),\n        format: createFormatPlugin(options),\n        copyPaste: createCopyPastePlugin(options),\n        domEvent: createDOMEventPlugin(options, contentDiv),\n        lifecycle: createLifecyclePlugin(options, contentDiv),\n        entity: createEntityPlugin(),\n        selection: createSelectionPlugin(options),\n        contextMenu: createContextMenuPlugin(options),\n        undo: createUndoPlugin(options),\n    };\n}\n","import {\n    ChangeSource,\n    isCharacterValue,\n    isCursorMovingKey,\n    isNodeOfType,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DOMEventPluginState,\n    IEditor,\n    DOMEventRecord,\n    EditorOptions,\n    PluginWithState,\n} from 'roosterjs-content-model-types';\n\nconst EventTypeMap: Record<string, 'keyDown' | 'keyUp' | 'keyPress'> = {\n    keydown: 'keyDown',\n    keyup: 'keyUp',\n    keypress: 'keyPress',\n};\n\n/**\n * DOMEventPlugin handles customized DOM events, including:\n * 1. Keyboard event\n * 2. Mouse event\n * 3. IME state\n * 4. Drop event\n * 5. Focus and blur event\n * 6. Input event\n * 7. Scroll event\n * It contains special handling for Safari since Safari cannot get correct selection when onBlur event is triggered in editor.\n */\nclass DOMEventPlugin implements PluginWithState<DOMEventPluginState> {\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n    private state: DOMEventPluginState;\n\n    /**\n     * Construct a new instance of DOMEventPlugin\n     * @param options The editor options\n     * @param contentDiv The editor content DIV\n     */\n    constructor(options: EditorOptions, contentDiv: HTMLDivElement) {\n        this.state = {\n            isInIME: false,\n            scrollContainer: options.scrollContainer || contentDiv,\n            mouseDownX: null,\n            mouseDownY: null,\n            mouseUpEventListerAdded: false,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'DOMEvent';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n\n        const document = this.editor.getDocument();\n        const eventHandlers: Partial<\n            { [P in keyof HTMLElementEventMap]: DOMEventRecord<HTMLElementEventMap[P]> }\n        > = {\n            // 1. Keyboard event\n            keypress: this.keyboardEventHandler,\n            keydown: this.keyboardEventHandler,\n            keyup: this.keyboardEventHandler,\n            input: this.inputEventHandler,\n\n            // 2. Mouse event\n            mousedown: { beforeDispatch: this.onMouseDown },\n\n            // 3. IME state management\n            compositionstart: { beforeDispatch: this.onCompositionStart },\n            compositionend: { beforeDispatch: this.onCompositionEnd },\n\n            // 4. Drag and Drop event\n            dragstart: { beforeDispatch: this.onDragStart },\n            drop: { beforeDispatch: this.onDrop },\n        };\n\n        this.disposer = this.editor.attachDomEvent(<Record<string, DOMEventRecord>>eventHandlers);\n\n        // 7. Scroll event\n        this.state.scrollContainer.addEventListener('scroll', this.onScroll);\n        document.defaultView?.addEventListener('scroll', this.onScroll);\n        document.defaultView?.addEventListener('resize', this.onScroll);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.removeMouseUpEventListener();\n\n        const document = this.editor?.getDocument();\n\n        document?.defaultView?.removeEventListener('resize', this.onScroll);\n        document?.defaultView?.removeEventListener('scroll', this.onScroll);\n        this.state.scrollContainer.removeEventListener('scroll', this.onScroll);\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onDragStart = (e: Event) => {\n        const dragEvent = e as DragEvent;\n        const node = dragEvent.target as Node;\n        const element = isNodeOfType(node, 'ELEMENT_NODE') ? node : node.parentElement;\n\n        if (element && !element.isContentEditable) {\n            dragEvent.preventDefault();\n        }\n    };\n\n    private onDrop = () => {\n        const doc = this.editor?.getDocument();\n\n        doc?.defaultView?.requestAnimationFrame(() => {\n            if (this.editor) {\n                this.editor.takeSnapshot();\n                this.editor.triggerEvent('contentChanged', {\n                    source: ChangeSource.Drop,\n                });\n            }\n        });\n    };\n\n    private onScroll = (e: Event) => {\n        this.editor?.triggerEvent('scroll', {\n            rawEvent: e,\n            scrollContainer: this.state.scrollContainer,\n        });\n    };\n\n    private keyboardEventHandler: DOMEventRecord<KeyboardEvent> = {\n        beforeDispatch: event => {\n            const eventType = EventTypeMap[event.type];\n\n            if (isCharacterValue(event) || isCursorMovingKey(event)) {\n                // Stop propagation for Character keys and Up/Down/Left/Right/Home/End/PageUp/PageDown\n                // since editor already handles these keys and no need to propagate to parents\n                event.stopPropagation();\n            }\n\n            if (this.editor && eventType && !event.isComposing && !this.state.isInIME) {\n                this.editor.triggerEvent(eventType, {\n                    rawEvent: event,\n                });\n            }\n        },\n    };\n\n    private inputEventHandler: DOMEventRecord<Event> = {\n        beforeDispatch: event => {\n            event.stopPropagation();\n\n            if (this.editor && !(event as InputEvent).isComposing && !this.state.isInIME) {\n                this.editor.triggerEvent('input', {\n                    rawEvent: event as InputEvent,\n                });\n            }\n        },\n    };\n\n    private onMouseDown = (event: MouseEvent) => {\n        if (this.editor) {\n            if (!this.state.mouseUpEventListerAdded) {\n                this.editor\n                    .getDocument()\n                    .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\n                this.state.mouseUpEventListerAdded = true;\n                this.state.mouseDownX = event.pageX;\n                this.state.mouseDownY = event.pageY;\n            }\n\n            this.editor.triggerEvent('mouseDown', {\n                rawEvent: event,\n            });\n        }\n    };\n\n    private onMouseUp = (rawEvent: MouseEvent) => {\n        if (this.editor) {\n            this.removeMouseUpEventListener();\n            this.editor.triggerEvent('mouseUp', {\n                rawEvent,\n                isClicking:\n                    this.state.mouseDownX == rawEvent.pageX &&\n                    this.state.mouseDownY == rawEvent.pageY,\n            });\n        }\n    };\n\n    private onCompositionStart = () => {\n        this.state.isInIME = true;\n    };\n\n    private onCompositionEnd = (rawEvent: CompositionEvent) => {\n        this.state.isInIME = false;\n        this.editor?.triggerEvent('compositionEnd', {\n            rawEvent,\n        });\n    };\n\n    private removeMouseUpEventListener() {\n        if (this.editor && this.state.mouseUpEventListerAdded) {\n            this.state.mouseUpEventListerAdded = false;\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of DOMEventPlugin.\n * @param option The editor option\n * @param contentDiv The editor content DIV element\n */\nexport function createDOMEventPlugin(\n    option: EditorOptions,\n    contentDiv: HTMLDivElement\n): PluginWithState<DOMEventPluginState> {\n    return new DOMEventPlugin(option, contentDiv);\n}\n","import { findAllEntities } from './findAllEntities';\nimport {\n    createEntity,\n    generateEntityClassNames,\n    getAllEntityWrappers,\n    getObjectKeys,\n    isEntityElement,\n    parseEntityFormat,\n    transformColor,\n} from 'roosterjs-content-model-dom';\nimport {\n    handleCompositionEndEvent,\n    handleDelimiterContentChangedEvent,\n    handleDelimiterKeyDownEvent,\n} from './entityDelimiterUtils';\nimport type {\n    ChangedEntity,\n    ContentChangedEvent,\n    EntityOperation,\n    EntityPluginState,\n    IEditor,\n    MouseUpEvent,\n    PluginEvent,\n    PluginWithState,\n} from 'roosterjs-content-model-types';\n\nconst ENTITY_ID_REGEX = /_(\\d{1,8})$/;\n\n/**\n * Entity Plugin helps handle all operations related to an entity and generate entity specified events\n */\nclass EntityPlugin implements PluginWithState<EntityPluginState> {\n    private editor: IEditor | null = null;\n    private state: EntityPluginState;\n\n    /**\n     * Construct a new instance of EntityPlugin\n     */\n    constructor() {\n        this.state = {\n            entityMap: {},\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Entity';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n        this.state.entityMap = {};\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case 'mouseUp':\n                    this.handleMouseUpEvent(this.editor, event);\n                    break;\n                case 'contentChanged':\n                    this.handleContentChangedEvent(this.editor, event);\n                    break;\n                case 'keyDown':\n                    handleDelimiterKeyDownEvent(this.editor, event);\n                    break;\n                case 'compositionEnd':\n                    handleCompositionEndEvent(this.editor, event);\n                    break;\n                case 'editorReady':\n                    this.handleContentChangedEvent(this.editor);\n                    break;\n                case 'extractContentWithDom':\n                    this.handleExtractContentWithDomEvent(this.editor, event.clonedRoot);\n                    break;\n            }\n        }\n    }\n\n    private handleMouseUpEvent(editor: IEditor, event: MouseUpEvent) {\n        const { rawEvent, isClicking } = event;\n        let node: Node | null = rawEvent.target as Node;\n\n        if (isClicking && this.editor) {\n            while (node && this.editor.getDOMHelper().isNodeInEditor(node)) {\n                if (isEntityElement(node)) {\n                    this.triggerEvent(editor, node as HTMLElement, 'click', rawEvent);\n                    break;\n                } else {\n                    node = node.parentNode;\n                }\n            }\n        }\n    }\n\n    private handleContentChangedEvent(editor: IEditor, event?: ContentChangedEvent) {\n        const modifiedEntities: ChangedEntity[] =\n            event?.changedEntities ?? this.getChangedEntities(editor);\n        const entityStates = event?.entityStates;\n\n        modifiedEntities.forEach(entry => {\n            const { entity, operation, rawEvent } = entry;\n            const {\n                entityFormat: { id, entityType, isFakeEntity },\n                wrapper,\n            } = entity;\n\n            if (entityType && !isFakeEntity) {\n                if (operation == 'newEntity') {\n                    entity.entityFormat.id = this.ensureUniqueId(entityType, id ?? '', wrapper);\n                    wrapper.className = generateEntityClassNames(entity.entityFormat);\n\n                    if (entity.entityFormat.isReadonly) {\n                        wrapper.contentEditable = 'false';\n                    }\n\n                    const eventResult = this.triggerEvent(editor, wrapper, operation, rawEvent);\n\n                    this.state.entityMap[entity.entityFormat.id] = {\n                        element: wrapper,\n                        canPersist: eventResult?.shouldPersist,\n                    };\n\n                    if (editor.isDarkMode()) {\n                        transformColor(\n                            wrapper,\n                            true /*includeSelf*/,\n                            'lightToDark',\n                            editor.getColorManager()\n                        );\n                    }\n                } else if (id) {\n                    const mapEntry = this.state.entityMap[id];\n\n                    if (mapEntry) {\n                        mapEntry.isDeleted = true;\n                    }\n\n                    this.triggerEvent(editor, wrapper, operation, rawEvent);\n                }\n            }\n        });\n\n        entityStates?.forEach(entityState => {\n            const { id, state } = entityState;\n            const wrapper = this.state.entityMap[id]?.element;\n\n            if (wrapper) {\n                this.triggerEvent(\n                    editor,\n                    wrapper,\n                    'updateEntityState',\n                    undefined /*rawEvent*/,\n                    state\n                );\n            }\n        });\n\n        handleDelimiterContentChangedEvent(editor);\n    }\n\n    private getChangedEntities(editor: IEditor): ChangedEntity[] {\n        const result: ChangedEntity[] = [];\n\n        editor.formatContentModel(model => {\n            findAllEntities(model, result);\n            return false;\n        });\n\n        getObjectKeys(this.state.entityMap).forEach(id => {\n            const entry = this.state.entityMap[id];\n\n            if (!entry.isDeleted) {\n                const index = result.findIndex(\n                    x =>\n                        x.operation == 'newEntity' &&\n                        x.entity.entityFormat.id == id &&\n                        x.entity.wrapper == entry.element\n                );\n\n                if (index >= 0) {\n                    // Found matched entity in editor, so there is no change to this entity,\n                    // we can safely remove it from the new entity array\n                    result.splice(index, 1);\n                } else {\n                    // Entity is not in editor, which means it is deleted, use a temporary entity here to represent this entity\n                    const format = parseEntityFormat(entry.element);\n\n                    if (!format.isFakeEntity) {\n                        const entity = createEntity(\n                            entry.element,\n                            format.isReadonly,\n                            {},\n                            format.entityType,\n                            format.id\n                        );\n\n                        result.push({\n                            entity: entity,\n                            operation: 'overwrite',\n                        });\n                    }\n                }\n            }\n        });\n\n        return result;\n    }\n\n    private handleExtractContentWithDomEvent(editor: IEditor, root: HTMLElement) {\n        getAllEntityWrappers(root).forEach(element => {\n            element.removeAttribute('contentEditable');\n\n            this.triggerEvent(editor, element, 'replaceTemporaryContent');\n        });\n    }\n\n    private triggerEvent(\n        editor: IEditor,\n        wrapper: HTMLElement,\n        operation: EntityOperation,\n        rawEvent?: Event,\n        state?: string\n    ) {\n        const format = parseEntityFormat(wrapper);\n\n        return format.id && format.entityType && !format.isFakeEntity\n            ? editor.triggerEvent('entityOperation', {\n                  operation: operation,\n                  rawEvent,\n                  entity: {\n                      id: format.id,\n                      type: format.entityType,\n                      isReadonly: !!format.isReadonly,\n                      wrapper,\n                  },\n                  state: operation == 'updateEntityState' ? state : undefined,\n                  shouldPersist: operation == 'newEntity' ? true : undefined, // By default, we always persist entity now\n              })\n            : null;\n    }\n\n    private ensureUniqueId(type: string, id: string, wrapper: HTMLElement): string {\n        const match = ENTITY_ID_REGEX.exec(id);\n        const baseId = (match ? id.substr(0, id.length - match[0].length) : id) || type;\n\n        // Make sure entity id is unique\n        let newId = '';\n\n        for (let num = (match && parseInt(match[1])) || 0; ; num++) {\n            newId = num > 0 ? `${baseId}_${num}` : baseId;\n\n            const item = this.state.entityMap[newId];\n\n            if (!item || item.element == wrapper) {\n                break;\n            }\n        }\n\n        return newId;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of EntityPlugin.\n */\nexport function createEntityPlugin(): PluginWithState<EntityPluginState> {\n    return new EntityPlugin();\n}\n","import {\n    getSelectedSegmentsAndParagraphs,\n    isBlockEntityContainer,\n    isEntityDelimiter,\n    isNodeOfType,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelEntity,\n    IEditor,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustSelectionAroundEntity(\n    editor: IEditor,\n    key: 'ArrowLeft' | 'ArrowRight',\n    shiftKey: boolean\n) {\n    const selection = editor.isDisposed() ? null : editor.getDOMSelection();\n\n    if (!selection || selection.type != 'range') {\n        return;\n    }\n\n    const { range, isReverted } = selection;\n    const anchorNode = isReverted ? range.startContainer : range.endContainer;\n    const offset = isReverted ? range.startOffset : range.endOffset;\n    const delimiter = isNodeOfType(anchorNode, 'ELEMENT_NODE')\n        ? anchorNode\n        : anchorNode.parentElement;\n    const isRtl =\n        delimiter &&\n        editor.getDocument().defaultView?.getComputedStyle(delimiter).direction == 'rtl';\n    const movingBefore = (key == 'ArrowLeft') != !!isRtl;\n\n    if (\n        delimiter &&\n        ((isEntityDelimiter(delimiter, !movingBefore) &&\n            ((movingBefore && offset == 0) || (!movingBefore && offset == 1))) ||\n            isBlockEntityContainer(delimiter))\n    ) {\n        editor.formatContentModel(model => {\n            const allSel = getSelectedSegmentsAndParagraphs(\n                model,\n                false /*includingFormatHolder*/,\n                true /*includingEntity*/\n            );\n            const sel = allSel[isReverted ? 0 : allSel.length - 1];\n            const index = sel?.[1]?.segments.indexOf(sel[0]) ?? -1;\n\n            if (sel && sel[1] && index >= 0) {\n                const [segment, paragraph, path] = sel;\n                const isShrinking = shiftKey && !range.collapsed && movingBefore != !!isReverted;\n                const entitySegment = isShrinking\n                    ? segment\n                    : paragraph.segments[movingBefore ? index - 1 : index + 1];\n\n                const pairedDelimiter = findPairedDelimiter(\n                    entitySegment,\n                    path,\n                    paragraph,\n                    movingBefore\n                );\n\n                if (pairedDelimiter) {\n                    const newRange = getNewRange(\n                        range,\n                        isShrinking,\n                        movingBefore,\n                        pairedDelimiter,\n                        shiftKey\n                    );\n\n                    editor.setDOMSelection({\n                        type: 'range',\n                        range: newRange,\n                        isReverted: newRange.collapsed ? false : isReverted,\n                    });\n                }\n            }\n\n            return false;\n        });\n    }\n}\n\nfunction getNewRange(\n    originalRange: Range,\n    isShrinking: boolean,\n    movingBefore: boolean,\n    pairedDelimiter: HTMLElement,\n    shiftKey: boolean\n) {\n    const newRange = originalRange.cloneRange();\n\n    if (isShrinking) {\n        if (movingBefore) {\n            newRange.setEndBefore(pairedDelimiter);\n        } else {\n            newRange.setStartAfter(pairedDelimiter);\n        }\n    } else {\n        if (movingBefore) {\n            newRange.setStartBefore(pairedDelimiter);\n        } else {\n            newRange.setEndAfter(pairedDelimiter);\n        }\n        if (!shiftKey) {\n            if (movingBefore) {\n                newRange.setEndBefore(pairedDelimiter);\n            } else {\n                newRange.setStartAfter(pairedDelimiter);\n            }\n        }\n    }\n\n    return newRange;\n}\n\nfunction findPairedDelimiter(\n    entitySegment: ReadonlyContentModelSegment,\n    path: ReadonlyContentModelBlockGroup[],\n    paragraph: ReadonlyContentModelParagraph,\n    movingBefore: boolean\n) {\n    let entity: ContentModelEntity | null = null;\n\n    if (entitySegment?.segmentType == 'Entity') {\n        // Inline entity\n        entity = entitySegment;\n    } else {\n        // Block entity\n        const blocks = path[0].blocks;\n        const paraIndex = blocks.indexOf(paragraph);\n        const entityBlock =\n            paraIndex >= 0 ? blocks[movingBefore ? paraIndex - 1 : paraIndex + 1] : null;\n\n        if (entityBlock?.blockType == 'Entity') {\n            entity = entityBlock;\n        }\n    }\n\n    const pairedDelimiter = entity\n        ? movingBefore\n            ? entity.wrapper.previousElementSibling\n            : entity.wrapper.nextElementSibling\n        : null;\n\n    return isNodeOfType(pairedDelimiter, 'ELEMENT_NODE') &&\n        isEntityDelimiter(pairedDelimiter, movingBefore)\n        ? pairedDelimiter\n        : null;\n}\n","import { adjustSelectionAroundEntity } from './adjustSelectionAroundEntity';\nimport { normalizePos } from '../selection/normalizePos';\nimport {\n    addDelimiters,\n    createBr,\n    createModelToDomContext,\n    createParagraph,\n    isEntityDelimiter,\n    isEntityElement,\n    isNodeOfType,\n    parseEntityFormat,\n    findClosestEntityWrapper,\n    iterateSelections,\n    isCharacterValue,\n    findClosestBlockEntityContainer,\n    mutateSegment,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    CompositionEndEvent,\n    ContentModelFormatter,\n    ContentModelSegmentFormat,\n    IEditor,\n    KeyDownEvent,\n    RangeSelection,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelParagraph,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst DelimiterBefore = 'entityDelimiterBefore';\nconst DelimiterAfter = 'entityDelimiterAfter';\nconst DelimiterSelector = '.' + DelimiterAfter + ',.' + DelimiterBefore;\nconst ZeroWidthSpace = '\\u200B';\nconst EntityInfoName = '_Entity';\nconst InlineEntitySelector = 'span.' + EntityInfoName;\n\n/**\n * @internal exported only for unit test\n */\nexport function preventTypeInDelimiter(node: HTMLElement, editor: IEditor) {\n    const isAfter = node.classList.contains(DelimiterAfter);\n    const entitySibling = isAfter ? node.previousElementSibling : node.nextElementSibling;\n    if (entitySibling && isEntityElement(entitySibling)) {\n        removeInvalidDelimiters(\n            [entitySibling.previousElementSibling, entitySibling.nextElementSibling].filter(\n                element => !!element\n            ) as HTMLElement[]\n        );\n        editor.formatContentModel((model, context) => {\n            iterateSelections(model, (_path, _tableContext, block, _segments) => {\n                if (block?.blockType == 'Paragraph') {\n                    block.segments.forEach(segment => {\n                        if (\n                            segment.segmentType == 'Text' &&\n                            segment.text.indexOf(ZeroWidthSpace) >= 0\n                        ) {\n                            mutateSegment(block, segment, segment => {\n                                segment.text = segment.text.replace(ZeroWidthSpace, '');\n                            });\n                        }\n                    });\n                }\n            });\n\n            context.skipUndoSnapshot = true;\n\n            return true;\n        });\n    }\n}\n\nfunction addDelimitersIfNeeded(\n    nodes: Element[] | NodeListOf<Element>,\n    format: ContentModelSegmentFormat | null\n) {\n    if (nodes.length > 0) {\n        const context = createModelToDomContext();\n        nodes.forEach(node => {\n            if (\n                isNodeOfType(node, 'ELEMENT_NODE') &&\n                isEntityElement(node) &&\n                !node.isContentEditable\n            ) {\n                addDelimiters(node.ownerDocument, node as HTMLElement, format, context);\n            }\n        });\n    }\n}\n\nfunction removeNode(el: Node | undefined | null) {\n    el?.parentElement?.removeChild(el);\n}\n\nfunction removeInvalidDelimiters(nodes: Element[] | NodeListOf<Element>) {\n    nodes.forEach(node => {\n        if (!isNodeOfType(node, 'ELEMENT_NODE')) {\n            return;\n        }\n        if (isEntityDelimiter(node)) {\n            const sibling = node.classList.contains(DelimiterBefore)\n                ? node.nextElementSibling\n                : node.previousElementSibling;\n            if (!(isNodeOfType(sibling, 'ELEMENT_NODE') && isEntityElement(sibling))) {\n                removeNode(node);\n            }\n        } else {\n            removeDelimiterAttr(node);\n        }\n    });\n}\n\nfunction removeDelimiterAttr(node: Element | undefined | null, checkEntity: boolean = true) {\n    if (!node) {\n        return;\n    }\n\n    const isAfter = node.classList.contains(DelimiterAfter);\n    const entitySibling = isAfter ? node.previousElementSibling : node.nextElementSibling;\n    if (checkEntity && entitySibling && isEntityElement(entitySibling)) {\n        return;\n    }\n\n    node.classList.remove(DelimiterAfter, DelimiterBefore);\n\n    node.normalize();\n    node.childNodes.forEach(cn => {\n        const index = cn.textContent?.indexOf(ZeroWidthSpace) ?? -1;\n        if (index >= 0) {\n            const range = new Range();\n            range.setStart(cn, index);\n            range.setEnd(cn, index + 1);\n            range.deleteContents();\n        }\n    });\n}\n\nfunction getFocusedElement(\n    selection: RangeSelection,\n    existingTextInDelimiter?: string\n): HTMLElement | null {\n    const { range, isReverted } = selection;\n    let node: Node | null = isReverted ? range.startContainer : range.endContainer;\n    let offset = isReverted ? range.startOffset : range.endOffset;\n\n    if (node) {\n        const pos = normalizePos(node, offset);\n        node = pos.node;\n        offset = pos.offset;\n    }\n\n    if (!isNodeOfType(node, 'ELEMENT_NODE')) {\n        const textToCheck = existingTextInDelimiter\n            ? ZeroWidthSpace + existingTextInDelimiter\n            : ZeroWidthSpace;\n\n        if (node.textContent != textToCheck && (node.textContent || '').length == offset) {\n            node = node.nextSibling ?? node.parentElement?.closest(DelimiterSelector) ?? null;\n        } else {\n            node = node?.parentElement?.closest(DelimiterSelector) ?? null;\n        }\n    } else {\n        node = node.childNodes.length == offset ? node : node.childNodes.item(offset);\n    }\n    if (node && !node.hasChildNodes()) {\n        node = node.nextSibling;\n    }\n    return isNodeOfType(node, 'ELEMENT_NODE') ? node : null;\n}\n\n/**\n * @internal\n */\nexport function handleDelimiterContentChangedEvent(editor: IEditor) {\n    const helper = editor.getDOMHelper();\n    removeInvalidDelimiters(helper.queryElements(DelimiterSelector));\n    addDelimitersIfNeeded(helper.queryElements(InlineEntitySelector), editor.getPendingFormat());\n}\n\n/**\n * @internal\n */\nexport function handleCompositionEndEvent(editor: IEditor, event: CompositionEndEvent) {\n    const selection = editor.getDOMSelection();\n\n    if (selection?.type == 'range' && selection.range.collapsed) {\n        const node = getFocusedElement(selection, event.rawEvent.data);\n\n        if (\n            node?.firstChild &&\n            isNodeOfType(node.firstChild, 'TEXT_NODE') &&\n            node.matches(DelimiterSelector) &&\n            node.textContent == ZeroWidthSpace + event.rawEvent.data\n        ) {\n            preventTypeInDelimiter(node, editor);\n        }\n    }\n}\n\n/**\n * @internal\n */\nexport function handleDelimiterKeyDownEvent(editor: IEditor, event: KeyDownEvent) {\n    const selection = editor.getDOMSelection();\n\n    if (!selection || selection.type != 'range') {\n        return;\n    }\n\n    const rawEvent = event.rawEvent;\n    const range = selection.range;\n    const key = rawEvent.key;\n\n    switch (key) {\n        case 'Enter':\n            const helper = editor.getDOMHelper();\n            const entity = findClosestEntityWrapper(range.startContainer, helper);\n\n            if (entity && isNodeOfType(entity, 'ELEMENT_NODE') && helper.isNodeInEditor(entity)) {\n                triggerEntityEventOnEnter(editor, entity, rawEvent);\n            }\n\n            break;\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n            if (!rawEvent.altKey && !rawEvent.ctrlKey && !rawEvent.metaKey) {\n                // Handle in async so focus is already moved, this makes us easier to check if we should adjust the selection\n                editor.getDocument().defaultView?.requestAnimationFrame(() => {\n                    adjustSelectionAroundEntity(editor, key, rawEvent.shiftKey);\n                });\n            }\n            break;\n\n        default:\n            if (isCharacterValue(rawEvent) && range.collapsed) {\n                handleInputOnDelimiter(editor, range, getFocusedElement(selection), rawEvent);\n            }\n\n            break;\n    }\n}\n\nfunction handleInputOnDelimiter(\n    editor: IEditor,\n    range: Range,\n    focusedNode: HTMLElement | null,\n    rawEvent: KeyboardEvent\n) {\n    const helper = editor.getDOMHelper();\n\n    if (focusedNode && isEntityDelimiter(focusedNode) && helper.isNodeInEditor(focusedNode)) {\n        const blockEntityContainer = findClosestBlockEntityContainer(focusedNode, helper);\n        const isEnter = rawEvent.key === 'Enter';\n\n        if (blockEntityContainer && helper.isNodeInEditor(blockEntityContainer)) {\n            const isAfter = focusedNode.classList.contains(DelimiterAfter);\n\n            if (isAfter) {\n                range.setStartAfter(blockEntityContainer);\n            } else {\n                range.setStartBefore(blockEntityContainer);\n            }\n\n            range.collapse(true /* toStart */);\n\n            if (isEnter) {\n                rawEvent.preventDefault();\n            }\n\n            editor.formatContentModel(handleKeyDownInBlockDelimiter, {\n                selectionOverride: {\n                    type: 'range',\n                    isReverted: false,\n                    range,\n                },\n            });\n        } else {\n            if (isEnter) {\n                editor.formatContentModel((model, context) => {\n                    const result = handleEnterInlineEntity(model, context);\n\n                    if (result) {\n                        rawEvent.preventDefault();\n                    }\n\n                    return result;\n                });\n            } else {\n                editor.takeSnapshot();\n                editor\n                    .getDocument()\n                    .defaultView?.requestAnimationFrame(() =>\n                        preventTypeInDelimiter(focusedNode, editor)\n                    );\n            }\n        }\n    }\n}\n\n/**\n * @internal Exported Only for unit test\n * @returns\n */\nexport const handleKeyDownInBlockDelimiter: ContentModelFormatter = (model, context) => {\n    iterateSelections(model, (_path, _tableContext, readonlyBlock) => {\n        if (readonlyBlock?.blockType == 'Paragraph') {\n            const block = mutateBlock(readonlyBlock);\n\n            delete block.isImplicit;\n            const selectionMarker = block.segments.find(w => w.segmentType == 'SelectionMarker');\n            if (selectionMarker?.segmentType == 'SelectionMarker') {\n                block.segmentFormat = { ...selectionMarker.format };\n                context.newPendingFormat = { ...selectionMarker.format };\n            }\n            block.segments.unshift(createBr());\n        }\n    });\n\n    return true;\n};\n\n/**\n * @internal Exported Only for unit test\n * @returns\n */\nexport const handleEnterInlineEntity: ContentModelFormatter = model => {\n    let readonlySelectionBlock: ReadonlyContentModelParagraph | undefined;\n    let selectionBlockParent: ReadonlyContentModelBlockGroup | undefined;\n\n    iterateSelections(model, (path, _tableContext, block) => {\n        if (block?.blockType == 'Paragraph') {\n            readonlySelectionBlock = block;\n            selectionBlockParent = path[0];\n        }\n    });\n\n    if (selectionBlockParent?.blockGroupType == 'ListItem') {\n        // No need to handle list item since it will be handled by common enter handler code\n        return false;\n    }\n\n    if (readonlySelectionBlock && selectionBlockParent) {\n        const markerIndex = readonlySelectionBlock.segments.findIndex(\n            segment => segment.segmentType == 'SelectionMarker'\n        );\n\n        if (markerIndex >= 0) {\n            const selectionBlock = mutateBlock(readonlySelectionBlock);\n            const segmentsAfterMarker = selectionBlock.segments.splice(markerIndex);\n\n            const newPara: ShallowMutableContentModelParagraph = createParagraph(\n                false,\n                selectionBlock.format,\n                selectionBlock.segmentFormat,\n                selectionBlock.decorator\n            );\n\n            if (\n                selectionBlock.segments.every(\n                    x => x.segmentType == 'SelectionMarker' || x.segmentType == 'Br'\n                ) ||\n                segmentsAfterMarker.every(x => x.segmentType == 'SelectionMarker')\n            ) {\n                newPara.segments.push(createBr(selectionBlock.format));\n            }\n\n            newPara.segments.push(...segmentsAfterMarker);\n\n            const selectionBlockIndex = selectionBlockParent.blocks.indexOf(selectionBlock);\n            if (selectionBlockIndex >= 0) {\n                mutateBlock(selectionBlockParent).blocks.splice(\n                    selectionBlockIndex + 1,\n                    0,\n                    newPara\n                );\n            }\n        }\n    }\n\n    return true;\n};\n\nconst triggerEntityEventOnEnter = (\n    editor: IEditor,\n    wrapper: HTMLElement,\n    rawEvent: KeyboardEvent\n) => {\n    const format = parseEntityFormat(wrapper);\n    if (format.id && format.entityType && !format.isFakeEntity) {\n        editor.triggerEvent('entityOperation', {\n            operation: 'click',\n            entity: {\n                id: format.id,\n                type: format.entityType,\n                isReadonly: !!format.isReadonly,\n                wrapper,\n            },\n            rawEvent: rawEvent,\n        });\n    }\n};\n","import type { ChangedEntity, ReadonlyContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function findAllEntities(group: ReadonlyContentModelBlockGroup, entities: ChangedEntity[]) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                findAllEntities(block, entities);\n                break;\n\n            case 'Entity':\n                entities.push({\n                    entity: block,\n                    operation: 'newEntity',\n                });\n                break;\n\n            case 'Paragraph':\n                block.segments.forEach(segment => {\n                    switch (segment.segmentType) {\n                        case 'Entity':\n                            entities.push({\n                                entity: segment,\n                                operation: 'newEntity',\n                            });\n                            break;\n\n                        case 'General':\n                            findAllEntities(segment, entities);\n                            break;\n                    }\n                });\n                break;\n\n            case 'Table':\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => findAllEntities(cell, entities))\n                );\n                break;\n        }\n    });\n}\n","import { applyDefaultFormat } from './applyDefaultFormat';\nimport { applyPendingFormat } from './applyPendingFormat';\nimport {\n    getObjectKeys,\n    isBlockElement,\n    isCharacterValue,\n    isCursorMovingKey,\n    isNodeOfType,\n    normalizeFontFamily,\n    normalizeSegmentFormat,\n} from 'roosterjs-content-model-dom';\nimport type {\n    BackgroundColorFormat,\n    FontFamilyFormat,\n    FontSizeFormat,\n    FormatPluginState,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n    EditorOptions,\n    TextColorFormat,\n} from 'roosterjs-content-model-types';\n\n// During IME input, KeyDown event will have \"Process\" as key\nconst ProcessKey = 'Process';\n// For some Android IME, KeyDown event will have \"Unidentified\" as key\nconst UnidentifiedKey = 'Unidentified';\nconst DefaultStyleKeyMap: Record<\n    keyof (FontFamilyFormat & FontSizeFormat & TextColorFormat & BackgroundColorFormat),\n    keyof CSSStyleDeclaration\n> = {\n    backgroundColor: 'backgroundColor',\n    textColor: 'color',\n    fontFamily: 'fontFamily',\n    fontSize: 'fontSize',\n};\n\n/**\n * FormatPlugin plugins helps editor to do formatting on top of content model.\n * This includes:\n * 1. Handle pending format changes when selection is collapsed\n */\nclass FormatPlugin implements PluginWithState<FormatPluginState> {\n    private editor: IEditor | null = null;\n    private defaultFormatKeys: Set<keyof CSSStyleDeclaration>;\n    private state: FormatPluginState;\n    private lastCheckedNode: Node | null = null;\n\n    /**\n     * Construct a new instance of FormatPlugin class\n     * @param option The editor option\n     */\n    constructor(option: EditorOptions) {\n        this.state = {\n            defaultFormat: { ...option.defaultSegmentFormat },\n            pendingFormat: null,\n        };\n\n        const defaultFormat = this.state.defaultFormat;\n\n        if (defaultFormat.fontFamily) {\n            defaultFormat.fontFamily = normalizeFontFamily(defaultFormat.fontFamily);\n        }\n\n        this.defaultFormatKeys = new Set<keyof CSSStyleDeclaration>();\n\n        getObjectKeys(DefaultStyleKeyMap).forEach(key => {\n            if (this.state.defaultFormat[key]) {\n                this.defaultFormatKeys.add(DefaultStyleKeyMap[key]);\n            }\n        });\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'Format';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n\n        this.state.defaultFormat = normalizeSegmentFormat(\n            this.state.defaultFormat,\n            editor.getEnvironment()\n        );\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState(): FormatPluginState {\n        return this.state;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case 'input':\n                this.checkAndApplyPendingFormat(event.rawEvent.data);\n\n                break;\n\n            case 'compositionEnd':\n                this.checkAndApplyPendingFormat(event.rawEvent.data);\n                break;\n\n            case 'keyDown':\n                const isAndroidIME =\n                    this.editor.getEnvironment().isAndroid && event.rawEvent.key == UnidentifiedKey;\n                if (isCursorMovingKey(event.rawEvent)) {\n                    this.clearPendingFormat();\n                    this.lastCheckedNode = null;\n                } else if (\n                    this.defaultFormatKeys.size > 0 &&\n                    (isAndroidIME ||\n                        isCharacterValue(event.rawEvent) ||\n                        event.rawEvent.key == ProcessKey) &&\n                    this.shouldApplyDefaultFormat(this.editor)\n                ) {\n                    applyDefaultFormat(this.editor, this.state.defaultFormat);\n                }\n\n                break;\n\n            case 'mouseUp':\n            case 'contentChanged':\n                this.lastCheckedNode = null;\n\n                if (!this.canApplyPendingFormat()) {\n                    this.clearPendingFormat();\n                }\n                break;\n        }\n    }\n\n    private checkAndApplyPendingFormat(data: string | null) {\n        if (this.editor && data && this.state.pendingFormat) {\n            applyPendingFormat(\n                this.editor,\n                data,\n                this.state.pendingFormat.format,\n                this.state.pendingFormat.paragraphFormat\n            );\n            this.clearPendingFormat();\n        }\n    }\n\n    private clearPendingFormat() {\n        this.state.pendingFormat = null;\n    }\n\n    /**\n     * @internal\n     * Check if this editor can apply pending format\n     * @param editor The editor to get format from\n     */\n    private canApplyPendingFormat(): boolean {\n        let result = false;\n\n        if (this.state.pendingFormat && this.editor) {\n            const selection = this.editor.getDOMSelection();\n            const range =\n                selection?.type == 'range' && selection.range.collapsed ? selection.range : null;\n            const { node, offset } = this.state.pendingFormat.insertPoint;\n\n            if (range && range.startContainer == node && range.startOffset == offset) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    private shouldApplyDefaultFormat(editor: IEditor): boolean {\n        const selection = editor.getDOMSelection();\n        const range = selection?.type == 'range' ? selection.range : null;\n        const posContainer = range?.startContainer ?? null;\n\n        if (posContainer && posContainer != this.lastCheckedNode) {\n            // Cache last checked parent node so no need to check it again if user is keep typing under the same node\n            this.lastCheckedNode = posContainer;\n\n            const domHelper = editor.getDOMHelper();\n            let element: HTMLElement | null = isNodeOfType(posContainer, 'ELEMENT_NODE')\n                ? posContainer\n                : posContainer.parentElement;\n            const foundFormatKeys = new Set<keyof CSSStyleDeclaration>();\n\n            while (element?.parentElement && domHelper.isNodeInEditor(element.parentElement)) {\n                if (element.getAttribute?.('style')) {\n                    const style = element.style;\n                    this.defaultFormatKeys.forEach(key => {\n                        if (style[key]) {\n                            foundFormatKeys.add(key);\n                        }\n                    });\n\n                    if (foundFormatKeys.size == this.defaultFormatKeys.size) {\n                        return false;\n                    }\n                }\n\n                if (isBlockElement(element)) {\n                    break;\n                }\n\n                element = element.parentElement;\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of FormatPlugin.\n * @param option The editor option\n */\nexport function createFormatPlugin(option: EditorOptions): PluginWithState<FormatPluginState> {\n    return new FormatPlugin(option);\n}\n","import { iterateSelections } from 'roosterjs-content-model-dom';\nimport type { ContentModelSegmentFormat, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * When necessary, set default format as current pending format so it will be applied when Input event is fired\n * @param editor The editor object\n * @param defaultFormat The default segment format to apply\n */\nexport function applyDefaultFormat(editor: IEditor, defaultFormat: ContentModelSegmentFormat) {\n    const selection = editor.getDOMSelection();\n\n    if (selection?.type == 'range' && selection.range.collapsed) {\n        editor.formatContentModel((model, context) => {\n            iterateSelections(model, (path, _, paragraph, segments) => {\n                const marker = segments?.[0];\n                if (\n                    paragraph?.blockType == 'Paragraph' &&\n                    marker?.segmentType == 'SelectionMarker'\n                ) {\n                    const blocks = path[0].blocks;\n                    const blockCount = blocks.length;\n                    const blockIndex = blocks.indexOf(paragraph);\n\n                    if (\n                        paragraph.isImplicit &&\n                        paragraph.segments.length == 1 &&\n                        paragraph.segments[0] == marker &&\n                        blockCount > 0 &&\n                        blockIndex == blockCount - 1\n                    ) {\n                        // Focus is in the last paragraph which is implicit and there is not other segments.\n                        // This can happen when focus is moved after all other content under current block group.\n                        // We need to check if browser will merge focus into previous paragraph by checking if\n                        // previous block is block. If previous block is paragraph, browser will most likely merge\n                        // the input into previous paragraph, then nothing need to do here. Otherwise we need to\n                        // apply pending format since this input event will start a new real paragraph.\n                        const previousBlock = blocks[blockIndex - 1];\n\n                        if (previousBlock?.blockType != 'Paragraph') {\n                            context.newPendingFormat = getNewPendingFormat(\n                                editor,\n                                defaultFormat,\n                                marker.format\n                            );\n                        }\n                    } else if (paragraph.segments.every(x => x.segmentType != 'Text')) {\n                        context.newPendingFormat = getNewPendingFormat(\n                            editor,\n                            defaultFormat,\n                            marker.format\n                        );\n                    }\n                }\n\n                // Stop searching more selection\n                return true;\n            });\n\n            // We didn't do any change but just apply default format to pending format, so no need to write back\n            return false;\n        });\n    }\n}\n\nfunction getNewPendingFormat(\n    editor: IEditor,\n    defaultFormat: ContentModelSegmentFormat,\n    markerFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    return {\n        ...defaultFormat,\n        ...editor.getPendingFormat(),\n        ...markerFormat,\n    };\n}\n","import {\n    createText,\n    getObjectKeys,\n    iterateSelections,\n    mutateBlock,\n    mutateSegment,\n    normalizeContentModel,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelFormatBase,\n    ContentModelSegmentFormat,\n    IEditor,\n} from 'roosterjs-content-model-types';\n\nconst ANSI_SPACE = '\\u0020';\nconst NON_BREAK_SPACE = '\\u00A0';\n\n/**\n * @internal\n * Apply pending format to the text user just input\n * @param editor The editor to get format from\n * @param data The text user just input\n */\nexport function applyPendingFormat(\n    editor: IEditor,\n    data: string,\n    segmentFormat?: ContentModelSegmentFormat,\n    paragraphFormat?: ContentModelBlockFormat\n) {\n    let isChanged = false;\n\n    editor.formatContentModel(\n        (model, context) => {\n            iterateSelections(model, (_, __, block, segments) => {\n                if (\n                    block?.blockType == 'Paragraph' &&\n                    segments?.length == 1 &&\n                    segments[0].segmentType == 'SelectionMarker'\n                ) {\n                    const marker = segments[0];\n                    const index = block.segments.indexOf(marker);\n                    const previousSegment = block.segments[index - 1];\n\n                    if (previousSegment?.segmentType == 'Text') {\n                        const text = previousSegment.text;\n                        const subStr = text.substr(-data.length, data.length);\n\n                        // For space, there can be &#32 (space) or &#160 (&nbsp;), we treat them as the same\n                        if (subStr == data || (data == ANSI_SPACE && subStr == NON_BREAK_SPACE)) {\n                            if (\n                                segmentFormat &&\n                                !isSubFormatIncluded(previousSegment.format, segmentFormat)\n                            ) {\n                                mutateSegment(block, previousSegment, previousSegment => {\n                                    previousSegment.text = text.substring(\n                                        0,\n                                        text.length - data.length\n                                    );\n                                });\n\n                                mutateSegment(block, marker, (marker, block) => {\n                                    marker.format = { ...segmentFormat };\n\n                                    const newText = createText(\n                                        data == ANSI_SPACE ? NON_BREAK_SPACE : data,\n                                        {\n                                            ...previousSegment.format,\n                                            ...segmentFormat,\n                                        }\n                                    );\n\n                                    block.segments.splice(index, 0, newText);\n                                    setParagraphNotImplicit(block);\n                                });\n\n                                isChanged = true;\n                            }\n\n                            if (\n                                paragraphFormat &&\n                                !isSubFormatIncluded(block.format, paragraphFormat)\n                            ) {\n                                const mutableParagraph = mutateBlock(block);\n\n                                Object.assign(mutableParagraph.format, paragraphFormat);\n                                isChanged = true;\n                            }\n                        }\n                    }\n                }\n                return true;\n            });\n\n            if (isChanged) {\n                normalizeContentModel(model);\n                context.skipUndoSnapshot = true;\n            }\n\n            return isChanged;\n        },\n        {\n            apiName: 'applyPendingFormat',\n        }\n    );\n}\n\nfunction isSubFormatIncluded<T extends ContentModelFormatBase>(containerFormat: T, subFormat: T) {\n    const keys = getObjectKeys(subFormat);\n    let result = true;\n\n    keys.forEach(key => {\n        if (containerFormat[key] !== subFormat[key]) {\n            result = false;\n        }\n    });\n\n    return result;\n}\n","import { ChangeSource, getObjectKeys, setColor } from 'roosterjs-content-model-dom';\nimport { createAriaLiveElement } from '../../utils/createAriaLiveElement';\nimport type {\n    IEditor,\n    LifecyclePluginState,\n    PluginEvent,\n    PluginWithState,\n    EditorOptions,\n    RewriteFromModel,\n} from 'roosterjs-content-model-types';\n\nconst ContentEditableAttributeName = 'contenteditable';\nconst DefaultTextColor = '#000000';\nconst DefaultBackColor = '#ffffff';\n\n/**\n * Lifecycle plugin handles editor initialization and disposing\n */\nclass LifecyclePlugin implements PluginWithState<LifecyclePluginState> {\n    private editor: IEditor | null = null;\n    private state: LifecyclePluginState;\n    private initializer: (() => void) | null = null;\n    private disposer: (() => void) | null = null;\n    private adjustColor: () => void;\n\n    /**\n     * Construct a new instance of LifecyclePlugin\n     * @param options The editor options\n     * @param contentDiv The editor content DIV\n     */\n    constructor(options: EditorOptions, contentDiv: HTMLDivElement) {\n        // Make the container editable and set its selection styles\n        if (contentDiv.getAttribute(ContentEditableAttributeName) === null) {\n            this.initializer = () => {\n                contentDiv.contentEditable = 'true';\n                contentDiv.style.userSelect = 'text';\n            };\n            this.disposer = () => {\n                contentDiv.style.userSelect = '';\n                contentDiv.removeAttribute(ContentEditableAttributeName);\n            };\n        }\n        this.adjustColor = options.doNotAdjustEditorColor\n            ? () => {}\n            : () => {\n                  this.adjustContainerColor(contentDiv);\n              };\n\n        this.state = {\n            isDarkMode: !!options.inDarkMode,\n            shadowEditFragment: null,\n            styleElements: {},\n            announcerStringGetter: options.announcerStringGetter,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Lifecycle';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n\n        // Set content DIV to be editable\n        this.initializer?.();\n\n        // Set editor background color for dark mode\n        this.adjustColor();\n\n        // Let other plugins know that we are ready\n        const rewriteFromModel: RewriteFromModel = this.state.rewriteFromModel ?? {\n            addedBlockElements: [],\n            removedBlockElements: [],\n        };\n\n        this.editor.triggerEvent('editorReady', rewriteFromModel, true /*broadcast*/);\n        delete this.state.rewriteFromModel;\n\n        // Initialize the Announce container.\n        this.state.announceContainer = createAriaLiveElement(editor.getDocument());\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor?.triggerEvent('beforeDispose', {}, true /*broadcast*/);\n\n        getObjectKeys(this.state.styleElements).forEach(key => {\n            const element = this.state.styleElements[key];\n\n            element.parentElement?.removeChild(element);\n            delete this.state.styleElements[key];\n        });\n\n        const announceContainer = this.state.announceContainer;\n\n        if (announceContainer) {\n            announceContainer.parentElement?.removeChild(announceContainer);\n            delete this.state.announceContainer;\n        }\n\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n            this.initializer = null;\n        }\n\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (\n            event.eventType == 'contentChanged' &&\n            (event.source == ChangeSource.SwitchToDarkMode ||\n                event.source == ChangeSource.SwitchToLightMode)\n        ) {\n            this.adjustColor();\n        }\n    }\n\n    private adjustContainerColor(contentDiv: HTMLElement) {\n        if (this.editor) {\n            const { isDarkMode } = this.state;\n            const darkColorHandler = this.editor.getColorManager();\n\n            setColor(\n                contentDiv,\n                DefaultTextColor,\n                false /*isBackground*/,\n                isDarkMode,\n                darkColorHandler\n            );\n            setColor(\n                contentDiv,\n                DefaultBackColor,\n                true /*isBackground*/,\n                isDarkMode,\n                darkColorHandler\n            );\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of LifecyclePlugin.\n * @param option The editor option\n * @param contentDiv The editor content DIV element\n */\nexport function createLifecyclePlugin(\n    option: EditorOptions,\n    contentDiv: HTMLDivElement\n): PluginWithState<LifecyclePluginState> {\n    return new LifecyclePlugin(option, contentDiv);\n}\n","import { findCoordinate } from './findCoordinate';\nimport { findTableCellElement } from '../../coreApi/setDOMSelection/findTableCellElement';\nimport { isSingleImageInSelection } from './isSingleImageInSelection';\nimport { normalizePos } from './normalizePos';\nimport {\n    isCharacterValue,\n    isElementOfType,\n    isModifierKey,\n    isNodeOfType,\n    parseTableCells,\n    toArray,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DOMSelection,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n    SelectionPluginState,\n    EditorOptions,\n    DOMHelper,\n    ParsedTable,\n    TableSelectionInfo,\n    TableCellCoordinate,\n} from 'roosterjs-content-model-types';\n\nconst MouseLeftButton = 0;\nconst MouseRightButton = 2;\nconst Up = 'ArrowUp';\nconst Down = 'ArrowDown';\nconst Left = 'ArrowLeft';\nconst Right = 'ArrowRight';\nconst Tab = 'Tab';\n\n/**\n * @internal\n */\nexport const DEFAULT_SELECTION_BORDER_COLOR = '#DB626C';\n/**\n * @internal\n */\nexport const DEFAULT_TABLE_CELL_SELECTION_BACKGROUND_COLOR = '#C6C6C6';\n\nclass SelectionPlugin implements PluginWithState<SelectionPluginState> {\n    private editor: IEditor | null = null;\n    private state: SelectionPluginState;\n    private disposer: (() => void) | null = null;\n    private logicalRootDisposer: (() => void) | null = null;\n    private isSafari = false;\n    private isMac = false;\n    private scrollTopCache: number = 0;\n\n    constructor(options: EditorOptions) {\n        this.state = {\n            selection: null,\n            tableSelection: null,\n            imageSelectionBorderColor:\n                options.imageSelectionBorderColor ?? DEFAULT_SELECTION_BORDER_COLOR,\n            imageSelectionBorderColorDark: options.imageSelectionBorderColor\n                ? undefined\n                : DEFAULT_SELECTION_BORDER_COLOR,\n            tableCellSelectionBackgroundColor:\n                options.tableCellSelectionBackgroundColor ??\n                DEFAULT_TABLE_CELL_SELECTION_BACKGROUND_COLOR,\n            tableCellSelectionBackgroundColorDark: options.tableCellSelectionBackgroundColor\n                ? undefined\n                : DEFAULT_TABLE_CELL_SELECTION_BACKGROUND_COLOR,\n        };\n    }\n\n    getName() {\n        return 'Selection';\n    }\n\n    initialize(editor: IEditor) {\n        this.editor = editor;\n\n        if (!this.state.imageSelectionBorderColorDark && this.state.imageSelectionBorderColor) {\n            this.state.imageSelectionBorderColorDark = editor\n                .getColorManager()\n                .getDarkColor(this.state.imageSelectionBorderColor, undefined, 'border');\n        }\n\n        if (\n            !this.state.tableCellSelectionBackgroundColorDark &&\n            this.state.tableCellSelectionBackgroundColor\n        ) {\n            this.state.tableCellSelectionBackgroundColorDark = editor\n                .getColorManager()\n                .getDarkColor(\n                    this.state.tableCellSelectionBackgroundColor,\n                    undefined,\n                    'background'\n                );\n        }\n\n        const env = this.editor.getEnvironment();\n        const document = this.editor.getDocument();\n\n        this.isSafari = !!env.isSafari;\n        this.isMac = !!env.isMac;\n        document.addEventListener('selectionchange', this.onSelectionChange);\n        if (this.isSafari) {\n            this.disposer = this.editor.attachDomEvent({\n                focus: { beforeDispatch: this.onFocus },\n                drop: { beforeDispatch: this.onDrop },\n            });\n        } else {\n            this.disposer = this.editor.attachDomEvent({\n                focus: { beforeDispatch: this.onFocus },\n                blur: { beforeDispatch: this.onBlur },\n                drop: { beforeDispatch: this.onDrop },\n            });\n        }\n    }\n\n    dispose() {\n        this.editor?.getDocument().removeEventListener('selectionchange', this.onSelectionChange);\n\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n        }\n\n        this.logicalRootDisposer?.();\n        this.logicalRootDisposer = null;\n\n        this.detachMouseEvent();\n        this.editor = null;\n    }\n\n    getState(): SelectionPluginState {\n        return this.state;\n    }\n\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case 'mouseDown':\n                this.onMouseDown(this.editor, event.rawEvent);\n                break;\n\n            case 'mouseUp':\n                this.onMouseUp();\n                break;\n\n            case 'keyDown':\n                this.onKeyDown(this.editor, event.rawEvent);\n                break;\n\n            case 'contentChanged':\n                this.state.tableSelection = null;\n                break;\n\n            case 'scroll':\n                if (!this.editor.hasFocus()) {\n                    this.scrollTopCache = event.scrollContainer.scrollTop;\n                }\n                break;\n\n            case 'logicalRootChanged':\n                this.logicalRootDisposer?.();\n                if (this.isSafari) {\n                    this.logicalRootDisposer = this.editor.attachDomEvent({\n                        focus: { beforeDispatch: this.onFocus },\n                        drop: { beforeDispatch: this.onDrop },\n                    });\n                } else {\n                    this.logicalRootDisposer = this.editor.attachDomEvent({\n                        focus: { beforeDispatch: this.onFocus },\n                        blur: { beforeDispatch: this.onBlur },\n                        drop: { beforeDispatch: this.onDrop },\n                    });\n                }\n                break;\n        }\n    }\n\n    private onMouseDown(editor: IEditor, rawEvent: MouseEvent) {\n        const selection = editor.getDOMSelection();\n        let image: HTMLImageElement | null;\n\n        // Image selection\n        if (\n            selection?.type == 'image' &&\n            (rawEvent.button == MouseLeftButton ||\n                (rawEvent.button == MouseRightButton &&\n                    !this.getClickingImage(rawEvent) &&\n                    !this.getContainedTargetImage(rawEvent, selection)))\n        ) {\n            this.setDOMSelection(null /*domSelection*/, null /*tableSelection*/);\n        }\n\n        if (\n            (image =\n                this.getClickingImage(rawEvent) ??\n                this.getContainedTargetImage(rawEvent, selection)) &&\n            image.isContentEditable\n        ) {\n            this.setDOMSelection(\n                {\n                    type: 'image',\n                    image: image,\n                },\n                null\n            );\n            return;\n        }\n\n        // Table selection\n        if (selection?.type == 'table' && rawEvent.button == MouseLeftButton) {\n            this.setDOMSelection(null /*domSelection*/, null /*tableSelection*/);\n        }\n\n        let tableSelection: TableSelectionInfo | null;\n        const target = rawEvent.target as Node;\n\n        if (\n            target &&\n            rawEvent.button == MouseLeftButton &&\n            (tableSelection = this.parseTableSelection(target, target, editor.getDOMHelper()))\n        ) {\n            this.state.tableSelection = tableSelection;\n\n            if (rawEvent.detail >= 3) {\n                const lastCo = findCoordinate(\n                    tableSelection.parsedTable,\n                    rawEvent.target as Node,\n                    editor.getDOMHelper()\n                );\n\n                if (lastCo) {\n                    // Triple click, select the current cell\n                    tableSelection.lastCo = lastCo;\n                    this.updateTableSelection(lastCo);\n                    rawEvent.preventDefault();\n                }\n            }\n\n            this.state.mouseDisposer?.();\n            this.state.mouseDisposer = editor.attachDomEvent({\n                mousemove: {\n                    beforeDispatch: this.onMouseMove,\n                },\n            });\n        }\n    }\n\n    private onMouseMove = (event: Event) => {\n        if (this.editor && this.state.tableSelection) {\n            const hasTableSelection = !!this.state.tableSelection.lastCo;\n            const currentNode = event.target as Node;\n            const domHelper = this.editor.getDOMHelper();\n\n            const range = this.editor.getDocument().createRange();\n            const startNode = this.state.tableSelection.startNode;\n            const isReverted =\n                currentNode.compareDocumentPosition(startNode) == Node.DOCUMENT_POSITION_FOLLOWING;\n\n            if (isReverted) {\n                range.setStart(currentNode, 0);\n                range.setEnd(\n                    startNode,\n                    isNodeOfType(startNode, 'TEXT_NODE')\n                        ? startNode.nodeValue?.length ?? 0\n                        : startNode.childNodes.length\n                );\n            } else {\n                range.setStart(startNode, 0);\n                range.setEnd(currentNode, 0);\n            }\n\n            // Use common container of the range to search a common table that covers both start and end node\n            const tableStart = range.commonAncestorContainer;\n            const newTableSelection = this.parseTableSelection(tableStart, startNode, domHelper);\n\n            if (newTableSelection) {\n                const lastCo = findCoordinate(\n                    newTableSelection.parsedTable,\n                    currentNode,\n                    domHelper\n                );\n\n                if (newTableSelection.table != this.state.tableSelection.table) {\n                    // Move mouse into another table (nest table scenario)\n                    this.state.tableSelection = newTableSelection;\n                    this.state.tableSelection.lastCo = lastCo ?? undefined;\n                }\n\n                const updated = lastCo && this.updateTableSelection(lastCo);\n\n                if (hasTableSelection || updated) {\n                    event.preventDefault();\n                }\n            } else if (this.editor.getDOMSelection()?.type == 'table') {\n                // Move mouse out of table\n                this.setDOMSelection(\n                    {\n                        type: 'range',\n                        range,\n                        isReverted,\n                    },\n                    this.state.tableSelection\n                );\n            }\n        }\n    };\n\n    private onMouseUp() {\n        this.detachMouseEvent();\n    }\n\n    private onDrop = () => {\n        this.detachMouseEvent();\n    };\n\n    private onKeyDown(editor: IEditor, rawEvent: KeyboardEvent) {\n        const key = rawEvent.key;\n        const selection = editor.getDOMSelection();\n        const win = editor.getDocument().defaultView;\n\n        switch (selection?.type) {\n            case 'image':\n                if (!isModifierKey(rawEvent) && !rawEvent.shiftKey && selection.image.parentNode) {\n                    if (key === 'Escape') {\n                        this.selectBeforeOrAfterElement(editor, selection.image);\n                        rawEvent.stopPropagation();\n                    } else if (key !== 'Delete' && key !== 'Backspace') {\n                        this.selectBeforeOrAfterElement(editor, selection.image);\n                    }\n                }\n\n                if (\n                    (isModifierKey(rawEvent) || rawEvent.shiftKey) &&\n                    selection.image &&\n                    !this.isSafari\n                ) {\n                    const range = selection.image.ownerDocument.createRange();\n                    range.selectNode(selection.image);\n                    this.setDOMSelection(\n                        {\n                            type: 'range',\n                            range,\n                            isReverted: false,\n                        },\n                        null /* tableSelection */\n                    );\n                }\n                break;\n\n            case 'range':\n                if (key == Up || key == Down || key == Left || key == Right || key == Tab) {\n                    const start = selection.range.startContainer;\n                    this.state.tableSelection = this.parseTableSelection(\n                        start,\n                        start,\n                        editor.getDOMHelper()\n                    );\n\n                    if (this.state.tableSelection && !rawEvent.defaultPrevented) {\n                        if (key == Tab) {\n                            this.handleSelectionInTable(this.getTabKey(rawEvent));\n                            rawEvent.preventDefault();\n                        } else {\n                            win?.requestAnimationFrame(() => this.handleSelectionInTable(key));\n                        }\n                    }\n                }\n                break;\n\n            case 'table':\n                // After a content change event is handled tableSelection state is reset to null\n                // Since we have table selection from DOMSelection, we can use it to re-create the tableSelection state\n                if (this.state.tableSelection == null) {\n                    const { table, firstRow, firstColumn, lastRow, lastColumn } = selection;\n\n                    const parsedTable = parseTableCells(table);\n                    if (parsedTable) {\n                        const firstCo = { row: firstRow, col: firstColumn };\n                        const lastCo = { row: lastRow, col: lastColumn };\n\n                        // Create the tableSelection with current table info\n                        this.state.tableSelection = {\n                            table,\n                            parsedTable,\n                            firstCo,\n                            lastCo,\n                            startNode: findTableCellElement(parsedTable, firstCo)?.cell || table,\n                        };\n                    }\n                }\n                if (this.state.tableSelection?.lastCo) {\n                    const { shiftKey, key } = rawEvent;\n\n                    if (shiftKey && (key == Left || key == Right)) {\n                        const isRtl =\n                            win?.getComputedStyle(this.state.tableSelection.table).direction ==\n                            'rtl';\n\n                        this.updateTableSelectionFromKeyboard(\n                            0,\n                            (key == Left ? -1 : 1) * (isRtl ? -1 : 1)\n                        );\n                        rawEvent.preventDefault();\n                    } else if (shiftKey && (key == Up || key == Down)) {\n                        this.updateTableSelectionFromKeyboard(key == Up ? -1 : 1, 0);\n                        rawEvent.preventDefault();\n                    } else if (key != 'Shift' && !isCharacterValue(rawEvent)) {\n                        if (key == Up || key == Down || key == Left || key == Right) {\n                            this.setDOMSelection(null /*domSelection*/, this.state.tableSelection);\n                            win?.requestAnimationFrame(() => this.handleSelectionInTable(key));\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n    private getTabKey(rawEvent: KeyboardEvent) {\n        return rawEvent.shiftKey ? 'TabLeft' : 'TabRight';\n    }\n\n    private handleSelectionInTable(\n        key: 'ArrowUp' | 'ArrowDown' | 'ArrowLeft' | 'ArrowRight' | 'TabLeft' | 'TabRight'\n    ) {\n        if (!this.editor || !this.state.tableSelection) {\n            return;\n        }\n\n        const selection = this.editor.getDOMSelection();\n        const domHelper = this.editor.getDOMHelper();\n\n        if (selection?.type == 'range') {\n            const {\n                range: { collapsed, startContainer, endContainer, commonAncestorContainer },\n                isReverted,\n            } = selection;\n            const start = isReverted ? endContainer : startContainer;\n            const end: Node | null = isReverted ? startContainer : endContainer;\n            const tableSel = this.parseTableSelection(commonAncestorContainer, start, domHelper);\n\n            if (!tableSel) {\n                return;\n            }\n\n            let lastCo = findCoordinate(tableSel?.parsedTable, end, domHelper);\n            let tabMove = false;\n            const { parsedTable, firstCo: oldCo, table } = this.state.tableSelection;\n\n            if (lastCo && tableSel.table == table) {\n                if (lastCo.col != oldCo.col && (key == Up || key == Down)) {\n                    const change = key == Up ? -1 : 1;\n                    const originalTd = findTableCellElement(parsedTable, oldCo)?.cell;\n                    let td: HTMLTableCellElement | null = null;\n\n                    lastCo = { row: oldCo.row + change, col: oldCo.col };\n\n                    while (lastCo.row >= 0 && lastCo.row < parsedTable.length) {\n                        td = findTableCellElement(parsedTable, lastCo)?.cell || null;\n\n                        if (td == originalTd) {\n                            lastCo.row += change;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    if (collapsed && td) {\n                        this.setRangeSelectionInTable(\n                            td,\n                            key == Up ? td.childNodes.length : 0,\n                            this.editor\n                        );\n                    } else if (!td && (lastCo.row == -1 || lastCo.row <= parsedTable.length)) {\n                        this.selectBeforeOrAfterElement(\n                            this.editor,\n                            table,\n                            change == 1 /* after */,\n                            change != 1 /* setSelectionInNextSiblingElement */\n                        );\n                    }\n                } else if (key == 'TabLeft' || key == 'TabRight') {\n                    const reverse = key == 'TabLeft';\n                    for (\n                        let step = reverse ? -1 : 1,\n                            row = lastCo.row ?? 0,\n                            col = (lastCo.col ?? 0) + step;\n                        ;\n                        col += step\n                    ) {\n                        if (col < 0 || col >= parsedTable[row].length) {\n                            row += step;\n                            if (row < 0) {\n                                this.selectBeforeOrAfterElement(this.editor, tableSel.table);\n                                break;\n                            } else if (row >= parsedTable.length) {\n                                this.selectBeforeOrAfterElement(\n                                    this.editor,\n                                    tableSel.table,\n                                    true /*after*/\n                                );\n                                break;\n                            }\n                            col = reverse ? parsedTable[row].length - 1 : 0;\n                        }\n                        const cell = parsedTable[row][col];\n\n                        if (typeof cell != 'string') {\n                            tabMove = true;\n                            this.setRangeSelectionInTable(\n                                cell,\n                                0,\n                                this.editor,\n                                true /* selectAll */\n                            );\n                            lastCo.row = row;\n                            lastCo.col = col;\n                            break;\n                        }\n                    }\n                } else {\n                    this.state.tableSelection = null;\n                }\n\n                if (\n                    collapsed &&\n                    (lastCo.col != oldCo.col || lastCo.row != oldCo.row) &&\n                    lastCo.row >= 0 &&\n                    lastCo.row == parsedTable.length - 1 &&\n                    lastCo.col == parsedTable[lastCo.row]?.length - 1\n                ) {\n                    this.editor?.announce({ defaultStrings: 'announceOnFocusLastCell' });\n                }\n            }\n\n            if (!collapsed && lastCo && !tabMove) {\n                this.state.tableSelection = tableSel;\n                this.updateTableSelection(lastCo);\n            }\n        }\n    }\n\n    private setRangeSelectionInTable(\n        cell: Node,\n        nodeOffset: number,\n        editor: IEditor,\n        selectAll?: boolean\n    ) {\n        const range = editor.getDocument().createRange();\n        if (selectAll && cell.firstChild && cell.lastChild) {\n            const cellStart = cell.firstChild;\n            const cellEnd = cell.lastChild;\n            // Get first deepest editable position in the cell\n            const posStart = normalizePos(cellStart, 0);\n            // Get last deepest editable position in the cell\n            const posEnd = normalizePos(cellEnd, cellEnd.childNodes.length);\n\n            range.setStart(posStart.node, posStart.offset);\n            range.setEnd(posEnd.node, posEnd.offset);\n        } else {\n            // Get deepest editable position in the cell\n            const { node, offset } = normalizePos(cell, nodeOffset);\n\n            range.setStart(node, offset);\n            range.collapse(true /* toStart */);\n        }\n\n        this.setDOMSelection(\n            {\n                type: 'range',\n                range,\n                isReverted: false,\n            },\n            null /*tableSelection*/\n        );\n    }\n\n    private updateTableSelectionFromKeyboard(rowChange: number, colChange: number) {\n        if (this.state.tableSelection?.lastCo && this.editor) {\n            const { lastCo, parsedTable } = this.state.tableSelection;\n            const row = lastCo.row + rowChange;\n            const col = lastCo.col + colChange;\n\n            if (row >= 0 && row < parsedTable.length && col >= 0 && col < parsedTable[row].length) {\n                this.updateTableSelection({ row, col });\n            }\n        }\n    }\n\n    private selectBeforeOrAfterElement(\n        editor: IEditor,\n        element: HTMLElement,\n        after?: boolean,\n        setSelectionInNextSiblingElement?: boolean\n    ) {\n        const doc = editor.getDocument();\n        const parent = element.parentNode;\n        const index = parent && toArray(parent.childNodes).indexOf(element);\n        let sibling: Element | undefined | null;\n\n        if (parent && index !== null && index >= 0) {\n            const range = doc.createRange();\n            if (\n                setSelectionInNextSiblingElement &&\n                (sibling = after ? element.nextElementSibling : element.previousElementSibling) &&\n                isNodeOfType(sibling, 'ELEMENT_NODE')\n            ) {\n                range.selectNodeContents(sibling);\n                range.collapse(false /* toStart */);\n            } else {\n                range.setStart(parent, index + (after ? 1 : 0));\n                range.collapse();\n            }\n\n            this.setDOMSelection(\n                {\n                    type: 'range',\n                    range: range,\n                    isReverted: false,\n                },\n                null /*tableSelection*/\n            );\n        }\n    }\n\n    private getClickingImage(event: UIEvent): HTMLImageElement | null {\n        const target = event.target as Node;\n\n        return isNodeOfType(target, 'ELEMENT_NODE') && isElementOfType(target, 'img')\n            ? target\n            : null;\n    }\n\n    // MacOS will not create a mouseUp event if contextMenu event is not prevent defaulted.\n    // Make sure we capture image target even if image is wrapped\n    private getContainedTargetImage = (\n        event: MouseEvent,\n        previousSelection: DOMSelection | null\n    ): HTMLImageElement | null => {\n        if (!this.isMac || !previousSelection || previousSelection.type !== 'image') {\n            return null;\n        }\n\n        const target = event.target as Node;\n        if (\n            isNodeOfType(target, 'ELEMENT_NODE') &&\n            isElementOfType(target, 'span') &&\n            target.firstChild === previousSelection.image\n        ) {\n            return previousSelection.image;\n        }\n        return null;\n    };\n\n    private onFocus = () => {\n        if (!this.state.skipReselectOnFocus && this.state.selection) {\n            this.setDOMSelection(this.state.selection, this.state.tableSelection);\n        }\n\n        if (this.state.selection?.type == 'range' && !this.isSafari) {\n            // Editor is focused, now we can get live selection. So no need to keep a selection if the selection type is range.\n            this.state.selection = null;\n        }\n\n        if (this.scrollTopCache && this.editor) {\n            const sc = this.editor.getScrollContainer();\n            sc.scrollTop = this.scrollTopCache;\n            this.scrollTopCache = 0;\n        }\n    };\n\n    private onBlur = () => {\n        if (this.editor) {\n            if (!this.state.selection) {\n                this.state.selection = this.editor.getDOMSelection();\n            }\n            const sc = this.editor.getScrollContainer();\n            this.scrollTopCache = sc.scrollTop;\n        }\n    };\n\n    private onSelectionChange = () => {\n        if (this.editor?.hasFocus() && !this.editor.isInShadowEdit()) {\n            const newSelection = this.editor.getDOMSelection();\n\n            //If am image selection changed to a wider range due a keyboard event, we should update the selection\n            const selection = this.editor.getDocument().getSelection();\n            if (selection && selection.focusNode) {\n                const image = isSingleImageInSelection(selection);\n                if (newSelection?.type == 'image' && !image) {\n                    const range = selection.getRangeAt(0);\n                    this.editor.setDOMSelection({\n                        type: 'range',\n                        range,\n                        isReverted:\n                            selection.focusNode != range.endContainer ||\n                            selection.focusOffset != range.endOffset,\n                    });\n                } else if (newSelection?.type !== 'image' && image) {\n                    this.editor.setDOMSelection({\n                        type: 'image',\n                        image,\n                    });\n                }\n            }\n\n            // Safari has problem to handle onBlur event. When blur, we cannot get the original selection from editor.\n            // So we always save a selection whenever editor has focus. Then after blur, we can still use this cached selection.\n            if (newSelection?.type == 'range') {\n                if (this.isSafari) {\n                    this.state.selection = newSelection;\n                }\n            }\n        }\n    };\n\n    private parseTableSelection(\n        tableStart: Node,\n        tdStart: Node,\n        domHelper: DOMHelper\n    ): TableSelectionInfo | null {\n        let table: HTMLTableElement | null;\n        let parsedTable: ParsedTable | null;\n        let firstCo: TableCellCoordinate | null;\n\n        if (\n            (table = domHelper.findClosestElementAncestor(tableStart, 'table')) &&\n            table.isContentEditable &&\n            (parsedTable = parseTableCells(table)) &&\n            (firstCo = findCoordinate(parsedTable, tdStart, domHelper))\n        ) {\n            return { table, parsedTable, firstCo, startNode: tdStart };\n        } else {\n            return null;\n        }\n    }\n\n    private updateTableSelection(lastCo: TableCellCoordinate) {\n        if (this.state.tableSelection && this.editor) {\n            const {\n                table,\n                firstCo,\n                parsedTable,\n                startNode,\n                lastCo: oldCo,\n            } = this.state.tableSelection;\n\n            if (oldCo || firstCo.row != lastCo.row || firstCo.col != lastCo.col) {\n                this.state.tableSelection.lastCo = lastCo;\n\n                this.setDOMSelection(\n                    {\n                        type: 'table',\n                        table,\n                        firstRow: firstCo.row,\n                        firstColumn: firstCo.col,\n                        lastRow: lastCo.row,\n                        lastColumn: lastCo.col,\n                    },\n                    { table, firstCo, lastCo, parsedTable, startNode }\n                );\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private setDOMSelection(\n        selection: DOMSelection | null,\n        tableSelection: TableSelectionInfo | null\n    ) {\n        this.editor?.setDOMSelection(selection);\n        this.state.tableSelection = tableSelection;\n    }\n\n    private detachMouseEvent() {\n        if (this.state.mouseDisposer) {\n            this.state.mouseDisposer();\n            this.state.mouseDisposer = undefined;\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of SelectionPlugin.\n * @param option The editor option\n */\nexport function createSelectionPlugin(\n    options: EditorOptions\n): PluginWithState<SelectionPluginState> {\n    return new SelectionPlugin(options);\n}\n","import type { DOMHelper, ParsedTable, TableCellCoordinate } from 'roosterjs-content-model-types';\n\nconst TableCellSelector = 'TH,TD';\n\n/**\n * @internal\n * Find coordinate of a given element from a parsed table\n */\nexport function findCoordinate(\n    parsedTable: ParsedTable,\n    element: Node,\n    domHelper: DOMHelper\n): TableCellCoordinate | null {\n    const td = domHelper.findClosestElementAncestor(element, TableCellSelector);\n    let result: TableCellCoordinate | null = null;\n\n    // Try to do a fast check if both TD are in the given TABLE\n    if (td) {\n        parsedTable.some((row, rowIndex) => {\n            const colIndex = td ? row.indexOf(td as HTMLTableCellElement) : -1;\n\n            return (result = colIndex >= 0 ? { row: rowIndex, col: colIndex } : null);\n        });\n    }\n\n    // For nested table scenario, try to find the outer TAble cells\n    if (!result) {\n        parsedTable.some((row, rowIndex) => {\n            const colIndex = row.findIndex(\n                cell => typeof cell == 'object' && cell.contains(element)\n            );\n\n            return (result = colIndex >= 0 ? { row: rowIndex, col: colIndex } : null);\n        });\n    }\n\n    return result;\n}\n","import { isElementOfType, isNodeOfType } from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\nexport function isSingleImageInSelection(selection: Selection | Range): HTMLImageElement | null {\n    const { startNode, endNode, startOffset, endOffset } = getProps(selection);\n\n    const max = Math.max(startOffset, endOffset);\n    const min = Math.min(startOffset, endOffset);\n\n    if (startNode && endNode && startNode == endNode && max - min == 1) {\n        const node = startNode?.childNodes.item(min);\n        if (isNodeOfType(node, 'ELEMENT_NODE') && isElementOfType(node, 'img')) {\n            return node;\n        }\n    }\n    return null;\n}\nfunction getProps(\n    selection: Selection | Range\n): { startNode: Node | null; endNode: Node | null; startOffset: number; endOffset: number } {\n    if (isSelection(selection)) {\n        return {\n            startNode: selection.anchorNode,\n            endNode: selection.focusNode,\n            startOffset: selection.anchorOffset,\n            endOffset: selection.focusOffset,\n        };\n    } else {\n        return {\n            startNode: selection.startContainer,\n            endNode: selection.endContainer,\n            startOffset: selection.startOffset,\n            endOffset: selection.endOffset,\n        };\n    }\n}\n\nfunction isSelection(selection: Selection | Range): selection is Selection {\n    return !!(selection as Selection).getRangeAt;\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { DOMInsertPoint } from 'roosterjs-content-model-types';\n\n/**\n * HTML void elements\n * Per https://www.w3.org/TR/html/syntax.html#syntax-elements, cannot have child nodes\n * This regex is used when we move focus to very begin of editor. We should avoid putting focus inside\n * void elements so users don't accidentally create child nodes in them\n */\nconst HTML_VOID_ELEMENTS = [\n    'AREA',\n    'BASE',\n    'BR',\n    'COL',\n    'COMMAND',\n    'EMBED',\n    'HR',\n    'IMG',\n    'INPUT',\n    'KEYGEN',\n    'LINK',\n    'META',\n    'PARAM',\n    'SOURCE',\n    'TRACK',\n    'WBR',\n];\n\n/**\n * @internal\n */\nexport function normalizePos(node: Node, offset: number): DOMInsertPoint {\n    const len = isNodeOfType(node, 'TEXT_NODE')\n        ? node.nodeValue?.length ?? 0\n        : node.childNodes.length;\n    offset = Math.max(Math.min(offset, len), 0);\n\n    while (node?.lastChild) {\n        if (offset >= node.childNodes.length) {\n            node = node.lastChild;\n            offset = isNodeOfType(node, 'TEXT_NODE')\n                ? node.nodeValue?.length ?? 0\n                : node.childNodes.length;\n        } else {\n            const nextNode = node.childNodes[offset];\n\n            if (\n                isNodeOfType(nextNode, 'ELEMENT_NODE') &&\n                HTML_VOID_ELEMENTS.indexOf(nextNode.tagName) >= 0\n            ) {\n                break;\n            } else {\n                node = node.childNodes[offset];\n                offset = 0;\n            }\n        }\n    }\n\n    return { node, offset };\n}\n","import type { Snapshot, Snapshots, SnapshotsManager } from 'roosterjs-content-model-types';\n\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\n// to keep size under limit. This is kept at 10MB\nconst MAX_SIZE_LIMIT = 1e7;\n\nclass SnapshotsManagerImpl implements SnapshotsManager {\n    private snapshots: Snapshots;\n    private hasNewContentValue: boolean = false;\n\n    constructor(snapshots?: Snapshots) {\n        this.snapshots = snapshots ?? {\n            snapshots: [],\n            totalSize: 0,\n            currentIndex: -1,\n            autoCompleteIndex: -1,\n            maxSize: MAX_SIZE_LIMIT,\n        };\n    }\n\n    get hasNewContent(): boolean {\n        return this.hasNewContentValue;\n    }\n\n    set hasNewContent(value: boolean) {\n        this.hasNewContentValue = value;\n    }\n\n    canMove(step: number): boolean {\n        const newIndex = this.snapshots.currentIndex + step;\n        return newIndex >= 0 && newIndex < this.snapshots.snapshots.length;\n    }\n\n    move(step: number): Snapshot | null {\n        let result: Snapshot | null = null;\n\n        if (this.canMove(step)) {\n            this.snapshots.currentIndex += step;\n            this.snapshots.autoCompleteIndex = -1;\n            result = this.snapshots.snapshots[this.snapshots.currentIndex];\n        }\n\n        this.snapshots.onChanged?.('move');\n\n        return result;\n    }\n\n    addSnapshot(snapshot: Snapshot, isAutoCompleteSnapshot: boolean): void {\n        const currentSnapshot = this.snapshots.snapshots[this.snapshots.currentIndex];\n        const isSameSnapshot =\n            currentSnapshot &&\n            currentSnapshot.html == snapshot.html &&\n            !currentSnapshot.entityStates &&\n            !snapshot.entityStates;\n        const addSnapshot = !currentSnapshot || shouldAddSnapshot(currentSnapshot, snapshot);\n\n        if (this.snapshots.currentIndex < 0 || addSnapshot) {\n            this.clearRedo();\n            this.snapshots.snapshots.push(snapshot);\n            this.snapshots.currentIndex++;\n            this.snapshots.totalSize += this.getSnapshotLength(snapshot);\n\n            let removeCount = 0;\n            while (\n                removeCount < this.snapshots.snapshots.length &&\n                this.snapshots.totalSize > this.snapshots.maxSize\n            ) {\n                this.snapshots.totalSize -= this.getSnapshotLength(\n                    this.snapshots.snapshots[removeCount]\n                );\n                removeCount++;\n            }\n\n            if (removeCount > 0) {\n                this.snapshots.snapshots.splice(0, removeCount);\n                this.snapshots.currentIndex -= removeCount;\n\n                if (this.snapshots.autoCompleteIndex >= 0) {\n                    this.snapshots.autoCompleteIndex -= removeCount;\n                }\n            }\n\n            if (isAutoCompleteSnapshot) {\n                this.snapshots.autoCompleteIndex = this.snapshots.currentIndex;\n            }\n        } else if (isSameSnapshot) {\n            // replace the currentSnapshot's metadata so the selection is updated\n            this.snapshots.snapshots.splice(this.snapshots.currentIndex, 1, snapshot);\n        }\n\n        this.snapshots.onChanged?.('add');\n    }\n\n    clearRedo(): void {\n        if (this.canMove(1)) {\n            let removedSize = 0;\n            for (\n                let i = this.snapshots.currentIndex + 1;\n                i < this.snapshots.snapshots.length;\n                i++\n            ) {\n                removedSize += this.getSnapshotLength(this.snapshots.snapshots[i]);\n            }\n\n            this.snapshots.snapshots.splice(this.snapshots.currentIndex + 1);\n            this.snapshots.totalSize -= removedSize;\n            this.snapshots.autoCompleteIndex = -1;\n\n            this.snapshots.onChanged?.('clear');\n        }\n    }\n\n    canUndoAutoComplete(): boolean {\n        return (\n            this.snapshots.autoCompleteIndex >= 0 &&\n            this.snapshots.currentIndex - this.snapshots.autoCompleteIndex == 1\n        );\n    }\n\n    private getSnapshotLength(snapshot: Snapshot) {\n        return snapshot.html?.length ?? 0;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of Undo Snapshots Manager\n * @param snapshots @optional Snapshots object for storing undo snapshots. If not passed, default implementation will be used\n */\nexport function createSnapshotsManager(snapshots?: Snapshots): SnapshotsManager {\n    return new SnapshotsManagerImpl(snapshots);\n}\n\nfunction shouldAddSnapshot(currentSnapshot: Snapshot, snapshot: Snapshot) {\n    return (\n        currentSnapshot.html !== snapshot.html ||\n        (currentSnapshot.entityStates &&\n            snapshot.entityStates &&\n            currentSnapshot.entityStates !== snapshot.entityStates) ||\n        (!currentSnapshot.entityStates && snapshot.entityStates)\n    );\n}\n","import { ChangeSource, isCursorMovingKey } from 'roosterjs-content-model-dom';\nimport { createSnapshotsManager } from './SnapshotsManagerImpl';\nimport { undo } from '../../command/undo/undo';\nimport type {\n    ContentChangedEvent,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n    EditorOptions,\n    UndoPluginState,\n} from 'roosterjs-content-model-types';\n\nconst Backspace = 'Backspace';\nconst Delete = 'Delete';\nconst Enter = 'Enter';\n\n/**\n * Provides snapshot based undo service for Editor\n */\nclass UndoPlugin implements PluginWithState<UndoPluginState> {\n    private editor: IEditor | null = null;\n    private state: UndoPluginState;\n\n    /**\n     * Construct a new instance of UndoPlugin\n     * @param options The wrapper of the state object\n     */\n    constructor(options: EditorOptions) {\n        this.state = {\n            snapshotsManager: createSnapshotsManager(options.snapshots),\n            isRestoring: false,\n            isNested: false,\n            autoCompleteInsertPoint: null,\n            lastKeyPress: null,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Undo';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor): void {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * @param event The event to check\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        return (\n            !!this.editor &&\n            event.eventType == 'keyDown' &&\n            event.rawEvent.key == Backspace &&\n            !event.rawEvent.ctrlKey &&\n            this.canUndoAutoComplete(this.editor)\n        );\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent): void {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case 'editorReady':\n                const manager = this.state.snapshotsManager;\n                const canUndo = manager.hasNewContent || manager.canMove(-1);\n                const canRedo = manager.canMove(1);\n\n                if (!canUndo && !canRedo) {\n                    // Only add initial snapshot when there is no existing snapshot\n                    // Otherwise preserved undo/redo state may be ruined\n                    this.addUndoSnapshot();\n                }\n                break;\n            case 'keyDown':\n                this.onKeyDown(this.editor, event.rawEvent);\n                break;\n            case 'keyPress':\n                this.onKeyPress(this.editor, event.rawEvent);\n                break;\n            case 'compositionEnd':\n                this.clearRedoForInput();\n                this.addUndoSnapshot();\n                break;\n            case 'contentChanged':\n                this.onContentChanged(event);\n                break;\n            case 'beforeKeyboardEditing':\n                this.onBeforeKeyboardEditing(event.rawEvent);\n                break;\n\n            case 'mouseDown':\n                if (this.state.snapshotsManager.hasNewContent) {\n                    this.addUndoSnapshot();\n                }\n                break;\n        }\n    }\n\n    private onKeyDown(editor: IEditor, evt: KeyboardEvent): void {\n        const { snapshotsManager } = this.state;\n\n        // Handle backspace/delete when there is a selection to take a snapshot\n        // since we want the state prior to deletion restorable\n        // Ignore if keycombo is ALT+BACKSPACE\n        if ((evt.key == Backspace && !evt.altKey) || evt.key == Delete) {\n            if (evt.key == Backspace && !evt.ctrlKey && this.canUndoAutoComplete(editor)) {\n                evt.preventDefault();\n                undo(editor);\n                this.state.autoCompleteInsertPoint = null;\n                this.state.lastKeyPress = evt.key;\n            } else if (!evt.defaultPrevented) {\n                const selection = editor.getDOMSelection();\n\n                // Add snapshot when\n                // 1. Something has been selected (not collapsed), or\n                // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\n                // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\n                if (\n                    selection &&\n                    (selection.type != 'range' ||\n                        !selection.range.collapsed ||\n                        this.state.lastKeyPress != evt.key ||\n                        this.isCtrlOrMetaPressed(editor, evt))\n                ) {\n                    this.addUndoSnapshot();\n                }\n\n                // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\n                snapshotsManager.hasNewContent = true;\n                this.state.lastKeyPress = evt.key;\n            }\n        } else if (isCursorMovingKey(evt)) {\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\n            if (snapshotsManager.hasNewContent) {\n                this.addUndoSnapshot();\n            }\n            this.state.lastKeyPress = null;\n        } else if (this.state.lastKeyPress == Backspace || this.state.lastKeyPress == Delete) {\n            if (snapshotsManager.hasNewContent) {\n                this.addUndoSnapshot();\n            }\n        }\n    }\n\n    private onKeyPress(editor: IEditor, evt: KeyboardEvent): void {\n        if (evt.metaKey) {\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\n            return;\n        }\n\n        const selection = editor.getDOMSelection();\n\n        if (\n            (selection && (selection.type != 'range' || !selection.range.collapsed)) ||\n            (evt.key == ' ' && this.state.lastKeyPress != ' ') ||\n            evt.key == Enter\n        ) {\n            this.addUndoSnapshot();\n\n            if (evt.key == Enter) {\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\n                // we restore the snapshot before ENTER\n                this.state.snapshotsManager.hasNewContent = true;\n            }\n        } else {\n            this.clearRedoForInput();\n        }\n\n        this.state.lastKeyPress = evt.key;\n    }\n\n    private onBeforeKeyboardEditing(event: KeyboardEvent) {\n        // For keyboard event (triggered from Content Model), we can get its keycode from event.data\n        // And when user is keep pressing the same key, mark editor with \"hasNewContent\" so that next time user\n        // do some other action or press a different key, we will add undo snapshot\n        if (event.key != this.state.lastKeyPress) {\n            this.addUndoSnapshot();\n        }\n\n        this.state.lastKeyPress = event.key;\n        this.state.snapshotsManager.hasNewContent = true;\n    }\n\n    private onContentChanged(event: ContentChangedEvent) {\n        if (\n            !(\n                this.state.isRestoring ||\n                event.source == ChangeSource.SwitchToDarkMode ||\n                event.source == ChangeSource.SwitchToLightMode ||\n                event.source == ChangeSource.Keyboard\n            )\n        ) {\n            this.clearRedoForInput();\n        }\n    }\n\n    private clearRedoForInput() {\n        this.state.snapshotsManager.clearRedo();\n        this.state.lastKeyPress = null;\n        this.state.snapshotsManager.hasNewContent = true;\n    }\n\n    private canUndoAutoComplete(editor: IEditor) {\n        const selection = editor.getDOMSelection();\n\n        return (\n            this.state.snapshotsManager.canUndoAutoComplete() &&\n            selection?.type == 'range' &&\n            selection.range.collapsed &&\n            selection.range.startContainer == this.state.autoCompleteInsertPoint?.node &&\n            selection.range.startOffset == this.state.autoCompleteInsertPoint.offset\n        );\n    }\n\n    private addUndoSnapshot() {\n        this.editor?.takeSnapshot();\n        this.state.autoCompleteInsertPoint = null;\n    }\n\n    private isCtrlOrMetaPressed(editor: IEditor, event: KeyboardEvent) {\n        const env = editor.getEnvironment();\n\n        return env.isMac ? event.metaKey : event.ctrlKey;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of UndoPlugin.\n * @param option The editor option\n */\nexport function createUndoPlugin(option: EditorOptions): PluginWithState<UndoPluginState> {\n    return new UndoPlugin(option);\n}\n","import { createEditorCore } from './core/createEditorCore';\nimport {\n    createEmptyModel,\n    ChangeSource,\n    cloneModel,\n    transformColor,\n    createDomToModelContextWithConfig,\n    domToContentModel,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelDocument,\n    ContentModelFormatter,\n    ContentModelSegmentFormat,\n    DarkColorHandler,\n    DOMEventRecord,\n    DOMHelper,\n    DOMSelection,\n    EditorEnvironment,\n    FormatContentModelOptions,\n    IEditor,\n    PluginEventData,\n    PluginEventFromType,\n    PluginEventType,\n    Snapshot,\n    SnapshotsManager,\n    EditorCore,\n    EditorOptions,\n    Rect,\n    EntityState,\n    CachedElementHandler,\n    DomToModelOptionForCreateModel,\n    AnnounceData,\n    ExperimentalFeature,\n    LegacyTrustedHTMLHandler,\n    DOMCreator,\n} from 'roosterjs-content-model-types';\n\n/**\n * The main editor class based on Content Model\n */\nexport class Editor implements IEditor {\n    private core: EditorCore | null = null;\n\n    /**\n     * Creates an instance of Editor\n     * @param contentDiv The DIV HTML element which will be the container element of editor\n     * @param options An optional options object to customize the editor\n     */\n    constructor(contentDiv: HTMLDivElement, options: EditorOptions = {}) {\n        this.core = createEditorCore(contentDiv, options);\n\n        const initialModel =\n            options.initialModel ?? createEmptyModel(this.core.format.defaultFormat);\n\n        this.core.api.setContentModel(\n            this.core,\n            initialModel,\n            { ignoreSelection: true },\n            undefined /*onNodeCreated*/,\n            true /*isInitializing*/\n        );\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\n    }\n\n    /**\n     * Dispose this editor, dispose all plugins and custom data\n     */\n    dispose() {\n        const core = this.getCore();\n\n        for (let i = core.plugins.length - 1; i >= 0; i--) {\n            const plugin = core.plugins[i];\n\n            try {\n                plugin.dispose();\n            } catch (e) {\n                // Cache the error and pass it out, then keep going since dispose should always succeed\n                core.disposeErrorHandler?.(plugin, e as Error);\n            }\n        }\n\n        core.darkColorHandler.reset();\n\n        this.core = null;\n    }\n\n    /**\n     * Get whether this editor is disposed\n     * @returns True if editor is disposed, otherwise false\n     */\n    isDisposed(): boolean {\n        return !this.core;\n    }\n\n    /**\n     * Create Content Model from DOM tree in this editor\n     * @param mode What kind of Content Model we want. Currently we support the following values:\n     * - disconnected: Returns a disconnected clone of Content Model from editor which you can do any change on it and it won't impact the editor content.\n     * If there is any entity in editor, the returned object will contain cloned copy of entity wrapper element.\n     * If editor is in dark mode, the cloned entity will be converted back to light mode.\n     * - clean: Similar with disconnected, this will return a disconnected model, the difference is \"clean\" mode will not include any selection info.\n     * This is usually used for exporting content\n     */\n    getContentModelCopy(mode: 'connected' | 'disconnected' | 'clean'): ContentModelDocument {\n        const core = this.getCore();\n\n        switch (mode) {\n            case 'connected': // Get a connected model is deprecated. Now we will always return disconnected model\n            case 'disconnected':\n                return cloneModel(\n                    core.api.createContentModel(core, {\n                        tryGetFromCache: false,\n                    }),\n                    {\n                        includeCachedElement: this.cloneOptionCallback,\n                    }\n                );\n\n            case 'clean':\n                const domToModelContext = createDomToModelContextWithConfig(\n                    core.environment.domToModelSettings.calculated,\n                    core.api.createEditorContext(core, false /*saveIndex*/)\n                );\n\n                return cloneModel(domToContentModel(core.physicalRoot, domToModelContext), {\n                    includeCachedElement: this.cloneOptionCallback,\n                });\n        }\n    }\n\n    /**\n     * Get current running environment, such as if editor is running on Mac\n     */\n    getEnvironment(): EditorEnvironment {\n        return this.getCore().environment;\n    }\n\n    /**\n     * Get current DOM selection\n     */\n    getDOMSelection(): DOMSelection | null {\n        const core = this.getCore();\n\n        return core.api.getDOMSelection(core);\n    }\n\n    /**\n     * Set DOMSelection into editor content.\n     * @param selection The selection to set\n     */\n    setDOMSelection(selection: DOMSelection | null) {\n        const core = this.getCore();\n\n        core.api.setDOMSelection(core, selection);\n    }\n\n    /**\n     * Set a new logical root (most likely due to focus change)\n     * @param logicalRoot The new logical root (has to be child of physicalRoot)\n     */\n    setLogicalRoot(logicalRoot: HTMLDivElement) {\n        const core = this.getCore();\n\n        core.api.setLogicalRoot(core, logicalRoot);\n    }\n\n    /**\n     * The general API to do format change with Content Model\n     * It will grab a Content Model for current editor content, and invoke a callback function\n     * to do format change. Then according to the return value, write back the modified content model into editor.\n     * If there is cached model, it will be used and updated.\n     * @param formatter Formatter function, see ContentModelFormatter\n     * @param options More options, see FormatContentModelOptions\n     */\n    formatContentModel(\n        formatter: ContentModelFormatter,\n        options?: FormatContentModelOptions,\n        domToModelOptions?: DomToModelOptionForCreateModel\n    ): void {\n        const core = this.getCore();\n\n        core.api.formatContentModel(core, formatter, options, domToModelOptions);\n    }\n\n    /**\n     * Get pending format of editor if any, or return null\n     */\n    getPendingFormat(): ContentModelSegmentFormat | null {\n        return this.getCore().format.pendingFormat?.format ?? null;\n    }\n\n    /**\n     * Get a DOM Helper object to help access DOM tree in editor\n     */\n    getDOMHelper(): DOMHelper {\n        return this.getCore().domHelper;\n    }\n\n    /**\n     * Add a single undo snapshot to undo stack\n     * @param entityState @optional State for entity if we want to add entity state for this snapshot\n     */\n    takeSnapshot(entityState?: EntityState): Snapshot | null {\n        const core = this.getCore();\n\n        return core.api.addUndoSnapshot(\n            core,\n            false /*canUndoByBackspace*/,\n            entityState ? [entityState] : undefined\n        );\n    }\n\n    /**\n     * Restore an undo snapshot into editor\n     * @param snapshot The snapshot to restore\n     */\n    restoreSnapshot(snapshot: Snapshot): void {\n        const core = this.getCore();\n\n        core.api.restoreUndoSnapshot(core, snapshot);\n    }\n\n    /**\n     * Get document which contains this editor\n     * @returns The HTML document which contains this editor\n     */\n    getDocument(): Document {\n        return this.getCore().physicalRoot.ownerDocument;\n    }\n\n    /**\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\n     */\n    focus() {\n        const core = this.getCore();\n        core.api.focus(core);\n    }\n\n    /**\n     * Check if focus is in editor now\n     * @returns true if focus is in editor, otherwise false\n     */\n    hasFocus(): boolean {\n        const core = this.getCore();\n        return core.domHelper.hasFocus();\n    }\n\n    /**\n     * Trigger an event to be dispatched to all plugins\n     * @param eventType Type of the event\n     * @param data data of the event with given type, this is the rest part of PluginEvent with the given type\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\n     * @returns the event object which is really passed into plugins. Some plugin may modify the event object so\n     * the result of this function provides a chance to read the modified result\n     */\n    triggerEvent<T extends PluginEventType>(\n        eventType: T,\n        data: PluginEventData<T>,\n        broadcast: boolean = false\n    ): PluginEventFromType<T> {\n        const core = this.getCore();\n        const event = ({\n            eventType,\n            ...data,\n        } as any) as PluginEventFromType<T>;\n        core.api.triggerEvent(core, event, broadcast);\n\n        return event;\n    }\n\n    /**\n     * Attach a DOM event to the editor content DIV\n     * @param eventMap A map from event name to its handler\n     */\n    attachDomEvent(eventMap: Record<string, DOMEventRecord>): () => void {\n        const core = this.getCore();\n        return core.api.attachDomEvent(core, eventMap);\n    }\n\n    /**\n     * Get undo snapshots manager\n     */\n    getSnapshotsManager(): SnapshotsManager {\n        const core = this.getCore();\n\n        return core.undo.snapshotsManager;\n    }\n\n    /**\n     * Check if the editor is in dark mode\n     * @returns True if the editor is in dark mode, otherwise false\n     */\n    isDarkMode(): boolean {\n        return this.getCore().lifecycle.isDarkMode;\n    }\n\n    /**\n     * Set the dark mode state and transforms the content to match the new state.\n     * @param isDarkMode The next status of dark mode. True if the editor should be in dark mode, false if not.\n     */\n    setDarkModeState(isDarkMode?: boolean) {\n        const core = this.getCore();\n\n        if (!!isDarkMode != core.lifecycle.isDarkMode) {\n            transformColor(\n                core.physicalRoot,\n                false /*includeSelf*/,\n                isDarkMode ? 'lightToDark' : 'darkToLight',\n                core.darkColorHandler\n            );\n\n            core.lifecycle.isDarkMode = !!isDarkMode;\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: 'contentChanged',\n                    source: isDarkMode\n                        ? ChangeSource.SwitchToDarkMode\n                        : ChangeSource.SwitchToLightMode,\n                },\n                true\n            );\n        }\n    }\n\n    /**\n     * Check if editor is in Shadow Edit mode\n     */\n    isInShadowEdit() {\n        return !!this.getCore().lifecycle.shadowEditFragment;\n    }\n\n    /**\n     * Make the editor in \"Shadow Edit\" mode.\n     * In Shadow Edit mode, all format change will finally be ignored.\n     * This can be used for building a live preview feature for format button, to allow user\n     * see format result without really apply it.\n     * This function can be called repeated. If editor is already in shadow edit mode, we can still\n     * use this function to do more shadow edit operation.\n     */\n    startShadowEdit() {\n        const core = this.getCore();\n        core.api.switchShadowEdit(core, true /*isOn*/);\n    }\n\n    /**\n     * Leave \"Shadow Edit\" mode, all changes made during shadow edit will be discarded\n     */\n    stopShadowEdit() {\n        const core = this.getCore();\n        core.api.switchShadowEdit(core, false /*isOn*/);\n    }\n\n    /**\n     * Get a color manager object for this editor.\n     */\n    getColorManager(): DarkColorHandler {\n        return this.getCore().darkColorHandler;\n    }\n\n    /**\n     * @deprecated\n     * Get a function to convert HTML string to trusted HTML string.\n     * By default it will just return the input HTML directly. To override this behavior,\n     * pass your own trusted HTML handler to EditorOptions.trustedHTMLHandler\n     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\n     */\n    getTrustedHTMLHandler(): LegacyTrustedHTMLHandler {\n        return this.getCore().trustedHTMLHandler;\n    }\n\n    /**\n     * Get a function to convert HTML string to a trust Document.\n     * By default it will just convert the original HTML string into a Document object directly.\n     * To override, pass your own trusted HTML handler to EditorOptions.trustedHTMLHandler\n     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\n     */\n    getDOMCreator(): DOMCreator {\n        return this.getCore().domCreator;\n    }\n\n    /**\n     * Get the scroll container of the editor\n     */\n    getScrollContainer(): HTMLElement {\n        return this.getCore().domEvent.scrollContainer;\n    }\n\n    /**\n     * Retrieves the rect of the visible viewport of the editor.\n     */\n    getVisibleViewport(): Rect | null {\n        return this.getCore().api.getVisibleViewport(this.getCore());\n    }\n\n    /**\n     * Add CSS rules for editor\n     * @param key A string to identify the CSS rule type. When set CSS rules with the same key again, existing rules with the same key will be replaced.\n     * @param cssRule The CSS rule string, must be a valid CSS rule string, or browser may throw exception. Pass null to clear existing rules\n     * @param subSelectors @optional If the rule is used for child element under editor, use this parameter to specify the child elements. Each item will be\n     * combined with root selector together to build a separate rule.\n     */\n    setEditorStyle(\n        key: string,\n        cssRule: string | null,\n        subSelectors?: 'before' | 'after' | string[]\n    ): void {\n        const core = this.getCore();\n\n        core.api.setEditorStyle(core, key, cssRule, subSelectors);\n    }\n\n    /**\n     * Announce the given data\n     * @param announceData Data to announce\n     */\n    announce(announceData: AnnounceData): void {\n        const core = this.getCore();\n\n        core.api.announce(core, announceData);\n    }\n\n    /**\n     * Check if a given feature is enabled\n     * @param featureName The name of feature to check\n     */\n    isExperimentalFeatureEnabled(featureName: ExperimentalFeature | string): boolean {\n        return this.getCore().experimentalFeatures.indexOf(featureName) >= 0;\n    }\n\n    /**\n     * @returns the current EditorCore object\n     * @throws a standard Error if there's no core object\n     */\n    protected getCore(): EditorCore {\n        if (!this.core) {\n            throw new Error('Editor is already disposed');\n        }\n        return this.core;\n    }\n\n    private cloneOptionCallback: CachedElementHandler = (node, type) => {\n        if (type == 'cache') {\n            return undefined;\n        }\n\n        const result = node.cloneNode(true /*deep*/) as HTMLElement;\n\n        if (this.isDarkMode()) {\n            const colorHandler = this.getColorManager();\n\n            transformColor(result, true /*includeSelf*/, 'darkToLight', colorHandler);\n\n            result.style.color = result.style.color || 'inherit';\n            result.style.backgroundColor = result.style.backgroundColor || 'inherit';\n        }\n\n        return result;\n    };\n}\n","import { isNodeOfType, parseValueWithUnit, toArray } from 'roosterjs-content-model-dom';\nimport type { ContentModelSegmentFormat, DOMHelper } from 'roosterjs-content-model-types';\n\nclass DOMHelperImpl implements DOMHelper {\n    constructor(private contentDiv: HTMLElement) {}\n\n    queryElements(selector: string): HTMLElement[] {\n        return toArray(this.contentDiv.querySelectorAll(selector)) as HTMLElement[];\n    }\n\n    getTextContent(): string {\n        return this.contentDiv.textContent || '';\n    }\n\n    isNodeInEditor(node: Node, excludeRoot?: boolean): boolean {\n        return excludeRoot && node == this.contentDiv ? false : this.contentDiv.contains(node);\n    }\n\n    calculateZoomScale(): number {\n        const originalWidth = this.contentDiv.getBoundingClientRect()?.width || 0;\n        const visualWidth = this.contentDiv.offsetWidth;\n\n        return visualWidth > 0 && originalWidth > 0\n            ? Math.round((originalWidth / visualWidth) * 100) / 100\n            : 1;\n    }\n\n    setDomAttribute(name: string, value: string | null) {\n        if (value === null) {\n            this.contentDiv.removeAttribute(name);\n        } else {\n            this.contentDiv.setAttribute(name, value);\n        }\n    }\n\n    getDomAttribute(name: string): string | null {\n        return this.contentDiv.getAttribute(name);\n    }\n\n    getDomStyle<T extends keyof CSSStyleDeclaration>(style: T): CSSStyleDeclaration[T] {\n        return this.contentDiv.style[style];\n    }\n\n    findClosestElementAncestor(startFrom: Node, selector?: string): HTMLElement | null {\n        const startElement = isNodeOfType(startFrom, 'ELEMENT_NODE')\n            ? startFrom\n            : startFrom.parentElement;\n        const closestElement = selector\n            ? (startElement?.closest(selector) as HTMLElement | null)\n            : startElement;\n\n        return closestElement &&\n            this.isNodeInEditor(closestElement) &&\n            closestElement != this.contentDiv\n            ? closestElement\n            : null;\n    }\n\n    hasFocus(): boolean {\n        const activeElement = this.contentDiv.ownerDocument.activeElement;\n        return !!(activeElement && this.contentDiv.contains(activeElement));\n    }\n\n    /**\n     * Check if the root element is in RTL mode\n     */\n    isRightToLeft(): boolean {\n        const contentDiv = this.contentDiv;\n        const style = contentDiv.ownerDocument.defaultView?.getComputedStyle(contentDiv);\n\n        return style?.direction == 'rtl';\n    }\n\n    /**\n     * Get the width of the editable area of the editor content div\n     */\n    getClientWidth(): number {\n        const contentDiv = this.contentDiv;\n        const style = contentDiv.ownerDocument.defaultView?.getComputedStyle(contentDiv);\n        const paddingLeft = parseValueWithUnit(style?.paddingLeft);\n        const paddingRight = parseValueWithUnit(style?.paddingRight);\n        return this.contentDiv.clientWidth - (paddingLeft + paddingRight);\n    }\n\n    /**\n     * Get a deep cloned root element\n     */\n    getClonedRoot(): HTMLElement {\n        return this.contentDiv.cloneNode(true /*deep*/) as HTMLElement;\n    }\n\n    /**\n     * Get format of the container element\n     */\n    getContainerFormat(): ContentModelSegmentFormat {\n        const window = this.contentDiv.ownerDocument.defaultView;\n\n        const style = window?.getComputedStyle(this.contentDiv);\n\n        return style\n            ? {\n                  fontSize: style.fontSize,\n                  fontFamily: style.fontFamily,\n                  fontWeight: style.fontWeight,\n                  textColor: style.color,\n                  backgroundColor: style.backgroundColor,\n                  italic: style.fontStyle == 'italic',\n                  letterSpacing: style.letterSpacing,\n                  lineHeight: style.lineHeight,\n                  strikethrough: style.textDecoration?.includes('line-through'),\n                  superOrSubScriptSequence: style.verticalAlign,\n                  underline: style.textDecoration?.includes('underline'),\n              }\n            : {};\n    }\n}\n\n/**\n * @internal Create new instance of DOMHelper\n */\nexport function createDOMHelper(contentDiv: HTMLElement): DOMHelper {\n    return new DOMHelperImpl(contentDiv);\n}\n","import { defaultGenerateColorKey } from 'roosterjs-content-model-dom';\nimport type {\n    DarkColorHandler,\n    ColorTransformFunction,\n    Colors,\n} from 'roosterjs-content-model-types';\n\nclass DarkColorHandlerImpl implements DarkColorHandler {\n    constructor(\n        private readonly root: HTMLElement,\n        public getDarkColor: ColorTransformFunction,\n        public readonly knownColors: Record<string, Colors>,\n        public generateColorKey: ColorTransformFunction\n    ) {}\n\n    updateKnownColor(isDarkMode: boolean, key?: string, colorPair?: Colors): void {\n        if (key && colorPair) {\n            // Has values to set\n            // When in light mode: Update the value to known values, do not touch container property\n            // When in dark mode: Update the value to known colors, set value to container\n            if (!this.knownColors[key]) {\n                this.knownColors[key] = colorPair;\n            }\n\n            if (isDarkMode) {\n                this.root.style.setProperty(key, colorPair.darkModeColor);\n            }\n        } else {\n            // No value to set\n            // When in light mode: No op\n            // When in dark mode: Set all values to container, do not touch known values\n            if (isDarkMode) {\n                Object.keys(this.knownColors).forEach(key => {\n                    this.root.style.setProperty(key, this.knownColors[key].darkModeColor);\n                });\n            }\n        }\n    }\n\n    reset() {\n        Object.keys(this.knownColors).forEach(key => {\n            this.root.style.removeProperty(key);\n        });\n    }\n}\n\n/**\n * @internal\n */\nexport function createDarkColorHandler(\n    root: HTMLElement,\n    getDarkColor: ColorTransformFunction,\n    knownColors: Record<string, Colors> = {},\n    generateColorKey: ColorTransformFunction = defaultGenerateColorKey\n): DarkColorHandler {\n    return new DarkColorHandlerImpl(root, getDarkColor, knownColors, generateColorKey);\n}\n","import { coreApiMap } from '../../coreApi/coreApiMap';\nimport { createDarkColorHandler } from './DarkColorHandlerImpl';\nimport { createDOMCreator, createTrustedHTMLHandler, isDOMCreator } from '../../utils/domCreator';\nimport { createDOMHelper } from './DOMHelperImpl';\nimport { createDomToModelSettings, createModelToDomSettings } from './createEditorDefaultSettings';\nimport { createEditorCorePlugins } from '../../corePlugin/createEditorCorePlugins';\nimport type {\n    EditorEnvironment,\n    PluginState,\n    EditorCore,\n    EditorCorePlugins,\n    EditorOptions,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal Create core object for editor\n * @param contentDiv Editor content DIV\n * @param options Editor options\n */\nexport function createEditorCore(contentDiv: HTMLDivElement, options: EditorOptions): EditorCore {\n    const corePlugins = createEditorCorePlugins(options, contentDiv);\n    const domCreator = createDOMCreator(options.trustedHTMLHandler);\n\n    return {\n        physicalRoot: contentDiv,\n        logicalRoot: contentDiv,\n        api: { ...coreApiMap, ...options.coreApiOverride },\n        originalApi: { ...coreApiMap },\n        plugins: [\n            corePlugins.cache,\n            corePlugins.format,\n            corePlugins.copyPaste,\n            corePlugins.domEvent,\n            corePlugins.selection,\n            corePlugins.entity,\n            ...(options.plugins ?? []).filter(x => !!x),\n            corePlugins.undo,\n            corePlugins.contextMenu,\n            corePlugins.lifecycle,\n        ],\n        environment: createEditorEnvironment(contentDiv, options),\n        darkColorHandler: createDarkColorHandler(\n            contentDiv,\n            options.getDarkColor ?? getDarkColorFallback,\n            options.knownColors,\n            options.generateColorKey\n        ),\n        trustedHTMLHandler:\n            options.trustedHTMLHandler && !isDOMCreator(options.trustedHTMLHandler)\n                ? options.trustedHTMLHandler\n                : createTrustedHTMLHandler(domCreator),\n        domCreator: domCreator,\n        domHelper: createDOMHelper(contentDiv),\n        ...getPluginState(corePlugins),\n        disposeErrorHandler: options.disposeErrorHandler,\n        onFixUpModel: options.onFixUpModel,\n        experimentalFeatures: options.experimentalFeatures ? [...options.experimentalFeatures] : [],\n    };\n}\n\nfunction createEditorEnvironment(\n    contentDiv: HTMLElement,\n    options: EditorOptions\n): EditorEnvironment {\n    const navigator = contentDiv.ownerDocument.defaultView?.navigator;\n    const userAgent = navigator?.userAgent ?? '';\n    const appVersion = navigator?.appVersion ?? '';\n\n    return {\n        domToModelSettings: createDomToModelSettings(options),\n        modelToDomSettings: createModelToDomSettings(options),\n        isMac: appVersion.indexOf('Mac') != -1,\n        isAndroid: /android/i.test(userAgent),\n        isSafari:\n            userAgent.indexOf('Safari') >= 0 &&\n            userAgent.indexOf('Chrome') < 0 &&\n            userAgent.indexOf('Android') < 0,\n        isMobileOrTablet: getIsMobileOrTablet(userAgent),\n    };\n}\n\nfunction getIsMobileOrTablet(userAgent: string) {\n    // Reference: http://detectmobilebrowsers.com/\n    // The default regex on the website doesn't consider tablet.\n    // To support tablet, add |android|ipad|playbook|silk to the first regex according to the info in /about page\n    if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n            userAgent\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n            userAgent.substring(0, 4)\n        )\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction getPluginState(corePlugins: EditorCorePlugins): PluginState {\n    return {\n        domEvent: corePlugins.domEvent.getState(),\n        copyPaste: corePlugins.copyPaste.getState(),\n        cache: corePlugins.cache.getState(),\n        format: corePlugins.format.getState(),\n        lifecycle: corePlugins.lifecycle.getState(),\n        entity: corePlugins.entity.getState(),\n        selection: corePlugins.selection.getState(),\n        contextMenu: corePlugins.contextMenu.getState(),\n        undo: corePlugins.undo.getState(),\n    };\n}\n\n/**\n * @internal Export for test only\n * A fallback function, always return original color\n */\nexport function getDarkColorFallback(color: string) {\n    return color;\n}\n","import { createDomToModelConfig, createModelToDomConfig } from 'roosterjs-content-model-dom';\nimport {\n    listItemMetadataApplier,\n    listLevelMetadataApplier,\n} from '../../override/listMetadataApplier';\nimport type {\n    ContentModelSettings,\n    DomToModelOption,\n    DomToModelSettings,\n    ModelToDomOption,\n    ModelToDomSettings,\n    EditorOptions,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create default DOM to Content Model conversion settings for an editor\n * @param options The editor options\n */\nexport function createDomToModelSettings(\n    options: EditorOptions\n): ContentModelSettings<DomToModelOption, DomToModelSettings> {\n    const builtIn: DomToModelOption = {};\n    const customized: DomToModelOption = options.defaultDomToModelOptions ?? {};\n\n    return {\n        builtIn,\n        customized,\n        calculated: createDomToModelConfig([builtIn, customized]),\n    };\n}\n\n/**\n * @internal\n * Create default Content Model to DOM conversion settings for an editor\n * @param options The editor options\n */\nexport function createModelToDomSettings(\n    options: EditorOptions\n): ContentModelSettings<ModelToDomOption, ModelToDomSettings> {\n    const builtIn: ModelToDomOption = {\n        metadataAppliers: {\n            listItem: listItemMetadataApplier,\n            listLevel: listLevelMetadataApplier,\n        },\n    };\n    const customized: ModelToDomOption = options.defaultModelToDomOptions ?? {};\n\n    return {\n        builtIn,\n        customized,\n        calculated: createModelToDomConfig([builtIn, customized]),\n    };\n}\n","// Editor\nexport { Editor } from './editor/Editor';\n\n// Editor command\nexport { createModelFromHtml } from './command/createModelFromHtml/createModelFromHtml';\nexport { exportContent } from './command/exportContent/exportContent';\nexport { undo } from './command/undo/undo';\nexport { redo } from './command/redo/redo';\nexport { paste } from './command/paste/paste';\n","import type { FormatParser, SizeFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal Do not paste width for Format Containers since it may be generated by browser according to temp div width\n */\nexport const containerSizeFormatParser: FormatParser<SizeFormat> = (format, element) => {\n    // For pasted content, there may be existing width generated by browser from the temp DIV. So we need to remove it.\n    if (element.tagName == 'DIV' || element.tagName == 'P') {\n        delete format.width;\n        delete format.height;\n    }\n};\n","import {\n    ListMetadataDefinition,\n    OrderedListStyleMap,\n    UnorderedListStyleMap,\n    getAutoListStyleType,\n    getOrderedListNumberStr,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelListItemFormat,\n    ContentModelListItemLevelFormat,\n    ListMetadataFormat,\n    MetadataApplier,\n} from 'roosterjs-content-model-types';\n\nconst OrderedMapPlaceholderRegex = /\\$\\{(\\w+)\\}/;\n\nfunction getListStyleValue(\n    listType: 'OL' | 'UL',\n    listStyleType: number,\n    listNumber?: number\n): string | undefined {\n    if (listType == 'OL') {\n        const numberStr = getOrderedListNumberStr(listStyleType, listNumber ?? 1);\n        const template = OrderedListStyleMap[listStyleType];\n\n        return template ? template.replace(OrderedMapPlaceholderRegex, numberStr) : undefined;\n    } else {\n        return UnorderedListStyleMap[listStyleType];\n    }\n}\n\nfunction shouldApplyToItem(listStyleType: number, listType: 'OL' | 'UL') {\n    const style =\n        listType == 'OL'\n            ? OrderedListStyleMap[listStyleType]\n            : UnorderedListStyleMap[listStyleType];\n\n    return style?.indexOf('\"') >= 0;\n}\n\n/**\n * @internal\n */\nexport const listItemMetadataApplier: MetadataApplier<\n    ListMetadataFormat,\n    ContentModelListItemFormat\n> = {\n    metadataDefinition: ListMetadataDefinition,\n    applierFunction: (metadata, format, context) => {\n        const depth = context.listFormat.nodeStack.length - 2; // Minus two for the parent element and convert length to index\n\n        if (depth >= 0) {\n            const listType = context.listFormat.nodeStack[depth + 1].listType ?? 'OL';\n            const listStyleType = getAutoListStyleType(listType, metadata ?? {}, depth);\n\n            if (listStyleType !== undefined) {\n                if (shouldApplyToItem(listStyleType, listType)) {\n                    format.listStyleType = getListStyleValue(\n                        listType,\n                        listStyleType,\n                        context.listFormat.threadItemCounts[depth]\n                    );\n                } else {\n                    delete format.listStyleType;\n                }\n            }\n        }\n    },\n};\n\n/**\n * @internal\n */\nexport const listLevelMetadataApplier: MetadataApplier<\n    ListMetadataFormat,\n    ContentModelListItemLevelFormat\n> = {\n    metadataDefinition: ListMetadataDefinition,\n    applierFunction: (metadata, format, context) => {\n        const depth = context.listFormat.nodeStack.length - 2; // Minus two for the parent element and convert length to index\n\n        if (depth >= 0) {\n            const listType = context.listFormat.nodeStack[depth + 1].listType ?? 'OL';\n            const listStyleType = getAutoListStyleType(listType, metadata ?? {}, depth);\n\n            if (listStyleType !== undefined) {\n                if (!shouldApplyToItem(listStyleType, listType)) {\n                    const listStyleTypeFormat = getListStyleValue(\n                        listType,\n                        listStyleType,\n                        context.listFormat.threadItemCounts[depth]\n                    );\n\n                    if (listStyleTypeFormat) {\n                        format.listStyleType = listStyleTypeFormat;\n                    }\n                } else {\n                    delete format.listStyleType;\n                }\n            }\n        }\n    },\n};\n","import { isBlockElement, isElementOfType, isNodeOfType } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelEntity,\n    EntityInfoFormat,\n    FormatParser,\n    OnNodeCreated,\n} from 'roosterjs-content-model-types';\n\nconst BlockEntityClass = '_EBlock';\nconst OneHundredPercent = '100%';\nconst InlineBlock = 'inline-block';\n\n/**\n * @internal\n */\nexport const onCreateCopyEntityNode: OnNodeCreated = (model, node) => {\n    const entityModel = model as ContentModelEntity;\n    if (\n        entityModel &&\n        entityModel.wrapper &&\n        entityModel.blockType == 'Entity' &&\n        isNodeOfType(node, 'ELEMENT_NODE') &&\n        isElementOfType(node, 'div') &&\n        !isBlockElement(entityModel.wrapper) &&\n        entityModel.wrapper.style.display == InlineBlock &&\n        entityModel.wrapper.style.width == OneHundredPercent\n    ) {\n        node.classList.add(BlockEntityClass);\n        node.style.display = 'block';\n        node.style.width = '';\n    }\n};\n\n/**\n * @internal\n */\nexport const pasteBlockEntityParser: FormatParser<EntityInfoFormat> = (_, element) => {\n    if (element.classList.contains(BlockEntityClass)) {\n        element.classList.remove(BlockEntityClass);\n        element.style.display = InlineBlock;\n        element.style.width = OneHundredPercent;\n    }\n};\n","import type { DisplayFormat, FormatParser } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const pasteDisplayFormatParser: FormatParser<DisplayFormat> = (format, element) => {\n    const display = element.style.display;\n\n    if (display && display != 'flex') {\n        format.display = display;\n    }\n};\n","import {\n    AllowedTags,\n    DisallowedTags,\n    sanitizeElement,\n} from '../command/createModelFromHtml/sanitizeElement';\nimport type {\n    DomToModelOptionForSanitizing,\n    ElementProcessor,\n    ValueSanitizer,\n} from 'roosterjs-content-model-types';\n\nconst DefaultStyleSanitizers: Readonly<Record<string, ValueSanitizer>> = {\n    position: false,\n};\n\n/**\n * @internal\n */\nexport function createPasteEntityProcessor(\n    options: DomToModelOptionForSanitizing\n): ElementProcessor<HTMLElement> {\n    const allowedTags = AllowedTags.concat(options.additionalAllowedTags);\n    const disallowedTags = DisallowedTags.concat(options.additionalDisallowedTags);\n    const styleSanitizers = Object.assign({}, DefaultStyleSanitizers, options.styleSanitizers);\n    const attrSanitizers = options.attributeSanitizers;\n\n    return (group, element, context) => {\n        const sanitizedElement = sanitizeElement(\n            element,\n            allowedTags,\n            disallowedTags,\n            styleSanitizers,\n            attrSanitizers\n        );\n\n        if (sanitizedElement) {\n            context.defaultElementProcessors.entity(group, sanitizedElement, context);\n        }\n    };\n}\n","import { moveChildNodes } from 'roosterjs-content-model-dom';\nimport {\n    AllowedTags,\n    createSanitizedElement,\n    DisallowedTags,\n} from '../command/createModelFromHtml/sanitizeElement';\nimport type {\n    DomToModelOptionForSanitizing,\n    ElementProcessor,\n    ValueSanitizer,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal Export for test only\n */\nexport const removeDisplayFlex: ValueSanitizer = value => {\n    return value == 'flex' ? null : value;\n};\n\nconst DefaultStyleSanitizers: Readonly<Record<string, ValueSanitizer>> = {\n    position: false,\n    display: removeDisplayFlex,\n};\n\n/**\n * @internal\n */\nexport function createPasteGeneralProcessor(\n    options: DomToModelOptionForSanitizing\n): ElementProcessor<HTMLElement> {\n    const allowedTags = AllowedTags.concat(options.additionalAllowedTags);\n    const disallowedTags = DisallowedTags.concat(options.additionalDisallowedTags);\n    const styleSanitizers = Object.assign({}, DefaultStyleSanitizers, options.styleSanitizers);\n    const attrSanitizers = options.attributeSanitizers;\n\n    return (group, element, context) => {\n        const tag = element.tagName.toLowerCase();\n        const processor: ElementProcessor<HTMLElement> | undefined =\n            allowedTags.indexOf(tag) >= 0\n                ? (group, element, context) => {\n                      const sanitizedElement = createSanitizedElement(\n                          element.ownerDocument,\n                          element.tagName,\n                          element.attributes,\n                          styleSanitizers,\n                          attrSanitizers\n                      );\n\n                      moveChildNodes(sanitizedElement, element);\n                      context.defaultElementProcessors['*']?.(group, sanitizedElement, context);\n                  }\n                : disallowedTags.indexOf(tag) >= 0\n                ? undefined // Ignore those disallowed tags\n                : context.defaultElementProcessors.span; // For other unknown tags, treat them as SPAN\n\n        processor?.(group, element, context);\n    };\n}\n","import { isWhiteSpacePreserved } from 'roosterjs-content-model-dom';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const pasteTextProcessor: ElementProcessor<Text> = (group, text, context) => {\n    const whiteSpace = context.blockFormat.whiteSpace;\n\n    if (isWhiteSpacePreserved(whiteSpace)) {\n        text.nodeValue = text.nodeValue?.replace(/\\u0020\\u0020/g, '\\u0020\\u00A0') ?? '';\n    }\n\n    context.defaultElementProcessors['#text'](group, text, context);\n};\n","import type { FormatParser, WhiteSpaceFormat } from 'roosterjs-content-model-types';\n\nconst WhiteSpacePre = 'pre';\n\n/**\n * @internal\n */\nexport const pasteWhiteSpaceFormatParser: FormatParser<WhiteSpaceFormat> = (\n    format,\n    element,\n    context,\n    defaultStyle\n) => {\n    if (element.style.whiteSpace != WhiteSpacePre) {\n        context.defaultFormatParsers.whiteSpace?.(format, element, context, defaultStyle);\n    }\n};\n","/**\n * @internal\n */\nexport function createAriaLiveElement(document: Document): HTMLDivElement {\n    const div = document.createElement('div');\n\n    div.style.clip = 'rect(0px, 0px, 0px, 0px)';\n    div.style.clipPath = 'inset(100%)';\n    div.style.height = '1px';\n    div.style.overflow = 'hidden';\n    div.style.position = 'absolute';\n    div.style.whiteSpace = 'nowrap';\n    div.style.width = '1px';\n    div.ariaLive = 'assertive';\n\n    document.body.appendChild(div);\n\n    return div;\n}\n","import type {\n    DOMCreator,\n    LegacyTrustedHTMLHandler,\n    TrustedHTMLHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const createTrustedHTMLHandler = (domCreator: DOMCreator): LegacyTrustedHTMLHandler => {\n    return (html: string) => domCreator.htmlToDOM(html).body.innerHTML;\n};\n\n/**\n * @internal\n */\nexport function createDOMCreator(trustedHTMLHandler?: TrustedHTMLHandler): DOMCreator {\n    return trustedHTMLHandler && isDOMCreator(trustedHTMLHandler)\n        ? trustedHTMLHandler\n        : trustedHTMLHandlerToDOMCreator(trustedHTMLHandler as LegacyTrustedHTMLHandler);\n}\n\n/**\n * @internal\n */\nexport function isDOMCreator(\n    trustedHTMLHandler: TrustedHTMLHandler\n): trustedHTMLHandler is DOMCreator {\n    return typeof (trustedHTMLHandler as DOMCreator).htmlToDOM === 'function';\n}\n\n/**\n * @internal\n */\nexport const defaultTrustHtmlHandler: LegacyTrustedHTMLHandler = (html: string) => {\n    return html;\n};\n\nfunction trustedHTMLHandlerToDOMCreator(trustedHTMLHandler?: LegacyTrustedHTMLHandler): DOMCreator {\n    const handler = trustedHTMLHandler || defaultTrustHtmlHandler;\n    return {\n        htmlToDOM: (html: string) => new DOMParser().parseFromString(handler(html), 'text/html'),\n        isBypassed: !trustedHTMLHandler,\n    };\n}\n","import type { DefaultImplicitFormatMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * A map from tag name to its default implicit formats\n */\nexport const defaultContentModelFormatMap: DefaultImplicitFormatMap = {\n    a: {\n        underline: true,\n        textColor: undefined, // Set to undefined to force override color from parent element so we can write correct link color if any, because browser will assign a default color for link if it doesn't have one\n    },\n    blockquote: {\n        marginTop: '1em',\n        marginBottom: '1em',\n        marginLeft: '40px',\n        marginRight: '40px',\n    },\n    code: {\n        fontFamily: 'monospace',\n    },\n    h1: {\n        fontWeight: 'bold',\n        fontSize: '2em',\n    },\n    h2: {\n        fontWeight: 'bold',\n        fontSize: '1.5em',\n    },\n    h3: {\n        fontWeight: 'bold',\n        fontSize: '1.17em',\n    },\n    h4: {\n        fontWeight: 'bold',\n        fontSize: '1em', // Set this default value here to overwrite existing font size when change heading level\n    },\n    h5: {\n        fontWeight: 'bold',\n        fontSize: '0.83em',\n    },\n    h6: {\n        fontWeight: 'bold',\n        fontSize: '0.67em',\n    },\n    p: {\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    pre: {\n        fontFamily: 'monospace',\n        whiteSpace: 'pre',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    th: {\n        fontWeight: 'bold',\n    },\n};\n","import type { DefaultStyleMap } from 'roosterjs-content-model-types';\n\nconst blockElement: Partial<CSSStyleDeclaration> = {\n    display: 'block',\n};\n\n/**\n * @internal\n */\nexport const defaultHTMLStyleMap: DefaultStyleMap = {\n    address: blockElement,\n    article: blockElement,\n    aside: blockElement,\n    b: {\n        fontWeight: 'bold',\n    },\n    blockquote: {\n        display: 'block',\n        marginTop: '1em',\n        marginBottom: '1em',\n        marginLeft: '40px',\n        marginRight: '40px',\n    },\n    br: blockElement,\n    center: {\n        display: 'block',\n        textAlign: 'center',\n    },\n    dd: blockElement,\n    div: blockElement,\n    dl: blockElement,\n    dt: blockElement,\n    em: {\n        fontStyle: 'italic',\n    },\n    fieldset: blockElement,\n    figcaption: blockElement,\n    figure: blockElement,\n    footer: blockElement,\n    form: blockElement,\n    h1: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '2em',\n    },\n    h2: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '1.5em',\n    },\n    h3: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '1.17em',\n    },\n    h4: {\n        display: 'block',\n        fontWeight: 'bold',\n    },\n    h5: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '0.83em',\n    },\n    h6: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '0.67em',\n    },\n    header: blockElement,\n    hr: blockElement,\n    i: {\n        fontStyle: 'italic',\n    },\n    li: {\n        display: 'list-item',\n    },\n    main: blockElement,\n    nav: blockElement,\n    ol: { ...blockElement, paddingInlineStart: '40px' },\n    p: {\n        display: 'block',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    pre: {\n        display: 'block',\n        fontFamily: 'monospace',\n        whiteSpace: 'pre',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    s: {\n        textDecoration: 'line-through',\n    },\n    section: blockElement,\n    strike: {\n        textDecoration: 'line-through',\n    },\n    strong: {\n        fontWeight: 'bold',\n    },\n    sub: {\n        verticalAlign: 'sub',\n        fontSize: 'smaller',\n    },\n    sup: {\n        verticalAlign: 'super',\n        fontSize: 'smaller',\n    },\n    table: {\n        display: 'table',\n        boxSizing: 'border-box',\n    },\n    td: {\n        display: 'table-cell',\n    },\n    th: {\n        display: 'table-cell',\n        fontWeight: 'bold',\n    },\n    u: {\n        textDecoration: 'underline',\n    },\n    ul: { ...blockElement, paddingInlineStart: '40px' },\n};\n","/**\n *  Enum used to control the different types of bullet list\n */\nexport const BulletListType = {\n    /**\n     * Minimum value of the enum\n     */\n    Min: 1,\n    /**\n     * Bullet triggered by *\n     */\n    Disc: 1,\n    /**\n     * Bullet triggered by -\n     */\n    Dash: 2,\n    /**\n     * Bullet triggered by --\n     */\n    Square: 3,\n    /**\n     * Bullet triggered by >\n     */\n    ShortArrow: 4,\n    /**\n     * Bullet triggered by ->\n     */\n    LongArrow: 5,\n    /**\n     * Bullet triggered by =>\n     */\n    UnfilledArrow: 6,\n    /**\n     * Bullet triggered by —\n     */\n    Hyphen: 7,\n    /**\n     * Bullet triggered by -->\n     */\n    DoubleLongArrow: 8,\n    /**\n     * Bullet type circle\n     */\n    Circle: 9,\n    /**\n     * Box Shadow bullet type\n     */\n    BoxShadow: 10,\n    /**\n     * Rhombus with a cross inside\n     */\n    Xrhombus: 11,\n    /**\n     * Check mark bullet type\n     */\n    CheckMark: 12,\n    /**\n     * Maximum value of the enum\n     */\n    Max: 12,\n};\n","/**\n * Possible change sources. Here are the predefined sources.\n * It can also be other string if the change source can't fall into these sources.\n */\nexport const ChangeSource = {\n    /**\n     * Content changed by auto link\n     */\n    AutoLink: 'AutoLink',\n    /**\n     * Content changed by create link\n     */\n    CreateLink: 'CreateLink',\n    /**\n     * Content changed by format\n     */\n    Format: 'Format',\n    /**\n     * Content changed by image resize\n     */\n    ImageResize: 'ImageResize',\n    /**\n     * Content changed by paste\n     */\n    Paste: 'Paste',\n    /**\n     * Content changed by setContent API\n     */\n    SetContent: 'SetContent',\n    /**\n     * Content changed by cut operation\n     */\n    Cut: 'Cut',\n    /**\n     * Content changed by drag & drop operation\n     */\n    Drop: 'Drop',\n    /**\n     * Insert a new entity into editor\n     */\n    InsertEntity: 'InsertEntity',\n    /**\n     * Editor is switched to dark mode, content color is changed\n     */\n    SwitchToDarkMode: 'SwitchToDarkMode',\n    /**\n     * Editor is switched to light mode, content color is changed\n     */\n    SwitchToLightMode: 'SwitchToLightMode',\n    /**\n     * List chain reorganized numbers of lists\n     */\n    ListChain: 'ListChain',\n    /**\n     * Keyboard event, used by Content Model.\n     * Data of this event will be the key code number\n     */\n    Keyboard: 'Keyboard',\n\n    /**\n     * Content changed by auto format\n     */\n    AutoFormat: 'AutoFormat',\n};\n","import type { ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Provide a default empty instance of segment format with all its properties\n */\nexport const EmptySegmentFormat: Readonly<Required<ContentModelSegmentFormat>> = {\n    backgroundColor: '',\n    fontFamily: '',\n    fontSize: '',\n    fontWeight: '',\n    italic: false,\n    letterSpacing: '',\n    lineHeight: '',\n    strikethrough: false,\n    superOrSubScriptSequence: '',\n    textColor: '',\n    underline: false,\n};\n","/**\n *  Enum used to control the different types of numbering list\n */\nexport const NumberingListType = {\n    /**\n     * Minimum value of the enum\n     */\n    Min: 1,\n    /**\n     * Numbering triggered by 1.\n     */\n    Decimal: 1,\n    /**\n     * Numbering triggered by 1-\n     */\n    DecimalDash: 2,\n    /**\n     * Numbering triggered by 1)\n     */\n    DecimalParenthesis: 3,\n    /**\n     * Numbering triggered by (1)\n     */\n    DecimalDoubleParenthesis: 4,\n    /**\n     * Numbering triggered by a.\n     */\n    LowerAlpha: 5,\n    /**\n     * Numbering triggered by a)\n     */\n    LowerAlphaParenthesis: 6,\n    /**\n     * Numbering triggered by (a)\n     */\n    LowerAlphaDoubleParenthesis: 7,\n    /**\n     * Numbering triggered by a-\n     */\n    LowerAlphaDash: 8,\n    /**\n     * Numbering triggered by A.\n     */\n    UpperAlpha: 9,\n    /**\n     * Numbering triggered by A)\n     */\n    UpperAlphaParenthesis: 10,\n    /**\n     * Numbering triggered by (A)\n     */\n    UpperAlphaDoubleParenthesis: 11,\n    /**\n     * Numbering triggered by A-\n     */\n    UpperAlphaDash: 12,\n    /**\n     * Numbering triggered by i.\n     */\n    LowerRoman: 13,\n    /**\n     * Numbering triggered by i)\n     */\n    LowerRomanParenthesis: 14,\n    /**\n     * Numbering triggered by (i)\n     */\n    LowerRomanDoubleParenthesis: 15,\n    /**\n     * Numbering triggered by i-\n     */\n    LowerRomanDash: 16,\n    /**\n     * Numbering triggered by I.\n     */\n    UpperRoman: 17,\n    /**\n     * Numbering triggered by I)\n     */\n    UpperRomanParenthesis: 18,\n    /**\n     * Numbering triggered by (I)\n     */\n    UpperRomanDoubleParenthesis: 19,\n    /**\n     * Numbering triggered by I-\n     */\n    UpperRomanDash: 20,\n    /**\n     * Maximum value of the enum\n     */\n    Max: 20,\n};\n","import { NumberingListType } from './NumberingListType';\n\n/**\n * Style map for ordered list\n */\nexport const OrderedListStyleMap: Record<number, string> = {\n    [NumberingListType.Decimal]: 'decimal',\n    [NumberingListType.DecimalDash]: '\"${Number}- \"',\n    [NumberingListType.DecimalParenthesis]: '\"${Number}) \"',\n    [NumberingListType.DecimalDoubleParenthesis]: '\"(${Number}) \"',\n    [NumberingListType.LowerAlpha]: 'lower-alpha',\n    [NumberingListType.LowerAlphaDash]: '\"${LowerAlpha}- \"',\n    [NumberingListType.LowerAlphaParenthesis]: '\"${LowerAlpha}) \"',\n    [NumberingListType.LowerAlphaDoubleParenthesis]: '\"(${LowerAlpha}) \"',\n    [NumberingListType.UpperAlpha]: 'upper-alpha',\n    [NumberingListType.UpperAlphaDash]: '\"${UpperAlpha}- \"',\n    [NumberingListType.UpperAlphaParenthesis]: '\"${UpperAlpha}) \"',\n    [NumberingListType.UpperAlphaDoubleParenthesis]: '\"(${UpperAlpha}) \"',\n    [NumberingListType.LowerRoman]: 'lower-roman',\n    [NumberingListType.LowerRomanDash]: '\"${LowerRoman}- \"',\n    [NumberingListType.LowerRomanParenthesis]: '\"${LowerRoman}) \"',\n    [NumberingListType.LowerRomanDoubleParenthesis]: '\"(${LowerRoman}) \"',\n    [NumberingListType.UpperRoman]: 'upper-roman',\n    [NumberingListType.UpperRomanDash]: '\"${UpperRoman}- \"',\n    [NumberingListType.UpperRomanParenthesis]: '\"${UpperRoman}) \"',\n    [NumberingListType.UpperRomanDoubleParenthesis]: '\"(${UpperRoman}) \"',\n};\n","/**\n * Table format border\n */\nexport const TableBorderFormat = {\n    /**\n     * Minimum value\n     */\n    Min: 0,\n\n    /**\n     * All border of the table are displayed\n     *  __ __ __\n     * |__|__|__|\n     * |__|__|__|\n     * |__|__|__|\n     */\n    Default: 0,\n\n    /**\n     * Middle vertical border are not displayed\n     *  __ __ __\n     * |__ __ __|\n     * |__ __ __|\n     * |__ __ __|\n     */\n    ListWithSideBorders: 1,\n\n    /**\n     * All borders except header rows borders are displayed\n     *  __ __ __\n     *  __|__|__\n     *  __|__|__\n     */\n    NoHeaderBorders: 2,\n\n    /**\n     * The left and right border of the table are not displayed\n     *  __ __ __\n     *  __|__|__\n     *  __|__|__\n     *  __|__|__\n     */\n    NoSideBorders: 3,\n\n    /**\n     * Only the borders that divides the header row, first column and externals are displayed\n     *  __ __ __\n     * |__ __ __|\n     * |  |     |\n     * |__|__ __|\n     */\n    FirstColumnHeaderExternal: 4,\n\n    /**\n     * The header row has no vertical border, except for the first one\n     * The first column has no horizontal border, except for the first one\n     *  __ __ __\n     * |__ __ __\n     * |  |__|__|\n     * |  |__|__|\n     */\n    EspecialType1: 5,\n\n    /**\n     * The header row has no vertical border, except for the first one\n     * The only horizontal border of the table is the top and bottom of header row\n     *  __ __ __\n     * |__ __ __\n     * |  |     |\n     * |  |     |\n     */\n    EspecialType2: 6,\n\n    /**\n     * The only borders are the bottom of header row and the right border of first column\n     *  __ __ __\n     *    |\n     *    |\n     */\n    EspecialType3: 7,\n\n    /**\n     * No border\n     */\n    Clear: 8,\n\n    /**\n     * Maximum value\n     */\n    Max: 8,\n};\n","import { BulletListType } from './BulletListType';\n\n/**\n * Style map for unordered list\n */\nexport const UnorderedListStyleMap: Record<number, string> = {\n    [BulletListType.Disc]: 'disc',\n    [BulletListType.Square]: 'square',\n    [BulletListType.Circle]: 'circle',\n    [BulletListType.Dash]: '\"- \"',\n    [BulletListType.LongArrow]: '\"➔ \"',\n    [BulletListType.DoubleLongArrow]: '\"➔ \"',\n    [BulletListType.ShortArrow]: '\"➢ \"',\n    [BulletListType.UnfilledArrow]: '\"➪ \"',\n    [BulletListType.Hyphen]: '\"— \"',\n    [BulletListType.CheckMark]: '\"✔ \"',\n    [BulletListType.Xrhombus]: '\"❖ \"',\n    [BulletListType.BoxShadow]: '\"❑ \"',\n};\n","import { defaultProcessorMap } from './defaultProcessors';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport {\n    defaultFormatKeysPerCategory,\n    defaultFormatParsers,\n} from '../../formatHandlers/defaultFormatHandlers';\nimport type {\n    ContentModelBlockFormat,\n    DomToModelContext,\n    DomToModelDecoratorContext,\n    DomToModelFormatContext,\n    DomToModelOption,\n    DomToModelSelectionContext,\n    DomToModelSettings,\n    EditorContext,\n    FormatParser,\n    FormatParsers,\n    FormatParsersPerCategory,\n    TextFormatParser,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create context object for DOM to Content Model conversion\n * @param editorContext Context of editor\n * @param options Option array to customize the DOM to Model conversion behavior\n */\nexport function createDomToModelContext(\n    editorContext?: EditorContext,\n    ...options: (DomToModelOption | undefined)[]\n): DomToModelContext {\n    return createDomToModelContextWithConfig(createDomToModelConfig(options), editorContext);\n}\n\n/**\n * Create context object for DOM to Content Model conversion with an existing configure\n * @param config A full config object to define how to convert DOM tree to Content Model\n * @param editorContext Context of editor\n */\nexport function createDomToModelContextWithConfig(\n    config: DomToModelSettings,\n    editorContext?: EditorContext\n) {\n    return Object.assign(\n        {},\n        editorContext,\n        createDomToModelSelectionContext(),\n        createDomToModelFormatContext(editorContext?.isRootRtl),\n        createDomToModelDecoratorContext(),\n        config\n    );\n}\n\nfunction createDomToModelSelectionContext(): DomToModelSelectionContext {\n    return { isInSelection: false };\n}\n\nfunction createDomToModelFormatContext(isRootRtl?: boolean): DomToModelFormatContext {\n    const blockFormat: ContentModelBlockFormat = isRootRtl ? { direction: 'rtl' } : {};\n\n    return {\n        blockFormat,\n        segmentFormat: {},\n\n        listFormat: {\n            levels: [],\n            threadItemCounts: [],\n        },\n    };\n}\n\nfunction createDomToModelDecoratorContext(): DomToModelDecoratorContext {\n    return {\n        link: {\n            format: {},\n            dataset: {},\n        },\n        code: {\n            format: {},\n        },\n        blockDecorator: {\n            format: {},\n            tagName: '',\n        },\n    };\n}\n\n/**\n * Create Dom to Content Model Config object\n * @param options All customizations of content model creation\n */\nexport function createDomToModelConfig(\n    options: (DomToModelOption | undefined)[]\n): DomToModelSettings {\n    return {\n        elementProcessors: Object.assign(\n            {},\n            defaultProcessorMap,\n            ...options.map(x => x?.processorOverride)\n        ),\n        formatParsers: buildFormatParsers(\n            options.map(x => x?.formatParserOverride),\n            options.map(x => x?.additionalFormatParsers)\n        ),\n        defaultElementProcessors: defaultProcessorMap,\n        defaultFormatParsers,\n    };\n}\n\n/**\n * @internal Export for test only\n * Build format parsers used by DOM to Content Model conversion\n * @param override\n * @param additionalParsersArray\n * @returns\n */\nexport function buildFormatParsers(\n    overrides: (Partial<FormatParsers> | undefined)[] = [],\n    additionalParsersArray: (Partial<FormatParsersPerCategory> | undefined)[] = []\n): FormatParsersPerCategory {\n    const combinedOverrides = Object.assign({}, ...overrides);\n\n    const result = getObjectKeys(defaultFormatKeysPerCategory).reduce(\n        (result, key) => {\n            const value = defaultFormatKeysPerCategory[key]\n                .map(\n                    formatKey =>\n                        (combinedOverrides[formatKey] === undefined\n                            ? defaultFormatParsers[formatKey]\n                            : combinedOverrides[formatKey]) as FormatParser<any>\n                )\n                .concat(\n                    ...additionalParsersArray.map(\n                        parsers => (parsers?.[key] ?? []) as FormatParser<any>[]\n                    )\n                );\n\n            result[key] = value;\n\n            return result;\n        },\n        {\n            text: [] as TextFormatParser[],\n        } as FormatParsersPerCategory\n    );\n\n    additionalParsersArray.forEach(parsers => {\n        if (parsers?.text) {\n            result.text = result.text.concat(parsers.text);\n        }\n    });\n\n    return result;\n}\n","import { brProcessor } from '../processors/brProcessor';\nimport { childProcessor } from '../processors/childProcessor';\nimport { codeProcessor } from '../processors/codeProcessor';\nimport { delimiterProcessor } from '../processors/delimiterProcessor';\nimport { elementProcessor } from '../processors/elementProcessor';\nimport { entityProcessor } from '../processors/entityProcessor';\nimport { fontProcessor } from '../processors/fontProcessor';\nimport { formatContainerProcessor } from '../processors/formatContainerProcessor';\nimport { generalProcessor } from '../processors/generalProcessor';\nimport { headingProcessor } from '../processors/headingProcessor';\nimport { hrProcessor } from '../processors/hrProcessor';\nimport { imageProcessor } from '../processors/imageProcessor';\nimport { knownElementProcessor } from '../processors/knownElementProcessor';\nimport { linkProcessor } from '../processors/linkProcessor';\nimport { listItemProcessor } from '../processors/listItemProcessor';\nimport { listProcessor } from '../processors/listProcessor';\nimport { pProcessor } from '../processors/pProcessor';\nimport { tableProcessor } from '../processors/tableProcessor';\nimport { textProcessor } from '../processors/textProcessor';\nimport { textWithSelectionProcessor } from '../processors/textWithSelectionProcessor';\nimport type { ElementProcessorMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const defaultProcessorMap: ElementProcessorMap = {\n    a: linkProcessor,\n    b: knownElementProcessor,\n    blockquote: knownElementProcessor,\n    br: brProcessor,\n    code: codeProcessor,\n    del: knownElementProcessor,\n    div: knownElementProcessor,\n    em: knownElementProcessor,\n    font: fontProcessor,\n    i: knownElementProcessor,\n    img: imageProcessor,\n    h1: headingProcessor,\n    h2: headingProcessor,\n    h3: headingProcessor,\n    h4: headingProcessor,\n    h5: headingProcessor,\n    h6: headingProcessor,\n    hr: hrProcessor,\n    li: listItemProcessor,\n    ol: listProcessor,\n    p: pProcessor,\n    pre: formatContainerProcessor,\n    s: knownElementProcessor,\n    section: knownElementProcessor,\n    span: knownElementProcessor,\n    strike: knownElementProcessor,\n    strong: knownElementProcessor,\n    sub: knownElementProcessor,\n    sup: knownElementProcessor,\n    table: tableProcessor,\n    u: knownElementProcessor,\n    ul: listProcessor,\n\n    '*': generalProcessor,\n    '#text': textProcessor,\n    textWithSelection: textWithSelectionProcessor,\n    element: elementProcessor,\n    entity: entityProcessor,\n    child: childProcessor,\n    delimiter: delimiterProcessor,\n};\n","import { createContentModelDocument } from '../modelApi/creators/createContentModelDocument';\nimport { normalizeContentModel } from '../modelApi/common/normalizeContentModel';\nimport type { ContentModelDocumentWithPersistedCache } from '../modelApi/selection/iterateSelections';\nimport type { ContentModelDocument, DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * Create Content Model from DOM tree in this editor\n * @param root Root element of DOM tree to create Content Model from\n * @param context Context object for DOM to Content Model conversion\n * @returns A ContentModelDocument object that contains all the models created from the give root element\n */\nexport function domToContentModel(\n    root: HTMLElement | DocumentFragment,\n    context: DomToModelContext\n): ContentModelDocument {\n    const model = createContentModelDocument(context.defaultFormat);\n\n    if (context.selection?.type == 'range' && context.selection.isReverted) {\n        model.hasRevertedRangeSelection = true;\n    }\n\n    // When allowed, persist cached element and do not clear it if not changed\n    if (context.domIndexer && context.allowCacheElement) {\n        (model as ContentModelDocumentWithPersistedCache).persistCache = true;\n    }\n\n    context.elementProcessors.child(model, root, context);\n\n    normalizeContentModel(model);\n\n    return model;\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { ContextStyles } from './formatContainerProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { parseFormat } from '../utils/parseFormat';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\nconst SegmentDecoratorTags = ['A', 'CODE'];\n\n/**\n * @internal\n */\nexport function blockProcessor(\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext,\n    segmentFormat?: ContentModelSegmentFormat\n) {\n    const decorator = context.blockDecorator.tagName ? context.blockDecorator : undefined;\n    const isSegmentDecorator = SegmentDecoratorTags.indexOf(element.tagName) >= 0;\n\n    parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n\n    const blockFormat = { ...context.blockFormat };\n\n    parseFormat(element, context.formatParsers.container, blockFormat, context);\n\n    ContextStyles.forEach(style => {\n        if (blockFormat[style]) {\n            context.blockFormat[style] = blockFormat[style];\n        }\n    });\n\n    if (!isSegmentDecorator) {\n        const paragraph = createParagraph(\n            false /*isImplicit*/,\n            blockFormat,\n            segmentFormat,\n            decorator\n        );\n\n        context.paragraphMap?.assignMarkerToModel(element, paragraph);\n\n        addBlock(group, paragraph);\n    }\n\n    context.elementProcessors.child(group, element, context);\n}\n","import { addSegment } from '../../modelApi/common/addSegment';\nimport { createBr } from '../../modelApi/creators/createBr';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const brProcessor: ElementProcessor<HTMLBRElement> = (group, element, context) => {\n    const br = createBr(context.segmentFormat);\n    const [start, end] = getRegularSelectionOffsets(context, element);\n\n    if (start >= 0) {\n        context.isInSelection = true;\n    }\n\n    if (context.isInSelection) {\n        br.isSelected = true;\n    }\n\n    const paragraph = addSegment(group, br, context.blockFormat);\n\n    if (end >= 0) {\n        context.isInSelection = false;\n    }\n\n    context.domIndexer?.onSegment(element, paragraph, [br]);\n};\n","import { addSelectionMarker } from '../utils/addSelectionMarker';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type {\n    ContentModelBlockGroup,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for child elements\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const childProcessor: ElementProcessor<ParentNode> = (\n    group: ContentModelBlockGroup,\n    parent: ParentNode,\n    context: DomToModelContext\n) => {\n    const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, parent);\n    let index = 0;\n\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\n        handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset, parent);\n\n        processChildNode(group, child, context);\n\n        index++;\n    }\n\n    handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset, parent);\n};\n\n/**\n * Helper function for processing child node\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n *\n */\nexport function processChildNode(\n    group: ContentModelBlockGroup,\n    child: Node,\n    context: DomToModelContext\n) {\n    if (isNodeOfType(child, 'ELEMENT_NODE') && child.style.display != 'none') {\n        context.elementProcessors.element(group, child, context);\n    } else if (isNodeOfType(child, 'TEXT_NODE')) {\n        context.elementProcessors['#text'](group, child, context);\n    }\n}\n\n/**\n * Helper function to handle regular (range based) selection when process child node\n * @param index Index of current child node in its parent\n * @param context DOM to Content Model context\n * @param group The parent block group\n * @param nodeStartOffset Start offset of current regular selection\n * @param nodeEndOffset  End offset of current regular selection\n * @param container The container node of this selection\n */\nexport function handleRegularSelection(\n    index: number,\n    context: DomToModelContext,\n    group: ContentModelBlockGroup,\n    nodeStartOffset: number,\n    nodeEndOffset: number,\n    container?: Node\n) {\n    if (index == nodeStartOffset) {\n        context.isInSelection = true;\n\n        addSelectionMarker(group, context, container, index);\n    }\n\n    if (index == nodeEndOffset && context.selection?.type == 'range') {\n        if (!context.selection.range.collapsed) {\n            addSelectionMarker(group, context, container, index);\n        }\n        context.isInSelection = false;\n    }\n}\n","import { knownElementProcessor } from './knownElementProcessor';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const codeProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    stackFormat(context, { code: 'codeDefault' }, () => {\n        parseFormat(element, context.formatParsers.code, context.code.format, context);\n\n        knownElementProcessor(group, element, context);\n    });\n};\n","import { addSelectionMarker } from '../utils/addSelectionMarker';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param group\n * @param node\n * @param context\n */\nexport const delimiterProcessor: ElementProcessor<Node> = (group, node, context) => {\n    const range = context.selection?.type == 'range' ? context.selection.range : null;\n\n    if (range) {\n        if (node.contains(range.startContainer)) {\n            context.isInSelection = true;\n\n            addSelectionMarker(group, context);\n        }\n\n        if (context.selection?.type == 'range' && node.contains(range.endContainer)) {\n            if (!context.selection.range.collapsed) {\n                addSelectionMarker(group, context);\n            }\n\n            context.isInSelection = false;\n        }\n    }\n};\n","import { isEntityDelimiter, isEntityElement } from '../../domUtils/entityUtils';\nimport type {\n    DomToModelContext,\n    ElementProcessor,\n    ElementProcessorMap,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param group\n * @param element\n * @param context\n */\nexport const elementProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const tagName = element.tagName.toLowerCase() as keyof ElementProcessorMap;\n    const processor = (tryGetProcessorForEntity(element, context) ||\n        tryGetProcessorForDelimiter(element, context) ||\n        context.elementProcessors[tagName] ||\n        (tagName.indexOf(':') >= 0 && context.elementProcessors.child) ||\n        context.elementProcessors['*']) as ElementProcessor<Node>;\n    processor(group, element, context);\n};\n\nfunction tryGetProcessorForEntity(element: HTMLElement, context: DomToModelContext) {\n    return isEntityElement(element) || element.contentEditable == 'false' // For readonly element, treat as an entity\n        ? context.elementProcessors.entity\n        : null;\n}\n\nfunction tryGetProcessorForDelimiter(element: HTMLElement, context: DomToModelContext) {\n    return isEntityDelimiter(element) ? context.elementProcessors.delimiter : null;\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createEntity } from '../../modelApi/creators/createEntity';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for entity\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const entityProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const isBlockEntity =\n        isBlockElement(element) ||\n        (element.style.display == 'inline-block' && element.style.width == '100%');\n\n    stackFormat(\n        context,\n        { segment: isBlockEntity ? 'empty' : undefined, paragraph: 'empty' },\n        () => {\n            const entityModel = createEntity(element, true /*isReadonly*/, context.segmentFormat);\n\n            parseFormat(element, context.formatParsers.entity, entityModel.entityFormat, context);\n\n            if (context.isInSelection) {\n                entityModel.isSelected = true;\n            }\n\n            if (isBlockEntity) {\n                addBlock(group, entityModel);\n            } else {\n                const paragraph = addSegment(group, entityModel);\n                context.domIndexer?.onSegment(element, paragraph, [entityModel]);\n            }\n        }\n    );\n};\n","import { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\nconst FontSizes = ['10px', '13px', '16px', '18px', '24px', '32px', '48px'];\n\nfunction getFontSize(size: string | null) {\n    const intSize = parseInt(size || '');\n\n    if (Number.isNaN(intSize)) {\n        return undefined;\n    } else if (intSize < 1) {\n        return FontSizes[0];\n    } else if (intSize > FontSizes.length) {\n        return FontSizes[FontSizes.length - 1];\n    } else {\n        return FontSizes[intSize - 1];\n    }\n}\n\n/**\n * @internal\n */\nexport const fontProcessor: ElementProcessor<HTMLFontElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        {\n            segment: isBlockElement(element) ? 'shallowCloneForBlock' : 'shallowClone',\n        },\n        () => {\n            const fontFamily = element.getAttribute('face');\n            const fontSize = getFontSize(element.getAttribute('size'));\n            const textColor = element.getAttribute('color');\n            const format = context.segmentFormat;\n\n            if (fontFamily) {\n                format.fontFamily = fontFamily;\n            }\n\n            if (fontSize) {\n                format.fontSize = fontSize;\n            }\n\n            if (textColor) {\n                format.textColor = textColor;\n            }\n\n            parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n            context.elementProcessors.child(group, element, context);\n        }\n    );\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createFormatContainer } from '../../modelApi/creators/createFormatContainer';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { getDefaultStyle } from '../utils/getDefaultStyle';\nimport { parseFormat } from '../utils/parseFormat';\nimport { setParagraphNotImplicit } from '../../modelApi/block/setParagraphNotImplicit';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n    ContentModelParagraph,\n    ElementProcessor,\n    MarginFormat,\n    PaddingFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const ContextStyles: (keyof (MarginFormat & PaddingFormat))[] = [\n    'marginLeft',\n    'marginRight',\n    'paddingLeft',\n    'paddingRight',\n];\n\n/**\n * @internal\n */\nexport const formatContainerProcessor: ElementProcessor<HTMLElement> = (\n    group,\n    element,\n    context\n) => {\n    stackFormat(context, { segment: 'shallowCloneForBlock', paragraph: 'shallowClone' }, () => {\n        parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n        parseFormat(element, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n\n        const format: ContentModelFormatContainerFormat = {\n            ...context.blockFormat,\n        };\n\n        parseFormat(element, context.formatParsers.container, format, context);\n\n        const tagName =\n            getDefaultStyle(element).display == 'block' ? element.tagName.toLowerCase() : 'div';\n        const formatContainer = createFormatContainer(tagName, format);\n\n        // It is possible to inherit margin left/right styles from parent DIV or other containers,\n        // since we are going into a deeper level of format container now,\n        // the container will render these styles so no need to keep them in context format\n        ContextStyles.forEach(style => {\n            delete context.blockFormat[style];\n        });\n\n        context.elementProcessors.child(formatContainer, element, context);\n\n        if (element.style.fontSize && parseInt(element.style.fontSize) == 0) {\n            formatContainer.zeroFontSize = true;\n        }\n\n        if (shouldFallbackToParagraph(formatContainer)) {\n            // For DIV container that only has one paragraph child, container style can be merged into paragraph\n            // and no need to have this container\n            const paragraph = formatContainer.blocks[0] as ContentModelParagraph;\n\n            if (formatContainer.zeroFontSize) {\n                paragraph.segmentFormat = Object.assign({}, paragraph.segmentFormat, {\n                    fontSize: '0',\n                });\n            }\n\n            Object.assign(paragraph.format, formatContainer.format);\n            setParagraphNotImplicit(paragraph);\n            addBlock(group, paragraph);\n        } else {\n            addBlock(group, formatContainer);\n        }\n    });\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n\nfunction shouldFallbackToParagraph(formatContainer: ContentModelFormatContainer) {\n    const firstChild = formatContainer.blocks[0];\n\n    return (\n        formatContainer.tagName == 'div' &&\n        formatContainer.blocks.length == 1 &&\n        firstChild.blockType == 'Paragraph' &&\n        firstChild.isImplicit\n    );\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createGeneralBlock } from '../../modelApi/creators/createGeneralBlock';\nimport { createGeneralSegment } from '../../modelApi/creators/createGeneralSegment';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\nconst generalBlockProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const block = createGeneralBlock(element);\n    const isSelectedBefore = context.isInSelection;\n\n    stackFormat(\n        context,\n        {\n            segment: 'empty',\n            paragraph: 'empty',\n            link: 'empty',\n        },\n        () => {\n            addBlock(group, block);\n\n            parseFormat(element, context.formatParsers.general, block.format, context);\n\n            context.elementProcessors.child(block, element, context);\n        }\n    );\n\n    if (isSelectedBefore && context.isInSelection) {\n        block.isSelected = true;\n    }\n};\n\nconst generalSegmentProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const segment = createGeneralSegment(element, context.segmentFormat);\n    const isSelectedBefore = context.isInSelection;\n\n    addDecorators(segment, context);\n    const paragraph = addSegment(group, segment);\n    context.domIndexer?.onSegment(element, paragraph, [segment]);\n\n    stackFormat(\n        context,\n        {\n            segment:\n                'empty' /*clearFormat, General segment will include all properties and styles when generate back to HTML, so no need to carry over existing segment format*/,\n        },\n        () => {\n            parseFormat(element, context.formatParsers.general, segment.format, context);\n\n            context.elementProcessors.child(segment, element, context);\n        }\n    );\n\n    if (isSelectedBefore && context.isInSelection) {\n        segment.isSelected = true;\n    }\n};\n\n/**\n * @internal\n */\nexport const generalProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const processor = isBlockElement(element) ? generalBlockProcessor : generalSegmentProcessor;\n\n    processor(group, element, context);\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { createParagraphDecorator } from '../../modelApi/creators/createParagraphDecorator';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelSegmentFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const headingProcessor: ElementProcessor<HTMLHeadingElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        { segment: 'shallowCloneForBlock', paragraph: 'shallowClone', blockDecorator: 'empty' },\n        () => {\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n\n            // These formats are already declared on heading element, no need to keep them in context.\n            // And we should not duplicate them in context, either. Because when we want to turn off heading,\n            // inner text should not keep those text format from heading.\n            getObjectKeys(segmentFormat).forEach(key => {\n                delete context.segmentFormat[key];\n            });\n\n            context.blockDecorator = createParagraphDecorator(element.tagName, segmentFormat);\n\n            blockProcessor(group, element, context);\n        }\n    );\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createDivider } from '../../modelApi/creators/createDivider';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const hrProcessor: ElementProcessor<HTMLHRElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        {\n            paragraph: 'shallowClone',\n        },\n        () => {\n            parseFormat(element, context.formatParsers.divider, context.blockFormat, context);\n\n            const hr = createDivider('hr', context.blockFormat);\n\n            if (element.size) {\n                hr.size = element.size;\n            }\n\n            if (context.isInSelection) {\n                hr.isSelected = true;\n            }\n\n            addBlock(group, hr);\n        }\n    );\n};\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createImage } from '../../modelApi/creators/createImage';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelImageFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const imageProcessor: ElementProcessor<HTMLImageElement> = (group, element, context) => {\n    stackFormat(context, { segment: 'shallowClone' }, () => {\n        const imageFormat: ContentModelImageFormat = context.segmentFormat;\n\n        // Use getAttribute('src') instead of retrieving src directly, in case the src has port and may be stripped by browser\n        const src = element.getAttribute('src') ?? '';\n\n        parseFormat(element, context.formatParsers.segment, imageFormat, context);\n        parseFormat(element, context.formatParsers.image, imageFormat, context);\n        parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n\n        const image = createImage(src, imageFormat);\n        const alt = element.alt;\n        const title = element.title;\n\n        parseFormat(element, context.formatParsers.dataset, image.dataset, context);\n        addDecorators(image, context);\n\n        if (alt) {\n            image.alt = alt;\n        }\n        if (title) {\n            image.title = title;\n        }\n        if (context.isInSelection) {\n            image.isSelected = true;\n        }\n        if (context.selection?.type == 'image' && context.selection.image == element) {\n            image.isSelectedAsImageSelection = true;\n            image.isSelected = true;\n        }\n\n        const paragraph = addSegment(group, image);\n        context.domIndexer?.onSegment(element, paragraph, [image]);\n    });\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { formatContainerProcessor } from './formatContainerProcessor';\nimport { getDefaultStyle } from '../utils/getDefaultStyle';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { isBlockEntityContainer } from '../../domUtils/entityUtils';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\nconst FormatContainerTriggerStyles: (keyof CSSStyleDeclaration)[] = [\n    'marginBottom',\n    'marginTop',\n    'paddingBottom',\n    'paddingTop',\n    'paddingLeft',\n    'paddingRight',\n    'borderTopWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n    'borderRightWidth',\n    'width',\n    'height',\n    'maxWidth',\n    'maxHeight',\n    'minWidth',\n    'minHeight',\n];\nconst FormatContainerTriggerAttributes = ['id'];\nconst ByPassFormatContainerTags = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'A'];\nconst SegmentDecoratorTags = ['A', 'CODE'];\n\n/**\n * @internal\n */\nexport const knownElementProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const isBlock = isBlockElement(element);\n\n    if (\n        (isBlock || element.style.display == 'inline-block') && // For inline-block here, we will also check if it should be represented as Format Container\n        shouldUseFormatContainer(element, context)\n    ) {\n        formatContainerProcessor(group, element, context);\n    } else if (isBlockEntityContainer(element)) {\n        context.elementProcessors.child(group, element, context);\n    } else if (isBlock) {\n        const decorator = context.blockDecorator.tagName ? context.blockDecorator : undefined;\n        const isSegmentDecorator = SegmentDecoratorTags.indexOf(element.tagName) >= 0;\n\n        stackFormat(context, { segment: 'shallowCloneForBlock', paragraph: 'shallowClone' }, () => {\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n            Object.assign(context.segmentFormat, segmentFormat);\n\n            blockProcessor(group, element, context, segmentFormat);\n        });\n\n        if (isBlock && !isSegmentDecorator) {\n            addBlock(\n                group,\n                createParagraph(\n                    true /*isImplicit*/,\n                    context.blockFormat,\n                    undefined /*segmentFormat*/,\n                    decorator\n                )\n            );\n        }\n    } else {\n        stackFormat(\n            context,\n            {\n                segment: 'shallowClone',\n                paragraph: 'shallowClone',\n                link: 'cloneFormat',\n            },\n            () => {\n                parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n                if (context.link.format.href && element.tagName != 'A') {\n                    parseFormat(\n                        element,\n                        context.formatParsers.segmentUnderLink,\n                        context.link.format,\n                        context\n                    );\n                }\n\n                context.elementProcessors.child(group, element, context);\n            }\n        );\n    }\n};\n\nfunction shouldUseFormatContainer(element: HTMLElement, context: DomToModelContext) {\n    // For those tags that we know we should not use format container, just return false\n    if (ByPassFormatContainerTags.indexOf(element.tagName) >= 0) {\n        return false;\n    }\n\n    const style = element.style;\n    const defaultStyle = getDefaultStyle(element);\n\n    const bgcolor = style.getPropertyValue('background-color');\n\n    // For block element with background, we need to use format container\n    if (bgcolor && bgcolor != 'transparent') {\n        return true;\n    }\n\n    // For block element with positive value of border width or top/bottom margin/padding,\n    // we need to use format container\n    if (\n        FormatContainerTriggerStyles.some(\n            key => parseInt((style[key] as string) || (defaultStyle[key] as string) || '') > 0\n        ) ||\n        FormatContainerTriggerAttributes.some(attr => element.hasAttribute(attr))\n    ) {\n        return true;\n    }\n\n    // For margin left/right with value \"auto\", we need to use format container\n    if (style.marginLeft == 'auto' || style.marginRight == 'auto') {\n        return true;\n    }\n\n    // For element with \"align\" attribute, we need to use format container\n    if (element.getAttribute('align')) {\n        return true;\n    }\n\n    return false;\n}\n","import { addSegment } from '../../modelApi/common/addSegment';\nimport { createText } from '../../modelApi/creators/createText';\nimport { knownElementProcessor } from './knownElementProcessor';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { StackFormatOptions } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const linkProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const name = element.getAttribute('name');\n    const href = element.getAttribute('href');\n\n    if (name || href) {\n        const isAnchor = !!name && !href;\n        const option: StackFormatOptions = {\n            // For anchor (name without ref), no need to add other styles\n            // For link (href exists), add default link styles\n            link: isAnchor ? 'empty' : 'linkDefault',\n        };\n\n        stackFormat(context, option, () => {\n            parseFormat(element, context.formatParsers.link, context.link.format, context);\n            parseFormat(element, context.formatParsers.dataset, context.link.dataset, context);\n\n            if (isAnchor && !element.firstChild) {\n                // Empty anchor, need to make sure it has some child in model\n                const emptyText = createText('', context.segmentFormat, {\n                    dataset: context.link.dataset,\n                    format: context.link.format,\n                });\n\n                if (context.isInSelection) {\n                    emptyText.isSelected = true;\n                }\n\n                addSegment(group, emptyText);\n            } else {\n                knownElementProcessor(group, element, context);\n            }\n        });\n    } else {\n        // A tag without name or href, can be treated as normal SPAN tag\n        knownElementProcessor(group, element, context);\n    }\n};\n","import { createListItem } from '../../modelApi/creators/createListItem';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listItemProcessor: ElementProcessor<HTMLLIElement> = (group, element, context) => {\n    const { listFormat } = context;\n\n    if (listFormat.listParent && listFormat.levels.length > 0) {\n        stackFormat(\n            context,\n            {\n                segment: 'shallowCloneForBlock',\n            },\n            () => {\n                parseFormat(\n                    element,\n                    context.formatParsers.segmentOnBlock,\n                    context.segmentFormat,\n                    context\n                );\n\n                const listItem = createListItem(listFormat.levels, context.segmentFormat);\n                parseFormat(\n                    element,\n                    context.formatParsers.listItemElement,\n                    listItem.format,\n                    context\n                );\n\n                listFormat.listParent!.blocks.push(listItem);\n\n                parseFormat(\n                    element,\n                    context.formatParsers.listItemThread,\n                    listItem.levels[listItem.levels.length - 1].format,\n                    context\n                );\n\n                context.elementProcessors.child(listItem, element, context);\n\n                const firstChild = listItem.blocks[0];\n\n                if (\n                    listItem.blocks.length == 1 &&\n                    firstChild.blockType == 'Paragraph' &&\n                    firstChild.isImplicit\n                ) {\n                    Object.assign(listItem.format, firstChild.format);\n                    firstChild.format = {};\n                }\n            }\n        );\n    } else {\n        const currentBlocks = listFormat.listParent?.blocks;\n        const lastItem = currentBlocks?.[currentBlocks?.length - 1];\n\n        context.elementProcessors['*'](\n            lastItem?.blockType == 'BlockGroup' ? lastItem : group,\n            element,\n            context\n        );\n    }\n};\n","import { createListLevel } from '../../modelApi/creators/createListLevel';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelListLevel, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listProcessor: ElementProcessor<HTMLOListElement | HTMLUListElement> = (\n    group,\n    element,\n    context\n) => {\n    stackFormat(\n        context,\n        {\n            segment: 'shallowCloneForBlock',\n            paragraph: 'shallowCloneForGroup',\n        },\n        () => {\n            const level: ContentModelListLevel = createListLevel(\n                element.tagName as 'OL' | 'UL',\n                context.blockFormat\n            );\n            const { listFormat } = context;\n\n            parseFormat(element, context.formatParsers.dataset, level.dataset, context);\n            parseFormat(element, context.formatParsers.listLevelThread, level.format, context);\n            parseFormat(element, context.formatParsers.listLevel, level.format, context);\n            parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n            const originalListParent = listFormat.listParent;\n\n            listFormat.listParent = listFormat.listParent || group;\n            listFormat.levels.push(level);\n\n            try {\n                context.elementProcessors.child(group, element, context);\n            } finally {\n                listFormat.levels.pop();\n                listFormat.listParent = originalListParent;\n            }\n        }\n    );\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { createParagraphDecorator } from '../../modelApi/creators/createParagraphDecorator';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelSegmentFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const pProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        { blockDecorator: 'empty', segment: 'shallowCloneForBlock', paragraph: 'shallowClone' },\n        () => {\n            context.blockDecorator = createParagraphDecorator(element.tagName);\n\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n            Object.assign(context.segmentFormat, segmentFormat);\n\n            blockProcessor(group, element, context, segmentFormat);\n        }\n    );\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createTable } from '../../modelApi/creators/createTable';\nimport { createTableCell } from '../../modelApi/creators/createTableCell';\nimport { getBoundingClientRect } from '../utils/getBoundingClientRect';\nimport { getSelectionRootNode } from '../../domUtils/selection/getSelectionRootNode';\nimport { isElementOfType } from '../../domUtils/isElementOfType';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { parseFormat } from '../utils/parseFormat';\nimport { parseValueWithUnit } from '../../formatHandlers/utils/parseValueWithUnit';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelTableCellFormat,\n    DatasetFormat,\n    DomToModelContext,\n    ElementProcessor,\n    SizeFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for table\n *\n * For Table with merged/splitted cells, HTML uses colSpan and rowSpan attributes to specify how it should be rendered.\n * To make it easier to edit a table, we will use a different way to describe table.\n *\n * 1. For a m * n table (m rows, n columns), we always create a m * n array for the cells.\n * 2. For a regular table cell, it is mapped to one item of this array\n * 3. For a merged/splitted table cell, it will has colSpan/rowSpan value. We also created TableCell model for those spanned\n * cells, and use \"spanLeft\" and \"spanAbove\" to mark its state\n * 4. When edit table, we always edit on this mapped m * n array because it always has an item for each cell\n * 5. When write back to DOM, we create TD/TH elements for those non-spanned cells, and mark its colSpan/rowSpan value according\n * its neighbour cell's spanLeft/spanAbove attribute\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const tableProcessor: ElementProcessor<HTMLTableElement> = (\n    group,\n    tableElement,\n    context\n) => {\n    stackFormat(\n        context,\n        { segment: 'shallowCloneForBlock', paragraph: 'shallowCloneForGroup' },\n        () => {\n            parseFormat(tableElement, context.formatParsers.block, context.blockFormat, context);\n\n            const table = createTable(tableElement.rows.length, context.blockFormat);\n            const tableSelection = context.selection?.type == 'table' ? context.selection : null;\n            const selectedTable = tableSelection?.table;\n            const hasTableSelection = selectedTable == tableElement;\n            const recalculateTableSize = shouldRecalculateTableSize(tableElement, context);\n\n            if (context.allowCacheElement) {\n                table.cachedElement = tableElement;\n            }\n\n            context.domIndexer?.onTable(tableElement, table);\n\n            parseFormat(tableElement, context.formatParsers.table, table.format, context);\n            parseFormat(tableElement, context.formatParsers.tableBorder, table.format, context);\n            parseFormat(\n                tableElement,\n                context.formatParsers.segmentOnBlock,\n                context.segmentFormat,\n                context\n            );\n            parseFormat(tableElement, context.formatParsers.dataset, table.dataset, context);\n            addBlock(group, table);\n\n            const columnPositions: (number | undefined)[] = [0];\n            const hasColGroup = processColGroup(tableElement, context, columnPositions);\n            const rowPositions: number[] = [0];\n            const zoomScale = context.zoomScale || 1;\n\n            for (let row = 0; row < tableElement.rows.length; row++) {\n                const tr = tableElement.rows[row];\n                const tableRow = table.rows[row];\n\n                const tbody = tr.parentNode;\n\n                if (\n                    isNodeOfType(tbody, 'ELEMENT_NODE') &&\n                    (isElementOfType(tbody, 'tbody') ||\n                        isElementOfType(tbody, 'thead') ||\n                        isElementOfType(tbody, 'tfoot'))\n                ) {\n                    parseFormat(tbody, context.formatParsers.tableRow, tableRow.format, context);\n                } else if (context.allowCacheElement) {\n                    tableRow.cachedElement = tr;\n                }\n\n                parseFormat(tr, context.formatParsers.tableRow, tableRow.format, context);\n\n                stackFormat(context, { paragraph: 'shallowClone', segment: 'shallowClone' }, () => {\n                    const parent = tr.parentElement;\n                    const parentTag = parent?.tagName;\n\n                    if (\n                        parent &&\n                        (parentTag == 'TBODY' || parentTag == 'THEAD' || parentTag == 'TFOOT')\n                    ) {\n                        // If there is TBODY around TR, retrieve format from TBODY first, in case some format are declared there\n                        parseFormat(\n                            parent,\n                            context.formatParsers.block,\n                            context.blockFormat,\n                            context\n                        );\n                        parseFormat(\n                            parent,\n                            context.formatParsers.segmentOnBlock,\n                            context.segmentFormat,\n                            context\n                        );\n                    }\n\n                    parseFormat(tr, context.formatParsers.block, context.blockFormat, context);\n                    parseFormat(\n                        tr,\n                        context.formatParsers.segmentOnBlock,\n                        context.segmentFormat,\n                        context\n                    );\n\n                    tableRow.height = parseInt(tr.style.height) || 0;\n\n                    for (\n                        let sourceCol = 0, targetCol = 0;\n                        sourceCol < tr.cells.length;\n                        sourceCol++\n                    ) {\n                        for (; tableRow.cells[targetCol]; targetCol++) {}\n\n                        const td = tr.cells[sourceCol];\n                        const hasSelectionBeforeCell = context.isInSelection;\n                        if (recalculateTableSize) {\n                            const colEnd = targetCol + td.colSpan;\n                            const rowEnd = row + td.rowSpan;\n                            const needCalcWidth = columnPositions[colEnd] === undefined;\n                            const needCalcHeight = rowPositions[rowEnd] === undefined;\n\n                            if (needCalcWidth || needCalcHeight) {\n                                const rect = getBoundingClientRect(td);\n\n                                if (rect.width > 0 || rect.height > 0) {\n                                    if (needCalcWidth) {\n                                        const pos = columnPositions[targetCol];\n\n                                        columnPositions[colEnd] =\n                                            (typeof pos == 'number' ? pos : 0) +\n                                            rect.width / zoomScale;\n                                    }\n\n                                    if (needCalcHeight) {\n                                        rowPositions[rowEnd] =\n                                            rowPositions[row] + rect.height / zoomScale;\n                                    }\n                                }\n                            }\n                        }\n\n                        stackFormat(\n                            context,\n                            { paragraph: 'shallowClone', segment: 'shallowClone' },\n                            () => {\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.block,\n                                    context.blockFormat,\n                                    context\n                                );\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.segmentOnTableCell,\n                                    context.segmentFormat,\n                                    context\n                                );\n\n                                const cellFormat: ContentModelTableCellFormat = {\n                                    ...context.blockFormat,\n                                };\n                                const dataset: DatasetFormat = {};\n\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.tableCell,\n                                    cellFormat,\n                                    context\n                                );\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.tableBorder,\n                                    cellFormat,\n                                    context\n                                );\n                                parseFormat(td, context.formatParsers.dataset, dataset, context);\n\n                                for (\n                                    let colSpan = 1;\n                                    colSpan <= td.colSpan;\n                                    colSpan++, targetCol++\n                                ) {\n                                    for (let rowSpan = 1; rowSpan <= td.rowSpan; rowSpan++) {\n                                        const hasTd = colSpan == 1 && rowSpan == 1;\n                                        const cell = createTableCell(\n                                            colSpan > 1,\n                                            rowSpan > 1,\n                                            td.tagName == 'TH',\n                                            cellFormat\n                                        );\n\n                                        cell.dataset = { ...dataset };\n\n                                        const spannedRow = table.rows[row + rowSpan - 1];\n\n                                        if (spannedRow) {\n                                            spannedRow.cells[targetCol] = cell;\n                                        }\n\n                                        if (hasTd) {\n                                            // When there is COLGROUP, width on table cell should be ignored, so we should not cache the table cell,\n                                            // and always recreate it when write back using the table formats\n                                            if (context.allowCacheElement && !hasColGroup) {\n                                                cell.cachedElement = td;\n                                            }\n\n                                            const { listParent, levels } = context.listFormat;\n\n                                            context.listFormat.listParent = undefined;\n                                            context.listFormat.levels = [];\n\n                                            try {\n                                                context.elementProcessors.child(cell, td, context);\n                                            } finally {\n                                                context.listFormat.listParent = listParent;\n                                                context.listFormat.levels = levels;\n                                            }\n                                        }\n\n                                        const hasSelectionAfterCell = context.isInSelection;\n\n                                        if (\n                                            (hasSelectionBeforeCell && hasSelectionAfterCell) ||\n                                            (hasTableSelection &&\n                                                tableSelection &&\n                                                row >= tableSelection.firstRow &&\n                                                row <= tableSelection.lastRow &&\n                                                targetCol >= tableSelection.firstColumn &&\n                                                targetCol <= tableSelection.lastColumn)\n                                        ) {\n                                            cell.isSelected = true;\n                                        }\n                                    }\n                                }\n                            }\n                        );\n                    }\n                });\n\n                for (let col = 0; col < tableRow.cells.length; col++) {\n                    if (!tableRow.cells[col]) {\n                        tableRow.cells[col] = createTableCell(\n                            false,\n                            false,\n                            false,\n                            context.blockFormat\n                        );\n                    }\n                }\n            }\n\n            table.widths = calcSizes(columnPositions);\n\n            const heights = calcSizes(rowPositions);\n\n            table.rows.forEach((row, i) => {\n                if (heights[i] > 0) {\n                    row.height = heights[i];\n                }\n            });\n        }\n    );\n};\n\nfunction calcSizes(positions: (number | undefined)[]): number[] {\n    const result: number[] = [];\n    let lastPos = 0;\n\n    for (let i = positions.length - 1; i >= 0; i--) {\n        const pos = positions[i];\n\n        if (typeof pos == 'number') {\n            lastPos = pos;\n            break;\n        }\n    }\n\n    for (let i = positions.length - 2; i >= 0; i--) {\n        const pos = positions[i];\n        if (pos === undefined) {\n            result[i] = 0;\n        } else {\n            result[i] = lastPos - pos;\n            lastPos = pos;\n        }\n    }\n\n    return result;\n}\n\nfunction processColGroup(\n    table: HTMLElement,\n    context: DomToModelContext,\n    result: (number | undefined)[]\n): boolean {\n    let lastPos = 0;\n    let hasColGroup = false;\n\n    for (let child = table.firstChild; child; child = child.nextSibling) {\n        if (isNodeOfType(child, 'ELEMENT_NODE') && child.tagName == 'COLGROUP') {\n            hasColGroup = true;\n\n            for (let col = child.firstChild; col; col = col.nextSibling) {\n                if (isNodeOfType(col, 'ELEMENT_NODE') && col.tagName == 'COL') {\n                    const colFormat: SizeFormat = {};\n\n                    parseFormat(col, context.formatParsers.tableColumn, colFormat, context);\n\n                    for (let i = 0; i < parseInt(col.getAttribute('span') ?? '1'); i++) {\n                        if (colFormat.width === undefined) {\n                            result.push(undefined);\n                        } else {\n                            const width = parseValueWithUnit(\n                                colFormat.width ?? '',\n                                undefined /*element*/,\n                                'px'\n                            );\n\n                            result.push(width + lastPos);\n                            lastPos += width;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return hasColGroup;\n}\n\nfunction shouldRecalculateTableSize(table: HTMLTableElement, context: DomToModelContext): boolean {\n    switch (context.recalculateTableSize) {\n        case true:\n        case 'all':\n            return true;\n\n        case 'selected':\n            const selectionRoot = getSelectionRootNode(context.selection);\n\n            return (\n                !!selectionRoot &&\n                (selectionRoot == table ||\n                    table.contains(selectionRoot) ||\n                    selectionRoot.contains(table))\n            );\n\n        default:\n            return false;\n    }\n}\n","import { ensureParagraph } from '../../modelApi/common/ensureParagraph';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelText,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textProcessor: ElementProcessor<Text> = (\n    group: ContentModelBlockGroup,\n    textNode: Text,\n    context: DomToModelContext\n) => {\n    if (context.formatParsers.text.length > 0) {\n        stackFormat(context, { segment: 'shallowClone' }, () => {\n            context.formatParsers.text.forEach(parser => {\n                parser(context.segmentFormat, textNode, context);\n                internalTextProcessor(group, textNode, context);\n            });\n        });\n    } else {\n        internalTextProcessor(group, textNode, context);\n    }\n};\n\nfunction internalTextProcessor(\n    group: ContentModelBlockGroup,\n    textNode: Text,\n    context: DomToModelContext\n) {\n    const paragraph = ensureParagraph(group, context.blockFormat);\n    const segmentCount = paragraph.segments.length;\n\n    context.elementProcessors.textWithSelection(group, textNode, context);\n\n    const newSegments = paragraph.segments.slice(segmentCount);\n    context.domIndexer?.onSegment(\n        textNode,\n        paragraph,\n        newSegments.filter((x): x is ContentModelText => x?.segmentType == 'Text')\n    );\n}\n","import { addSelectionMarker } from '../utils/addSelectionMarker';\nimport { addTextSegment } from '../../modelApi/common/addTextSegment';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textWithSelectionProcessor: ElementProcessor<Text> = (group, textNode, context) => {\n    let txt = textNode.nodeValue || '';\n    const offsets = getRegularSelectionOffsets(context, textNode);\n    const txtStartOffset = offsets[0];\n    let txtEndOffset = offsets[1];\n\n    if (txtStartOffset >= 0) {\n        const subText = txt.substring(0, txtStartOffset);\n        addTextSegment(group, subText, context);\n        context.isInSelection = true;\n\n        addSelectionMarker(group, context, textNode, txtStartOffset);\n\n        txt = txt.substring(txtStartOffset);\n        txtEndOffset -= txtStartOffset;\n    }\n\n    if (txtEndOffset >= 0) {\n        const subText = txt.substring(0, txtEndOffset);\n        addTextSegment(group, subText, context);\n\n        if (\n            context.selection &&\n            (context.selection.type != 'range' || !context.selection.range.collapsed)\n        ) {\n            addSelectionMarker(group, context, textNode, offsets[1]); // Must use offsets[1] here as the unchanged offset value, cannot use txtEndOffset since it has been modified\n        }\n\n        context.isInSelection = false;\n        txt = txt.substring(txtEndOffset);\n    }\n\n    addTextSegment(group, txt, context);\n};\n","import { addSegment } from '../../modelApi/common/addSegment';\nimport { buildSelectionMarker } from './buildSelectionMarker';\nimport type { ContentModelBlockGroup, DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addSelectionMarker(\n    group: ContentModelBlockGroup,\n    context: DomToModelContext,\n    container?: Node,\n    offset?: number\n) {\n    const marker = buildSelectionMarker(group, context, container, offset);\n\n    addSegment(group, marker, context.blockFormat, marker.format);\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { ContentModelFormatBase } from 'roosterjs-content-model-types';\n\n/**\n * Check if the two given formats object are equal. This is a check to value but not to reference\n * @param f1 The first format object to check\n * @param f2 The second format object to check\n */\nexport function areSameFormats<T extends ContentModelFormatBase>(f1: T, f2: T) {\n    if (f1 == f2) {\n        return true;\n    } else {\n        const keys1 = getObjectKeys(f1);\n        const keys2 = getObjectKeys(f2);\n\n        return keys1.length == keys2.length && keys1.every(key => f1[key] == f2[key]);\n    }\n}\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { createSelectionMarker } from '../../modelApi/creators/createSelectionMarker';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelSegmentFormat,\n    ContentModelSelectionMarker,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Build a new selection marker with correct format according to its parent paragraph\n * @param group The BlockGroup that paragraph belongs to\n * @param context Current DOM to Model context\n * @param container @optional Container Node, used for retrieving pending format\n * @param offset @optional Container offset, used for retrieving pending format\n * @returns A new selection marker\n */\nexport function buildSelectionMarker(\n    group: ContentModelBlockGroup,\n    context: DomToModelContext,\n    container?: Node,\n    offset?: number\n): ContentModelSelectionMarker {\n    const lastPara = group.blocks[group.blocks.length - 1];\n    const formatFromParagraph: ContentModelSegmentFormat =\n        !lastPara || lastPara.blockType != 'Paragraph'\n            ? {}\n            : lastPara.decorator\n            ? {\n                  fontFamily: lastPara.decorator.format.fontFamily,\n                  fontSize: lastPara.decorator.format.fontSize,\n              }\n            : lastPara.segmentFormat\n            ? {\n                  fontFamily: lastPara.segmentFormat.fontFamily,\n                  fontSize: lastPara.segmentFormat.fontSize,\n              }\n            : {};\n\n    const pendingFormat =\n        context.pendingFormat &&\n        context.pendingFormat.insertPoint.node === container &&\n        context.pendingFormat.insertPoint.offset === offset\n            ? context.pendingFormat.format\n            : undefined;\n\n    const format: ContentModelSegmentFormat = Object.assign(\n        {},\n        context.defaultFormat,\n        formatFromParagraph,\n        context.segmentFormat,\n        pendingFormat\n    );\n\n    const marker = createSelectionMarker(format);\n\n    addDecorators(marker, context);\n\n    return marker;\n}\n","/**\n * @internal\n */\nexport function getBoundingClientRect(element: Element): DOMRect {\n    return element.getBoundingClientRect();\n}\n","import { defaultHTMLStyleMap } from '../../config/defaultHTMLStyleMap';\nimport type { DefaultStyleMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Get default CSS style of given element\n * @param element The element to get default style from\n * @returns A valid CSS style object\n */\nexport function getDefaultStyle(element: HTMLElement): Partial<CSSStyleDeclaration> {\n    const tag = element.tagName.toLowerCase() as keyof DefaultStyleMap;\n\n    return defaultHTMLStyleMap[tag] || {};\n}\n","import type { DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * Get offset numbers of a regular (range based) selection.\n * If the selection start/end position is not in the given node, it will return -1 for the related value\n * @param context DOM to Content Model context used for retrieve the selection\n * @param currentContainer The container node to check\n * @returns a tuple of start and end offsets. -1 means selection is not directly under the given node\n */\nexport function getRegularSelectionOffsets(\n    context: DomToModelContext,\n    currentContainer: Node\n): [number, number] {\n    const range = context.selection?.type == 'range' ? context.selection.range : null;\n\n    const startOffset = range?.startContainer == currentContainer ? range.startOffset : -1;\n    const endOffset = range?.endContainer == currentContainer ? range.endOffset! : -1;\n\n    return [startOffset, endOffset];\n}\n","import { getDefaultStyle } from './getDefaultStyle';\n\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table', 'table-cell', 'flex'];\n\n/**\n * Check if the given element will be layout as a block\n * @param element The element to check\n * @param context The context of DOM to Content Model conversion\n */\nexport function isBlockElement(element: HTMLElement): boolean {\n    const display = element.style.display || getDefaultStyle(element).display || '';\n\n    return BLOCK_DISPLAY_STYLES.indexOf(display) >= 0;\n}\n","import { getDefaultStyle } from './getDefaultStyle';\nimport type {\n    ContentModelFormatBase,\n    DomToModelContext,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\n/**\n * Parse formats of the given HTML element using specified format parsers\n * @param element The element to parse format from\n * @param parsers The parses we are using to parse format\n * @param format The format object to hold result format\n * @param context DOM to Content Model context\n */\nexport function parseFormat<T extends ContentModelFormatBase>(\n    element: HTMLElement,\n    parsers: (FormatParser<T> | null)[],\n    format: T,\n    context: DomToModelContext\n) {\n    const defaultStyle = getDefaultStyle(element);\n\n    parsers.forEach(parser => {\n        parser?.(format, element, context, defaultStyle);\n    });\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelCode,\n    ContentModelFormatBase,\n    ContentModelLink,\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface StackFormatOptions {\n    segment?: 'shallowClone' | 'shallowCloneForBlock' | 'empty';\n    paragraph?: 'shallowClone' | 'shallowCloneForGroup' | 'empty';\n    blockDecorator?: 'empty';\n    link?: 'linkDefault' | 'cloneFormat' | 'empty';\n    code?: 'codeDefault' | 'empty';\n}\n\n// Some styles, such as background color, won't be inherited by block element if it was originally\n// declared from an inline element. So we need to skip them.\n// e.g.\n// <span style=\"background-color: red\">\n//   line 1       <---------------------------- in red here\n//   <div>line 2</div>  <---------------------- not in red here\n// </span>\nconst SkippedStylesForBlockOnSegmentOnSegment: (keyof ContentModelSegmentFormat)[] = [\n    'backgroundColor',\n];\nconst SkippedStylesForTable: (keyof ContentModelBlockFormat)[] = [\n    'marginLeft',\n    'marginRight',\n    'paddingLeft',\n    'paddingRight',\n];\n\n/**\n * @internal\n */\nexport function stackFormat(\n    context: DomToModelContext,\n    options: StackFormatOptions,\n    callback: () => void\n) {\n    const {\n        segmentFormat,\n        blockFormat,\n        link: linkFormat,\n        code: codeFormat,\n        blockDecorator: decoratorFormat,\n    } = context;\n    const { segment, paragraph, link, code, blockDecorator } = options;\n\n    try {\n        context.segmentFormat = stackFormatInternal(segmentFormat, segment);\n        context.blockFormat = stackFormatInternal(blockFormat, paragraph);\n        context.link = stackLinkInternal(linkFormat, link);\n        context.code = stackCodeInternal(codeFormat, code);\n        context.blockDecorator = stackDecoratorInternal(decoratorFormat, blockDecorator);\n\n        callback();\n    } finally {\n        context.segmentFormat = segmentFormat;\n        context.blockFormat = blockFormat;\n        context.link = linkFormat;\n        context.code = codeFormat;\n        context.blockDecorator = decoratorFormat;\n    }\n}\n\nfunction stackLinkInternal(\n    linkFormat: ContentModelLink,\n    link?: 'linkDefault' | 'cloneFormat' | 'empty'\n) {\n    switch (link) {\n        case 'linkDefault':\n            return {\n                format: {\n                    underline: true,\n                },\n                dataset: {},\n            };\n\n        case 'empty':\n            return {\n                format: {},\n                dataset: {},\n            };\n\n        case 'cloneFormat':\n        default:\n            return {\n                dataset: linkFormat.dataset,\n                format: { ...linkFormat.format },\n            };\n    }\n}\n\nfunction stackCodeInternal(codeFormat: ContentModelCode, code?: 'codeDefault' | 'empty') {\n    switch (code) {\n        case 'codeDefault':\n            return {\n                format: {\n                    fontFamily: 'monospace',\n                },\n            };\n        case 'empty':\n            return {\n                format: {},\n            };\n        default:\n            return codeFormat;\n    }\n}\n\nfunction stackDecoratorInternal(\n    format: ContentModelParagraphDecorator,\n    decorator?: 'decoratorDefault' | 'empty'\n) {\n    switch (decorator) {\n        case 'empty':\n            return {\n                format: {},\n                tagName: '',\n            };\n        default:\n            return format;\n    }\n}\n\nfunction stackFormatInternal<T extends ContentModelFormatBase>(\n    format: T,\n    processType?: 'shallowClone' | 'shallowCloneForBlock' | 'shallowCloneForGroup' | 'empty'\n): T | {} {\n    switch (processType) {\n        case 'empty':\n            return {};\n\n        case undefined:\n            return format;\n\n        default:\n            const result = { ...format };\n\n            getObjectKeys(format).forEach(key => {\n                if (\n                    (processType == 'shallowCloneForBlock' &&\n                        SkippedStylesForBlockOnSegmentOnSegment.indexOf(\n                            key as keyof ContentModelSegmentFormat\n                        ) >= 0) ||\n                    (processType == 'shallowCloneForGroup' &&\n                        SkippedStylesForTable.indexOf(key as keyof ContentModelBlockFormat) >= 0)\n                ) {\n                    delete result[key];\n                }\n            });\n\n            if (processType == 'shallowClone' || processType == 'shallowCloneForGroup') {\n                const blockFormat = format as ContentModelBlockFormat;\n\n                // For a new paragraph, if current text indent is already applied to previous block in the same level,\n                // we need to ignore it according to browser rendering behavior\n                if (blockFormat.textIndent) {\n                    delete (result as ContentModelBlockFormat).isTextIndentApplied;\n                    blockFormat.isTextIndentApplied = true;\n                }\n            }\n\n            return result;\n    }\n}\n","import { applyFormat } from '../modelToDom/utils/applyFormat';\nimport { isElementOfType } from './isElementOfType';\nimport { isNodeOfType } from './isNodeOfType';\nimport { toArray } from './toArray';\nimport type {\n    ContentModelEntityFormat,\n    ContentModelSegmentFormat,\n    DOMHelper,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst ENTITY_INFO_NAME = '_Entity';\nconst ENTITY_INFO_SELECTOR = '.' + ENTITY_INFO_NAME;\nconst ENTITY_TYPE_PREFIX = '_EType_';\nconst ENTITY_ID_PREFIX = '_EId_';\nconst ENTITY_READONLY_PREFIX = '_EReadonly_';\nconst ZERO_WIDTH_SPACE = '\\u200B';\nconst DELIMITER_BEFORE = 'entityDelimiterBefore';\nconst DELIMITER_AFTER = 'entityDelimiterAfter';\nconst BLOCK_ENTITY_CONTAINER = '_E_EBlockEntityContainer';\nconst BLOCK_ENTITY_CONTAINER_SELECTOR = '.' + BLOCK_ENTITY_CONTAINER;\n\n/**\n * Check if the given DOM Node is an entity wrapper element\n */\nexport function isEntityElement(node: Node): boolean {\n    return isNodeOfType(node, 'ELEMENT_NODE') && node.classList.contains(ENTITY_INFO_NAME);\n}\n\n/**\n * Find the closest entity wrapper element from a given DOM node\n * @param node The node to start looking for entity wrapper\n * @param domHelper The DOM helper to use\n */\nexport function findClosestEntityWrapper(\n    startNode: Node,\n    domHelper: DOMHelper\n): HTMLElement | null {\n    return domHelper.findClosestElementAncestor(startNode, ENTITY_INFO_SELECTOR);\n}\n\n/**\n * Find the closest block entity wrapper element from a given DOM node\n * @param node The node to start looking for entity container\n * @param domHelper The DOM helper\n * @returns\n */\nexport function findClosestBlockEntityContainer(\n    node: Node,\n    domHelper: DOMHelper\n): HTMLElement | null {\n    return domHelper.findClosestElementAncestor(node, BLOCK_ENTITY_CONTAINER_SELECTOR);\n}\n\n/**\n * Get all entity wrapper elements under the given root element\n * @param root The root element to query from\n * @returns An array of entity wrapper elements\n */\nexport function getAllEntityWrappers(root: HTMLElement): HTMLElement[] {\n    return toArray(root.querySelectorAll('.' + ENTITY_INFO_NAME)) as HTMLElement[];\n}\n\n/**\n * Parse entity format from entity wrapper element\n * @param wrapper The wrapper element to parse entity format from\n * @returns Entity format\n */\nexport function parseEntityFormat(wrapper: HTMLElement): ContentModelEntityFormat {\n    let isEntity = false;\n    const format: ContentModelEntityFormat = {};\n\n    wrapper.classList.forEach(name => {\n        isEntity = parseEntityClassName(name, format) || isEntity;\n    });\n\n    if (!isEntity) {\n        format.isFakeEntity = true;\n        format.isReadonly = !wrapper.isContentEditable;\n    }\n\n    return format;\n}\n\n/**\n * Parse entity class names from entity wrapper element\n * @param className Class names of entity\n * @param format The output entity format object\n */\nfunction parseEntityClassName(\n    className: string,\n    format: ContentModelEntityFormat\n): boolean | undefined {\n    if (className == ENTITY_INFO_NAME) {\n        return true;\n    } else if (className.indexOf(ENTITY_TYPE_PREFIX) == 0) {\n        format.entityType = className.substring(ENTITY_TYPE_PREFIX.length);\n    } else if (className.indexOf(ENTITY_ID_PREFIX) == 0) {\n        format.id = className.substring(ENTITY_ID_PREFIX.length);\n    } else if (className.indexOf(ENTITY_READONLY_PREFIX) == 0) {\n        format.isReadonly = className.substring(ENTITY_READONLY_PREFIX.length) == '1';\n    }\n}\n\n/**\n * Generate Entity class names for an entity wrapper\n * @param format The source entity format object\n * @returns A combined CSS class name string for entity wrapper\n */\nexport function generateEntityClassNames(format: ContentModelEntityFormat): string {\n    return format.isFakeEntity\n        ? ''\n        : `${ENTITY_INFO_NAME} ${ENTITY_TYPE_PREFIX}${format.entityType ?? ''} ${\n              format.id ? `${ENTITY_ID_PREFIX}${format.id} ` : ''\n          }${ENTITY_READONLY_PREFIX}${format.isReadonly ? '1' : '0'}`;\n}\n\n/**\n * Checks whether the node provided is a Entity delimiter\n * @param node the node to check\n * @param isBefore True to match delimiter before entity only, false to match delimiter after entity, or undefined means match both\n * @return true if it is a delimiter\n */\nexport function isEntityDelimiter(element: HTMLElement, isBefore?: boolean): boolean {\n    const matchBefore = isBefore === undefined || isBefore;\n    const matchAfter = isBefore === undefined || !isBefore;\n\n    return (\n        isElementOfType(element, 'span') &&\n        ((matchAfter && element.classList.contains(DELIMITER_AFTER)) ||\n            (matchBefore && element.classList.contains(DELIMITER_BEFORE))) &&\n        element.textContent === ZERO_WIDTH_SPACE\n    );\n}\n\n/**\n * Check if the given element is a container element of block entity\n * @param element The element to check\n * @returns True if the element is a block entity container, otherwise false\n */\nexport function isBlockEntityContainer(element: HTMLElement): boolean {\n    return isElementOfType(element, 'div') && element.classList.contains(BLOCK_ENTITY_CONTAINER);\n}\n\n/**\n * Adds delimiters to the element provided. If the delimiters already exists, will not be added\n * @param element the node to add the delimiters\n * @param format format to set to the delimiters, so when typing inside of one the format is not lost\n * @param context Model to Dom context to use.\n */\nexport function addDelimiters(\n    doc: Document,\n    element: HTMLElement,\n    format?: ContentModelSegmentFormat | null,\n    context?: ModelToDomContext\n): HTMLElement[] {\n    let [delimiterAfter, delimiterBefore] = getDelimiters(element);\n\n    if (!delimiterAfter) {\n        delimiterAfter = insertDelimiter(doc, element, true /*isAfter*/);\n        if (context && format) {\n            applyFormat(delimiterAfter, context.formatAppliers.segment, format, context);\n        }\n    }\n\n    if (!delimiterBefore) {\n        delimiterBefore = insertDelimiter(doc, element, false /*isAfter*/);\n        if (context && format) {\n            applyFormat(delimiterBefore, context.formatAppliers.segment, format, context);\n        }\n    }\n\n    return [delimiterAfter, delimiterBefore];\n}\n\nfunction getDelimiters(entityWrapper: HTMLElement): (HTMLElement | undefined)[] {\n    const result: (HTMLElement | undefined)[] = [];\n    const { nextElementSibling, previousElementSibling } = entityWrapper;\n    result.push(\n        isDelimiter(nextElementSibling, DELIMITER_AFTER),\n        isDelimiter(previousElementSibling, DELIMITER_BEFORE)\n    );\n\n    return result;\n}\n\nfunction isDelimiter(el: Element | null, className: string): HTMLElement | undefined {\n    return el?.classList.contains(className) && el.textContent == ZERO_WIDTH_SPACE\n        ? (el as HTMLElement)\n        : undefined;\n}\n\nfunction insertDelimiter(doc: Document, element: Element, isAfter: boolean) {\n    const span = doc.createElement('span');\n\n    span.className = isAfter ? DELIMITER_AFTER : DELIMITER_BEFORE;\n    span.appendChild(doc.createTextNode(ZERO_WIDTH_SPACE));\n    element.parentNode?.insertBefore(span, isAfter ? element.nextSibling : element);\n\n    return span;\n}\n","import type { PluginEvent } from 'roosterjs-content-model-types';\n\n/**\n * Gets the cached event data by cache key from event object if there is already one.\n * Otherwise, call getter function to create one, and cache it.\n * @param event The event object\n * @param key Cache key string, need to be unique\n * @param getter Getter function to get the object when it is not in cache yet\n */\nexport function cacheGetEventData<T, E extends PluginEvent>(\n    event: E,\n    key: string,\n    getter: (event: E) => T\n): T {\n    const result =\n        event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\n            ? <T>event.eventDataCache[key]\n            : getter(event);\n    event.eventDataCache = event.eventDataCache || {};\n    event.eventDataCache[key] = result;\n\n    return result;\n}\n","const CTRL_CHAR_CODE = 'Control';\nconst ALT_CHAR_CODE = 'Alt';\nconst META_CHAR_CODE = 'Meta';\n\nconst CursorMovingKeys = new Set<string>([\n    'ArrowUp',\n    'ArrowDown',\n    'ArrowLeft',\n    'ArrowRight',\n    'Home',\n    'End',\n    'PageUp',\n    'PageDown',\n]);\n\n/**\n * Returns true when the event was fired from a modifier key, otherwise false\n * @param event The keyboard event object\n */\nexport function isModifierKey(event: KeyboardEvent): boolean {\n    const isCtrlKey = event.ctrlKey || event.key === CTRL_CHAR_CODE;\n    const isAltKey = event.altKey || event.key === ALT_CHAR_CODE;\n    const isMetaKey = event.metaKey || event.key === META_CHAR_CODE;\n\n    return isCtrlKey || isAltKey || isMetaKey;\n}\n\n/**\n * Returns true when the event was fired from a key that produces a character value, otherwise false\n * This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\n * event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\n * So if we missed some case here it is still acceptable.\n * @param event The keyboard event object\n */\nexport function isCharacterValue(event: KeyboardEvent): boolean {\n    return !isModifierKey(event) && !!event.key && event.key.length == 1;\n}\n\n/**\n * Returns true if the given event is a cursor moving event (Left, Right, Up, Down, Home, End, Page Up, Page Down).\n * This does not check modifier keys (Ctrl, Alt, Meta). So if there are modifier keys pressed, it can still return true if one of the modifier key is pressed\n * @param event The keyboard event to check\n */\nexport function isCursorMovingKey(event: KeyboardEvent): boolean {\n    return CursorMovingKeys.has(event.key);\n}\n","import { readFile } from '../readFile';\nimport type { ClipboardData, EdgeLinkPreview } from 'roosterjs-content-model-types';\n\nconst ContentHandlers: {\n    [contentType: string]: (data: ClipboardData, value: string, type?: string) => void;\n} = {\n    ['text/html']: (data, value) => (data.rawHtml = value),\n    ['text/plain']: (data, value) => (data.text = value),\n    ['text/*']: (data, value, type?) => !!type && (data.customValues[type] = value),\n    ['text/link-preview']: tryParseLinkPreview,\n    ['text/uri-list']: (data, value) => (data.text = value),\n};\n\n/**\n * Extract clipboard items to be a ClipboardData object for IE\n * @param items The clipboard items retrieve from a DataTransfer object\n * @param allowedCustomPasteType Allowed custom content type when paste besides text/plain, text/html and images\n    Only text types are supported, and do not add \"text/\" prefix to the type values\n */\nexport function extractClipboardItems(\n    items: DataTransferItem[],\n    allowedCustomPasteType?: string[]\n): Promise<ClipboardData> {\n    const data: ClipboardData = {\n        types: [],\n        text: '',\n        image: null,\n        files: [],\n        rawHtml: null,\n        customValues: {},\n        pasteNativeEvent: true,\n    };\n\n    return Promise.all(\n        (items || []).map(item => {\n            const type = item.type;\n\n            if (type.indexOf('image/') == 0 && !data.image && item.kind == 'file') {\n                data.types.push(type);\n                data.image = item.getAsFile();\n                return new Promise<void>(resolve => {\n                    if (data.image) {\n                        readFile(data.image, dataUrl => {\n                            data.imageDataUri = dataUrl;\n                            resolve();\n                        });\n                    } else {\n                        resolve();\n                    }\n                });\n            } else if (item.kind == 'file') {\n                return new Promise<void>(resolve => {\n                    const file = item.getAsFile();\n                    if (!!file) {\n                        data.types.push(type);\n                        data.files!.push(file);\n                    }\n                    resolve();\n                });\n            } else {\n                const customType = getAllowedCustomType(type, allowedCustomPasteType);\n                const handler =\n                    ContentHandlers[type] || (customType ? ContentHandlers['text/*'] : null);\n                return new Promise<void>(resolve =>\n                    handler\n                        ? item.getAsString(value => {\n                              data.types.push(type);\n                              handler(data, value, customType);\n                              resolve();\n                          })\n                        : resolve()\n                );\n            }\n        })\n    ).then(() => data);\n}\n\nfunction tryParseLinkPreview(data: ClipboardData, value: string) {\n    try {\n        data.customValues['link-preview'] = value;\n        data.linkPreview = JSON.parse(value) as EdgeLinkPreview;\n    } catch {}\n}\n\nfunction getAllowedCustomType(type: string, allowedCustomPasteType?: string[]) {\n    const textType = type.indexOf('text/') == 0 ? type.substring('text/'.length) : null;\n    const index =\n        allowedCustomPasteType && textType ? allowedCustomPasteType.indexOf(textType) : -1;\n    return textType && index >= 0 ? textType : undefined;\n}\n","/**\n * Provide a strong-typed version of Object.keys()\n * @param obj The source object\n * @returns Array of keys\n */\nexport function getObjectKeys<T extends string | number | symbol>(\n    obj: Record<T, any> | Partial<Record<T, any>>\n): T[] {\n    return Object.keys(obj) as T[];\n}\n","const StartsWithUnsupportedCharacter = /^[.|\\-|_|\\d]/;\n\n/**\n * Returns a safe Id to use in Native APIs.\n * IDs that start with number or hyphen can throw errors if used.\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\n * @param id\n * @returns\n */\nexport function getSafeIdSelector(id: string) {\n    if (!id) {\n        return id;\n    }\n\n    if (id.match(StartsWithUnsupportedCharacter)) {\n        return `[id=\"${id}\"]`;\n    } else {\n        return `#${id}`;\n    }\n}\n","/**\n * @internal\n */\nexport interface HiddenProperty {\n    /**\n     * A marker string that can be used to identify a specific paragraph in the DOM.\n     * This is useful for scenarios where you need to track or manipulate specific paragraphs\n     */\n    paragraphMarker?: string;\n\n    /**\n     * Specify we should not delete this element when delete/backspace key is pressed\n     */\n    undeletable?: boolean;\n\n    /**\n     * Specify the image state. Example: if the image is in editable state\n     */\n    imageState?: string;\n}\n\ninterface NodeWithHiddenProperty extends Node {\n    __roosterjsHiddenProperty?: HiddenProperty;\n}\n\n/**\n * @internal\n */\nexport function getHiddenProperty<Key extends keyof HiddenProperty>(\n    node: Node,\n    key: Key\n): HiddenProperty[Key] | undefined {\n    const nodeWithHiddenProperty = node as NodeWithHiddenProperty;\n    const hiddenProperty = nodeWithHiddenProperty.__roosterjsHiddenProperty;\n\n    return hiddenProperty ? hiddenProperty[key] : undefined;\n}\n\n/**\n * @internal\n */\nexport function setHiddenProperty<Key extends keyof HiddenProperty>(\n    node: Node,\n    key: Key,\n    value: HiddenProperty[Key]\n) {\n    const nodeWithHiddenProperty = node as NodeWithHiddenProperty;\n    const hiddenProperty = nodeWithHiddenProperty.__roosterjsHiddenProperty || {};\n\n    hiddenProperty[key] = value;\n    nodeWithHiddenProperty.__roosterjsHiddenProperty = hiddenProperty;\n}\n","import { getHiddenProperty, setHiddenProperty } from './hiddenProperty';\n\n/**\n * Get image state from element. This is used to store a image state.\n */\nexport function getImageState(element: HTMLElement): string | undefined {\n    return getHiddenProperty(element, 'imageState');\n}\n\n/**\n * Set image state to element. This is used to store a image state.\n */\nexport function setImageState(element: HTMLElement, marker: string): void {\n    setHiddenProperty(element, 'imageState', marker);\n}\n","import { getHiddenProperty, setHiddenProperty } from './hiddenProperty';\n\n/**\n * Get paragraph marker from element. This is used to mark the end of a paragraph in a block element.\n */\nexport function getParagraphMarker(element: HTMLElement): string | undefined {\n    return getHiddenProperty(element, 'paragraphMarker');\n}\n\n/**\n * Set paragraph marker to element. This is used to mark the end of a paragraph in a block element.\n */\nexport function setParagraphMarker(element: HTMLElement, marker: string): void {\n    setHiddenProperty(element, 'paragraphMarker', marker);\n}\n","import { getHiddenProperty, setHiddenProperty } from './hiddenProperty';\nimport type { HiddenProperty } from './hiddenProperty';\n\nconst UndeletableLinkKey: keyof HiddenProperty = 'undeletable';\n\n/**\n * Set a hidden property on a link element to indicate whether it is undeletable or not.\n * This is used to prevent the link from being deleted when the user tries to delete it.\n * @param a The link element to set the property on\n * @param undeletable Whether the link is undeletable or not\n */\nexport function setLinkUndeletable(a: HTMLAnchorElement, undeletable: boolean) {\n    setHiddenProperty(a, UndeletableLinkKey, undeletable);\n}\n\n/**\n * Check if a link element is undeletable or not.\n * This is used to determine if the link can be deleted when the user tries to delete it.\n * @param a The link element to check\n * @returns True if the link is undeletable, false otherwise\n */\nexport function isLinkUndeletable(a: HTMLAnchorElement): boolean {\n    return !!getHiddenProperty(a, UndeletableLinkKey);\n}\n","/**\n * Check if the given element is of the type that we are checking according to its tag name\n * @param element The element to check\n * @param tag The HTML tag name to check\n * @returns True if the element has the given tag, otherwise false\n */\nexport function isElementOfType<Tag extends keyof HTMLElementTagNameMap>(\n    element: HTMLElement,\n    tag: Tag\n): element is HTMLElementTagNameMap[Tag] {\n    return element?.tagName?.toLocaleLowerCase() == tag;\n}\n","// List of elements that have generic roles by default\nconst genericRoleElements = new Set([\n    'div',\n    'span',\n    'p',\n    'section',\n    'article',\n    'aside',\n    'header',\n    'footer',\n    'main',\n    'nav',\n    'address',\n    'blockquote',\n    'pre',\n    'figure',\n    'figcaption',\n    'hgroup',\n]);\n\n/**\n * @internal\n */\nexport function isGenericRoleElement(element: Element | null): element is Element {\n    if (!element) {\n        return false;\n    }\n\n    const tagName = element.tagName.toLowerCase();\n\n    return genericRoleElements.has(tagName);\n}\n","import type { NodeTypeMap } from 'roosterjs-content-model-types';\n\n/**\n * Type checker for Node. Return true if it of the specified node type\n * @param node The node to check\n * @param expectedType The type to check\n */\nexport function isNodeOfType<T extends keyof NodeTypeMap>(\n    node: Node | null | undefined,\n    expectedType: T\n): node is NodeTypeMap[T] {\n    return !!node && node.nodeType == Node[expectedType];\n}\n","// According to https://developer.mozilla.org/en-US/docs/Web/CSS/white-space, these style values will need to preserve white spaces\nconst WHITESPACE_PRE_VALUES = ['pre', 'pre-wrap', 'break-spaces'];\n\n/**\n * Check if the given white-space style value will cause preserving white space\n * @param whiteSpace The white-space style value to check\n */\nexport function isWhiteSpacePreserved(whiteSpace: string | undefined): boolean {\n    return !!whiteSpace && WHITESPACE_PRE_VALUES.indexOf(whiteSpace) >= 0;\n}\n","/**\n * Replace all child nodes of the given target node to the child nodes of source node.\n * @param target Target node, all child nodes of this node will be removed if keepExistingChildren is not set to true\n * @param source (Optional) source node, all child nodes of this node will be move to target node\n * @param keepExistingChildren (Optional) When set to true, all existing child nodes of target will be kept\n */\nexport function moveChildNodes(target: Node, source?: Node, keepExistingChildren?: boolean) {\n    if (!target) {\n        return;\n    }\n\n    while (!keepExistingChildren && target.firstChild) {\n        target.removeChild(target.firstChild);\n    }\n\n    while (source?.firstChild) {\n        target.appendChild(source.firstChild);\n    }\n}\n\n/**\n * Wrap all child nodes of the given parent element using a new element with the given tag name\n * @param parent The parent element\n * @param tagName The tag name of new wrapper\n * @returns New wrapper element\n */\nexport function wrapAllChildNodes<T extends keyof HTMLElementTagNameMap>(\n    parent: HTMLElement,\n    tagName: T\n): HTMLElementTagNameMap[T] {\n    const newElement = parent.ownerDocument.createElement(tagName);\n\n    moveChildNodes(newElement, parent);\n    parent.appendChild(newElement);\n\n    return newElement;\n}\n","import type { Rect } from 'roosterjs-content-model-types';\n\n/**\n * A ClientRect of all 0 is possible. i.e. chrome returns a ClientRect of 0 when the cursor is on an empty p\n * We validate that and only return a rect when the passed in ClientRect is valid\n * @param clientRect Client rect object normally retrieved from getBoundingClientRect function\n */\nexport function normalizeRect(clientRect: DOMRect): Rect | null {\n    const { left, right, top, bottom } =\n        clientRect || <DOMRect>{ left: 0, right: 0, top: 0, bottom: 0 };\n    return left === 0 && right === 0 && top === 0 && bottom === 0\n        ? null\n        : {\n              left: Math.round(left),\n              right: Math.round(right),\n              top: Math.round(top),\n              bottom: Math.round(bottom),\n          };\n}\n","/**\n * Read a file object and invoke a callback function with the data url of this file\n * @param file The file to read\n * @param callback the callback to invoke with data url of the file.\n * If fail to read, dataUrl will be null\n */\nexport function readFile(file: File, callback: (dataUrl: string | null) => void) {\n    try {\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                callback(reader.result as string);\n            };\n            reader.onerror = () => {\n                callback(null);\n            };\n            reader.readAsDataURL(file);\n        }\n    } catch {\n        callback(null);\n    }\n}\n","import { isEntityElement } from './entityUtils';\nimport { isNodeOfType } from './isNodeOfType';\nimport type { RewriteFromModel } from 'roosterjs-content-model-types';\n\n/**\n * When set a DOM tree into editor, reuse the existing element in editor and no need to change it\n * @param parent Parent node of the reused element\n * @param element The element to keep in parent node\n * @param refNode Reference node, it is point to current node that is being processed. It must be a child of parent node, or null.\n * We will start processing from this node, if it is not the same with element, remove it and keep processing its next sibling,\n * until we see an element that is the same with the passed in element or null.\n * @returns The new reference element\n */\nexport function reuseCachedElement(\n    parent: Node,\n    element: Node,\n    refNode: Node | null,\n    context?: RewriteFromModel\n): Node | null {\n    if (element.parentNode == parent) {\n        const isEntity = isEntityElement(element);\n\n        // Remove nodes before the one we are hitting since they don't appear in Content Model at this position.\n        // But we don't want to touch entity since it would better to keep entity at its place unless it is removed\n        // In that case we will remove it after we have handled all other nodes\n        while (refNode && refNode != element && (isEntity || !isEntityElement(refNode))) {\n            const next = refNode.nextSibling;\n\n            refNode.parentNode?.removeChild(refNode);\n\n            if (isNodeOfType(refNode, 'ELEMENT_NODE')) {\n                context?.removedBlockElements.push(refNode);\n            }\n\n            refNode = next;\n        }\n\n        if (refNode && refNode == element) {\n            refNode = refNode.nextSibling;\n        } else {\n            parent.insertBefore(element, refNode);\n        }\n    } else {\n        parent.insertBefore(element, refNode);\n    }\n\n    return refNode;\n}\n","import { isNodeOfType } from '../isNodeOfType';\nimport { normalizeRect } from '../normalizeRect';\nimport type { DOMInsertPoint, Rect } from 'roosterjs-content-model-types';\n\n/**\n * Get bounding rect of the given DOM insert point\n * @param doc The document object\n * @param pos The input DOM insert point\n */\nexport function getDOMInsertPointRect(doc: Document, pos: DOMInsertPoint): Rect | null {\n    const range = doc.createRange();\n\n    return (\n        tryGetRectFromPos(pos, range) ?? // 1. try get from the pos directly using getBoundingClientRect or getClientRects\n        tryGetRectFromPos((pos = normalizeInsertPoint(pos)), range) ?? // 2. try get normalized pos, this can work when insert point is inside text node\n        tryGetRectFromNode(pos.node) // 3. fallback to node rect using getBoundingClientRect\n    );\n}\n\nfunction normalizeInsertPoint(pos: DOMInsertPoint) {\n    let { node, offset } = pos;\n\n    while (node.lastChild) {\n        if (offset == node.childNodes.length) {\n            node = node.lastChild;\n            offset = node.childNodes.length;\n        } else {\n            node = node.childNodes[offset];\n            offset = 0;\n        }\n    }\n\n    return { node, offset };\n}\n\nfunction tryGetRectFromPos(pos: DOMInsertPoint, range: Range): Rect | null {\n    const { node, offset } = pos;\n\n    range.setStart(node, offset);\n    range.setEnd(node, offset);\n\n    const rect = normalizeRect(range.getBoundingClientRect());\n\n    if (rect) {\n        return rect;\n    } else {\n        const rects = range.getClientRects && range.getClientRects();\n\n        return rects && rects.length == 1 ? normalizeRect(rects[0]) : null;\n    }\n}\n\nfunction tryGetRectFromNode(node: Node) {\n    return isNodeOfType(node, 'ELEMENT_NODE') && node.getBoundingClientRect\n        ? normalizeRect(node.getBoundingClientRect())\n        : null;\n}\n","import type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * Get root node of a given DOM selection\n * For table selection, root node is the selected table\n * For image selection, root node is the selected image\n * For range selection, root node is the common ancestor container node of the selection range\n * @param selection The selection to get root node from\n */\nexport function getSelectionRootNode(selection: DOMSelection | undefined): Node | undefined {\n    return !selection\n        ? undefined\n        : selection.type == 'range'\n        ? selection.range.commonAncestorContainer\n        : selection.type == 'table'\n        ? selection.table\n        : selection.type == 'image'\n        ? selection.image\n        : undefined;\n}\n","const SPACES_REGEX = /[\\u2000\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000\\s\\t\\r\\n]/gm;\nconst PUNCTUATIONS = '.,?!:\"()[]\\\\/';\n\n/**\n * Check if the given character is punctuation\n * @param char The character to check\n */\nexport function isPunctuation(char: string) {\n    return PUNCTUATIONS.indexOf(char) >= 0;\n}\n\n/**\n * Check if the give character is a space. A space can be normal ASCII pace (32) or non-break space (160) or other kinds of spaces\n * such as ZeroWidthSpace, ...\n * @param char The character to check\n */\nexport function isSpace(char: string) {\n    const code = char?.charCodeAt(0) ?? 0;\n    return code == 160 || code == 32 || SPACES_REGEX.test(char);\n}\n\n/**\n * Normalize spaces of the given string. After normalization, all leading (for forward) or trailing (for backward) spaces\n * will be replaces with non-break space (160)\n * @param txt The string to normalize\n * @param isForward Whether normalize forward or backward\n */\nexport function normalizeText(txt: string, isForward: boolean): string {\n    return txt.replace(isForward ? /^\\u0020+/ : /\\u0020+$/, '\\u00A0');\n}\n","import type { Border } from 'roosterjs-content-model-types';\n\nconst BorderStyles = [\n    'none',\n    'hidden',\n    'dotted',\n    'dashed',\n    'solid',\n    'double',\n    'groove',\n    'ridge',\n    'inset',\n    'outset',\n];\nconst BorderSizeRegex = /^(thin|medium|thick|[\\d\\.]+\\w*)$/;\n\n/**\n * Extract an integrated border string with border width, style, color to value tuple\n * @param combinedBorder The integrated border style string\n * @returns An array with the splitted values\n */\nexport function extractBorderValues(combinedBorder?: string): Border {\n    const result: Border = {};\n    const values = (combinedBorder || '').replace(/, /g, ',').split(' ');\n\n    values.forEach(v => {\n        if (BorderStyles.indexOf(v) >= 0 && !result.style) {\n            result.style = v;\n        } else if (BorderSizeRegex.test(v) && !result.width) {\n            result.width = v;\n        } else if (v && !result.color) {\n            result.color = v;\n        }\n    });\n\n    return result;\n}\n\n/**\n * Combine border value array back to string\n * @param values Input string values\n * @param initialValue Initial value for those items without valid value\n */\nexport function combineBorderValue(value: Border): string {\n    return [value.width || '', value.style || '', value.color || ''].join(' ').trim() || 'none';\n}\n","/**\n * Check if the given bold style represents a bold style\n * @param boldStyle The style to check\n */\nexport function isBold(boldStyle?: string): boolean {\n    return (\n        !!boldStyle && (boldStyle == 'bold' || boldStyle == 'bolder' || parseInt(boldStyle) >= 600)\n    );\n}\n","/**\n * Normalize font family string to a standard format\n * Add quotes around font family names that contain non-alphanumeric/dash characters\n * @param fontFamily The font family string to normalize\n * @returns The normalized font family string\n */\nexport function normalizeFontFamily(fontFamily: string): string {\n    const existingQuotedFontsRegex = /(\".*?\")|('.*?')/g;\n    let match = existingQuotedFontsRegex.exec(fontFamily);\n    let start = 0;\n    const result: string[] = [];\n\n    while (match) {\n        process(fontFamily, result, start, match.index);\n\n        start = match.index + match[0].length;\n        result.push(match[0]);\n\n        match = existingQuotedFontsRegex.exec(fontFamily);\n    }\n\n    process(fontFamily, result, start, fontFamily.length);\n\n    return result.join(', ');\n}\n\nfunction process(fontFamily: string, result: string[], start: number, end: number) {\n    const families = fontFamily.substring(start, end).split(',');\n\n    families.forEach(family => {\n        family = family.trim();\n\n        if (family) {\n            // Check if the family name contains non-alphanumeric characters\n            if (/[^a-zA-Z0-9\\-]/.test(family)) {\n                result.push(`\"${family}\"`);\n            } else {\n                result.push(family);\n            }\n        }\n    });\n}\n","import { getColor, setColor } from '../../formatHandlers/utils/color';\nimport type { DarkColorHandler } from 'roosterjs-content-model-types';\n\n/**\n * Edit and transform color of elements between light mode and dark mode\n * @param rootNode The root DOM node to transform\n * @param includeSelf True to transform the root node as well, otherwise false\n * @param direction To specify the transform direction, light to dark, or dark to light\n * @param darkColorHandler The dark color handler object to help do color transformation\n */\nexport function transformColor(\n    rootNode: Node,\n    includeSelf: boolean,\n    direction: 'lightToDark' | 'darkToLight',\n    darkColorHandler?: DarkColorHandler\n) {\n    const toDarkMode = direction == 'lightToDark';\n    const transformer = (element: HTMLElement) => {\n        const textColor = getColor(element, false /*isBackground*/, !toDarkMode, darkColorHandler);\n        const backColor = getColor(element, true /*isBackground*/, !toDarkMode, darkColorHandler);\n\n        setColor(element, textColor, false /*isBackground*/, toDarkMode, darkColorHandler);\n        setColor(element, backColor, true /*isBackground*/, toDarkMode, darkColorHandler);\n    };\n\n    iterateElements(rootNode, transformer, includeSelf);\n}\n\nfunction iterateElements(\n    root: Node,\n    transformer: (element: HTMLElement) => void,\n    includeSelf?: boolean\n) {\n    if (includeSelf && isHTMLElement(root)) {\n        transformer(root);\n    }\n\n    for (let child = root.firstChild; child; child = child.nextSibling) {\n        if (isHTMLElement(child)) {\n            transformer(child);\n        }\n\n        iterateElements(child, transformer);\n    }\n}\n\n// This is not a strict check, we just need to make sure this element has style so that we can set style to it\n// We don't use safeInstanceOf() here since this function will be called very frequently when extract html content\n// in dark mode, so we need to make sure this check is fast enough\nfunction isHTMLElement(node: Node): node is HTMLElement {\n    const htmlElement = <HTMLElement>node;\n    return node.nodeType == Node.ELEMENT_NODE && !!htmlElement.style;\n}\n","import { toArray } from '../toArray';\nimport type { ParsedTable } from 'roosterjs-content-model-types';\n\n/**\n * Parse a table into a two dimensions array of TD elements. For those merged cells, the value will be null.\n * @param table Input HTML Table element\n * @returns Array of TD elements\n */\nexport function parseTableCells(table: HTMLTableElement): ParsedTable {\n    const trs = toArray(table.rows);\n    const cells: ParsedTable = trs.map(row => []);\n\n    trs.forEach((tr, rowIndex) => {\n        for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\n            // Skip the cells which already initialized\n            for (; cells[rowIndex][targetCol] !== undefined; targetCol++) {}\n\n            const td = tr.cells[sourceCol];\n\n            for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\n                for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\n                    if (cells[rowIndex + rowSpan]) {\n                        cells[rowIndex + rowSpan][targetCol] =\n                            colSpan == 0\n                                ? rowSpan == 0\n                                    ? td\n                                    : 'spanTop'\n                                : rowSpan == 0\n                                ? 'spanLeft'\n                                : 'spanBoth';\n                    }\n                }\n            }\n        }\n\n        for (let col = 0; col < cells[rowIndex].length; col++) {\n            cells[rowIndex][col] = cells[rowIndex][col] || null;\n        }\n    });\n\n    return cells;\n}\n","/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport function toArray(collection: NamedNodeMap): Attr[];\n\n/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport function toArray(collection: DataTransferItemList): DataTransferItem[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport function toArray<T extends Node>(collection: NodeListOf<T>): T[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport function toArray<T extends Element>(collection: HTMLCollectionOf<T>): T[];\n\n/**\n * Convert an array to an array.\n * This is to satisfy typescript compiler. For some cases the object can be a collection at runtime,\n * but the declaration is an array. e.g. ClipboardData.types\n * @param array The array to convert\n */\nexport function toArray<T>(array: readonly T[]): T[];\n\nexport function toArray(collection: any): any[] {\n    return [].slice.call(collection);\n}\n","/**\n * Removes the node and keep all children in place, return the parentNode where the children are attached\n * @param node the node to remove\n */\nexport function unwrap(node: Node): Node | null {\n    // Unwrap requires a parentNode\n    const parentNode = node ? node.parentNode : null;\n\n    if (!parentNode) {\n        return null;\n    }\n\n    while (node.firstChild) {\n        parentNode.insertBefore(node.firstChild, node);\n    }\n\n    parentNode.removeChild(node);\n    return parentNode;\n}\n","/**\n * Wrap the given node with a new element, put the wrapper node under the parent of the first node\n * and return the wrapper element.\n * @param doc Parent document object\n * @param node The node to wrap\n * @param wrapperTag The tag of wrapper HTML element\n * @returns The wrapper element\n */\nexport function wrap<T extends keyof HTMLElementTagNameMap>(\n    doc: Document,\n    node: Node,\n    wrapperTag: T\n): HTMLElementTagNameMap[T] {\n    const wrapper = doc.createElement(wrapperTag);\n    node.parentNode?.insertBefore(wrapper, node);\n    wrapper.appendChild(node);\n\n    return wrapper;\n}\n","import type { DirectionFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const directionFormatHandler: FormatHandler<DirectionFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const dir = element.style.direction || element.dir || defaultStyle.direction;\n\n        if (dir) {\n            format.direction = dir == 'rtl' ? 'rtl' : 'ltr';\n        }\n    },\n    apply: (format, element) => {\n        if (format.direction) {\n            element.style.direction = format.direction;\n        }\n    },\n};\n","import type { DisplayFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const displayFormatHandler: FormatHandler<DisplayFormat> = {\n    parse: (format, element) => {\n        const display = element.style.display;\n\n        if (display) {\n            format.display = display;\n        }\n    },\n    apply: (format, element) => {\n        if (format.display) {\n            element.style.display = format.display;\n        }\n    },\n};\n","import { calcAlign, ResultMap } from '../utils/dir';\nimport { directionFormatHandler } from './directionFormatHandler';\nimport type {\n    DirectionFormat,\n    HtmlAlignFormat,\n    TextAlignFormat,\n} from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const htmlAlignFormatHandler: FormatHandler<\n    DirectionFormat & HtmlAlignFormat & TextAlignFormat\n> = {\n    parse: (format, element, context, defaultStyle) => {\n        // When there is text-align in CSS style on the same element, we should ignore HTML align\n        if (!element.style.textAlign) {\n            directionFormatHandler.parse(format, element, context, defaultStyle);\n\n            const htmlAlign = element.getAttribute('align');\n\n            if (htmlAlign) {\n                format.htmlAlign = calcAlign(htmlAlign, format.direction);\n                delete format.textAlign;\n                delete context.blockFormat.textAlign;\n            }\n        }\n    },\n    apply: (format, element) => {\n        const dir: 'ltr' | 'rtl' = format.direction == 'rtl' ? 'rtl' : 'ltr';\n\n        if (format.htmlAlign) {\n            element.setAttribute('align', ResultMap[format.htmlAlign][dir]);\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { LineHeightFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const lineHeightFormatHandler: FormatHandler<LineHeightFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const lineHeight = element.style.lineHeight || defaultStyle.lineHeight;\n\n        if (lineHeight && lineHeight != 'inherit') {\n            format.lineHeight = lineHeight;\n        }\n    },\n    apply: (format, element) => {\n        if (format.lineHeight) {\n            element.style.lineHeight = format.lineHeight;\n        }\n    },\n};\n","import { parseValueWithUnit } from '../utils/parseValueWithUnit';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { MarginFormat } from 'roosterjs-content-model-types';\n\nconst MarginKeys: (keyof MarginFormat & keyof CSSStyleDeclaration)[] = [\n    'marginTop',\n    'marginRight',\n    'marginBottom',\n    'marginLeft',\n];\n\n/**\n * @internal\n */\nexport const marginFormatHandler: FormatHandler<MarginFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        MarginKeys.forEach(key => {\n            const value = element.style[key] || defaultStyle[key];\n\n            if (value) {\n                switch (key) {\n                    case 'marginTop':\n                    case 'marginBottom':\n                        format[key] = value;\n                        break;\n\n                    case 'marginLeft':\n                    case 'marginRight':\n                        format[key] = format[key]\n                            ? parseValueWithUnit(format[key] || '', element) +\n                              parseValueWithUnit(value, element) +\n                              'px'\n                            : value;\n                        break;\n                }\n            }\n        });\n    },\n    apply: (format, element, context) => {\n        MarginKeys.forEach(key => {\n            const value = format[key];\n\n            if (value != context.implicitFormat[key]) {\n                element.style[key] = value || '0';\n            }\n        });\n    },\n};\n","import { directionFormatHandler } from './directionFormatHandler';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { DirectionFormat, PaddingFormat } from 'roosterjs-content-model-types';\n\nconst PaddingKeys: (keyof PaddingFormat & keyof CSSStyleDeclaration)[] = [\n    'paddingTop',\n    'paddingRight',\n    'paddingBottom',\n    'paddingLeft',\n];\n\nconst AlternativeKeyLtr: Partial<Record<\n    keyof PaddingFormat,\n    keyof CSSStyleDeclaration | undefined\n>> = {\n    paddingLeft: 'paddingInlineStart',\n};\n\nconst AlternativeKeyRtl: Partial<Record<\n    keyof PaddingFormat,\n    keyof CSSStyleDeclaration | undefined\n>> = {\n    paddingRight: 'paddingInlineStart',\n};\n\n/**\n * @internal\n */\nexport const paddingFormatHandler: FormatHandler<PaddingFormat & DirectionFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        directionFormatHandler.parse(format, element, context, defaultStyle);\n\n        PaddingKeys.forEach(key => {\n            let value = element.style[key];\n            const alterativeKey = (format.direction == 'rtl'\n                ? AlternativeKeyRtl\n                : AlternativeKeyLtr)[key];\n            const defaultValue: string =\n                (defaultStyle[key] ??\n                    (alterativeKey ? defaultStyle[alterativeKey] : undefined) ??\n                    '0px') + '';\n\n            if (!value) {\n                value = defaultValue;\n            }\n\n            if (!value || value == '0') {\n                value = '0px';\n            }\n\n            if (value && value != defaultValue) {\n                format[key] = value;\n            }\n        });\n    },\n    apply: (format, element, context) => {\n        PaddingKeys.forEach(key => {\n            const value = format[key];\n            let defaultValue: string | undefined = undefined;\n\n            if (element.tagName == 'OL' || element.tagName == 'UL') {\n                if (\n                    (format.direction == 'rtl' && key == 'paddingRight') ||\n                    (format.direction != 'rtl' && key == 'paddingLeft')\n                ) {\n                    defaultValue = '40px';\n                }\n            }\n\n            if (value && value != defaultValue) {\n                element.style[key] = value;\n            }\n        });\n    },\n};\n","import { calcAlign, ResultMap } from '../utils/dir';\nimport { directionFormatHandler } from './directionFormatHandler';\nimport type { DirectionFormat, TextAlignFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const textAlignFormatHandler: FormatHandler<DirectionFormat & TextAlignFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        directionFormatHandler.parse(format, element, context, defaultStyle);\n\n        let textAlign = element.style.textAlign || defaultStyle.textAlign;\n\n        if (\n            element.tagName == 'LI' &&\n            element.parentElement?.style.display === 'flex' &&\n            element.parentElement.style.flexDirection === 'column' &&\n            element.style.alignSelf\n        ) {\n            // For LI element with flex style applied, we use its \"align-self\" style value instead since LI has a different implementation for align\n            textAlign = element.style.alignSelf;\n        }\n\n        if (textAlign) {\n            format.textAlign = calcAlign(textAlign, format.direction);\n        }\n    },\n    apply: (format, element) => {\n        const dir: 'ltr' | 'rtl' = format.direction == 'rtl' ? 'rtl' : 'ltr';\n\n        if (format.textAlign) {\n            const parent = element.parentElement;\n            const parentTag = parent?.tagName;\n\n            if (element.tagName == 'LI' && parent && (parentTag == 'OL' || parentTag == 'UL')) {\n                element.style.alignSelf = format.textAlign;\n                element.parentElement.style.flexDirection = 'column';\n                element.parentElement.style.display = 'flex';\n            } else {\n                element.style.textAlign = ResultMap[format.textAlign][dir];\n            }\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TextIndentFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textIndentFormatHandler: FormatHandler<TextIndentFormat> = {\n    parse: (format, element) => {\n        const textIndent = element.style.textIndent;\n\n        if (textIndent) {\n            format.textIndent = textIndent;\n        }\n    },\n    apply: (format, element) => {\n        if (format.textIndent) {\n            element.style.textIndent = format.textIndent;\n        }\n    },\n};\n","import { shouldSetValue } from '../utils/shouldSetValue';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { WhiteSpaceFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const whiteSpaceFormatHandler: FormatHandler<WhiteSpaceFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const whiteSpace = element.style.whiteSpace || defaultStyle.whiteSpace;\n\n        if (shouldSetValue(whiteSpace, 'normal', format.whiteSpace, defaultStyle.whiteSpace)) {\n            format.whiteSpace = whiteSpace;\n        }\n    },\n    apply: (format, element, context) => {\n        const whiteSpace = context.implicitFormat.whiteSpace;\n        if (format.whiteSpace != whiteSpace) {\n            element.style.whiteSpace = format.whiteSpace || 'normal';\n        }\n    },\n};\n","import type { AriaFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const ariaFormatHandler: FormatHandler<AriaFormat> = {\n    parse: (format, element) => {\n        const ariaDescribedBy = element.getAttribute('aria-describedby');\n        const title = element.getAttribute('title');\n        if (ariaDescribedBy) {\n            format.ariaDescribedBy = ariaDescribedBy;\n        }\n        if (title) {\n            format.title = title;\n        }\n    },\n    apply: (format, element) => {\n        if (format.ariaDescribedBy) {\n            element.setAttribute('aria-describedby', format.ariaDescribedBy);\n        }\n        if (format.title) {\n            element.setAttribute('title', format.title);\n        }\n    },\n};\n","import { getColor, setColor } from '../utils/color';\nimport { shouldSetValue } from '../utils/shouldSetValue';\nimport type { BackgroundColorFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const backgroundColorFormatHandler: FormatHandler<BackgroundColorFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const backgroundColor =\n            getColor(\n                element,\n                true /*isBackground*/,\n                !!context.isDarkMode,\n                context.darkColorHandler\n            ) || defaultStyle.backgroundColor;\n\n        if (\n            shouldSetValue(\n                backgroundColor,\n                'transparent',\n                undefined /*existingValue*/,\n                defaultStyle.backgroundColor\n            )\n        ) {\n            format.backgroundColor = backgroundColor;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.backgroundColor) {\n            setColor(\n                element,\n                format.backgroundColor,\n                true /*isBackground*/,\n                !!context.isDarkMode,\n                context.darkColorHandler\n            );\n        }\n    },\n};\n","import type { BorderBoxFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const borderBoxFormatHandler: FormatHandler<BorderBoxFormat> = {\n    parse: (format, element) => {\n        if (element.style?.boxSizing == 'border-box') {\n            format.useBorderBox = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.useBorderBox) {\n            element.style.boxSizing = 'border-box';\n        }\n    },\n};\n","import type { BorderFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * Keys of border items\n */\nexport const BorderKeys: (keyof BorderFormat & keyof CSSStyleDeclaration)[] = [\n    'borderTop',\n    'borderRight',\n    'borderBottom',\n    'borderLeft',\n];\n\n// This array needs to match BorderKeys array\nconst BorderWidthKeys: (keyof CSSStyleDeclaration)[] = [\n    'borderTopWidth',\n    'borderRightWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n];\n\nconst BorderRadiusKeys: (keyof BorderFormat & keyof CSSStyleDeclaration)[] = [\n    'borderTopLeftRadius',\n    'borderTopRightRadius',\n    'borderBottomLeftRadius',\n    'borderBottomRightRadius',\n];\n\nconst AllKeys = BorderKeys.concat(BorderRadiusKeys);\n\n/**\n * @internal\n */\nexport const borderFormatHandler: FormatHandler<BorderFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        BorderKeys.forEach((key, i) => {\n            const value = element.style[key];\n            const defaultWidth = defaultStyle[BorderWidthKeys[i]] ?? '0px';\n            let width = element.style[BorderWidthKeys[i]];\n\n            if (width == '0') {\n                width = '0px';\n            }\n\n            if (value && width != defaultWidth) {\n                format[key] = value == 'none' ? '' : value;\n            }\n        });\n\n        const borderRadius = element.style.borderRadius;\n\n        if (borderRadius) {\n            format.borderRadius = borderRadius;\n        } else {\n            BorderRadiusKeys.forEach(key => {\n                const value = element.style[key];\n\n                if (value) {\n                    format[key] = value;\n                }\n            });\n        }\n    },\n    apply: (format, element) => {\n        AllKeys.forEach(key => {\n            const value = format[key];\n\n            if (value) {\n                element.style[key] = value;\n            }\n        });\n\n        if (format.borderRadius) {\n            element.style.borderRadius = format.borderRadius;\n        }\n    },\n};\n","import type { BoxShadowFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const boxShadowFormatHandler: FormatHandler<BoxShadowFormat> = {\n    parse: (format, element) => {\n        if (element.style?.boxShadow) {\n            format.boxShadow = element.style.boxShadow;\n        }\n    },\n    apply: (format, element) => {\n        if (format.boxShadow) {\n            element.style.boxShadow = format.boxShadow;\n        }\n    },\n};\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { DatasetFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const datasetFormatHandler: FormatHandler<DatasetFormat> = {\n    parse: (format, element) => {\n        const dataset = element.dataset;\n\n        getObjectKeys(dataset).forEach(key => {\n            format[key] = dataset[key] || '';\n        });\n    },\n\n    apply: (format, element) => {\n        getObjectKeys(format).forEach(key => {\n            element.dataset[key] = format[key];\n        });\n    },\n};\n","import type { FloatFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const floatFormatHandler: FormatHandler<FloatFormat> = {\n    parse: (format, element) => {\n        const float = element.style.float || element.getAttribute('align');\n\n        if (float) {\n            format.float = float;\n        }\n    },\n    apply: (format, element) => {\n        if (format.float) {\n            element.style.float = format.float;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { IdFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const idFormatHandler: FormatHandler<IdFormat> = {\n    parse: (format, element) => {\n        if (element.id) {\n            format.id = element.id;\n        }\n    },\n    apply: (format, element) => {\n        if (format.id) {\n            element.id = format.id;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { SizeFormat } from 'roosterjs-content-model-types';\n\nconst PercentageRegex = /[\\d\\.]+%/;\n\n/**\n * @internal\n */\nexport const sizeFormatHandler: FormatHandler<SizeFormat> = {\n    parse: (format, element, context) => {\n        const width = element.style.width || tryParseSize(element, 'width');\n        const height = element.style.height || tryParseSize(element, 'height');\n        const maxWidth = element.style.maxWidth;\n        const maxHeight = element.style.maxHeight;\n        const minWidth = element.style.minWidth;\n        const minHeight = element.style.minHeight;\n\n        if (width) {\n            format.width = width;\n        }\n        if (height) {\n            format.height = height;\n        }\n        if (maxWidth) {\n            format.maxWidth = maxWidth;\n        }\n        if (maxHeight) {\n            format.maxHeight = maxHeight;\n        }\n        if (minWidth) {\n            format.minWidth = minWidth;\n        }\n        if (minHeight) {\n            format.minHeight = minHeight;\n        }\n    },\n    apply: (format, element) => {\n        if (format.width) {\n            element.style.width = format.width;\n        }\n        if (format.height) {\n            element.style.height = format.height;\n        }\n        if (format.maxWidth) {\n            element.style.maxWidth = format.maxWidth;\n        }\n        if (format.maxHeight) {\n            element.style.maxHeight = format.maxHeight;\n        }\n        if (format.minWidth) {\n            element.style.minWidth = format.minWidth;\n        }\n        if (format.minHeight) {\n            element.style.minHeight = format.minHeight;\n        }\n    },\n};\n\nfunction tryParseSize(element: HTMLElement, attrName: 'width' | 'height'): string | undefined {\n    const attrValue = element.getAttribute(attrName);\n    const value = parseInt(attrValue || '');\n\n    return attrValue && PercentageRegex.test(attrValue)\n        ? attrValue\n        : Number.isNaN(value) || value == 0\n        ? undefined\n        : value + 'px';\n}\n","import type { FormatHandler } from '../FormatHandler';\nimport type { VerticalAlignFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const verticalAlignFormatHandler: FormatHandler<VerticalAlignFormat> = {\n    parse: (format, element) => {\n        const align = element.style.verticalAlign || element.getAttribute('valign');\n\n        switch (align) {\n            case 'baseline':\n            case 'initial':\n            case 'super':\n            case 'sub':\n            case 'text-top':\n            case 'text-bottom':\n            case 'top':\n                format.verticalAlign = 'top';\n                break;\n\n            case 'bottom':\n                format.verticalAlign = 'bottom';\n                break;\n\n            case 'middle':\n                format.verticalAlign = 'middle';\n                break;\n        }\n    },\n    apply: (format, element) => {\n        if (format.verticalAlign) {\n            element.style.verticalAlign = format.verticalAlign;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { WordBreakFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const wordBreakFormatHandler: FormatHandler<WordBreakFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const wordBreak = element.style.wordBreak || defaultStyle.wordBreak;\n\n        if (wordBreak) {\n            format.wordBreak = wordBreak;\n        }\n    },\n    apply: (format, element) => {\n        if (format.wordBreak) {\n            element.style.wordBreak = format.wordBreak;\n        }\n    },\n};\n","import { ariaFormatHandler } from './common/ariaFormatHandler';\nimport { backgroundColorFormatHandler } from './common/backgroundColorFormatHandler';\nimport { boldFormatHandler } from './segment/boldFormatHandler';\nimport { borderBoxFormatHandler } from './common/borderBoxFormatHandler';\nimport { borderFormatHandler } from './common/borderFormatHandler';\nimport { boxShadowFormatHandler } from './common/boxShadowFormatHandler';\nimport { datasetFormatHandler } from './common/datasetFormatHandler';\nimport { directionFormatHandler } from './block/directionFormatHandler';\nimport { displayFormatHandler } from './block/displayFormatHandler';\nimport { entityFormatHandler } from './entity/entityFormatHandler';\nimport { floatFormatHandler } from './common/floatFormatHandler';\nimport { fontFamilyFormatHandler } from './segment/fontFamilyFormatHandler';\nimport { fontSizeFormatHandler } from './segment/fontSizeFormatHandler';\nimport { getObjectKeys } from '../domUtils/getObjectKeys';\nimport { htmlAlignFormatHandler } from './block/htmlAlignFormatHandler';\nimport { idFormatHandler } from './common/idFormatHandler';\nimport { imageStateFormatHandler } from './segment/imageStateFormatHandler';\nimport { italicFormatHandler } from './segment/italicFormatHandler';\nimport { letterSpacingFormatHandler } from './segment/letterSpacingFormatHandler';\nimport { lineHeightFormatHandler } from './block/lineHeightFormatHandler';\nimport { linkFormatHandler } from './segment/linkFormatHandler';\nimport { listItemThreadFormatHandler } from './list/listItemThreadFormatHandler';\nimport { listLevelThreadFormatHandler } from './list/listLevelThreadFormatHandler';\nimport { listStyleFormatHandler } from './list/listStyleFormatHandler';\nimport { marginFormatHandler } from './block/marginFormatHandler';\nimport { paddingFormatHandler } from './block/paddingFormatHandler';\nimport { sizeFormatHandler } from './common/sizeFormatHandler';\nimport { strikeFormatHandler } from './segment/strikeFormatHandler';\nimport { superOrSubScriptFormatHandler } from './segment/superOrSubScriptFormatHandler';\nimport { tableLayoutFormatHandler } from './table/tableLayoutFormatHandler';\nimport { tableSpacingFormatHandler } from './table/tableSpacingFormatHandler';\nimport { textAlignFormatHandler } from './block/textAlignFormatHandler';\nimport { textColorFormatHandler } from './segment/textColorFormatHandler';\nimport { textColorOnTableCellFormatHandler } from './table/textColorOnTableCellFormatHandler';\nimport { textIndentFormatHandler } from './block/textIndentFormatHandler';\nimport { undeletableLinkFormatHandler } from './segment/undeletableLinkFormatHandler';\nimport { underlineFormatHandler } from './segment/underlineFormatHandler';\nimport { verticalAlignFormatHandler } from './common/verticalAlignFormatHandler';\nimport { whiteSpaceFormatHandler } from './block/whiteSpaceFormatHandler';\nimport { wordBreakFormatHandler } from './common/wordBreakFormatHandler';\nimport type { FormatHandler } from './FormatHandler';\nimport type {\n    ContentModelFormatMap,\n    FormatApplier,\n    FormatAppliers,\n    FormatHandlerTypeMap,\n    FormatKey,\n    FormatParser,\n    FormatParsers,\n} from 'roosterjs-content-model-types';\n\ntype FormatHandlers = {\n    [Key in FormatKey]: FormatHandler<FormatHandlerTypeMap[Key]>;\n};\n\nconst defaultFormatHandlerMap: FormatHandlers = {\n    aria: ariaFormatHandler,\n    backgroundColor: backgroundColorFormatHandler,\n    bold: boldFormatHandler,\n    border: borderFormatHandler,\n    borderBox: borderBoxFormatHandler,\n    boxShadow: boxShadowFormatHandler,\n    dataset: datasetFormatHandler,\n    direction: directionFormatHandler,\n    display: displayFormatHandler,\n    float: floatFormatHandler,\n    fontFamily: fontFamilyFormatHandler,\n    fontSize: fontSizeFormatHandler,\n    entity: entityFormatHandler,\n    htmlAlign: htmlAlignFormatHandler,\n    id: idFormatHandler,\n    imageState: imageStateFormatHandler,\n    italic: italicFormatHandler,\n    letterSpacing: letterSpacingFormatHandler,\n    lineHeight: lineHeightFormatHandler,\n    link: linkFormatHandler,\n    listItemThread: listItemThreadFormatHandler,\n    listLevelThread: listLevelThreadFormatHandler,\n    listStyle: listStyleFormatHandler,\n    margin: marginFormatHandler,\n    padding: paddingFormatHandler,\n    size: sizeFormatHandler,\n    strike: strikeFormatHandler,\n    superOrSubScript: superOrSubScriptFormatHandler,\n    tableLayout: tableLayoutFormatHandler,\n    tableSpacing: tableSpacingFormatHandler,\n    textAlign: textAlignFormatHandler,\n    textColor: textColorFormatHandler,\n    textColorOnTableCell: textColorOnTableCellFormatHandler,\n    textIndent: textIndentFormatHandler,\n    undeletableLink: undeletableLinkFormatHandler,\n    underline: underlineFormatHandler,\n    verticalAlign: verticalAlignFormatHandler,\n    whiteSpace: whiteSpaceFormatHandler,\n    wordBreak: wordBreakFormatHandler,\n};\n\nconst styleBasedSegmentFormats: (keyof FormatHandlerTypeMap)[] = [\n    'letterSpacing',\n    'fontFamily',\n    'fontSize',\n];\n\nconst elementBasedSegmentFormats: (keyof FormatHandlerTypeMap)[] = [\n    'strike',\n    'underline',\n    'superOrSubScript',\n    'italic',\n    'bold',\n];\nconst sharedBlockFormats: (keyof FormatHandlerTypeMap)[] = [\n    'direction',\n    'textAlign',\n    'textIndent',\n    'lineHeight',\n    'whiteSpace',\n];\nconst sharedContainerFormats: (keyof FormatHandlerTypeMap)[] = [\n    'backgroundColor',\n    'margin',\n    'padding',\n    'border',\n];\n\n/**\n * @internal\n */\nexport const defaultFormatKeysPerCategory: {\n    [key in keyof ContentModelFormatMap]: (keyof FormatHandlerTypeMap)[];\n} = {\n    block: sharedBlockFormats,\n    listItemThread: ['listItemThread'],\n    listLevelThread: ['listLevelThread'],\n    listItemElement: [\n        ...sharedBlockFormats,\n        'direction',\n        'textAlign',\n        'lineHeight',\n        'margin',\n        'listStyle',\n    ],\n    listLevel: ['direction', 'textAlign', 'margin', 'padding', 'listStyle', 'backgroundColor'],\n    styleBasedSegment: [...styleBasedSegmentFormats, 'textColor', 'backgroundColor', 'lineHeight'],\n    elementBasedSegment: elementBasedSegmentFormats,\n    segment: [\n        ...styleBasedSegmentFormats,\n        ...elementBasedSegmentFormats,\n        'textColor',\n        'backgroundColor',\n        'lineHeight',\n    ],\n    segmentOnBlock: [...styleBasedSegmentFormats, ...elementBasedSegmentFormats, 'textColor'],\n    segmentOnTableCell: [\n        ...styleBasedSegmentFormats,\n        ...elementBasedSegmentFormats,\n        'textColorOnTableCell',\n    ],\n    tableCell: [\n        'border',\n        'backgroundColor',\n        'padding',\n        'verticalAlign',\n        'wordBreak',\n        'textColor',\n        'htmlAlign',\n        'size',\n    ],\n    tableRow: ['backgroundColor'],\n    tableColumn: ['size'],\n    table: [\n        'aria',\n        'id',\n        'border',\n        'backgroundColor',\n        'display',\n        'htmlAlign',\n        'margin',\n        'size',\n        'tableLayout',\n        'textColor',\n    ],\n    tableBorder: ['borderBox', 'tableSpacing'],\n    tableCellBorder: ['borderBox'],\n    image: [\n        'id',\n        'size',\n        'margin',\n        'padding',\n        'borderBox',\n        'border',\n        'boxShadow',\n        'display',\n        'float',\n        'verticalAlign',\n        'imageState',\n    ],\n    link: [\n        'link',\n        'textColor',\n        'underline',\n        'display',\n        'margin',\n        'padding',\n        'backgroundColor',\n        'border',\n        'size',\n        'textAlign',\n        'undeletableLink',\n    ],\n    segmentUnderLink: ['textColor'],\n    code: ['fontFamily', 'display'],\n    dataset: ['dataset'],\n    divider: [...sharedBlockFormats, ...sharedContainerFormats, 'display', 'size', 'htmlAlign'],\n    container: [...sharedContainerFormats, 'htmlAlign', 'size', 'display', 'id'],\n    entity: ['entity'],\n    general: ['textColor', 'backgroundColor'], // General model still need to do color transformation in dark mode\n};\n\n/**\n * @internal\n */\nexport const defaultFormatParsers: FormatParsers = getObjectKeys(defaultFormatHandlerMap).reduce(\n    (result, key) => {\n        result[key] = defaultFormatHandlerMap[key].parse as FormatParser<any>;\n        return result;\n    },\n    <FormatParsers>{}\n);\n\n/**\n * @internal\n */\nexport const defaultFormatAppliers: FormatAppliers = getObjectKeys(defaultFormatHandlerMap).reduce(\n    (result, key) => {\n        result[key] = defaultFormatHandlerMap[key].apply as FormatApplier<any>;\n        return result;\n    },\n    <FormatAppliers>{}\n);\n","import { generateEntityClassNames, parseEntityFormat } from '../../domUtils/entityUtils';\nimport type { EntityInfoFormat, IdFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const entityFormatHandler: FormatHandler<EntityInfoFormat & IdFormat> = {\n    parse: (format, element) => {\n        Object.assign(format, parseEntityFormat(element));\n    },\n\n    apply: (format, element) => {\n        if (!format.isFakeEntity) {\n            element.className = generateEntityClassNames(format);\n        }\n\n        if (format.isReadonly) {\n            element.contentEditable = 'false';\n        } else {\n            element.removeAttribute('contenteditable');\n        }\n    },\n};\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListThreadFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listItemThreadFormatHandler: FormatHandler<ListThreadFormat> = {\n    parse: (format, element, context, defaultStyles) => {\n        const { listFormat } = context;\n        const depth = listFormat.levels.length;\n        const display = element.style.display || defaultStyles.display;\n\n        if (display && display != 'list-item') {\n            format.displayForDummyItem = display;\n        } else if (isLiUnderOl(element) && depth > 0) {\n            listFormat.threadItemCounts[depth - 1]++;\n            listFormat.threadItemCounts.splice(depth);\n            listFormat.levels.forEach(level => {\n                // Delete restart number so next list item doesn't need to have this value.\n                // Then it will be treated as a continuous list item to the previous one\n                delete level.format.startNumberOverride;\n            });\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.displayForDummyItem) {\n            element.style.display = format.displayForDummyItem;\n        } else if (isLiUnderOl(element)) {\n            const { listFormat } = context;\n            const { threadItemCounts } = listFormat;\n            const index = listFormat.nodeStack.length - 2; // The first one is always the parent of list, then minus another 1 to convert length to index\n\n            if (index >= 0) {\n                threadItemCounts.splice(index + 1);\n                threadItemCounts[index] = (threadItemCounts[index] ?? 0) + 1;\n            }\n        }\n    },\n};\n\nfunction isLiUnderOl(element: HTMLElement) {\n    return (\n        isElementOfType(element, 'li') &&\n        isNodeOfType(element.parentNode, 'ELEMENT_NODE') &&\n        isElementOfType(element.parentNode, 'ol')\n    );\n}\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListThreadFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listLevelThreadFormatHandler: FormatHandler<ListThreadFormat> = {\n    parse: (format, element, context) => {\n        if (isElementOfType(element, 'ol')) {\n            const { listFormat } = context;\n            const { threadItemCounts, levels } = listFormat;\n            const depth = levels.length;\n\n            if (\n                element.start == 1 ||\n                (typeof threadItemCounts[depth] === 'number' &&\n                    element.start != threadItemCounts[depth] + 1)\n            ) {\n                format.startNumberOverride = element.start;\n            }\n\n            threadItemCounts[depth] = element.start - 1;\n        }\n    },\n    apply: (format, element, context) => {\n        const {\n            listFormat: { threadItemCounts, nodeStack },\n        } = context;\n\n        // The first one is always the parent of list, and minus another one to convert length to index\n        // This format applier needs to be executed after new list level is pushed into node stack\n        const depth = nodeStack.length - 2;\n\n        if (depth >= 0 && isElementOfType(element, 'ol')) {\n            const startNumber = format.startNumberOverride;\n\n            if (typeof startNumber === 'number') {\n                threadItemCounts[depth] = startNumber - 1;\n            } else if (typeof threadItemCounts[depth] != 'number') {\n                threadItemCounts[depth] = 0;\n            }\n\n            threadItemCounts.splice(depth + 1);\n            element.start = threadItemCounts[depth] + 1;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { ListStyleFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listStyleFormatHandler: FormatHandler<ListStyleFormat> = {\n    parse: (format, element) => {\n        const listStylePosition = element.style.listStylePosition;\n        const listStyleType = element.style.listStyleType;\n\n        if (listStylePosition) {\n            format.listStylePosition = listStylePosition;\n        }\n\n        if (listStyleType) {\n            format.listStyleType = listStyleType;\n        }\n    },\n    apply: (format, element) => {\n        if (format.listStylePosition) {\n            element.style.listStylePosition = format.listStylePosition;\n        }\n\n        if (format.listStyleType) {\n            element.style.listStyleType = format.listStyleType;\n        }\n    },\n};\n","import { shouldSetValue } from '../utils/shouldSetValue';\nimport { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { BoldFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const boldFormatHandler: FormatHandler<BoldFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontWeight = element.style.fontWeight || defaultStyle.fontWeight;\n\n        if (shouldSetValue(fontWeight, '400', format.fontWeight, defaultStyle.fontWeight)) {\n            format.fontWeight = fontWeight;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.fontWeight === 'undefined') {\n            return;\n        }\n\n        const blockFontWeight = context.implicitFormat.fontWeight;\n\n        if (\n            (blockFontWeight && blockFontWeight != format.fontWeight) ||\n            (!blockFontWeight && format.fontWeight && format.fontWeight != 'normal')\n        ) {\n            if (format.fontWeight == 'bold') {\n                wrapAllChildNodes(element, 'b');\n            } else {\n                element.style.fontWeight = format.fontWeight || 'normal';\n            }\n        }\n    },\n};\n","import type { FontFamilyFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const fontFamilyFormatHandler: FormatHandler<FontFamilyFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontFamily = element.style.fontFamily || defaultStyle.fontFamily;\n\n        if (fontFamily && fontFamily != 'inherit') {\n            format.fontFamily = fontFamily;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.fontFamily && format.fontFamily != context.implicitFormat.fontFamily) {\n            element.style.fontFamily = format.fontFamily;\n        }\n    },\n};\n","import { isSuperOrSubScript } from './superOrSubScriptFormatHandler';\nimport { parseValueWithUnit } from '../utils/parseValueWithUnit';\nimport type { EditorContext, FontSizeFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const fontSizeFormatHandler: FormatHandler<FontSizeFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontSize = element.style.fontSize || defaultStyle.fontSize;\n        const verticalAlign = element.style.verticalAlign || defaultStyle.verticalAlign;\n\n        // when font size is 'smaller' and the style is for superscript/subscript,\n        // the font size will be handled by superOrSubScript handler\n        if (fontSize && !isSuperOrSubScript(fontSize, verticalAlign) && fontSize != 'inherit') {\n            if (element.style.fontSize) {\n                format.fontSize = normalizeFontSize(\n                    fontSize,\n                    context.segmentFormat.fontSize,\n                    context\n                );\n            } else if (defaultStyle.fontSize) {\n                format.fontSize = fontSize;\n            }\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.fontSize && format.fontSize != context.implicitFormat.fontSize) {\n            element.style.fontSize = format.fontSize;\n        }\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\nconst KnownFontSizes: Record<string, string> = {\n    'xx-small': '6.75pt',\n    'x-small': '7.5pt',\n    small: '9.75pt',\n    medium: '12pt',\n    large: '13.5pt',\n    'x-large': '18pt',\n    'xx-large': '24pt',\n    'xxx-large': '36pt',\n};\n\nfunction normalizeFontSize(\n    fontSize: string,\n    contextFont: string | undefined,\n    context: EditorContext\n): string | undefined {\n    const knownFontSize = KnownFontSizes[fontSize];\n    const isRemUnit = fontSize.endsWith('rem');\n\n    if (knownFontSize) {\n        return knownFontSize;\n    } else if (\n        fontSize == 'smaller' ||\n        fontSize == 'larger' ||\n        fontSize.endsWith('em') ||\n        fontSize.endsWith('%') ||\n        isRemUnit\n    ) {\n        if (!contextFont && !isRemUnit) {\n            return undefined;\n        } else {\n            const existingFontSize = isRemUnit\n                ? context.rootFontSize\n                : parseValueWithUnit(contextFont);\n\n            if (existingFontSize) {\n                switch (fontSize) {\n                    case 'smaller':\n                        return Math.round((existingFontSize * 500) / 6) / 100 + 'px';\n                    case 'larger':\n                        return Math.round((existingFontSize * 600) / 5) / 100 + 'px';\n                    default:\n                        return parseValueWithUnit(fontSize, existingFontSize, 'px') + 'px';\n                }\n            }\n        }\n    } else if (fontSize == 'inherit' || fontSize == 'revert' || fontSize == 'unset') {\n        return undefined;\n    } else {\n        return fontSize;\n    }\n}\n","import { getImageState, setImageState } from '../../domUtils/hiddenProperties/imageState';\nimport type { ImageStateFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const imageStateFormatHandler: FormatHandler<ImageStateFormat> = {\n    parse: (format, element) => {\n        const marker = getImageState(element);\n        if (marker) {\n            format.imageState = marker;\n        }\n    },\n    apply: (format, element) => {\n        if (format.imageState) {\n            setImageState(element, format.imageState);\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ItalicFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const italicFormatHandler: FormatHandler<ItalicFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontStyle = element.style.fontStyle || defaultStyle.fontStyle;\n\n        if (fontStyle == 'italic' || fontStyle == 'oblique') {\n            format.italic = true;\n        } else if (fontStyle == 'initial' || fontStyle == 'normal') {\n            format.italic = false;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.italic === 'undefined') {\n            return;\n        }\n\n        const implicitItalic = context.implicitFormat.italic;\n\n        if (!!implicitItalic != !!format.italic) {\n            if (format.italic) {\n                wrapAllChildNodes(element, 'i');\n            } else {\n                element.style.fontStyle = 'normal';\n            }\n        }\n    },\n};\n","import { shouldSetValue } from '../utils/shouldSetValue';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { LetterSpacingFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const letterSpacingFormatHandler: FormatHandler<LetterSpacingFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const letterSpacing = element.style.letterSpacing || defaultStyle.letterSpacing;\n\n        if (\n            shouldSetValue(\n                letterSpacing,\n                'normal',\n                format.letterSpacing,\n                defaultStyle.letterSpacing\n            )\n        ) {\n            format.letterSpacing = letterSpacing;\n        }\n    },\n    apply: (format, element) => {\n        if (format.letterSpacing) {\n            element.style.letterSpacing = format.letterSpacing;\n        }\n    },\n};\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { LinkFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const linkFormatHandler: FormatHandler<LinkFormat> = {\n    parse: (format, element) => {\n        if (isElementOfType(element, 'a')) {\n            const name = element.name;\n            const href = element.getAttribute('href'); // Use getAttribute to get original HREF but not the resolved absolute url\n            const target = element.target;\n            const rel = element.rel;\n            const id = element.id;\n            const className = element.className;\n            const title = element.title;\n\n            if (name) {\n                format.name = name;\n            }\n\n            if (href) {\n                format.href = href;\n            }\n\n            if (target) {\n                format.target = target;\n            }\n\n            if (id) {\n                format.anchorId = id;\n            }\n\n            if (rel) {\n                format.relationship = rel;\n            }\n\n            if (title) {\n                format.anchorTitle = title;\n            }\n\n            if (className) {\n                format.anchorClass = className;\n            }\n        }\n    },\n    apply: (format, element) => {\n        if (isElementOfType(element, 'a') && (format.href || format.name)) {\n            if (format.href) {\n                element.href = format.href;\n            }\n\n            if (format.name) {\n                element.name = format.name;\n            }\n\n            if (format.target) {\n                element.target = format.target;\n            }\n\n            if (format.anchorId) {\n                element.id = format.anchorId;\n            }\n\n            if (format.anchorClass) {\n                element.className = format.anchorClass;\n            }\n\n            if (format.anchorTitle) {\n                element.title = format.anchorTitle;\n            }\n\n            if (format.relationship) {\n                element.rel = format.relationship;\n            }\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { StrikeFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const strikeFormatHandler: FormatHandler<StrikeFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textDecoration = element.style.textDecoration || defaultStyle.textDecoration;\n\n        if (textDecoration?.indexOf('line-through')! >= 0) {\n            format.strikethrough = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.strikethrough) {\n            wrapAllChildNodes(element, 's');\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { SuperOrSubScriptFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const superOrSubScriptFormatHandler: FormatHandler<SuperOrSubScriptFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const verticalAlign = element.style.verticalAlign || defaultStyle.verticalAlign;\n        const fontSize = element.style.fontSize || defaultStyle.fontSize;\n\n        if (isSuperOrSubScript(fontSize, verticalAlign)) {\n            format.superOrSubScriptSequence = (format.superOrSubScriptSequence || '')\n                .split(' ')\n                .concat(verticalAlign)\n                .join(' ')\n                .trim();\n        }\n    },\n    apply: (format, element) => {\n        if (format.superOrSubScriptSequence) {\n            format.superOrSubScriptSequence\n                .split(' ')\n                .reverse()\n                .forEach(value => {\n                    const tagName = value == 'super' ? 'sup' : value == 'sub' ? 'sub' : null;\n\n                    if (tagName) {\n                        wrapAllChildNodes(element, tagName);\n                    }\n                });\n        }\n    },\n};\n\n/**\n * @internal\n */\nexport function isSuperOrSubScript(\n    fontSize: string | undefined,\n    verticalAlign: string | undefined\n): verticalAlign is 'sub' | 'super' {\n    return fontSize == 'smaller' && (verticalAlign == 'sub' || verticalAlign == 'super');\n}\n","import { getColor, setColor } from '../utils/color';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { TextColorFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textColorFormatHandler: FormatHandler<TextColorFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textColor =\n            getColor(\n                element,\n                false /*isBackground*/,\n                !!context.isDarkMode,\n                context.darkColorHandler\n            ) || defaultStyle.color;\n\n        if (textColor && textColor != 'inherit') {\n            format.textColor = textColor;\n        }\n    },\n    apply: (format, element, context) => {\n        const implicitColor = context.implicitFormat.textColor;\n\n        if (format.textColor && format.textColor != implicitColor) {\n            setColor(\n                element,\n                format.textColor,\n                false /*isBackground*/,\n                !!context.isDarkMode,\n                context.darkColorHandler\n            );\n        }\n    },\n};\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport {\n    isLinkUndeletable,\n    setLinkUndeletable,\n} from '../../domUtils/hiddenProperties/undeletableLink';\nimport type { UndeletableFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const undeletableLinkFormatHandler: FormatHandler<UndeletableFormat> = {\n    parse: (format, element) => {\n        if (isElementOfType(element, 'a') && isLinkUndeletable(element)) {\n            format.undeletable = true;\n        }\n    },\n\n    apply: (format, element) => {\n        if (format.undeletable && isElementOfType(element, 'a')) {\n            setLinkUndeletable(element, true);\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { UnderlineFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const underlineFormatHandler: FormatHandler<UnderlineFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textDecoration = element.style.textDecoration || defaultStyle.textDecoration;\n\n        if (textDecoration?.indexOf('underline')! >= 0) {\n            format.underline = true;\n        } else if (element.tagName == 'A' && textDecoration == 'none') {\n            format.underline = false;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.underline === 'undefined') {\n            return;\n        }\n\n        const blockUnderline = context.implicitFormat.underline;\n\n        if (!!blockUnderline != !!format.underline) {\n            if (format.underline) {\n                wrapAllChildNodes(element, 'u');\n            } else {\n                element.style.textDecoration = 'none';\n            }\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TableLayoutFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const tableLayoutFormatHandler: FormatHandler<TableLayoutFormat> = {\n    parse: (format, element) => {\n        const tableLayout = element.style.tableLayout;\n        if (tableLayout && tableLayout != 'inherit') {\n            format.tableLayout = tableLayout;\n        }\n    },\n    apply: (format, element) => {\n        if (format.tableLayout) {\n            element.style.tableLayout = format.tableLayout;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { SpacingFormat } from 'roosterjs-content-model-types';\n\nconst BorderCollapsed = 'collapse';\nconst BorderSeparate = 'separate';\nconst CellPadding = 'cellPadding';\n\n/**\n * @internal\n */\nexport const tableSpacingFormatHandler: FormatHandler<SpacingFormat> = {\n    parse: (format, element) => {\n        if (element.style.borderCollapse == BorderCollapsed) {\n            format.borderCollapse = true;\n        } else {\n            const cellPadding = element.getAttribute(CellPadding);\n            if (cellPadding) {\n                format.borderCollapse = true;\n            }\n        }\n\n        if (element.style.borderCollapse == BorderSeparate) {\n            format.borderSeparate = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.borderCollapse) {\n            element.style.borderCollapse = BorderCollapsed;\n            element.style.borderSpacing = '0';\n            element.style.boxSizing = 'border-box';\n        } else if (format.borderSeparate) {\n            element.style.borderCollapse = BorderSeparate;\n            element.style.borderSpacing = '0';\n            element.style.boxSizing = 'border-box';\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TextColorFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textColorOnTableCellFormatHandler: FormatHandler<TextColorFormat> = {\n    parse: (format, element) => {\n        if (element.style.color) {\n            // Delete color from format since text color on TD/TH will be handled by separate code\n            // and text color on segment format context need to be reset so that it will not inherit\n            // value outer container\n            delete format.textColor;\n        }\n    },\n    apply: () => {},\n};\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type {\n    DarkColorHandler,\n    Colors,\n    ColorTransformFunction,\n} from 'roosterjs-content-model-types';\n\n/**\n * List of deprecated colors\n */\nexport const DeprecatedColors: string[] = [\n    'inactiveborder',\n    'activeborder',\n    'inactivecaptiontext',\n    'inactivecaption',\n    'activecaption',\n    'appworkspace',\n    'infobackground',\n    'background',\n    'buttonhighlight',\n    'buttonshadow',\n    'captiontext',\n    'infotext',\n    'menutext',\n    'menu',\n    'scrollbar',\n    'threeddarkshadow',\n    'threedface',\n    'threedhighlight',\n    'threedlightshadow',\n    'threedfhadow',\n    'windowtext',\n    'windowframe',\n    'window',\n];\n\nconst BlackColor = 'rgb(0, 0, 0)';\nconst HEX3_REGEX = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/;\nconst HEX6_REGEX = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/;\nconst RGB_REGEX = /^rgb\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*\\)$/;\nconst RGBA_REGEX = /^rgba\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*\\)$/;\nconst VARIABLE_REGEX = /^\\s*var\\(\\s*(\\-\\-[a-zA-Z0-9\\-_]+)\\s*(?:,\\s*(.*))?\\)\\s*$/;\nconst VARIABLE_PREFIX = 'var(';\nconst VARIABLE_POSTFIX = ')';\nconst COLOR_VAR_PREFIX = '--darkColor';\n\n/**\n * Get color from given HTML element\n * @param element The element to get color from\n * @param isBackground True to get background color, false to get text color\n * @param isDarkMode Whether element is in dark mode now\n * @param darkColorHandler @optional The dark color handler object to help manager dark mode color\n */\nexport function getColor(\n    element: HTMLElement,\n    isBackground: boolean,\n    isDarkMode: boolean,\n    darkColorHandler?: DarkColorHandler\n): string | undefined {\n    let color =\n        (isBackground ? element.style.backgroundColor : element.style.color) ||\n        element.getAttribute(isBackground ? 'bgcolor' : 'color') ||\n        undefined;\n\n    if (color && DeprecatedColors.indexOf(color) > -1) {\n        color = isBackground ? undefined : BlackColor;\n    } else if (darkColorHandler && color) {\n        const match = color.startsWith(VARIABLE_PREFIX) ? VARIABLE_REGEX.exec(color) : null;\n\n        if (match) {\n            color = match[2] || '';\n        } else if (isDarkMode) {\n            // If editor is in dark mode but the color is not in dark color format, it is possible the color was inserted from external code\n            // without any light color info. So we first try to see if there is a known dark color can match this color, and use its related\n            // light color as light mode color. Otherwise we need to drop this color to avoid show \"white on white\" content.\n            color = findLightColorFromDarkColor(color, darkColorHandler.knownColors) || '';\n        }\n    }\n\n    return color;\n}\n\n/**\n * Set color to given HTML element\n * @param element The element to set color to\n * @param color The color to set, always pass in color in light mode\n * @param isBackground True to set background color, false to set text color\n * @param isDarkMode Whether element is in dark mode now\n * @param darkColorHandler @optional The dark color handler object to help manager dark mode color\n */\nexport function setColor(\n    element: HTMLElement,\n    color: string | null | undefined,\n    isBackground: boolean,\n    isDarkMode: boolean,\n    darkColorHandler?: DarkColorHandler\n) {\n    const match = color && color.startsWith(VARIABLE_PREFIX) ? VARIABLE_REGEX.exec(color) : null;\n    const [_, existingKey, fallbackColor] = match ?? [];\n\n    color = fallbackColor ?? color;\n\n    if (darkColorHandler && color) {\n        const colorType = isBackground ? 'background' : 'text';\n        const key =\n            existingKey ||\n            darkColorHandler.generateColorKey(color, undefined /*baseLValue*/, colorType, element);\n        const darkModeColor =\n            darkColorHandler.knownColors?.[key]?.darkModeColor ||\n            darkColorHandler.getDarkColor(color, undefined /*baseLValue*/, colorType, element);\n\n        darkColorHandler.updateKnownColor(isDarkMode, key, {\n            lightModeColor: color,\n            darkModeColor,\n        });\n\n        color = isDarkMode ? `${VARIABLE_PREFIX}${key}, ${color}${VARIABLE_POSTFIX}` : color;\n    }\n\n    element.removeAttribute(isBackground ? 'bgcolor' : 'color');\n    element.style.setProperty(isBackground ? 'background-color' : 'color', color || null);\n}\n\n/**\n * Generate color key for dark color\n * @param lightColor The input light color\n * @returns Key of the color\n */\nexport const defaultGenerateColorKey: ColorTransformFunction = lightColor => {\n    return `${COLOR_VAR_PREFIX}_${lightColor.replace(/[^\\d\\w]/g, '_')}`;\n};\n\n/**\n * Parse color string to r/g/b value.\n * If the given color is not in a recognized format, return null\n * @param color The source color to parse\n * @returns An array of Red/Green/Blue value, or null if fail to parse\n */\nexport function parseColor(color: string): [number, number, number] | null {\n    color = (color || '').trim();\n\n    let match: RegExpMatchArray | null;\n    if ((match = color.match(HEX3_REGEX))) {\n        return [\n            parseInt(match[1] + match[1], 16),\n            parseInt(match[2] + match[2], 16),\n            parseInt(match[3] + match[3], 16),\n        ];\n    } else if ((match = color.match(HEX6_REGEX))) {\n        return [parseInt(match[1], 16), parseInt(match[2], 16), parseInt(match[3], 16)];\n    } else if ((match = color.match(RGB_REGEX) || color.match(RGBA_REGEX))) {\n        return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n    } else {\n        // CSS color names such as red, green is not included for now.\n        // If need, we can add those colors from https://www.w3.org/wiki/CSS/Properties/color/keywords\n        return null;\n    }\n}\n\nfunction findLightColorFromDarkColor(\n    darkColor: string,\n    knownColors?: Record<string, Colors>\n): string | null {\n    const rgbSearch = parseColor(darkColor);\n\n    if (rgbSearch && knownColors) {\n        const key = getObjectKeys(knownColors).find(key => {\n            const rgbCurrent = parseColor(knownColors[key].darkModeColor);\n\n            return (\n                rgbCurrent &&\n                rgbCurrent[0] == rgbSearch[0] &&\n                rgbCurrent[1] == rgbSearch[1] &&\n                rgbCurrent[2] == rgbSearch[2]\n            );\n        });\n\n        if (key) {\n            return knownColors[key].lightModeColor;\n        }\n    }\n\n    return null;\n}\n","/**\n * @internal\n */\nexport const ResultMap = {\n    start: {\n        ltr: 'left',\n        rtl: 'right',\n    },\n    center: {\n        ltr: 'center',\n        rtl: 'center',\n    },\n    end: {\n        ltr: 'right',\n        rtl: 'left',\n    },\n    initial: {\n        ltr: 'initial',\n        rtl: 'initial',\n    },\n    justify: {\n        ltr: 'justify',\n        rtl: 'justify',\n    },\n};\n\n/**\n * @internal\n */\nexport function calcAlign(align: string, dir?: 'ltr' | 'rtl') {\n    switch (align) {\n        case 'center':\n            return 'center';\n\n        case 'left':\n            return dir == 'rtl' ? 'end' : 'start';\n\n        case 'right':\n            return dir == 'rtl' ? 'start' : 'end';\n\n        case 'start':\n        case 'end':\n            return align;\n\n        case 'justify':\n        case 'initial':\n            return align;\n\n        default:\n            return undefined;\n    }\n}\n","const MarginValueRegex = /(-?\\d+(\\.\\d+)?)([a-z]+|%)/;\n\n// According to https://developer.mozilla.org/en-US/docs/Glossary/CSS_pixel, 1in = 96px\nconst PixelPerInch = 96;\n\nconst DefaultRootFontSize = 16;\n\n/**\n * Parse unit value with its unit\n * @param value The source value to parse\n * @param currentSizePxOrElement The source element which has this unit value, or current font size (in px) from context.\n * @param resultUnit Unit for result, can be px or pt. @default px\n */\nexport function parseValueWithUnit(\n    value: string = '',\n    currentSizePxOrElement?: number | HTMLElement,\n    resultUnit: 'px' | 'pt' = 'px'\n): number {\n    const match = MarginValueRegex.exec(value);\n    let result = 0;\n\n    if (match) {\n        const [_, numStr, __, unit] = match;\n        const num = parseFloat(numStr);\n\n        switch (unit) {\n            case 'px':\n                result = num;\n                break;\n            case 'pt':\n                result = ptToPx(num);\n                break;\n            case 'em':\n                result = getFontSize(currentSizePxOrElement) * num;\n                break;\n            case 'ex':\n                result = (getFontSize(currentSizePxOrElement) * num) / 2;\n                break;\n            case '%':\n                result = (getFontSize(currentSizePxOrElement) * num) / 100;\n                break;\n            case 'in':\n                result = num * PixelPerInch;\n                break;\n            case 'rem':\n                result = (getFontSize(currentSizePxOrElement) || DefaultRootFontSize) * num;\n                break;\n        }\n    }\n\n    if (result > 0 && resultUnit == 'pt') {\n        result = pxToPt(result);\n    }\n\n    return result;\n}\n\nfunction getFontSize(currentSizeOrElement?: number | HTMLElement): number {\n    if (typeof currentSizeOrElement === 'undefined') {\n        return 0;\n    } else if (typeof currentSizeOrElement === 'number') {\n        return currentSizeOrElement;\n    } else {\n        const styleInPt =\n            currentSizeOrElement.ownerDocument.defaultView?.getComputedStyle(currentSizeOrElement)\n                .fontSize ?? '';\n        const floatInPt = parseFloat(styleInPt);\n        const floatInPx = ptToPx(floatInPt);\n\n        return floatInPx;\n    }\n}\n\nfunction ptToPx(pt: number): number {\n    return Math.round((pt * 4000) / 3) / 1000;\n}\n\nfunction pxToPt(px: number) {\n    return Math.round((px * 3000) / 4) / 1000;\n}\n","/**\n * @internal\n */\nexport function shouldSetValue(\n    value: string | undefined,\n    normalValue: string,\n    existingValue: string | undefined,\n    defaultValue: string | undefined\n): boolean {\n    return (\n        !!value &&\n        value != 'inherit' &&\n        !!(value != normalValue || existingValue || (defaultValue && value != defaultValue))\n    );\n}\n","export { domToContentModel } from './domToModel/domToContentModel';\nexport { contentModelToDom } from './modelToDom/contentModelToDom';\nexport { contentModelToText } from './modelToText/contentModelToText';\n\nexport {\n    childProcessor,\n    handleRegularSelection,\n    processChildNode,\n} from './domToModel/processors/childProcessor';\nexport { entityProcessor } from './domToModel/processors/entityProcessor';\nexport { tableProcessor } from './domToModel/processors/tableProcessor';\nexport { getRegularSelectionOffsets } from './domToModel/utils/getRegularSelectionOffsets';\nexport { parseFormat } from './domToModel/utils/parseFormat';\nexport { areSameFormats } from './domToModel/utils/areSameFormats';\nexport { isBlockElement } from './domToModel/utils/isBlockElement';\nexport { buildSelectionMarker } from './domToModel/utils/buildSelectionMarker';\n\nexport { updateMetadata, getMetadata, hasMetadata } from './modelApi/metadata/updateMetadata';\nexport { isNodeOfType } from './domUtils/isNodeOfType';\nexport { isElementOfType } from './domUtils/isElementOfType';\nexport { getObjectKeys } from './domUtils/getObjectKeys';\nexport { getSafeIdSelector } from './domUtils/getSafeIdSelector';\nexport { toArray } from './domUtils/toArray';\nexport { moveChildNodes, wrapAllChildNodes } from './domUtils/moveChildNodes';\nexport { wrap } from './domUtils/wrap';\nexport { unwrap } from './domUtils/unwrap';\nexport {\n    isEntityElement,\n    findClosestEntityWrapper,\n    getAllEntityWrappers,\n    parseEntityFormat,\n    generateEntityClassNames,\n    addDelimiters,\n    isEntityDelimiter,\n    isBlockEntityContainer,\n    findClosestBlockEntityContainer,\n} from './domUtils/entityUtils';\nexport { reuseCachedElement } from './domUtils/reuseCachedElement';\nexport { isWhiteSpacePreserved } from './domUtils/isWhiteSpacePreserved';\nexport { normalizeRect } from './domUtils/normalizeRect';\n\nexport { setLinkUndeletable, isLinkUndeletable } from './domUtils/hiddenProperties/undeletableLink';\n\nexport { createBr } from './modelApi/creators/createBr';\nexport { createListItem } from './modelApi/creators/createListItem';\nexport { createFormatContainer } from './modelApi/creators/createFormatContainer';\nexport { createParagraph } from './modelApi/creators/createParagraph';\nexport { createSelectionMarker } from './modelApi/creators/createSelectionMarker';\nexport { createTable } from './modelApi/creators/createTable';\nexport { createTableCell } from './modelApi/creators/createTableCell';\nexport { createText } from './modelApi/creators/createText';\nexport { createImage } from './modelApi/creators/createImage';\nexport { createContentModelDocument } from './modelApi/creators/createContentModelDocument';\nexport { createParagraphDecorator } from './modelApi/creators/createParagraphDecorator';\nexport { createGeneralSegment } from './modelApi/creators/createGeneralSegment';\nexport { createGeneralBlock } from './modelApi/creators/createGeneralBlock';\nexport { createEntity } from './modelApi/creators/createEntity';\nexport { createDivider } from './modelApi/creators/createDivider';\nexport { createListLevel } from './modelApi/creators/createListLevel';\nexport { createEmptyModel } from './modelApi/creators/createEmptyModel';\nexport { createTableRow } from './modelApi/creators/createTableRow';\n\nexport { mutateBlock, mutateSegments, mutateSegment } from './modelApi/common/mutate';\nexport { addBlock } from './modelApi/common/addBlock';\nexport { addCode } from './modelApi/common/addDecorators';\nexport { addLink } from './modelApi/common/addDecorators';\nexport { addTextSegment } from './modelApi/common/addTextSegment';\nexport { normalizeParagraph } from './modelApi/common/normalizeParagraph';\n\nexport { normalizeContentModel } from './modelApi/common/normalizeContentModel';\nexport { isGeneralSegment } from './modelApi/typeCheck/isGeneralSegment';\nexport { unwrapBlock } from './modelApi/common/unwrapBlock';\nexport { addSegment } from './modelApi/common/addSegment';\nexport { isEmpty } from './modelApi/common/isEmpty';\nexport { normalizeSingleSegment } from './modelApi/common/normalizeSegment';\nexport { mergeTextSegments } from './modelApi/common/mergeTextSegments';\nexport { normalizeSegmentFormat } from './modelApi/common/normalizeSegmentFormat';\n\nexport { setParagraphNotImplicit } from './modelApi/block/setParagraphNotImplicit';\nexport {\n    copyFormat,\n    ListFormats,\n    ListFormatsToKeep,\n    ListFormatsToMove,\n    ParagraphFormats,\n} from './modelApi/block/copyFormat';\nexport { getOrderedListNumberStr } from './modelApi/list/getOrderedListNumberStr';\nexport { getAutoListStyleType } from './modelApi/list/getAutoListStyleType';\n\nexport { parseValueWithUnit } from './formatHandlers/utils/parseValueWithUnit';\nexport { BorderKeys } from './formatHandlers/common/borderFormatHandler';\nexport {\n    DeprecatedColors,\n    getColor,\n    setColor,\n    parseColor,\n    defaultGenerateColorKey,\n} from './formatHandlers/utils/color';\n\nexport {\n    createDomToModelContext,\n    createDomToModelContextWithConfig,\n    createDomToModelConfig,\n} from './domToModel/context/createDomToModelContext';\nexport {\n    createModelToDomContext,\n    createModelToDomContextWithConfig,\n    createModelToDomConfig,\n} from './modelToDom/context/createModelToDomContext';\n\nexport { isBold } from './domUtils/style/isBold';\nexport { getSelectionRootNode } from './domUtils/selection/getSelectionRootNode';\nexport { getDOMInsertPointRect } from './domUtils/selection/getDOMInsertPointRect';\nexport { isCharacterValue, isModifierKey, isCursorMovingKey } from './domUtils/event/eventUtils';\nexport { combineBorderValue, extractBorderValues } from './domUtils/style/borderValues';\nexport { isPunctuation, isSpace, normalizeText } from './domUtils/stringUtil';\nexport { parseTableCells } from './domUtils/table/parseTableCells';\nexport { readFile } from './domUtils/readFile';\nexport { transformColor } from './domUtils/style/transformColor';\nexport { normalizeFontFamily } from './domUtils/style/normalizeFontFamily';\nexport { extractClipboardItems } from './domUtils/event/extractClipboardItems';\nexport { cacheGetEventData } from './domUtils/event/cacheGetEventData';\nexport {\n    setParagraphMarker,\n    getParagraphMarker,\n} from './domUtils/hiddenProperties/paragraphMarker';\nexport { setImageState, getImageState } from './domUtils/hiddenProperties/imageState';\n\nexport { isBlockGroupOfType } from './modelApi/typeCheck/isBlockGroupOfType';\n\nexport { iterateSelections } from './modelApi/selection/iterateSelections';\nexport {\n    getFirstSelectedListItem,\n    getFirstSelectedTable,\n    getOperationalBlocks,\n    getSelectedParagraphs,\n    getSelectedSegments,\n    getSelectedSegmentsAndParagraphs,\n} from './modelApi/selection/collectSelections';\nexport { getSelectedCells } from './modelApi/selection/getSelectedCells';\nexport { hasSelectionInBlock } from './modelApi/selection/hasSelectionInBlock';\nexport { hasSelectionInSegment } from './modelApi/selection/hasSelectionInSegment';\nexport { hasSelectionInBlockGroup } from './modelApi/selection/hasSelectionInBlockGroup';\nexport { setSelection } from './modelApi/selection/setSelection';\n\nexport { cloneModel } from './modelApi/editing/cloneModel';\nexport { mergeModel } from './modelApi/editing/mergeModel';\nexport { deleteSelection } from './modelApi/editing/deleteSelection';\nexport { deleteSegment } from './modelApi/editing/deleteSegment';\nexport { deleteBlock } from './modelApi/editing/deleteBlock';\nexport { applyTableFormat, setFirstColumnFormatBorders } from './modelApi/editing/applyTableFormat';\nexport {\n    normalizeTable,\n    MIN_ALLOWED_TABLE_CELL_WIDTH,\n    MIN_ALLOWED_TABLE_CELL_HEIGHT,\n} from './modelApi/editing/normalizeTable';\nexport { setTableCellBackgroundColor } from './modelApi/editing/setTableCellBackgroundColor';\nexport { retrieveModelFormatState } from './modelApi/editing/retrieveModelFormatState';\nexport { getListStyleTypeFromString } from './modelApi/editing/getListStyleTypeFromString';\nexport { getSegmentTextFormat } from './modelApi/editing/getSegmentTextFormat';\nexport { getClosestAncestorBlockGroupIndex } from './modelApi/editing/getClosestAncestorBlockGroupIndex';\nexport { runEditSteps } from './modelApi/editing/runEditSteps';\n\nexport { updateImageMetadata, getImageMetadata } from './modelApi/metadata/updateImageMetadata';\nexport {\n    updateTableCellMetadata,\n    getTableCellMetadata,\n} from './modelApi/metadata/updateTableCellMetadata';\nexport { updateTableMetadata, getTableMetadata } from './modelApi/metadata/updateTableMetadata';\nexport {\n    updateListMetadata,\n    getListMetadata,\n    ListMetadataDefinition,\n} from './modelApi/metadata/updateListMetadata';\n\nexport { ChangeSource } from './constants/ChangeSource';\nexport { BulletListType } from './constants/BulletListType';\nexport { NumberingListType } from './constants/NumberingListType';\nexport { TableBorderFormat } from './constants/TableBorderFormat';\nexport { OrderedListStyleMap } from './constants/OrderedListStyleMap';\nexport { UnorderedListStyleMap } from './constants/UnorderedListStyleMap';\nexport { EmptySegmentFormat } from './constants/EmptySegmentFormat';\n","import type {\n    ContentModelBlockFormat,\n    ContentModelFormatBase,\n} from 'roosterjs-content-model-types';\n\n/**\n * When copy format between list and paragraph, these are the formats that we can copy and remove from the source\n */\nexport const ListFormatsToMove: (keyof ContentModelBlockFormat)[] = [\n    'marginRight',\n    'marginLeft',\n    'paddingRight',\n    'paddingLeft',\n];\n\n/**\n * When copy format between list and paragraph, these are the formats that we can copy and keep in the source\n */\nexport const ListFormatsToKeep: (keyof ContentModelBlockFormat)[] = [\n    'direction',\n    'textAlign',\n    'htmlAlign',\n];\n\n/**\n * When copy format from one block to another, these are all the formats that we can copy\n */\nexport const ListFormats: (keyof ContentModelBlockFormat)[] = ListFormatsToMove.concat(\n    ListFormatsToKeep\n);\n\n/**\n * When copy format between paragraphs, these are the formats that we can copy\n */\nexport const ParagraphFormats: (keyof ContentModelBlockFormat)[] = [\n    'backgroundColor',\n    'direction',\n    'textAlign',\n    'htmlAlign',\n    'lineHeight',\n    'textIndent',\n    'marginTop',\n    'marginRight',\n    'marginBottom',\n    'marginLeft',\n    'paddingTop',\n    'paddingRight',\n    'paddingBottom',\n    'paddingLeft',\n];\n\n/**\n * Copy formats from source to target with only specified keys\n * @param targetFormat The format object to copy format to\n * @param sourceFormat The format object to copy format from\n * @param formatKeys The format keys to copy\n * @param deleteOriginalFormat True to delete the original format from sourceFormat, false to keep it. @default false\n */\nexport function copyFormat<T extends ContentModelFormatBase>(\n    targetFormat: T,\n    sourceFormat: T,\n    formatKeys: (keyof T)[],\n    deleteOriginalFormat?: boolean\n) {\n    for (const key of formatKeys) {\n        if (sourceFormat[key] !== undefined) {\n            Object.assign(targetFormat, {\n                [key]: sourceFormat[key],\n            });\n\n            if (deleteOriginalFormat) {\n                delete sourceFormat[key];\n            }\n        }\n    }\n}\n","import { mutateBlock } from '../common/mutate';\nimport type { ReadonlyContentModelBlock } from 'roosterjs-content-model-types';\n\n/**\n * For a given block, if it is a paragraph, set it to be not-implicit\n * @param block The block to check\n */\nexport function setParagraphNotImplicit(block: ReadonlyContentModelBlock) {\n    if (block.blockType == 'Paragraph' && block.isImplicit) {\n        mutateBlock(block).isImplicit = false;\n    }\n}\n","import type {\n    ShallowMutableContentModelBlock,\n    ShallowMutableContentModelBlockGroup,\n} from 'roosterjs-content-model-types';\n\n/**\n * Add a given block to block group\n * @param group The block group to add block into\n * @param block The block to add\n */\nexport function addBlock(\n    group: ShallowMutableContentModelBlockGroup,\n    block: ShallowMutableContentModelBlock\n) {\n    group.blocks.push(block);\n}\n","import type {\n    DomToModelDecoratorContext,\n    ReadonlyContentModelCode,\n    ReadonlyContentModelLink,\n    ShallowMutableContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addLink(\n    segment: ShallowMutableContentModelSegment,\n    link: ReadonlyContentModelLink\n) {\n    if (link.format.href || link.format.name) {\n        segment.link = {\n            format: { ...link.format },\n            dataset: { ...link.dataset },\n        };\n    }\n}\n\n/**\n * Add a code decorator into segment if any\n * @param segment The segment to add decorator to\n * @param code The code decorator to add\n */\nexport function addCode(\n    segment: ShallowMutableContentModelSegment,\n    code: ReadonlyContentModelCode\n) {\n    if (code.format.fontFamily) {\n        segment.code = {\n            format: { ...code.format },\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function addDecorators(\n    segment: ShallowMutableContentModelSegment,\n    context: DomToModelDecoratorContext\n) {\n    addLink(segment, context.link);\n    addCode(segment, context.code);\n}\n","import { ensureParagraph } from './ensureParagraph';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    ShallowMutableContentModelBlockGroup,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Add a given segment into a paragraph from its parent group. If the last block of the given group is not paragraph, create a new paragraph.\n * @param group The parent block group of the paragraph to add segment into\n * @param newSegment The segment to add\n * @param blockFormat The block format used for creating a new paragraph when need\n * @returns The parent paragraph where the segment is added to\n */\nexport function addSegment(\n    group: ContentModelBlockGroup,\n    newSegment: ContentModelSegment,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ContentModelParagraph;\n\n/**\n * Add a given segment into a paragraph from its parent group. If the last block of the given group is not paragraph, create a new paragraph. (Shallow mutable)\n * @param group The parent block group of the paragraph to add segment into\n * @param newSegment The segment to add\n * @param blockFormat The block format used for creating a new paragraph when need\n * @returns The parent paragraph where the segment is added to\n */\nexport function addSegment(\n    group: ShallowMutableContentModelBlockGroup,\n    newSegment: ContentModelSegment,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ShallowMutableContentModelParagraph;\n\nexport function addSegment(\n    group: ShallowMutableContentModelBlockGroup,\n    newSegment: ContentModelSegment,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ShallowMutableContentModelParagraph {\n    const paragraph = ensureParagraph(group, blockFormat, segmentFormat);\n    const lastSegment = paragraph.segments[paragraph.segments.length - 1];\n\n    if (blockFormat?.textIndent) {\n        // For a new paragraph, if current text indent is already applied to previous block in the same level,\n        // we need to ignore it according to browser rendering behavior\n        if (blockFormat.isTextIndentApplied && paragraph.segments.length == 0) {\n            delete paragraph.format.textIndent;\n        } else {\n            blockFormat.isTextIndentApplied = true;\n        }\n\n        delete paragraph.format.isTextIndentApplied;\n    }\n\n    if (newSegment.segmentType == 'SelectionMarker') {\n        if (!lastSegment || !lastSegment.isSelected || !newSegment.isSelected) {\n            paragraph.segments.push(newSegment);\n        }\n    } else {\n        if (\n            newSegment.isSelected &&\n            lastSegment?.segmentType == 'SelectionMarker' &&\n            lastSegment.isSelected\n        ) {\n            paragraph.segments.pop();\n        }\n\n        paragraph.segments.push(newSegment);\n    }\n\n    return paragraph;\n}\n","import { addDecorators } from './addDecorators';\nimport { addSegment } from './addSegment';\nimport { createText } from '../creators/createText';\nimport { ensureParagraph } from './ensureParagraph';\nimport { hasSpacesOnly } from './hasSpacesOnly';\nimport { isWhiteSpacePreserved } from '../../domUtils/isWhiteSpacePreserved';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelText,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Add a new text segment to current paragraph\n * @param group Current BlockGroup that the paragraph belong to\n * @param text Text content of the text segment\n * @param context Current DOM to Model context\n * @returns A new Text segment, or undefined if the input text is empty\n */\nexport function addTextSegment(\n    group: ContentModelBlockGroup,\n    text: string,\n    context: DomToModelContext\n): ContentModelText | undefined {\n    let textModel: ContentModelText | undefined;\n\n    if (text) {\n        const paragraph = ensureParagraph(group, context.blockFormat);\n\n        if (\n            !hasSpacesOnly(text) ||\n            (paragraph?.segments.length ?? 0) > 0 ||\n            isWhiteSpacePreserved(paragraph?.format.whiteSpace)\n        ) {\n            textModel = createText(text, context.segmentFormat);\n\n            if (context.isInSelection) {\n                textModel.isSelected = true;\n            }\n\n            addDecorators(textModel, context);\n\n            addSegment(group, textModel, context.blockFormat);\n        }\n    }\n\n    return textModel;\n}\n","import { addBlock } from './addBlock';\nimport { createParagraph } from '../creators/createParagraph';\nimport { mutateBlock } from './mutate';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    ShallowMutableContentModelBlockGroup,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Ensure there is a Paragraph that can insert segments in a Content Model Block Group\n * @param group The parent block group of the target paragraph\n * @param blockFormat Format of the paragraph. This is only used if we need to create a new paragraph\n */\nexport function ensureParagraph(\n    group: ContentModelBlockGroup,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ContentModelParagraph;\n\n/**\n * @internal\n * Ensure there is a Paragraph that can insert segments in a Content Model Block Group (Shallow mutable)\n * @param group The parent block group of the target paragraph\n * @param blockFormat Format of the paragraph. This is only used if we need to create a new paragraph\n */\nexport function ensureParagraph(\n    group: ShallowMutableContentModelBlockGroup,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ShallowMutableContentModelParagraph;\n\nexport function ensureParagraph(\n    group: ShallowMutableContentModelBlockGroup,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ShallowMutableContentModelParagraph {\n    const lastBlock = group.blocks[group.blocks.length - 1];\n\n    if (lastBlock?.blockType == 'Paragraph') {\n        return mutateBlock(lastBlock);\n    } else {\n        const paragraph = createParagraph(true, blockFormat, segmentFormat);\n        addBlock(group, paragraph);\n\n        return paragraph;\n    }\n}\n","// A regex to match text that only has space and CR\n// We use real space char \" \" (\\u0020) here but not \"\\s\" since \"\\s\" will also match \"&nbsp;\" (\\u00A0) which is something we need to keep\nconst SPACE_TEXT_REGEX = /^[\\r\\n\\t ]*$/;\n\n/**\n * @internal\n * Check if the given string only has space, including line breaks.\n * @param txt The string to check\n */\nexport function hasSpacesOnly(txt: string): boolean {\n    return SPACE_TEXT_REGEX.test(txt);\n}\n","import type {\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function isBlockEmpty(block: ReadonlyContentModelBlock): boolean {\n    switch (block.blockType) {\n        case 'Paragraph':\n            return block.segments.length == 0;\n\n        case 'Table':\n            return block.rows.every(row => row.cells.length == 0);\n\n        case 'BlockGroup':\n            return isBlockGroupEmpty(block);\n\n        case 'Entity':\n            return false;\n\n        default:\n            return false;\n    }\n}\n\n/**\n * @internal\n */\nexport function isBlockGroupEmpty(group: ReadonlyContentModelBlockGroup): boolean {\n    switch (group.blockGroupType) {\n        case 'FormatContainer':\n            // Format Container of DIV is a container for style, so we always treat it as not empty\n            return group.tagName == 'div' ? false : group.blocks.every(isBlockEmpty);\n\n        case 'ListItem':\n            return group.blocks.every(isBlockEmpty);\n\n        case 'Document':\n        case 'General':\n        case 'TableCell':\n            return false;\n\n        default:\n            return true;\n    }\n}\n\n/**\n * @internal\n */\nexport function isSegmentEmpty(\n    segment: ReadonlyContentModelSegment,\n    treatAnchorAsNotEmpty?: boolean\n): boolean {\n    switch (segment.segmentType) {\n        case 'Text':\n            return !segment.text && (!treatAnchorAsNotEmpty || !segment.link?.format.name);\n\n        default:\n            return false;\n    }\n}\n\n/**\n * Get whether the model is empty.\n * @returns true if the model is empty.\n */\nexport function isEmpty(\n    model: ReadonlyContentModelBlock | ReadonlyContentModelBlockGroup | ReadonlyContentModelSegment\n): boolean {\n    if (isBlockGroup(model)) {\n        return isBlockGroupEmpty(model);\n    } else if (isBlock(model)) {\n        return isBlockEmpty(model);\n    } else if (isSegment(model)) {\n        return isSegmentEmpty(model);\n    }\n\n    return false;\n}\n\nfunction isSegment(\n    model: ReadonlyContentModelBlock | ReadonlyContentModelBlockGroup | ReadonlyContentModelSegment\n): model is ReadonlyContentModelSegment {\n    return typeof (<ReadonlyContentModelSegment>model).segmentType === 'string';\n}\n\nfunction isBlock(\n    model: ReadonlyContentModelBlock | ReadonlyContentModelBlockGroup | ReadonlyContentModelSegment\n): model is ReadonlyContentModelBlock {\n    return typeof (<ReadonlyContentModelBlock>model).blockType === 'string';\n}\n\nfunction isBlockGroup(\n    model: ReadonlyContentModelBlock | ReadonlyContentModelBlockGroup | ReadonlyContentModelSegment\n): model is ReadonlyContentModelBlockGroup {\n    return typeof (<ReadonlyContentModelBlockGroup>model).blockGroupType === 'string';\n}\n","import { areSameFormats } from '../../domToModel/utils/areSameFormats';\nimport type {\n    ContentModelText,\n    ReadonlyContentModelCode,\n    ReadonlyContentModelLink,\n    ReadonlyContentModelSegment,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * Find continuous text segments that have the same format and decorators, merge them, So we can reduce total count of segments\n * @param block The parent paragraph to check.\n */\nexport function mergeTextSegments(block: ShallowMutableContentModelParagraph) {\n    let lastText: ContentModelText | null = null;\n\n    for (let i = 0; i < block.segments.length; i++) {\n        const segment = block.segments[i];\n\n        if (segment.segmentType != 'Text') {\n            lastText = null;\n        } else if (!lastText || !segmentsWithSameFormat(lastText, segment)) {\n            lastText = segment;\n        } else {\n            lastText.text += segment.text;\n            block.segments.splice(i, 1);\n            i--;\n        }\n    }\n}\n\nfunction segmentsWithSameFormat(\n    seg1: ReadonlyContentModelSegment,\n    seg2: ReadonlyContentModelSegment\n) {\n    return (\n        !!seg1.isSelected == !!seg2.isSelected &&\n        areSameFormats(seg1.format, seg2.format) &&\n        areSameLinks(seg1.link, seg2.link) &&\n        areSameCodes(seg1.code, seg2.code)\n    );\n}\n\nfunction areSameLinks(\n    link1: ReadonlyContentModelLink | undefined,\n    link2: ReadonlyContentModelLink | undefined\n) {\n    return (\n        (!link1 && !link2) ||\n        (link1 &&\n            link2 &&\n            areSameFormats(link1.format, link2.format) &&\n            areSameFormats(link1.dataset, link2.dataset))\n    );\n}\n\nfunction areSameCodes(\n    code1: ReadonlyContentModelCode | undefined,\n    code2: ReadonlyContentModelCode | undefined\n) {\n    return (!code1 && !code2) || (code1 && code2 && areSameFormats(code1.format, code2.format));\n}\n","import type {\n    MutableType,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelListItem,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelTable,\n    ShallowMutableContentModelParagraph,\n    ShallowMutableContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Convert a readonly block to mutable block, clear cached element if exist\n * @param block The block to convert from\n * @returns The same block object of its related mutable type\n */\nexport function mutateBlock<T extends ReadonlyContentModelBlockGroup | ReadonlyContentModelBlock>(\n    block: T\n): MutableType<T> {\n    if (block.cachedElement) {\n        delete block.cachedElement;\n    }\n\n    if (isTable(block)) {\n        block.rows.forEach(row => {\n            delete row.cachedElement;\n        });\n    } else if (isListItem(block)) {\n        block.levels.forEach(level => delete level.cachedElement);\n    }\n\n    const result = (block as unknown) as MutableType<T>;\n\n    return result;\n}\n\n/**\n * Convert segments of a readonly paragraph to be mutable.\n * Segments that are not belong to the given paragraph will be skipped\n * @param paragraph The readonly paragraph to convert from\n * @param segments The segments to convert from\n */\nexport function mutateSegments(\n    paragraph: ReadonlyContentModelParagraph,\n    segments: ReadonlyContentModelSegment[]\n): [ShallowMutableContentModelParagraph, ShallowMutableContentModelSegment[], number[]] {\n    const mutablePara = mutateBlock(paragraph);\n    const result: [\n        ShallowMutableContentModelParagraph,\n        ShallowMutableContentModelSegment[],\n        number[]\n    ] = [mutablePara, [], []];\n\n    if (segments) {\n        segments.forEach(segment => {\n            const index = paragraph.segments.indexOf(segment);\n\n            if (index >= 0) {\n                result[1].push(mutablePara.segments[index]);\n                result[2].push(index);\n            }\n        });\n    }\n\n    return result;\n}\n\n/**\n * Convert a readonly segment to be mutable, together with its owner paragraph\n * If the segment does not belong to the given paragraph, return null for the segment\n * @param paragraph The readonly paragraph to convert from\n * @param segment The segment to convert from\n */\nexport function mutateSegment<T extends ReadonlyContentModelSegment>(\n    paragraph: ReadonlyContentModelParagraph,\n    segment: T,\n    callback?: (\n        segment: MutableType<T>,\n        paragraph: ShallowMutableContentModelParagraph,\n        index: number\n    ) => void\n): [ShallowMutableContentModelParagraph, MutableType<T> | null, number] {\n    const [mutablePara, mutableSegments, indexes] = mutateSegments(paragraph, [segment]);\n    const mutableSegment =\n        (mutableSegments[0] as ReadonlyContentModelSegment) == segment\n            ? (mutableSegments[0] as MutableType<T>)\n            : null;\n\n    if (callback && mutableSegment) {\n        callback(mutableSegments[0] as MutableType<T>, mutablePara, indexes[0]);\n    }\n\n    return [mutablePara, mutableSegment, indexes[0] ?? -1];\n}\n\nfunction isTable(\n    obj: ReadonlyContentModelBlockGroup | ReadonlyContentModelBlock\n): obj is ReadonlyContentModelTable {\n    return (obj as ReadonlyContentModelTable).blockType == 'Table';\n}\n\nfunction isListItem(\n    obj: ReadonlyContentModelBlockGroup | ReadonlyContentModelBlock\n): obj is ReadonlyContentModelListItem {\n    return (obj as ReadonlyContentModelListItem).blockGroupType == 'ListItem';\n}\n","import { isBlockEmpty } from './isEmpty';\nimport { ListFormats } from '../block/copyFormat';\nimport { mutateBlock } from './mutate';\nimport { normalizeParagraph } from './normalizeParagraph';\nimport { unwrapBlock } from './unwrapBlock';\nimport type { ReadonlyContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * For a given content model, normalize it to make the model be consistent.\n * This process includes:\n * - For a list item without any list level, unwrap the list item\n * - For a paragraph, make sure it has BR at the end if it is an empty paragraph\n * - For text segments under paragraph, make sure its space values are correct (use nbsp to replace space when necessary)\n * - For an empty block, remove it\n * @param group The root level block group of content model to normalize\n */\nexport function normalizeContentModel(group: ReadonlyContentModelBlockGroup) {\n    for (let i = group.blocks.length - 1; i >= 0; i--) {\n        const block = group.blocks[i];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem' && block.levels.length == 0) {\n                    i += block.blocks.length;\n                    unwrapBlock(group, block, ListFormats);\n                } else {\n                    normalizeContentModel(block);\n                }\n                break;\n            case 'Paragraph':\n                normalizeParagraph(block);\n                break;\n            case 'Table':\n                for (let r = 0; r < block.rows.length; r++) {\n                    for (let c = 0; c < block.rows[r].cells.length; c++) {\n                        if (block.rows[r].cells[c]) {\n                            normalizeContentModel(block.rows[r].cells[c]);\n                        }\n                    }\n                }\n                break;\n        }\n\n        if (isBlockEmpty(block)) {\n            mutateBlock(group).blocks.splice(i, 1);\n        }\n    }\n}\n","import { areSameFormats } from '../../domToModel/utils/areSameFormats';\nimport { createBr } from '../creators/createBr';\nimport { isSegmentEmpty } from './isEmpty';\nimport { isWhiteSpacePreserved } from '../../domUtils/isWhiteSpacePreserved';\nimport { mutateBlock, mutateSegment } from './mutate';\nimport { normalizeAllSegments } from './normalizeSegment';\nimport type {\n    ContentModelSegmentFormat,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @param paragraph The paragraph to normalize\n * Normalize a paragraph. If it is empty, add a BR segment to make sure it can insert content\n */\nexport function normalizeParagraph(paragraph: ReadonlyContentModelParagraph) {\n    const segments = paragraph.segments;\n\n    if (!paragraph.isImplicit && segments.length > 0) {\n        const last = segments[segments.length - 1];\n        const secondLast = segments[segments.length - 2];\n\n        if (\n            last.segmentType == 'SelectionMarker' &&\n            (!secondLast || secondLast.segmentType == 'Br')\n        ) {\n            mutateBlock(paragraph).segments.push(createBr(last.format));\n        } else if (segments.length > 1 && segments[segments.length - 1].segmentType == 'Br') {\n            const noMarkerSegments = segments.filter(x => x.segmentType != 'SelectionMarker');\n\n            // When there is content with a <BR> tag at the end, we can remove the BR.\n            // But if there are more than one <BR> at the end, do not remove them.\n            if (\n                noMarkerSegments.length > 1 &&\n                noMarkerSegments[noMarkerSegments.length - 2].segmentType != 'Br'\n            ) {\n                mutateBlock(paragraph).segments.pop();\n            }\n        }\n\n        normalizeParagraphStyle(paragraph);\n    }\n\n    if (!isWhiteSpacePreserved(paragraph.format.whiteSpace)) {\n        normalizeAllSegments(paragraph);\n    }\n\n    removeEmptyLinks(paragraph);\n    removeEmptySegments(paragraph);\n    moveUpSegmentFormat(paragraph);\n}\n\nfunction normalizeParagraphStyle(paragraph: ReadonlyContentModelParagraph) {\n    // New paragraph should not have white-space style\n    if (\n        paragraph.format.whiteSpace &&\n        paragraph.segments.every(\n            seg => seg.segmentType == 'Br' || seg.segmentType == 'SelectionMarker'\n        )\n    ) {\n        delete mutateBlock(paragraph).format.whiteSpace;\n    }\n}\n\nfunction removeEmptySegments(block: ReadonlyContentModelParagraph) {\n    for (let j = block.segments.length - 1; j >= 0; j--) {\n        if (isSegmentEmpty(block.segments[j], true /*treatAnchorAsNotEmpty*/)) {\n            mutateBlock(block).segments.splice(j, 1);\n        }\n    }\n}\n\nfunction removeEmptyLinks(paragraph: ReadonlyContentModelParagraph) {\n    const marker = paragraph.segments.find(x => x.segmentType == 'SelectionMarker');\n    if (marker) {\n        const markerIndex = paragraph.segments.indexOf(marker);\n        const prev = paragraph.segments[markerIndex - 1];\n        const next = paragraph.segments[markerIndex + 1];\n\n        if (\n            (prev &&\n                !prev.link &&\n                areSameFormats(prev.format, marker.format) &&\n                (!next || (!next.link && areSameFormats(next.format, marker.format))) &&\n                marker.link) ||\n            (!prev &&\n                marker.link &&\n                next &&\n                !next.link &&\n                areSameFormats(next.format, marker.format))\n        ) {\n            mutateSegment(paragraph, marker, mutableMarker => {\n                delete mutableMarker.link;\n            });\n        }\n    }\n}\n\ntype FormatsToMoveUp = 'fontFamily' | 'fontSize' | 'textColor';\nconst formatsToMoveUp: FormatsToMoveUp[] = ['fontFamily', 'fontSize', 'textColor'];\n\n// When all segments are sharing the same segment format (font name, size and color), we can move its format to paragraph\nfunction moveUpSegmentFormat(paragraph: ReadonlyContentModelParagraph) {\n    if (!paragraph.decorator) {\n        const segments = paragraph.segments.filter(x => x.segmentType != 'SelectionMarker');\n        const target = paragraph.segmentFormat || {};\n        let changed = false;\n\n        formatsToMoveUp.forEach(key => {\n            changed = internalMoveUpSegmentFormat(segments, target, key) || changed;\n        });\n\n        if (changed) {\n            mutateBlock(paragraph).segmentFormat = target;\n        }\n    }\n}\n\nfunction internalMoveUpSegmentFormat(\n    segments: ReadonlyContentModelSegment[],\n    target: ContentModelSegmentFormat,\n    formatKey: FormatsToMoveUp\n): boolean {\n    const firstFormat = segments[0]?.format;\n\n    if (\n        firstFormat?.[formatKey] &&\n        segments.every(segment => segment.format[formatKey] == firstFormat[formatKey]) &&\n        target[formatKey] != firstFormat[formatKey]\n    ) {\n        target[formatKey] = firstFormat[formatKey];\n        return true;\n    } else {\n        return false;\n    }\n}\n","import { hasSpacesOnly } from './hasSpacesOnly';\nimport { mutateSegment } from './mutate';\nimport type {\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelText,\n} from 'roosterjs-content-model-types';\n\nconst SPACE = '\\u0020';\nconst NONE_BREAK_SPACE = '\\u00A0';\nconst LEADING_SPACE_REGEX = /^\\u0020+/;\nconst TRAILING_SPACE_REGEX = /\\u0020+$/;\n\n/**\n * @internal\n */\nexport function normalizeAllSegments(paragraph: ReadonlyContentModelParagraph) {\n    const context = resetNormalizeSegmentContext();\n\n    paragraph.segments.forEach(segment => {\n        normalizeSegment(paragraph, segment, context);\n    });\n\n    normalizeTextSegments(paragraph, context.textSegments, context.lastInlineSegment);\n    normalizeLastTextSegment(paragraph, context.lastTextSegment, context.lastInlineSegment);\n}\n\n/**\n * Normalize a given segment, make sure its spaces are correctly represented by space and non-break space\n * @param segment The segment to normalize\n * @param ignoreTrailingSpaces Whether we should ignore the trailing space of the text segment @default false\n */\nexport function normalizeSingleSegment(\n    paragraph: ReadonlyContentModelParagraph,\n    segment: ReadonlyContentModelSegment,\n    ignoreTrailingSpaces: boolean = false\n) {\n    const context = resetNormalizeSegmentContext();\n\n    context.ignoreTrailingSpaces = ignoreTrailingSpaces;\n    normalizeSegment(paragraph, segment, context);\n}\n\n/**\n * @internal Export for test only\n */\nexport interface NormalizeSegmentContext {\n    textSegments: ReadonlyContentModelText[];\n    ignoreLeadingSpaces: boolean;\n    ignoreTrailingSpaces: boolean;\n    lastTextSegment: ReadonlyContentModelText | undefined;\n    lastInlineSegment: ReadonlyContentModelSegment | undefined;\n}\n\n/**\n * @internal Export for test only\n */\nexport function createNormalizeSegmentContext(): NormalizeSegmentContext {\n    return resetNormalizeSegmentContext();\n}\n\nfunction resetNormalizeSegmentContext(\n    context?: Partial<NormalizeSegmentContext>\n): NormalizeSegmentContext {\n    return Object.assign(context ?? {}, {\n        textSegments: [],\n        ignoreLeadingSpaces: true,\n        ignoreTrailingSpaces: true,\n        lastInlineSegment: undefined,\n        lastTextSegment: undefined,\n    });\n}\n\n/**\n * @internal Export for test only\n */\nexport function normalizeSegment(\n    paragraph: ReadonlyContentModelParagraph,\n    segment: ReadonlyContentModelSegment,\n    context: NormalizeSegmentContext\n) {\n    switch (segment.segmentType) {\n        case 'Br':\n            normalizeTextSegments(paragraph, context.textSegments, context.lastInlineSegment);\n            normalizeLastTextSegment(paragraph, context.lastTextSegment, context.lastInlineSegment);\n\n            // Line ends, reset all states\n            resetNormalizeSegmentContext(context);\n            break;\n\n        case 'Entity':\n        case 'General':\n        case 'Image':\n            // Here \"inline segment\" means a segment showing some content inline such as text, image, or other inline HTML elements\n            // BR will end current line, so it is not treated as \"inline\" here.\n            // We will do some normalization to the trailing spaces for non-inline-segments\n            context.lastInlineSegment = segment;\n            context.ignoreLeadingSpaces = false;\n            break;\n\n        case 'Text':\n            context.textSegments.push(segment);\n            context.lastInlineSegment = segment;\n            context.lastTextSegment = segment;\n\n            const first = segment.text.substring(0, 1);\n            const last = segment.text.substr(-1);\n\n            if (!hasSpacesOnly(segment.text)) {\n                if (first == SPACE) {\n                    // 1. Multiple leading space => single &nbsp; or empty (depends on if previous segment ends with space)\n                    mutateSegment(paragraph, segment, textSegment => {\n                        textSegment.text = textSegment.text.replace(\n                            LEADING_SPACE_REGEX,\n                            context.ignoreLeadingSpaces ? '' : NONE_BREAK_SPACE\n                        );\n                    });\n                }\n\n                if (last == SPACE) {\n                    // 2. Multiple trailing space => single space\n                    mutateSegment(paragraph, segment, textSegment => {\n                        textSegment.text = textSegment.text.replace(\n                            TRAILING_SPACE_REGEX,\n                            context.ignoreTrailingSpaces ? SPACE : NONE_BREAK_SPACE\n                        );\n                    });\n                }\n            }\n\n            context.ignoreLeadingSpaces = last == SPACE;\n\n            break;\n    }\n}\n\nfunction normalizeTextSegments(\n    paragraph: ReadonlyContentModelParagraph,\n    segments: ReadonlyContentModelText[],\n    lastInlineSegment: ReadonlyContentModelSegment | undefined\n) {\n    segments.forEach(segment => {\n        // 3. Segment ends with &nbsp; replace it with space if the previous char is not space so that next segment can wrap\n        // Only do this for segments that is not the last one since the last space will be removed in step 4\n        if (segment != lastInlineSegment) {\n            const text = segment.text;\n\n            if (\n                text.substr(-1) == NONE_BREAK_SPACE &&\n                text.length > 1 &&\n                text.substr(-2, 1) != SPACE\n            ) {\n                mutateSegment(paragraph, segment, textSegment => {\n                    textSegment.text = text.substring(0, text.length - 1) + SPACE;\n                });\n            }\n        }\n    });\n}\n\nfunction normalizeLastTextSegment(\n    paragraph: ReadonlyContentModelParagraph,\n    segment: ReadonlyContentModelText | undefined,\n    lastInlineSegment: ReadonlyContentModelSegment | undefined\n) {\n    if (segment && segment == lastInlineSegment && segment?.text.substr(-1) == SPACE) {\n        // 4. last text segment of the paragraph, remove trailing space\n        mutateSegment(paragraph, segment, textSegment => {\n            textSegment.text = textSegment.text.replace(TRAILING_SPACE_REGEX, '');\n        });\n    }\n}\n","import { createContentModelDocument } from '../creators/createContentModelDocument';\nimport { createText } from '../creators/createText';\nimport { ensureParagraph } from './ensureParagraph';\nimport { createModelToDomContextWithConfig } from '../../modelToDom/context/createModelToDomContext';\nimport { createDomToModelContextWithConfig } from '../../domToModel/context/createDomToModelContext';\nimport type {\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    EditorEnvironment,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Some format values can be changed when apply to DOM, such as font family.\n * This function will normalize the format and return the same string after DOM modification.\n * @param format The format to be normalized\n * @return Normalized format\n */\nexport function normalizeSegmentFormat(\n    format: ContentModelSegmentFormat,\n    environment: EditorEnvironment\n): ContentModelSegmentFormat {\n    const span = document.createElement('span');\n    const segment = createText('text', format);\n\n    const domToModelContext: DomToModelContext = createDomToModelContextWithConfig(\n        environment.domToModelSettings.calculated\n    );\n    const modelToDomContext: ModelToDomContext = createModelToDomContextWithConfig(\n        environment.modelToDomSettings.calculated\n    );\n    const model = createContentModelDocument();\n\n    modelToDomContext.modelHandlers.segment(\n        span.ownerDocument,\n        span,\n        segment,\n        modelToDomContext,\n        []\n    );\n\n    domToModelContext.elementProcessors.element(model, span, domToModelContext);\n\n    const paragraph = ensureParagraph(model);\n\n    return paragraph.segments[0]?.format ?? format;\n}\n","import { copyFormat } from '../../modelApi/block/copyFormat';\nimport { mutateBlock } from './mutate';\nimport { setParagraphNotImplicit } from '../block/setParagraphNotImplicit';\nimport type {\n    ContentModelBlockFormat,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n} from 'roosterjs-content-model-types';\n\n/**\n * Unwrap a given block group, move its child blocks to be under its parent group\n * @param parent Parent block group of the unwrapping group\n * @param groupToUnwrap  The block group to unwrap\n */\nexport function unwrapBlock(\n    parent: ReadonlyContentModelBlockGroup | null,\n    groupToUnwrap: ReadonlyContentModelBlockGroup & ReadonlyContentModelBlock,\n    formatsToKeep?: (keyof ContentModelBlockFormat)[]\n) {\n    const index = parent?.blocks.indexOf(groupToUnwrap) ?? -1;\n\n    if (index >= 0) {\n        groupToUnwrap.blocks.forEach(setParagraphNotImplicit);\n\n        if (parent) {\n            mutateBlock(parent)?.blocks.splice(\n                index,\n                1,\n                ...groupToUnwrap.blocks.map(x => {\n                    const mutableBlock = mutateBlock(x);\n\n                    if (formatsToKeep) {\n                        copyFormat<ContentModelBlockFormat>(\n                            mutableBlock.format,\n                            groupToUnwrap.format,\n                            formatsToKeep\n                        );\n                    }\n\n                    return mutableBlock;\n                })\n            );\n        }\n    }\n}\n","import type { ContentModelBr, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelBr model\n * @param format @optional The format of this model\n */\nexport function createBr(format?: Readonly<ContentModelSegmentFormat>): ContentModelBr {\n    return {\n        segmentType: 'Br',\n        format: { ...format },\n    };\n}\n","import type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelDocument model\n * @param defaultFormat @optional Default format of this model\n */\nexport function createContentModelDocument(\n    defaultFormat?: Readonly<ContentModelSegmentFormat>\n): ContentModelDocument {\n    const result: ContentModelDocument = {\n        blockGroupType: 'Document',\n        blocks: [],\n    };\n\n    if (defaultFormat) {\n        result.format = defaultFormat;\n    }\n\n    return result;\n}\n","import type { ContentModelBlockFormat, ContentModelDivider } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelDivider model\n * @param tagName Tag name of this divider. Currently only hr and div are supported\n * @param format @optional The format of this model\n */\nexport function createDivider(\n    tagName: 'hr' | 'div',\n    format?: Readonly<ContentModelBlockFormat>\n): ContentModelDivider {\n    return {\n        blockType: 'Divider',\n        tagName,\n        format: { ...format },\n    };\n}\n","import { createBr } from './createBr';\nimport { createContentModelDocument } from './createContentModelDocument';\nimport { createParagraph } from './createParagraph';\nimport { createSelectionMarker } from './createSelectionMarker';\nimport type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create an empty Content Model Document with initial empty line and insert point with default format\n * @param format @optional The default format to be applied to this Content Model\n */\nexport function createEmptyModel(\n    format?: Readonly<ContentModelSegmentFormat>\n): ContentModelDocument {\n    const model = createContentModelDocument(format);\n    const paragraph = createParagraph(false /*isImplicit*/, undefined /*blockFormat*/, format);\n\n    paragraph.segments.push(createSelectionMarker(format), createBr(format));\n    model.blocks.push(paragraph);\n\n    return model;\n}\n","import type { ContentModelEntity, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelEntity model\n * @param wrapper Wrapper element of this entity\n * @param isReadonly Whether this is a readonly entity @default true\n * @param segmentFormat @optional Segment format of this entity\n * @param type @optional Type of this entity\n * @param id @optional Id of this entity\n */\nexport function createEntity(\n    wrapper: HTMLElement,\n    isReadonly: boolean = true,\n    segmentFormat?: Readonly<ContentModelSegmentFormat>,\n    type?: string,\n    id?: string\n): ContentModelEntity {\n    return {\n        segmentType: 'Entity',\n        blockType: 'Entity',\n        format: { ...segmentFormat },\n        entityFormat: {\n            id,\n            entityType: type,\n            isReadonly,\n        },\n        wrapper,\n    };\n}\n","import type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelFormatContainer model\n * @param tag Tag name of this format container, in lower case\n * @param format @optional The format of this model\n */\nexport function createFormatContainer(\n    tag: Lowercase<string>,\n    format?: Readonly<ContentModelFormatContainerFormat>\n): ContentModelFormatContainer {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'FormatContainer',\n        tagName: tag,\n        blocks: [],\n        format: { ...format },\n    };\n}\n","import type { ContentModelGeneralBlock } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelGeneralBlock model\n * @param element Original element of this model\n */\nexport function createGeneralBlock(element: HTMLElement): ContentModelGeneralBlock {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'General',\n        element: element,\n        blocks: [],\n        format: {},\n    };\n}\n","import type {\n    ContentModelGeneralSegment,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelGeneralSegment model\n * @param element The original DOM element\n * @param format @optional The format of this model\n */\nexport function createGeneralSegment(\n    element: HTMLElement,\n    format?: Readonly<ContentModelSegmentFormat>\n): ContentModelGeneralSegment {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'General',\n        segmentType: 'General',\n        format: { ...format },\n        blocks: [],\n        element: element,\n    };\n}\n","import type { ContentModelImage, ContentModelImageFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelImage model\n * @param src Image source\n * @param format @optional The format of this model\n */\nexport function createImage(\n    src: string,\n    format?: Readonly<ContentModelImageFormat>\n): ContentModelImage {\n    return {\n        segmentType: 'Image',\n        src: src,\n        format: { ...format },\n        dataset: {},\n    };\n}\n","import { createListLevel } from './createListLevel';\nimport { createSelectionMarker } from './createSelectionMarker';\nimport type {\n    ContentModelListItem,\n    ContentModelSegmentFormat,\n    ReadonlyContentModelListLevel,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelListItem model\n * @param levels Existing list levels\n * @param format @optional The format of this model\n */\nexport function createListItem(\n    levels: ReadonlyArray<ReadonlyContentModelListLevel>,\n    format?: Readonly<ContentModelSegmentFormat>\n): ContentModelListItem {\n    const formatHolder = createSelectionMarker(format);\n\n    formatHolder.isSelected = false;\n\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'ListItem',\n        blocks: [],\n        levels: levels\n            ? levels.map(level => createListLevel(level.listType, level.format, level.dataset))\n            : [],\n        formatHolder,\n        format: {},\n    };\n}\n","import type {\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    ReadonlyDatasetFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelListLevel model\n * @param listType Tag name of the list, either OL or UL\n * @param format @optional The format of this model\n * @param dataset @optional The dataset of this model\n */\nexport function createListLevel(\n    listType: 'OL' | 'UL',\n    format?: Readonly<ContentModelListItemLevelFormat>,\n    dataset?: ReadonlyDatasetFormat\n): ContentModelListLevel {\n    return {\n        listType,\n        format: { ...format },\n        dataset: { ...dataset },\n    };\n}\n","import type {\n    ContentModelBlockFormat,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    ReadonlyContentModelParagraphDecorator,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelParagraph model\n * @param isImplicit @optional Whether this is an implicit paragraph. An implicit paragraph is a paragraph that will not render with DOM element container\n * @param blockFormat @optional Format of this paragraph\n * @param segmentFormat @optional Segment format applied to this block\n * @param decorator @optional Decorator of this paragraph\n */\nexport function createParagraph(\n    isImplicit?: boolean,\n    blockFormat?: Readonly<ContentModelBlockFormat>,\n    segmentFormat?: Readonly<ContentModelSegmentFormat>,\n    decorator?: ReadonlyContentModelParagraphDecorator\n): ContentModelParagraph {\n    const result: ContentModelParagraph = {\n        blockType: 'Paragraph',\n        segments: [],\n        format: { ...blockFormat },\n    };\n\n    if (segmentFormat && Object.keys(segmentFormat).length > 0) {\n        result.segmentFormat = { ...segmentFormat };\n    }\n\n    if (isImplicit) {\n        result.isImplicit = true;\n    }\n\n    if (decorator) {\n        result.decorator = {\n            tagName: decorator.tagName,\n            format: { ...decorator.format },\n        };\n    }\n\n    return result;\n}\n","import type {\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelParagraphDecorator model\n * @param tagName Tag name of this decorator\n * @param format @optional The format of this model\n */\nexport function createParagraphDecorator(\n    tagName: string,\n    format?: Readonly<ContentModelSegmentFormat>\n): ContentModelParagraphDecorator {\n    return {\n        tagName: tagName.toLocaleLowerCase(),\n        format: { ...format },\n    };\n}\n","import type {\n    ContentModelSegmentFormat,\n    ContentModelSelectionMarker,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelSelectionMarker model\n * @param format @optional The format of this model\n */\nexport function createSelectionMarker(\n    format?: Readonly<ContentModelSegmentFormat>\n): ContentModelSelectionMarker {\n    return {\n        segmentType: 'SelectionMarker',\n        isSelected: true,\n        format: { ...format },\n    };\n}\n","import { createTableRow } from './createTableRow';\nimport type {\n    ContentModelTable,\n    ContentModelTableFormat,\n    ContentModelTableRow,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTable model\n * @param rowCount Count of rows of this table\n * @param format @optional The format of this model\n */\nexport function createTable(\n    rowCount: number,\n    format?: Readonly<ContentModelTableFormat>\n): ContentModelTable {\n    const rows: ContentModelTableRow[] = [];\n\n    for (let i = 0; i < rowCount; i++) {\n        rows.push(createTableRow());\n    }\n\n    return {\n        blockType: 'Table',\n        rows,\n        format: { ...format },\n        widths: [],\n        dataset: {},\n    };\n}\n","import type {\n    ContentModelTableCell,\n    ContentModelTableCellFormat,\n    ReadonlyDatasetFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTableCell model\n * @param spanLeftOrColSpan @optional Whether this is a table cell merged with its left cell, or colspan number @default false\n * @param spanAboveOrRowSpan Whether this is a table cell merged with its upper cell, or rowSpan number @default false\n * @param isHeader @optional Whether this is a header cell @default false\n * @param format @optional The format of this model\n */\nexport function createTableCell(\n    spanLeftOrColSpan?: boolean | number,\n    spanAboveOrRowSpan?: boolean | number,\n    isHeader?: boolean,\n    format?: Readonly<ContentModelTableCellFormat>,\n    dataset?: ReadonlyDatasetFormat\n): ContentModelTableCell {\n    const spanLeft =\n        typeof spanLeftOrColSpan === 'number' ? spanLeftOrColSpan > 1 : !!spanLeftOrColSpan;\n    const spanAbove =\n        typeof spanAboveOrRowSpan === 'number' ? spanAboveOrRowSpan > 1 : !!spanAboveOrRowSpan;\n    return {\n        blockGroupType: 'TableCell',\n        blocks: [],\n        format: { ...format },\n        spanLeft,\n        spanAbove,\n        isHeader: !!isHeader,\n        dataset: { ...dataset },\n    };\n}\n","import type { ContentModelBlockFormat, ContentModelTableRow } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTableRow model\n * @param format @optional The format of this model\n */\nexport function createTableRow(\n    format?: Readonly<ContentModelBlockFormat>,\n    height: number = 0\n): ContentModelTableRow {\n    return {\n        height: height,\n        format: { ...format },\n        cells: [],\n    };\n}\n","import { addCode, addLink } from '../common/addDecorators';\nimport type {\n    ContentModelSegmentFormat,\n    ContentModelText,\n    ReadonlyContentModelCode,\n    ReadonlyContentModelLink,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelText model\n * @param text Text of this model\n * @param format @optional The format of this model\n * @param link @optional The link decorator\n * @param code @option The code decorator\n */\nexport function createText(\n    text: string,\n    format?: Readonly<ContentModelSegmentFormat>,\n    link?: ReadonlyContentModelLink,\n    code?: ReadonlyContentModelCode\n): ContentModelText {\n    const result: ContentModelText = {\n        segmentType: 'Text',\n        text: text,\n        format: { ...format },\n    };\n\n    if (link) {\n        addLink(result, link);\n    }\n\n    if (code) {\n        addCode(result, code);\n    }\n\n    return result;\n}\n","import { BorderKeys } from '../../formatHandlers/common/borderFormatHandler';\nimport { combineBorderValue, extractBorderValues } from '../../domUtils/style/borderValues';\nimport { mutateBlock } from '../common/mutate';\nimport { setTableCellBackgroundColor } from './setTableCellBackgroundColor';\nimport { TableBorderFormat } from '../../constants/TableBorderFormat';\nimport { updateTableCellMetadata } from '../metadata/updateTableCellMetadata';\nimport { updateTableMetadata } from '../metadata/updateTableMetadata';\nimport type {\n    BorderFormat,\n    ReadonlyContentModelTable,\n    ShallowMutableContentModelTableRow,\n    TableMetadataFormat,\n} from 'roosterjs-content-model-types';\n\nconst DEFAULT_FORMAT: Required<TableMetadataFormat> = {\n    topBorderColor: '#ABABAB',\n    bottomBorderColor: '#ABABAB',\n    verticalBorderColor: '#ABABAB',\n    hasHeaderRow: false,\n    hasFirstColumn: false,\n    hasBandedRows: false,\n    hasBandedColumns: false,\n    bgColorEven: null,\n    bgColorOdd: '#ABABAB20',\n    headerRowColor: '#ABABAB',\n    tableBorderFormat: TableBorderFormat.Default,\n    verticalAlign: null,\n};\n\ntype MetaOverrides = {\n    bgColorOverrides: boolean[][];\n    vAlignOverrides: boolean[][];\n    borderOverrides: boolean[][];\n};\n\n/**\n * Apply table format from table metadata and the passed in new format\n * @param table The table to apply format to\n * @param newFormat @optional New format to apply. When passed, this value will be merged into existing metadata format and default format\n * @param keepCellShade @optional When pass true, table cells with customized shade color will not be overwritten. @default false\n */\nexport function applyTableFormat(\n    table: ReadonlyContentModelTable,\n    newFormat?: TableMetadataFormat,\n    keepCellShade?: boolean\n) {\n    const mutableTable = mutateBlock(table);\n    const { rows } = mutableTable;\n\n    updateTableMetadata(mutableTable, format => {\n        const effectiveMetadata = {\n            ...DEFAULT_FORMAT,\n            ...format,\n            ...newFormat,\n        };\n\n        const metaOverrides: MetaOverrides = updateOverrides(rows, !keepCellShade);\n\n        formatCells(rows, effectiveMetadata, metaOverrides);\n        setFirstColumnFormatBorders(rows, effectiveMetadata);\n        setHeaderRowFormat(rows, effectiveMetadata, metaOverrides);\n\n        return effectiveMetadata;\n    });\n}\n\nfunction updateOverrides(\n    rows: ShallowMutableContentModelTableRow[],\n    removeCellShade: boolean\n): MetaOverrides {\n    const overrides: MetaOverrides = {\n        bgColorOverrides: [],\n        vAlignOverrides: [],\n        borderOverrides: [],\n    };\n\n    rows.forEach(row => {\n        const bgColorOverrides: boolean[] = [];\n        const vAlignOverrides: boolean[] = [];\n        const borderOverrides: boolean[] = [];\n\n        overrides.bgColorOverrides.push(bgColorOverrides);\n        overrides.vAlignOverrides.push(vAlignOverrides);\n        overrides.borderOverrides.push(borderOverrides);\n\n        row.cells.forEach(cell => {\n            updateTableCellMetadata(mutateBlock(cell), metadata => {\n                if (metadata && removeCellShade) {\n                    bgColorOverrides.push(false);\n                    delete metadata.bgColorOverride;\n                } else {\n                    bgColorOverrides.push(!!metadata?.bgColorOverride);\n                }\n                vAlignOverrides.push(!!metadata?.vAlignOverride);\n                borderOverrides.push(!!metadata?.borderOverride);\n\n                return metadata;\n            });\n        });\n    });\n\n    return overrides;\n}\n\ntype ShouldUseTransparentBorder = (indexProp: {\n    firstRow: boolean;\n    lastRow: boolean;\n    firstColumn: boolean;\n    lastColumn: boolean;\n}) => [boolean, boolean, boolean, boolean];\n\nconst BorderFormatters: Record<number, ShouldUseTransparentBorder | undefined> = {\n    [TableBorderFormat.Default]: _ => [false, false, false, false],\n    [TableBorderFormat.ListWithSideBorders]: ({ lastColumn, firstColumn }) => [\n        false,\n        !lastColumn,\n        false,\n        !firstColumn,\n    ],\n    [TableBorderFormat.FirstColumnHeaderExternal]: ({\n        firstColumn,\n        firstRow,\n        lastColumn,\n        lastRow,\n    }) => [\n        !firstRow,\n        (!lastColumn && !firstColumn) || (firstColumn && firstRow),\n        !lastRow && !firstRow,\n        !firstColumn,\n    ],\n    [TableBorderFormat.NoHeaderBorders]: ({ firstRow, firstColumn, lastColumn }) => [\n        firstRow,\n        firstRow || lastColumn,\n        false,\n        firstRow || firstColumn,\n    ],\n    [TableBorderFormat.NoSideBorders]: ({ firstColumn, lastColumn }) => [\n        false,\n        lastColumn,\n        false,\n        firstColumn,\n    ],\n    [TableBorderFormat.EspecialType1]: ({ firstRow, firstColumn }) => [\n        firstColumn && !firstRow,\n        firstRow,\n        firstColumn && !firstRow,\n        firstRow && !firstColumn,\n    ],\n    [TableBorderFormat.EspecialType2]: ({ firstRow, firstColumn }) => [\n        !firstRow,\n        firstRow || !firstColumn,\n        !firstRow,\n        !firstColumn,\n    ],\n    [TableBorderFormat.EspecialType3]: ({ firstColumn, firstRow }) => [\n        true,\n        firstRow || !firstColumn,\n        !firstRow,\n        true,\n    ],\n    [TableBorderFormat.Clear]: () => [true, true, true, true],\n};\n\n/*\n * Apply vertical align, borders, and background color to all cells in the table\n */\nfunction formatCells(\n    rows: ShallowMutableContentModelTableRow[],\n    format: TableMetadataFormat,\n    metaOverrides: MetaOverrides\n) {\n    const { hasBandedRows, hasBandedColumns, bgColorOdd, bgColorEven, hasFirstColumn } = format;\n\n    rows.forEach((row, rowIndex) => {\n        row.cells.forEach((readonlyCell, colIndex) => {\n            const cell = mutateBlock(readonlyCell);\n\n            // Format Borders\n            if (\n                !metaOverrides.borderOverrides[rowIndex][colIndex] &&\n                typeof format.tableBorderFormat == 'number'\n            ) {\n                const transparentBorderMatrix = BorderFormatters[format.tableBorderFormat]?.({\n                    firstRow: rowIndex === 0,\n                    lastRow: rowIndex === rows.length - 1,\n                    firstColumn: colIndex === 0,\n                    lastColumn: colIndex === row.cells.length - 1,\n                });\n\n                const formatColor = [\n                    format.topBorderColor,\n                    format.verticalBorderColor,\n                    format.bottomBorderColor,\n                    format.verticalBorderColor,\n                ];\n\n                transparentBorderMatrix?.forEach((alwaysUseTransparent, i) => {\n                    const borderColor = (!alwaysUseTransparent && formatColor[i]) || '';\n\n                    cell.format[BorderKeys[i]] = combineBorderValue({\n                        style: getBorderStyleFromColor(borderColor),\n                        width: '1px',\n                        color: borderColor,\n                    });\n                });\n            }\n\n            // Format Background Color\n            if (!metaOverrides.bgColorOverrides[rowIndex][colIndex]) {\n                let color: string | null | undefined;\n                if (hasFirstColumn && colIndex == 0 && rowIndex > 0) {\n                    color = null;\n                } else {\n                    color =\n                        hasBandedRows || hasBandedColumns\n                            ? (hasBandedColumns && colIndex % 2 != 0) ||\n                              (hasBandedRows && rowIndex % 2 != 0)\n                                ? bgColorOdd\n                                : bgColorEven\n                            : bgColorEven; /* bgColorEven is the default color */\n                }\n                setTableCellBackgroundColor(\n                    cell,\n                    color,\n                    false /*isColorOverride*/,\n                    true /*applyToSegments*/\n                );\n            }\n\n            // Format Vertical Align\n            if (format.verticalAlign && !metaOverrides.vAlignOverrides[rowIndex][colIndex]) {\n                cell.format.verticalAlign = format.verticalAlign;\n            }\n\n            // Format Header\n            cell.isHeader = false;\n        });\n    });\n}\n\n/**\n * Set the first column format borders for the table as well as header property\n * @param rows The rows of the table\n * @param format The table metadata format\n */\nexport function setFirstColumnFormatBorders(\n    rows: ShallowMutableContentModelTableRow[],\n    format: Partial<TableMetadataFormat>\n) {\n    // Exit early hasFirstColumn is not set\n    if (!format.hasFirstColumn) {\n        return;\n    }\n\n    rows.forEach((row, rowIndex) => {\n        row.cells.forEach((readonlyCell, cellIndex) => {\n            const cell = mutateBlock(readonlyCell);\n\n            if (cellIndex === 0) {\n                cell.isHeader = true;\n\n                switch (rowIndex) {\n                    case 0:\n                        cell.isHeader = !!format.hasHeaderRow;\n\n                        if (cell.isHeader) {\n                            cell.format.fontWeight = 'bold';\n                        }\n                        break;\n                    case rows.length - 1:\n                        setBorderColor(cell.format, 'borderTop');\n                        break;\n                    case 1:\n                        setBorderColor(cell.format, 'borderBottom');\n                        break;\n                    default:\n                        setBorderColor(cell.format, 'borderTop');\n                        setBorderColor(cell.format, 'borderBottom');\n                        break;\n                }\n            }\n        });\n    });\n}\n\nfunction setHeaderRowFormat(\n    rows: ShallowMutableContentModelTableRow[],\n    format: TableMetadataFormat,\n    metaOverrides: MetaOverrides\n) {\n    // Exit early if hasHeaderRow is not set\n    if (!format.hasHeaderRow) {\n        return;\n    }\n\n    const rowIndex = 0;\n\n    rows[rowIndex]?.cells.forEach((readonlyCell, cellIndex) => {\n        const cell = mutateBlock(readonlyCell);\n\n        cell.isHeader = true;\n        cell.format.fontWeight = 'bold';\n\n        if (format.headerRowColor) {\n            if (!metaOverrides.bgColorOverrides[rowIndex][cellIndex]) {\n                setTableCellBackgroundColor(\n                    cell,\n                    format.headerRowColor,\n                    false /*isColorOverride*/,\n                    true /*applyToSegments*/\n                );\n            }\n\n            setBorderColor(cell.format, 'borderTop', format.headerRowColor);\n            setBorderColor(cell.format, 'borderRight', format.headerRowColor);\n            setBorderColor(cell.format, 'borderLeft', format.headerRowColor);\n        }\n    });\n}\n\n/**\n * @param format The cell format to set the border color\n * @param key The border key to set the color\n * @param value The color to set. If not given, it removes the color and sets the style to transparent\n */\nfunction setBorderColor(format: BorderFormat, key: keyof BorderFormat, value?: string) {\n    const border = extractBorderValues(format[key]);\n    border.color = value || '';\n    border.style = getBorderStyleFromColor(border.color);\n    format[key] = combineBorderValue(border);\n}\n\nfunction getBorderStyleFromColor(color?: string): string {\n    return !color || color == 'transparent' ? 'none' : 'solid';\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockBase,\n    ContentModelBlockGroupBase,\n    ContentModelBlockGroupType,\n    ContentModelBlockType,\n    ContentModelDivider,\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelFormatBase,\n    ContentModelFormatContainer,\n    ContentModelGeneralBlock,\n    ContentModelImage,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentBase,\n    ContentModelSegmentType,\n    ContentModelSelectionMarker,\n    ContentModelTable,\n    ContentModelTableCell,\n    ContentModelWithDataset,\n    ContentModelWithFormat,\n    ContentModelGeneralSegment,\n    ContentModelText,\n    ContentModelTableRow,\n    ContentModelListLevel,\n    CloneModelOptions,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelBlockGroupBase,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelFormatContainer,\n    ReadonlyContentModelBlockBase,\n    ReadonlyContentModelGeneralBlock,\n    ReadonlyContentModelListItem,\n    ReadonlyContentModelSelectionMarker,\n    ReadonlyContentModelSegmentBase,\n    ReadonlyContentModelWithDataset,\n    ReadonlyContentModelDivider,\n    ReadonlyContentModelListLevel,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelTable,\n    ReadonlyContentModelTableRow,\n    ReadonlyContentModelTableCell,\n    ReadonlyContentModelGeneralSegment,\n    ReadonlyContentModelImage,\n    ReadonlyContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * Clone a content model\n * @param model The content model to clone\n * @param options @optional Options to specify customize the clone behavior\n */\nexport function cloneModel(\n    model: ReadonlyContentModelDocument,\n    options?: CloneModelOptions\n): ContentModelDocument {\n    const newModel: ContentModelDocument = cloneBlockGroupBase(model, options || {});\n\n    if (model.format) {\n        newModel.format = Object.assign({}, model.format);\n    }\n\n    return newModel;\n}\n\nfunction cloneBlock(\n    block: ReadonlyContentModelBlock,\n    options: CloneModelOptions\n): ContentModelBlock {\n    switch (block.blockType) {\n        case 'BlockGroup':\n            switch (block.blockGroupType) {\n                case 'FormatContainer':\n                    return cloneFormatContainer(block, options);\n                case 'General':\n                    return cloneGeneralBlock(block, options);\n                case 'ListItem':\n                    return cloneListItem(block, options);\n            }\n            break;\n        case 'Divider':\n            return cloneDivider(block, options);\n        case 'Entity':\n            return cloneEntity(block, options);\n        case 'Paragraph':\n            return cloneParagraph(block, options);\n        case 'Table':\n            return cloneTable(block, options);\n    }\n}\n\nfunction cloneSegment(\n    segment: ReadonlyContentModelSegment,\n    options: CloneModelOptions\n): ContentModelSegment {\n    switch (segment.segmentType) {\n        case 'Br':\n            return cloneSegmentBase(segment);\n        case 'Entity':\n            return cloneEntity(segment, options);\n        case 'General':\n            return cloneGeneralSegment(segment, options);\n        case 'Image':\n            return cloneImage(segment);\n        case 'SelectionMarker':\n            return cloneSelectionMarker(segment);\n        case 'Text':\n            return cloneText(segment);\n    }\n}\n\nfunction cloneModelWithFormat<T extends ContentModelFormatBase>(\n    model: ContentModelWithFormat<T>\n): ContentModelWithFormat<T> {\n    return {\n        format: Object.assign({}, model.format),\n    };\n}\n\nfunction cloneModelWithDataset<T>(\n    model: ReadonlyContentModelWithDataset<T>\n): ContentModelWithDataset<T> {\n    return {\n        dataset: Object.assign({}, model.dataset),\n    };\n}\n\nfunction cloneBlockBase<T extends ContentModelBlockType>(\n    block: ReadonlyContentModelBlockBase<T>\n): ContentModelBlockBase<T> {\n    const { blockType } = block;\n\n    return Object.assign(\n        {\n            blockType,\n        },\n        cloneModelWithFormat(block)\n    );\n}\n\nfunction cloneBlockGroupBase<T extends ContentModelBlockGroupType>(\n    group: ReadonlyContentModelBlockGroupBase<T>,\n    options: CloneModelOptions\n): ContentModelBlockGroupBase<T> {\n    const { blockGroupType, blocks } = group;\n\n    return {\n        blockGroupType: blockGroupType,\n        blocks: blocks.map(block => cloneBlock(block, options)),\n    };\n}\n\nfunction cloneSegmentBase<T extends ContentModelSegmentType>(\n    segment: ReadonlyContentModelSegmentBase<T>\n): ContentModelSegmentBase<T> {\n    const { segmentType, isSelected, code, link } = segment;\n\n    const newSegment: ContentModelSegmentBase<T> = Object.assign(\n        {\n            segmentType,\n            isSelected,\n        },\n        cloneModelWithFormat(segment)\n    );\n\n    if (code) {\n        newSegment.code = cloneModelWithFormat(code);\n    }\n    if (link) {\n        newSegment.link = Object.assign(cloneModelWithFormat(link), cloneModelWithDataset(link));\n    }\n\n    return newSegment;\n}\n\nfunction cloneEntity(entity: ContentModelEntity, options: CloneModelOptions): ContentModelEntity {\n    const { wrapper, entityFormat } = entity;\n\n    return Object.assign(\n        {\n            wrapper: handleCachedElement(wrapper, 'entity', options),\n            entityFormat: { ...entityFormat },\n        },\n        cloneBlockBase(entity),\n        cloneSegmentBase(entity)\n    );\n}\n\nfunction cloneParagraph(\n    paragraph: ReadonlyContentModelParagraph,\n    options: CloneModelOptions\n): ContentModelParagraph {\n    const { cachedElement, segments, isImplicit, decorator, segmentFormat } = paragraph;\n\n    const newParagraph: ContentModelParagraph = Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            isImplicit,\n            segments: segments.map(segment => cloneSegment(segment, options)),\n            segmentFormat: segmentFormat ? { ...segmentFormat } : undefined,\n        },\n        cloneBlockBase(paragraph),\n        cloneModelWithFormat(paragraph)\n    );\n\n    if (decorator) {\n        newParagraph.decorator = Object.assign(\n            {\n                tagName: decorator.tagName,\n            },\n            cloneModelWithFormat(decorator)\n        );\n    }\n\n    return newParagraph;\n}\n\nfunction cloneTable(\n    table: ReadonlyContentModelTable,\n    options: CloneModelOptions\n): ContentModelTable {\n    const { cachedElement, widths, rows } = table;\n\n    return Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            widths: Array.from(widths),\n            rows: rows.map(row => cloneTableRow(row, options)),\n        },\n        cloneBlockBase(table),\n        cloneModelWithDataset(table)\n    );\n}\n\nfunction cloneTableRow(\n    row: ReadonlyContentModelTableRow,\n    options: CloneModelOptions\n): ContentModelTableRow {\n    const { height, cells, cachedElement } = row;\n\n    return Object.assign(\n        {\n            height,\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            cells: cells.map(cell => cloneTableCell(cell, options)),\n        },\n        cloneModelWithFormat(row)\n    );\n}\n\nfunction cloneTableCell(\n    cell: ReadonlyContentModelTableCell,\n    options: CloneModelOptions\n): ContentModelTableCell {\n    const { cachedElement, isSelected, spanAbove, spanLeft, isHeader } = cell;\n\n    return Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            isSelected,\n            spanAbove,\n            spanLeft,\n            isHeader,\n        },\n        cloneBlockGroupBase(cell, options),\n        cloneModelWithFormat(cell),\n        cloneModelWithDataset(cell)\n    );\n}\n\nfunction cloneFormatContainer(\n    container: ReadonlyContentModelFormatContainer,\n    options: CloneModelOptions\n): ContentModelFormatContainer {\n    const { tagName, cachedElement } = container;\n    const newContainer: ContentModelFormatContainer = Object.assign(\n        { tagName, cachedElement: handleCachedElement(cachedElement, 'cache', options) },\n        cloneBlockBase(container),\n        cloneBlockGroupBase(container, options)\n    );\n\n    if (container.zeroFontSize) {\n        newContainer.zeroFontSize = true;\n    }\n\n    return newContainer;\n}\n\nfunction cloneListItem(\n    item: ReadonlyContentModelListItem,\n    options: CloneModelOptions\n): ContentModelListItem {\n    const { formatHolder, levels, cachedElement } = item;\n\n    return Object.assign(\n        {\n            formatHolder: cloneSelectionMarker(formatHolder),\n            levels: levels.map(cloneListLevel),\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n        },\n        cloneBlockBase(item),\n        cloneBlockGroupBase(item, options)\n    );\n}\n\nfunction cloneListLevel(level: ReadonlyContentModelListLevel): ContentModelListLevel {\n    const { listType } = level;\n\n    return Object.assign({ listType }, cloneModelWithFormat(level), cloneModelWithDataset(level));\n}\nfunction cloneDivider(\n    divider: ReadonlyContentModelDivider,\n    options: CloneModelOptions\n): ContentModelDivider {\n    const { tagName, isSelected, cachedElement } = divider;\n\n    return Object.assign(\n        {\n            isSelected,\n            tagName,\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n        },\n        cloneBlockBase(divider)\n    );\n}\n\nfunction cloneGeneralBlock(\n    general: ReadonlyContentModelGeneralBlock,\n    options: CloneModelOptions\n): ContentModelGeneralBlock {\n    const { element } = general;\n\n    return Object.assign(\n        {\n            element: handleCachedElement(element, 'general', options),\n        },\n        cloneBlockBase(general),\n        cloneBlockGroupBase(general, options)\n    );\n}\n\nfunction cloneSelectionMarker(\n    marker: ReadonlyContentModelSelectionMarker\n): ContentModelSelectionMarker {\n    return Object.assign({ isSelected: marker.isSelected }, cloneSegmentBase(marker));\n}\n\nfunction cloneImage(image: ReadonlyContentModelImage): ContentModelImage {\n    const { src, alt, title, isSelectedAsImageSelection } = image;\n\n    return Object.assign(\n        { src, alt, title, isSelectedAsImageSelection },\n        cloneSegmentBase(image),\n        cloneModelWithDataset(image)\n    );\n}\n\nfunction cloneGeneralSegment(\n    general: ReadonlyContentModelGeneralSegment,\n    options: CloneModelOptions\n): ContentModelGeneralSegment {\n    return Object.assign(cloneGeneralBlock(general, options), cloneSegmentBase(general));\n}\n\nfunction cloneText(textSegment: ReadonlyContentModelText): ContentModelText {\n    const { text } = textSegment;\n    return Object.assign({ text }, cloneSegmentBase(textSegment));\n}\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T,\n    type: 'general' | 'entity',\n    options: CloneModelOptions\n): T;\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T | undefined,\n    type: 'cache',\n    options: CloneModelOptions\n): T | undefined;\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T | undefined,\n    type: 'general' | 'entity' | 'cache',\n    options: CloneModelOptions\n): T | undefined {\n    const { includeCachedElement } = options;\n\n    if (!node) {\n        return undefined;\n    } else if (!includeCachedElement) {\n        return type == 'cache' ? undefined : (node.cloneNode(true /*deep*/) as T);\n    } else if (includeCachedElement === true) {\n        return node;\n    } else {\n        const result = includeCachedElement(node, type) as T | undefined;\n\n        if ((type == 'general' || type == 'entity') && !result) {\n            throw new Error('Entity and General Model must has wrapper element');\n        }\n\n        return result;\n    }\n}\n","import type {\n    EntityRemovalOperation,\n    FormatContentModelContext,\n    ReadonlyContentModelBlock,\n} from 'roosterjs-content-model-types';\n\n/**\n * Delete a content model block from current selection\n * @param blocks Array of the block to delete\n * @param blockToDelete The block to delete\n * @param replacement @optional If specified, use this block to replace the deleted block\n * @param context @optional Context object provided by formatContentModel API\n * @param direction @optional Whether this is deleting forward or backward. This is only used for deleting entity.\n * If not specified, only selected entity will be deleted\n */\nexport function deleteBlock(\n    blocks: ReadonlyContentModelBlock[],\n    blockToDelete: ReadonlyContentModelBlock,\n    replacement?: ReadonlyContentModelBlock,\n    context?: FormatContentModelContext,\n    direction?: 'forward' | 'backward'\n): boolean {\n    const index = blocks.indexOf(blockToDelete);\n\n    switch (blockToDelete.blockType) {\n        case 'Table':\n        case 'Divider':\n            replacement ? blocks.splice(index, 1, replacement) : blocks.splice(index, 1);\n            return true;\n\n        case 'Entity':\n            const operation: EntityRemovalOperation | undefined = blockToDelete.isSelected\n                ? 'overwrite'\n                : direction == 'forward'\n                ? 'removeFromStart'\n                : direction == 'backward'\n                ? 'removeFromEnd'\n                : undefined;\n\n            if (operation !== undefined) {\n                replacement ? blocks.splice(index, 1, replacement) : blocks.splice(index, 1);\n                context?.deletedEntities.push({\n                    entity: blockToDelete,\n                    operation,\n                });\n            }\n\n            return true;\n\n        case 'BlockGroup':\n            switch (blockToDelete.blockGroupType) {\n                case 'General':\n                    if (replacement) {\n                        blocks.splice(index, 1, replacement);\n                        return true;\n                    } else {\n                        // no op, let browser handle it\n                        return false;\n                    }\n\n                case 'ListItem':\n                case 'FormatContainer':\n                    blocks.splice(index, 1);\n                    return true;\n            }\n    }\n\n    return false;\n}\n","import { createBr } from '../creators/createBr';\nimport { createParagraph } from '../creators/createParagraph';\nimport { createSelectionMarker } from '../creators/createSelectionMarker';\nimport { deleteBlock } from './deleteBlock';\nimport { deleteSegment } from './deleteSegment';\nimport { getSegmentTextFormat } from './getSegmentTextFormat';\nimport { iterateSelections } from '../selection/iterateSelections';\nimport { mutateBlock, mutateSegments } from '../common/mutate';\nimport { setParagraphNotImplicit } from '../block/setParagraphNotImplicit';\nimport type {\n    ContentModelSelectionMarker,\n    DeleteSelectionContext,\n    FormatContentModelContext,\n    InsertPoint,\n    IterateSelectionsOption,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ReadonlyTableSelectionContext,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst DeleteSelectionIteratingOptions: IterateSelectionsOption = {\n    contentUnderSelectedTableCell: 'ignoreForTableOrCell', // When a table cell is selected, we replace all content for this cell, so no need to go into its content\n    contentUnderSelectedGeneralElement: 'generalElementOnly', // When a general element is selected, we replace the whole element so no need to go into its content\n    includeListFormatHolder: 'never',\n};\n\n/**\n * @internal\n * Iterate the model and find all selected content if any, delete them, and keep/create an insert point\n * at the first deleted position so that we know where to put cursor to after delete\n */\nexport function deleteExpandedSelection(\n    model: ReadonlyContentModelDocument,\n    formatContext?: FormatContentModelContext\n): DeleteSelectionContext {\n    const context: DeleteSelectionContext = {\n        deleteResult: 'notDeleted',\n        insertPoint: null,\n        formatContext,\n        undeletableSegments: [],\n    };\n\n    iterateSelections(\n        model,\n        (path, tableContext, readonlyBlock, readonlySegments) => {\n            // Set paragraph, format and index for default position where we will put cursor to.\n            // Later we can overwrite these info when process the selections\n            let paragraph: ShallowMutableContentModelParagraph = createParagraph(\n                true /*implicit*/,\n                undefined /*blockFormat*/,\n                model.format\n            );\n            let markerFormat = model.format;\n            let insertMarkerIndex = 0;\n\n            if (readonlySegments && readonlyBlock?.blockType == 'Paragraph') {\n                const [block, segments, indexes] = mutateSegments(readonlyBlock, readonlySegments);\n\n                // Delete segments inside a paragraph\n                if (segments[0]) {\n                    // Now that we have found a paragraph with selections, we can overwrite the default paragraph with this one\n                    // so we can put cursor here after delete\n                    paragraph = block;\n                    insertMarkerIndex = indexes[0];\n                    markerFormat = getSegmentTextFormat(segments[0], true /*includingBIU*/);\n\n                    const isFirstDeletingParagraph = !context.lastParagraph;\n\n                    context.lastParagraph = paragraph;\n                    context.lastTableContext = tableContext;\n\n                    segments.forEach((segment, i) => {\n                        if (\n                            i == 0 &&\n                            !context.insertPoint &&\n                            segment.segmentType == 'SelectionMarker'\n                        ) {\n                            // First time we hit a selection and it is a selection marker, just mark it and not need to delete\n                            // because this is possible a collapsed selection, then it will be handled later\n                            context.insertPoint = createInsertPoint(\n                                segment,\n                                block,\n                                path,\n                                tableContext\n                            );\n                        } else if (\n                            deleteSegment(\n                                block,\n                                segment,\n                                context.formatContext,\n                                undefined /*direction*/,\n                                isFirstDeletingParagraph ? undefined : context.undeletableSegments // For first paragraph we can keep undeletable segments so no need to merge it later\n                            )\n                        ) {\n                            context.deleteResult = 'range';\n                        }\n                    });\n\n                    // Since we are operating on this paragraph and it possible we delete everything from this paragraph,\n                    // Need to make it \"not implicit\" so that it will always have a container element, so that when we do normalization\n                    // of this paragraph, a BR can be added if need\n                    if (context.deleteResult == 'range') {\n                        setParagraphNotImplicit(block);\n                    }\n                }\n            } else if (readonlyBlock) {\n                // Delete a whole block (divider, table, ...)\n                const blocks = mutateBlock(path[0]).blocks;\n\n                if (deleteBlock(blocks, readonlyBlock, paragraph, context.formatContext)) {\n                    context.deleteResult = 'range';\n                }\n            } else if (tableContext) {\n                // Delete a whole table cell\n                const { table, colIndex, rowIndex } = tableContext;\n                const mutableTable = mutateBlock(table);\n                const row = mutableTable.rows[rowIndex];\n                const cell = mutateBlock(row.cells[colIndex]);\n\n                path = [cell, ...path];\n                paragraph.segments.push(createBr(model.format));\n                cell.blocks = [paragraph];\n\n                context.deleteResult = 'range';\n            }\n\n            if (!context.insertPoint) {\n                // If we have not got a insert point after delete and we have a paragraph to put an insert point in, create insert point now\n                const marker = createSelectionMarker(markerFormat);\n\n                setParagraphNotImplicit(paragraph);\n                paragraph.segments.splice(insertMarkerIndex, 0, marker);\n                context.insertPoint = createInsertPoint(marker, paragraph, path, tableContext);\n            }\n        },\n        DeleteSelectionIteratingOptions\n    );\n\n    return context;\n}\n\nfunction createInsertPoint(\n    marker: ContentModelSelectionMarker,\n    paragraph: ShallowMutableContentModelParagraph,\n    path: ReadonlyContentModelBlockGroup[],\n    tableContext: ReadonlyTableSelectionContext | undefined\n): InsertPoint {\n    return {\n        marker,\n        paragraph,\n        path,\n        tableContext,\n    };\n}\n","import { deleteSingleChar } from './deleteSingleChar';\nimport { isWhiteSpacePreserved } from '../../domUtils/isWhiteSpacePreserved';\nimport { mutateSegment } from '../common/mutate';\nimport { normalizeSingleSegment } from '../common/normalizeSegment';\nimport { normalizeText } from '../../domUtils/stringUtil';\nimport type {\n    EntityRemovalOperation,\n    FormatContentModelContext,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n    ShallowMutableContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Delete a content model segment from current selection\n * @param readonlyParagraph Parent paragraph of the segment to delete\n * @param readonlySegmentToDelete The segment to delete\n * @param context @optional Context object provided by formatContentModel API\n * @param direction @optional Whether this is deleting forward or backward. This is only used for deleting entity.\n * @param undeletableSegments @optional When passed, if this segment is undeletable, it will be added to this array instead of being deleted.\n * If not specified, only selected entity will be deleted\n */\nexport function deleteSegment(\n    readonlyParagraph: ReadonlyContentModelParagraph,\n    readonlySegmentToDelete: ReadonlyContentModelSegment,\n    context?: FormatContentModelContext,\n    direction?: 'forward' | 'backward',\n    undeletableSegments?: ShallowMutableContentModelSegment[]\n): boolean {\n    const [paragraph, segmentToDelete, index] = mutateSegment(\n        readonlyParagraph,\n        readonlySegmentToDelete\n    );\n    const segments = paragraph.segments;\n    const preserveWhiteSpace = isWhiteSpacePreserved(paragraph.format.whiteSpace);\n    const isForward = direction == 'forward';\n    const isBackward = direction == 'backward';\n\n    if (!preserveWhiteSpace) {\n        normalizePreviousSegment(paragraph, segments, index);\n    }\n\n    switch (segmentToDelete?.segmentType) {\n        case 'Br':\n        case 'Image':\n        case 'SelectionMarker':\n            removeSegment(segments, index, direction, undeletableSegments);\n            return true;\n\n        case 'Entity':\n            const operation: EntityRemovalOperation | undefined = segmentToDelete.isSelected\n                ? 'overwrite'\n                : isForward\n                ? 'removeFromStart'\n                : isBackward\n                ? 'removeFromEnd'\n                : undefined;\n            if (operation !== undefined) {\n                removeSegment(segments, index, direction, undeletableSegments);\n                context?.deletedEntities.push({\n                    entity: segmentToDelete,\n                    operation,\n                });\n            }\n\n            return true;\n\n        case 'Text':\n            if (segmentToDelete.text.length == 0 || segmentToDelete.isSelected) {\n                segmentToDelete.text = '';\n                removeSegment(segments, index, direction, undeletableSegments);\n            } else if (direction) {\n                let text = segmentToDelete.text;\n\n                text = deleteSingleChar(text, isForward); //  isForward ? text.substring(1) : text.substring(0, text.length - 1);\n\n                if (!preserveWhiteSpace) {\n                    text = normalizeText(text, isForward);\n                }\n\n                segmentToDelete.text = text;\n\n                if (text == '') {\n                    removeSegment(segments, index, direction, undeletableSegments);\n                }\n            }\n\n            return true;\n\n        case 'General':\n            if (segmentToDelete.isSelected) {\n                removeSegment(segments, index, direction, undeletableSegments);\n                return true;\n            } else {\n                return false;\n            }\n\n        default:\n            return false;\n    }\n}\n\nfunction removeSegment(\n    segments: ShallowMutableContentModelSegment[],\n    index: number,\n    direction?: 'forward' | 'backward',\n    undeletableSegments?: ShallowMutableContentModelSegment[]\n) {\n    const segment = segments.splice(index, 1)[0];\n\n    if (segment.link?.format.undeletable) {\n        // Segment is not deletable, but at least we should unselect it\n        delete segment.isSelected;\n\n        if (undeletableSegments) {\n            // For undeletable segments, if an undeletableSegments array is passed in,\n            // put it into this array after we delete it, so caller knows that we have deleted some undeletable segments\n            // and do proper handling\n            undeletableSegments.push(segment);\n        } else {\n            // Otherwise, we need to reinsert it back to the segments array to keep the model consistent.\n            // We need to find the right place to insert it back based on the direction of deletion\n            let insertIndex: number;\n\n            switch (direction) {\n                case 'forward':\n                    insertIndex =\n                        index > 0 && segments[index - 1].segmentType == 'SelectionMarker'\n                            ? index - 1\n                            : index;\n                    break;\n\n                case 'backward':\n                    insertIndex =\n                        index < segments.length && segments[index].segmentType == 'SelectionMarker'\n                            ? index + 1\n                            : index;\n                    break;\n\n                default:\n                    insertIndex = index;\n            }\n\n            segments.splice(insertIndex, 0, segment);\n        }\n    }\n}\n\nfunction normalizePreviousSegment(\n    paragraph: ReadonlyContentModelParagraph,\n    segments: ReadonlyArray<ReadonlyContentModelSegment>,\n    currentIndex: number\n) {\n    let index = currentIndex - 1;\n\n    while (segments[index]?.segmentType == 'SelectionMarker') {\n        index--;\n    }\n\n    const segment = segments[index];\n\n    if (segment) {\n        normalizeSingleSegment(paragraph, segment);\n    }\n}\n","import { deleteExpandedSelection } from './deleteExpandedSelection';\nimport { mutateBlock } from '../common/mutate';\nimport { runEditSteps } from './runEditSteps';\nimport type {\n    DeleteSelectionContext,\n    DeleteSelectionResult,\n    DeleteSelectionStep,\n    FormatContentModelContext,\n    ReadonlyContentModelDocument,\n} from 'roosterjs-content-model-types';\n\n/**\n * Delete selected content from Content Model\n * @param model The model to delete selected content from\n * @param additionalSteps @optional Addition delete steps\n * @param formatContext @optional A context object provided by formatContentModel API\n * @returns A DeleteSelectionResult object to specify the deletion result\n */\nexport function deleteSelection(\n    model: ReadonlyContentModelDocument,\n    additionalSteps: (DeleteSelectionStep | null)[] = [],\n    formatContext?: FormatContentModelContext\n): DeleteSelectionResult {\n    const context = deleteExpandedSelection(model, formatContext);\n    const steps = additionalSteps.filter(\n        (x: DeleteSelectionStep | null): x is DeleteSelectionStep => !!x\n    );\n\n    runEditSteps(steps, context);\n\n    mergeParagraphAfterDelete(context);\n    return context;\n}\n\n// If we end up with multiple paragraphs impacted, we need to merge them\nfunction mergeParagraphAfterDelete(context: DeleteSelectionContext) {\n    const {\n        insertPoint,\n        deleteResult,\n        lastParagraph,\n        lastTableContext,\n        undeletableSegments,\n    } = context;\n\n    if (\n        insertPoint &&\n        deleteResult != 'notDeleted' &&\n        deleteResult != 'nothingToDelete' &&\n        lastParagraph &&\n        lastParagraph != insertPoint.paragraph &&\n        lastTableContext == insertPoint.tableContext\n    ) {\n        const mutableLastParagraph = mutateBlock(lastParagraph);\n        const mutableInsertingParagraph = mutateBlock(insertPoint.paragraph);\n\n        if (undeletableSegments) {\n            mutableLastParagraph.segments.unshift(...undeletableSegments);\n        }\n\n        mutableInsertingParagraph.segments.push(...mutableLastParagraph.segments);\n        mutableLastParagraph.segments = [];\n    }\n}\n","/**\n * @internal\n */\nexport function deleteSingleChar(text: string, isForward: boolean) {\n    // In case of emoji that occupies multiple characters, we need to delete the whole emoji\n    const array = [...text];\n    let deleteLength = 0;\n\n    for (\n        let i = isForward ? 0 : array.length - 1,\n            deleteState: 'notDeleted' | 'waiting' | 'done' = 'notDeleted';\n        i >= 0 && i < array.length && deleteState != 'done';\n        i += isForward ? 1 : -1\n    ) {\n        switch (array[i]) {\n            case '\\u200D': // ZERO WIDTH JOINER\n            case '\\u20E3': // COMBINING ENCLOSING KEYCAP\n            case '\\uFE0E': // VARIATION SELECTOR-15\n            case '\\uFE0F': // VARIATION SELECTOR-16\n                deleteState = 'notDeleted';\n                deleteLength++;\n                break;\n\n            default:\n                if (deleteState == 'notDeleted') {\n                    deleteState = 'waiting';\n                    deleteLength++;\n                } else if (deleteState == 'waiting') {\n                    deleteState = 'done';\n                }\n                break;\n        }\n    }\n\n    array.splice(isForward ? 0 : array.length - deleteLength, deleteLength);\n\n    return array.join('');\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelBlockGroupType,\n    ReadonlyContentModelBlockGroup,\n    TypeOfBlockGroup,\n} from 'roosterjs-content-model-types';\n\n/**\n * Get index of closest ancestor block group of the expected block group type. If not found, return -1\n * @param path The block group path, from the closest one to root\n * @param blockGroupTypes The expected block group types\n * @param stopTypes @optional Block group types that will cause stop searching\n */\nexport function getClosestAncestorBlockGroupIndex<T extends ContentModelBlockGroup>(\n    path: ReadonlyContentModelBlockGroup[],\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[] = []\n): number {\n    for (let i = 0; i < path.length; i++) {\n        const group = path[i];\n\n        if ((blockGroupTypes as string[]).indexOf(group.blockGroupType) >= 0) {\n            return i;\n        } else if (stopTypes.indexOf(group.blockGroupType) >= 0) {\n            // Do not go across boundary specified by stopTypes.\n            // For example, in most case we will set table as the boundary,\n            // in order to allow modify list item under a table when the table itself is in another list item\n            // Although this is not very likely to happen in most case, but we still need to handle it\n            return -1;\n        }\n    }\n\n    return -1;\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { OrderedListStyleMap } from '../../constants/OrderedListStyleMap';\nimport { UnorderedListStyleMap } from '../../constants/UnorderedListStyleMap';\n\n/**\n * Gets the list style type that the bullet is part of, using the Constant record\n * @param listType whether the list is ordered or unordered\n * @param bullet bullet string\n * @returns the number of the style override or undefined if was not found in the Record\n */\nexport function getListStyleTypeFromString(listType: 'OL' | 'UL', bullet: string) {\n    const map = listType == 'OL' ? OrderedListStyleMap : UnorderedListStyleMap;\n    const keys = getObjectKeys(map);\n    const result = keys.find(key => map[key] == bullet);\n    if (result) {\n        return typeof result == 'string' ? parseInt(result) : result;\n    }\n    return result;\n}\n","import type {\n    ContentModelSegmentFormat,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Get the text format of a segment, this function will return only format that is applicable to text\n * @param segment The segment to get format from\n * @param includingBIU When pass true, also get Bold/Italic/Underline format\n * @returns\n */\nexport function getSegmentTextFormat(\n    segment: ReadonlyContentModelSegment,\n    includingBIU?: boolean\n): ContentModelSegmentFormat {\n    const format = segment.format ?? {};\n    const textFormat: ContentModelSegmentFormat = {\n        fontFamily: format.fontFamily,\n        fontSize: format.fontSize,\n        textColor: format.textColor,\n        backgroundColor: format.backgroundColor,\n        letterSpacing: format.letterSpacing,\n        lineHeight: format.lineHeight,\n        fontWeight: includingBIU ? format.fontWeight : undefined,\n        italic: includingBIU ? format.italic : undefined,\n        underline: includingBIU ? format.underline : undefined,\n    };\n\n    return removeUndefinedValues(textFormat);\n}\n\nconst removeUndefinedValues = (format: ContentModelSegmentFormat): ContentModelSegmentFormat => {\n    const textFormat: Record<string, string | undefined | boolean | never[]> = {};\n    Object.keys(format).filter(key => {\n        const value = format[key as keyof ContentModelSegmentFormat];\n\n        if (value !== undefined) {\n            textFormat[key] = value;\n        }\n    });\n    return textFormat;\n};\n","import { addBlock } from '../common/addBlock';\nimport { addSegment } from '../common/addSegment';\nimport { applyTableFormat } from './applyTableFormat';\nimport { createListItem } from '../creators/createListItem';\nimport { createParagraph } from '../creators/createParagraph';\nimport { createSelectionMarker } from '../creators/createSelectionMarker';\nimport { createTableCell } from '../creators/createTableCell';\nimport { deleteSelection } from './deleteSelection';\nimport { EmptySegmentFormat } from '../../constants/EmptySegmentFormat';\nimport { getClosestAncestorBlockGroupIndex } from './getClosestAncestorBlockGroupIndex';\nimport { getObjectKeys } from '../..//domUtils/getObjectKeys';\nimport { mutateBlock } from '../common/mutate';\nimport { normalizeContentModel } from '../common/normalizeContentModel';\nimport { normalizeTable } from './normalizeTable';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockFormat,\n    ContentModelDocument,\n    ContentModelHyperLinkFormat,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    FormatContentModelContext,\n    InsertPoint,\n    MergeModelOption,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst HeadingTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\nconst KeysOfSegmentFormat = getObjectKeys(EmptySegmentFormat);\n\ntype MergeFormatTypes = 'mergeAll' | 'keepSourceEmphasisFormat' | 'preferSource' | 'preferTarget';\n\n/**\n * Merge source model into target mode\n * @param target Target Content Model that will merge content into\n * @param source Source Content Model will be merged to target model\n * @param context Format context. When call this function inside formatContentModel, provide this context so that formatContentModel will do extra handling to the result\n * @param options More options, see MergeModelOption\n * @returns Insert point after merge, or null if there is no insert point\n */\nexport function mergeModel(\n    target: ReadonlyContentModelDocument,\n    source: ContentModelDocument,\n    context?: FormatContentModelContext,\n    options?: MergeModelOption\n): InsertPoint | null {\n    const insertPosition =\n        options?.insertPosition ?? deleteSelection(target, [], context).insertPoint;\n\n    const { addParagraphAfterMergedContent, mergeFormat, mergeTable } = options || {};\n\n    if (addParagraphAfterMergedContent && !mergeTable) {\n        const { paragraph, marker } = insertPosition || {};\n        const newPara = createParagraph(false /* isImplicit */, paragraph?.format, marker?.format);\n        addBlock(source, newPara);\n    }\n\n    if (insertPosition) {\n        if (mergeFormat && mergeFormat != 'none') {\n            const newFormat: ContentModelSegmentFormat = {\n                ...(target.format || {}),\n                ...insertPosition.marker.format,\n            };\n\n            applyDefaultFormat(source, newFormat, mergeFormat);\n        }\n\n        for (let i = 0; i < source.blocks.length; i++) {\n            const block = source.blocks[i];\n\n            switch (block.blockType) {\n                case 'Paragraph':\n                    mergeParagraph(insertPosition, block, i == 0, context, options);\n                    break;\n\n                case 'Divider':\n                    insertBlock(insertPosition, block);\n                    break;\n\n                case 'Entity':\n                    insertBlock(insertPosition, block);\n                    context?.newEntities.push(block);\n                    break;\n\n                case 'Table':\n                    if (source.blocks.length == 1 && mergeTable) {\n                        mergeTables(insertPosition, block, source);\n                    } else {\n                        insertBlock(insertPosition, block);\n                    }\n                    break;\n\n                case 'BlockGroup':\n                    switch (block.blockGroupType) {\n                        case 'General':\n                        case 'FormatContainer':\n                            insertBlock(insertPosition, block);\n                            break;\n                        case 'ListItem':\n                            mergeList(insertPosition, block);\n                            break;\n                    }\n                    break;\n            }\n        }\n    }\n\n    normalizeContentModel(target);\n\n    return insertPosition;\n}\n\nfunction mergeParagraph(\n    markerPosition: InsertPoint,\n    newPara: ContentModelParagraph,\n    mergeToCurrentParagraph: boolean,\n    context?: FormatContentModelContext,\n    option?: MergeModelOption\n) {\n    const { paragraph, marker } = markerPosition;\n    const newParagraph = mergeToCurrentParagraph\n        ? paragraph\n        : splitParagraph(markerPosition, newPara.format);\n    const segmentIndex = newParagraph.segments.indexOf(marker);\n\n    if (option?.mergeFormat == 'none' && mergeToCurrentParagraph) {\n        newParagraph.segments.forEach(segment => {\n            segment.format = { ...(newParagraph.segmentFormat || {}), ...segment.format };\n        });\n        delete newParagraph.segmentFormat;\n    }\n    if (segmentIndex >= 0) {\n        for (let i = 0; i < newPara.segments.length; i++) {\n            const segment = newPara.segments[i];\n\n            newParagraph.segments.splice(segmentIndex + i, 0, segment);\n\n            if (context) {\n                if (segment.segmentType == 'Entity') {\n                    context.newEntities.push(segment);\n                }\n\n                if (segment.segmentType == 'Image') {\n                    context.newImages.push(segment);\n                }\n            }\n        }\n    }\n\n    if (newPara.decorator) {\n        newParagraph.decorator = { ...newPara.decorator };\n        if (HeadingTags.indexOf(newParagraph.decorator.tagName) > -1) {\n            const sourceKeys: (keyof ContentModelSegmentFormat)[] = getObjectKeys(\n                newParagraph.decorator.format\n            );\n            const segmentDecoratorKeys: (keyof ContentModelSegmentFormat)[] = getObjectKeys(\n                newParagraph.segmentFormat || {}\n            );\n\n            sourceKeys.forEach(key => {\n                if (segmentDecoratorKeys.indexOf(key) > -1) {\n                    delete newParagraph.segmentFormat?.[key];\n                }\n            });\n        }\n    }\n\n    if (!mergeToCurrentParagraph) {\n        newParagraph.format = newPara.format;\n    } else {\n        newParagraph.format = {\n            ...newParagraph.format,\n            ...newPara.format,\n        };\n    }\n}\n\nfunction mergeTables(\n    markerPosition: InsertPoint,\n    newTable: ContentModelTable,\n    source: ContentModelDocument\n) {\n    const { tableContext, marker } = markerPosition;\n\n    if (tableContext && source.blocks.length == 1 && source.blocks[0] == newTable) {\n        const { table: readonlyTable, colIndex, rowIndex } = tableContext;\n        const table = mutateBlock(readonlyTable);\n\n        for (let i = 0; i < newTable.rows.length; i++) {\n            for (let j = 0; j < newTable.rows[i].cells.length; j++) {\n                const newCell = newTable.rows[i].cells[j];\n\n                if (i == 0 && colIndex + j >= table.rows[0].cells.length) {\n                    for (let k = 0; k < table.rows.length; k++) {\n                        const leftCell = table.rows[k]?.cells[colIndex + j - 1];\n                        table.rows[k].cells[colIndex + j] = createTableCell(\n                            false /*spanLeft*/,\n                            false /*spanAbove*/,\n                            leftCell?.isHeader,\n                            leftCell?.format\n                        );\n                    }\n                }\n\n                if (j == 0 && rowIndex + i >= table.rows.length) {\n                    if (!table.rows[rowIndex + i]) {\n                        table.rows[rowIndex + i] = {\n                            cells: [],\n                            format: {},\n                            height: 0,\n                        };\n                    }\n\n                    for (let k = 0; k < table.rows[rowIndex].cells.length; k++) {\n                        const aboveCell = table.rows[rowIndex + i - 1]?.cells[k];\n                        table.rows[rowIndex + i].cells[k] = createTableCell(\n                            false /*spanLeft*/,\n                            false /*spanAbove*/,\n                            false /*isHeader*/,\n                            aboveCell?.format\n                        );\n                    }\n                }\n\n                const oldCell = table.rows[rowIndex + i].cells[colIndex + j];\n                table.rows[rowIndex + i].cells[colIndex + j] = newCell;\n\n                if (i == 0 && j == 0) {\n                    const newMarker = createSelectionMarker(marker.format);\n                    const newPara = addSegment(newCell, newMarker);\n\n                    if (markerPosition.path[0] == oldCell) {\n                        // Update insert point to match the change result\n                        markerPosition.path[0] = newCell;\n                        markerPosition.marker = newMarker;\n                        markerPosition.paragraph = newPara;\n                    }\n                }\n            }\n        }\n\n        normalizeTable(table, markerPosition.marker.format);\n        applyTableFormat(table, undefined /*newFormat*/, true /*keepCellShade*/);\n    } else {\n        insertBlock(markerPosition, newTable);\n    }\n}\n\nfunction mergeList(markerPosition: InsertPoint, newList: ContentModelListItem) {\n    splitParagraph(markerPosition, newList.format);\n\n    const { path, paragraph } = markerPosition;\n\n    const listItemIndex = getClosestAncestorBlockGroupIndex(path, ['ListItem']);\n    const listItem = path[listItemIndex] as ContentModelListItem;\n    const listParent = path[listItemIndex + 1]; // It is ok here when index is -1, that means there is no list and we just insert a new paragraph and use path[0] as its parent\n    const blockIndex = listParent.blocks.indexOf(listItem || paragraph);\n\n    if (blockIndex >= 0) {\n        mutateBlock(listParent).blocks.splice(blockIndex, 0, newList);\n    }\n\n    if (listItem) {\n        listItem?.levels.forEach((level, i) => {\n            newList.levels[i] = { ...level };\n        });\n    }\n}\n\nfunction splitParagraph(markerPosition: InsertPoint, newParaFormat: ContentModelBlockFormat) {\n    const { paragraph, marker, path } = markerPosition;\n    const segmentIndex = paragraph.segments.indexOf(marker);\n    const paraIndex = path[0].blocks.indexOf(paragraph);\n    const newParagraph: ShallowMutableContentModelParagraph = createParagraph(\n        false /*isImplicit*/,\n        { ...paragraph.format, ...newParaFormat },\n        paragraph.segmentFormat\n    );\n\n    if (segmentIndex >= 0) {\n        newParagraph.segments = paragraph.segments.splice(segmentIndex);\n    }\n\n    if (paraIndex >= 0) {\n        mutateBlock(path[0]).blocks.splice(paraIndex + 1, 0, newParagraph);\n    }\n\n    const listItemIndex = getClosestAncestorBlockGroupIndex(\n        path,\n        ['ListItem'],\n        ['FormatContainer', 'TableCell']\n    );\n    const listItem = path[listItemIndex] as ContentModelListItem;\n\n    if (listItem) {\n        const listParent = listItemIndex >= 0 ? path[listItemIndex + 1] : null;\n        const blockIndex = listParent ? listParent.blocks.indexOf(listItem) : -1;\n\n        if (blockIndex >= 0 && listParent) {\n            const newListItem = createListItem(listItem.levels, listItem.formatHolder.format);\n\n            if (paraIndex >= 0) {\n                newListItem.blocks = listItem.blocks.splice(paraIndex + 1);\n            }\n\n            if (blockIndex >= 0) {\n                mutateBlock(listParent).blocks.splice(blockIndex + 1, 0, newListItem);\n            }\n\n            path[listItemIndex] = newListItem;\n        }\n    }\n\n    markerPosition.paragraph = newParagraph;\n\n    return newParagraph;\n}\n\nfunction insertBlock(markerPosition: InsertPoint, block: ContentModelBlock) {\n    const { path } = markerPosition;\n    const newParaFormat = block.blockType !== 'Paragraph' ? {} : block.format;\n    const newPara = splitParagraph(markerPosition, newParaFormat);\n    const blockIndex = path[0].blocks.indexOf(newPara);\n\n    if (blockIndex >= 0) {\n        mutateBlock(path[0]).blocks.splice(blockIndex, 0, block);\n    }\n}\n\nfunction applyDefaultFormat(\n    group: ReadonlyContentModelBlockGroup,\n    format: ContentModelSegmentFormat,\n    applyDefaultFormatOption: MergeFormatTypes\n) {\n    group.blocks.forEach(block => {\n        mergeBlockFormat(applyDefaultFormatOption, block);\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem') {\n                    mutateBlock(block).formatHolder.format = mergeSegmentFormat(\n                        applyDefaultFormatOption,\n                        format,\n                        block.formatHolder.format\n                    );\n                }\n                applyDefaultFormat(block, format, applyDefaultFormatOption);\n                break;\n\n            case 'Table':\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        applyDefaultFormat(cell, format, applyDefaultFormatOption);\n                    })\n                );\n                break;\n\n            case 'Paragraph':\n                const paragraphFormat = block.decorator?.format || {};\n                const paragraph = mutateBlock(block);\n\n                paragraph.segments.forEach(segment => {\n                    if (segment.segmentType == 'General') {\n                        applyDefaultFormat(segment, format, applyDefaultFormatOption);\n                    }\n\n                    segment.format = mergeSegmentFormat(applyDefaultFormatOption, format, {\n                        ...paragraphFormat,\n                        ...segment.format,\n                    });\n\n                    if (segment.link) {\n                        segment.link.format = mergeLinkFormat(\n                            applyDefaultFormatOption,\n                            format,\n                            segment.link.format\n                        );\n                    }\n                });\n\n                if (applyDefaultFormatOption === 'keepSourceEmphasisFormat') {\n                    delete paragraph.decorator;\n                }\n                break;\n        }\n    });\n}\n\nfunction mergeBlockFormat(applyDefaultFormatOption: string, block: ReadonlyContentModelBlock) {\n    if (applyDefaultFormatOption == 'keepSourceEmphasisFormat' && block.format.backgroundColor) {\n        delete mutateBlock(block).format.backgroundColor;\n    }\n}\n\n/**\n * Hyperlink format type definition only contains backgroundColor and underline.\n * So create a minimum object with the styles supported in Hyperlink to be used in merge.\n */\nfunction getSegmentFormatInLinkFormat(\n    targetFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    const result: ContentModelHyperLinkFormat = {};\n    if (targetFormat.backgroundColor) {\n        result.backgroundColor = targetFormat.backgroundColor;\n    }\n    if (targetFormat.underline) {\n        result.underline = targetFormat.underline;\n    }\n\n    return result;\n}\n\nfunction mergeLinkFormat(\n    applyDefaultFormatOption: MergeFormatTypes,\n    targetFormat: ContentModelSegmentFormat,\n    sourceFormat: ContentModelHyperLinkFormat\n) {\n    switch (applyDefaultFormatOption) {\n        case 'mergeAll':\n        case 'preferSource':\n            return { ...getSegmentFormatInLinkFormat(targetFormat), ...sourceFormat };\n        case 'keepSourceEmphasisFormat':\n            return {\n                // Hyperlink segment format contains other attributes such as LinkFormat\n                // so we have to retain them\n                ...getFormatWithoutSegmentFormat(sourceFormat),\n                // Link format only have Text color, background color, Underline, but only\n                // text color + background color should be merged from the target\n                ...getSegmentFormatInLinkFormat(targetFormat),\n                // Get the semantic format of the source\n                ...getSemanticFormat(sourceFormat),\n                // The text color of the hyperlink should not be merged and\n                // we should always retain the source text color\n                ...getHyperlinkTextColor(sourceFormat),\n            };\n        case 'preferTarget':\n            return { ...sourceFormat, ...getSegmentFormatInLinkFormat(targetFormat) };\n    }\n}\n\nfunction mergeSegmentFormat(\n    applyDefaultFormatOption: MergeFormatTypes,\n    targetFormat: ContentModelSegmentFormat,\n    sourceFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    switch (applyDefaultFormatOption) {\n        case 'mergeAll':\n        case 'preferSource':\n            return { ...targetFormat, ...sourceFormat };\n        case 'preferTarget':\n            return { ...sourceFormat, ...targetFormat };\n        case 'keepSourceEmphasisFormat':\n            return {\n                ...getFormatWithoutSegmentFormat(sourceFormat),\n                ...targetFormat,\n                ...getSemanticFormat(sourceFormat),\n            };\n    }\n}\n\nfunction getSemanticFormat(segmentFormat: ContentModelSegmentFormat): ContentModelSegmentFormat {\n    const result: ContentModelSegmentFormat = {};\n\n    const { fontWeight, italic, underline } = segmentFormat;\n\n    if (fontWeight && fontWeight != 'normal') {\n        result.fontWeight = fontWeight;\n    }\n    if (italic) {\n        result.italic = italic;\n    }\n    if (underline) {\n        result.underline = underline;\n    }\n\n    return result;\n}\n\n/**\n * Segment format can also contain other type of metadata, for example in Images/Hyperlink,\n * we want to preserve these properties when merging format\n */\nfunction getFormatWithoutSegmentFormat(\n    sourceFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    const resultFormat = {\n        ...sourceFormat,\n    };\n    KeysOfSegmentFormat.forEach(key => delete resultFormat[key]);\n    return resultFormat;\n}\nfunction getHyperlinkTextColor(sourceFormat: ContentModelHyperLinkFormat) {\n    const result: ContentModelHyperLinkFormat = {};\n    if (sourceFormat.textColor) {\n        result.textColor = sourceFormat.textColor;\n    }\n\n    return result;\n}\n","import { addBlock } from '../common/addBlock';\nimport { addSegment } from '../common/addSegment';\nimport { createBr } from '../creators/createBr';\nimport { createParagraph } from '../creators/createParagraph';\nimport { mutateBlock } from '../common/mutate';\nimport type {\n    ContentModelSegmentFormat,\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelTable,\n    ReadonlyContentModelTableCell,\n} from 'roosterjs-content-model-types';\n\n/**\n * Minimum width for a table cell\n */\nexport const MIN_ALLOWED_TABLE_CELL_WIDTH: number = 30;\n/**\n * Minimum height for a table cell\n */\nexport const MIN_ALLOWED_TABLE_CELL_HEIGHT: number = 22;\n\n/**\n * Normalize a Content Model table, make sure:\n * 1. Fist cells are not spanned\n * 2. Only first column and row can have headers\n * 3. All cells have content and width\n * 4. Table and table row have correct width/height\n * 5. Spanned cell has no child blocks\n * 6. default format is correctly applied\n * @param readonlyTable The table to normalize\n * @param defaultSegmentFormat @optional Default segment format to apply to cell\n */\nexport function normalizeTable(\n    readonlyTable: ReadonlyContentModelTable,\n    defaultSegmentFormat?: ContentModelSegmentFormat\n) {\n    const table = mutateBlock(readonlyTable);\n\n    // Always collapse border and use border box for table in roosterjs to make layout simpler\n    const format = table.format;\n\n    if (!format.borderCollapse || !format.useBorderBox) {\n        format.borderCollapse = true;\n        format.useBorderBox = true;\n    }\n\n    // Make sure all first cells are not spanned\n    // Make sure all inner cells are not header\n    // Make sure all cells have content and width\n    table.rows.forEach((row, rowIndex) => {\n        row.cells.forEach((readonlyCell, colIndex) => {\n            const cell = mutateBlock(readonlyCell);\n\n            if (cell.blocks.length == 0) {\n                const format = cell.format.textColor\n                    ? {\n                          ...defaultSegmentFormat,\n                          textColor: cell.format.textColor,\n                      }\n                    : defaultSegmentFormat;\n                addBlock(\n                    cell,\n                    createParagraph(undefined /*isImplicit*/, undefined /*blockFormat*/, format)\n                );\n                addSegment(cell, createBr(format));\n            }\n\n            if (rowIndex == 0) {\n                cell.spanAbove = false;\n            } else if (rowIndex > 0 && colIndex > 0 && cell.isHeader) {\n                cell.isHeader = false;\n            }\n\n            if (colIndex == 0) {\n                cell.spanLeft = false;\n            }\n\n            cell.format.useBorderBox = true;\n        });\n\n        // Make sure table has correct width and height array\n        if (row.height < MIN_ALLOWED_TABLE_CELL_HEIGHT) {\n            row.height = MIN_ALLOWED_TABLE_CELL_HEIGHT;\n        }\n    });\n\n    const columns = Math.max(...table.rows.map(row => row.cells.length));\n\n    for (let i = 0; i < columns; i++) {\n        if (table.widths[i] === undefined) {\n            table.widths[i] = getTableCellWidth(columns);\n        } else if (table.widths[i] < MIN_ALLOWED_TABLE_CELL_WIDTH) {\n            table.widths[i] = MIN_ALLOWED_TABLE_CELL_WIDTH;\n        }\n    }\n\n    // Move blocks from spanned cell to its main cell if any,\n    // and remove rows/columns if all cells in it are spanned\n    const colCount = table.rows[0]?.cells.length || 0;\n\n    for (let colIndex = colCount - 1; colIndex > 0; colIndex--) {\n        table.rows.forEach(row => {\n            const cell = row.cells[colIndex];\n            const leftCell = row.cells[colIndex - 1];\n            if (cell && leftCell && cell.spanLeft) {\n                tryMoveBlocks(leftCell, cell);\n            }\n        });\n\n        if (table.rows.every(row => row.cells[colIndex]?.spanLeft)) {\n            table.rows.forEach(row => row.cells.splice(colIndex, 1));\n            table.widths.splice(\n                colIndex - 1,\n                2,\n                table.widths[colIndex - 1] + table.widths[colIndex]\n            );\n        }\n    }\n\n    for (let rowIndex = table.rows.length - 1; rowIndex > 0; rowIndex--) {\n        const row = table.rows[rowIndex];\n\n        row.cells.forEach((cell, colIndex) => {\n            const aboveCell = table.rows[rowIndex - 1]?.cells[colIndex];\n            if (aboveCell && cell.spanAbove) {\n                tryMoveBlocks(aboveCell, cell);\n            }\n        });\n\n        if (row.cells.every(cell => cell.spanAbove)) {\n            table.rows[rowIndex - 1].height += row.height;\n            table.rows.splice(rowIndex, 1);\n        }\n    }\n}\n\nfunction getTableCellWidth(columns: number): number {\n    if (columns <= 4) {\n        return 120;\n    } else if (columns <= 6) {\n        return 100;\n    } else {\n        return 70;\n    }\n}\n\nfunction tryMoveBlocks(\n    targetCell: ReadonlyContentModelTableCell,\n    sourceCell: ReadonlyContentModelTableCell\n) {\n    const onlyHasEmptyOrBr = sourceCell.blocks.every(\n        block => block.blockType == 'Paragraph' && hasOnlyBrSegment(block.segments)\n    );\n\n    if (!onlyHasEmptyOrBr) {\n        mutateBlock(targetCell).blocks.push(...sourceCell.blocks);\n        mutateBlock(sourceCell).blocks = [];\n    }\n}\n\nfunction hasOnlyBrSegment(segments: ReadonlyArray<ReadonlyContentModelSegment>): boolean {\n    segments = segments.filter(s => s.segmentType != 'SelectionMarker');\n\n    return segments.length == 0 || (segments.length == 1 && segments[0].segmentType == 'Br');\n}\n","import { extractBorderValues } from '../../domUtils/style/borderValues';\nimport { getClosestAncestorBlockGroupIndex } from './getClosestAncestorBlockGroupIndex';\nimport { getImageMetadata } from '../metadata/updateImageMetadata';\nimport { getTableMetadata } from '../metadata/updateTableMetadata';\nimport { isBold } from '../../domUtils/style/isBold';\nimport { iterateSelections } from '../selection/iterateSelections';\nimport { parseValueWithUnit } from '../../formatHandlers/utils/parseValueWithUnit';\nimport type {\n    ConflictFormatSolution,\n    ContentModelFormatState,\n    ContentModelSegmentFormat,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelImage,\n    ReadonlyTableSelectionContext,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelFormatContainer,\n    ReadonlyContentModelListItem,\n    ReadonlyContentModelDocument,\n    DOMHelper,\n} from 'roosterjs-content-model-types';\n\n/**\n * Retrieve format state from the given Content Model\n * @param model The Content Model to retrieve format state from\n * @param pendingFormat Existing pending format, if any\n * @param formatState Existing format state object, used for receiving the result\n * @param conflictSolution The strategy for handling format conflicts\n */\nexport function retrieveModelFormatState(\n    model: ReadonlyContentModelDocument,\n    pendingFormat: ContentModelSegmentFormat | null,\n    formatState: ContentModelFormatState,\n    conflictSolution: ConflictFormatSolution = 'remove',\n    domHelper?: DOMHelper\n) {\n    let firstTableContext: ReadonlyTableSelectionContext | undefined;\n    let firstBlock: ReadonlyContentModelBlock | undefined;\n    let isFirst = true;\n    let isFirstImage = true;\n    let isFirstSegment = true;\n    let containerFormat: ContentModelSegmentFormat | undefined = undefined;\n\n    const modelFormat = { ...model.format };\n\n    delete modelFormat.italic;\n    delete modelFormat.underline;\n    delete modelFormat.fontWeight;\n\n    iterateSelections(\n        model,\n        (path, tableContext, block, segments) => {\n            // Structure formats\n            retrieveStructureFormat(formatState, path, isFirst, conflictSolution);\n\n            // Multiple line format\n            if (block) {\n                if (firstBlock) {\n                    formatState.isMultilineSelection = true;\n                } else {\n                    firstBlock = block;\n                }\n            }\n\n            if (block?.blockType == 'Paragraph') {\n                // Paragraph formats\n                retrieveParagraphFormat(formatState, block, isFirst, conflictSolution);\n\n                // Segment formats\n                segments?.forEach(segment => {\n                    if (isFirstSegment || segment.segmentType != 'SelectionMarker') {\n                        let currentFormat = Object.assign(\n                            {},\n                            block.format,\n                            block.decorator?.format,\n                            segment.format,\n                            segment.code?.format,\n                            segment.link?.format,\n                            pendingFormat\n                        );\n\n                        // Sometimes the content may not specify all required format but just leverage the container format to do so.\n                        // In this case, we need to merge the container format into the current format\n                        // to make sure the current format contains all required format.\n                        if (!hasAllRequiredFormat(currentFormat)) {\n                            if (!containerFormat) {\n                                containerFormat = domHelper?.getContainerFormat() ?? modelFormat;\n                            }\n\n                            currentFormat = Object.assign({}, containerFormat, currentFormat);\n                        }\n\n                        retrieveSegmentFormat(\n                            formatState,\n                            isFirst,\n                            currentFormat,\n                            conflictSolution\n                        );\n\n                        mergeValue(\n                            formatState,\n                            'isCodeInline',\n                            !!segment?.code,\n                            isFirst,\n                            conflictSolution\n                        );\n                    }\n\n                    // We only care the format of selection marker when it is the first selected segment. This is because when selection marker\n                    // is after some other selected segments, it mostly like appears at the beginning of a seconde line when the whole first line\n                    // is selected (e.g. triple-click on a line) then the second selection marker doesn't contain a correct format, so we need to\n                    // ignore it\n                    isFirstSegment = false;\n\n                    formatState.canUnlink = formatState.canUnlink || !!segment.link;\n                    formatState.canAddImageAltText =\n                        formatState.canAddImageAltText ||\n                        segments.some(segment => segment.segmentType == 'Image');\n\n                    isFirst = false;\n\n                    if (segment.segmentType === 'Image') {\n                        if (isFirstImage) {\n                            retrieveImageFormat(segment, formatState);\n                            isFirstImage = false;\n                        } else {\n                            formatState.imageFormat = undefined;\n                            formatState.imageEditingMetadata = undefined;\n                        }\n                    }\n                });\n\n                isFirst = false;\n            }\n\n            if (tableContext) {\n                if (firstTableContext) {\n                    const { table, colIndex, rowIndex } = firstTableContext;\n\n                    // Merge table format\n                    if (\n                        tableContext.table == table &&\n                        (tableContext.colIndex != colIndex || tableContext.rowIndex != rowIndex)\n                    ) {\n                        formatState.canMergeTableCell = true;\n                        formatState.isMultilineSelection = true;\n                    }\n                } else {\n                    // Table formats\n                    retrieveTableFormat(tableContext, formatState);\n                    firstTableContext = tableContext;\n                }\n            }\n        },\n        {\n            includeListFormatHolder: 'never',\n        }\n    );\n\n    if (formatState.fontSize) {\n        formatState.fontSize = px2Pt(formatState.fontSize);\n    }\n}\n\nfunction retrieveSegmentFormat(\n    result: ContentModelFormatState,\n    isFirst: boolean,\n    mergedFormat: ContentModelSegmentFormat,\n    conflictSolution: ConflictFormatSolution = 'remove'\n) {\n    const superOrSubscript = mergedFormat.superOrSubScriptSequence?.split(' ')?.pop();\n\n    mergeValue(result, 'isBold', isBold(mergedFormat.fontWeight), isFirst, conflictSolution);\n    mergeValue(result, 'isItalic', mergedFormat.italic, isFirst, conflictSolution);\n    mergeValue(result, 'isUnderline', mergedFormat.underline, isFirst, conflictSolution);\n    mergeValue(result, 'isStrikeThrough', mergedFormat.strikethrough, isFirst, conflictSolution);\n    mergeValue(result, 'isSuperscript', superOrSubscript == 'super', isFirst, conflictSolution);\n    mergeValue(result, 'isSubscript', superOrSubscript == 'sub', isFirst, conflictSolution);\n    mergeValue(result, 'letterSpacing', mergedFormat.letterSpacing, isFirst, conflictSolution);\n\n    mergeValue(result, 'fontName', mergedFormat.fontFamily, isFirst, conflictSolution);\n    mergeValue(\n        result,\n        'fontSize',\n        mergedFormat.fontSize,\n        isFirst,\n        conflictSolution,\n        val => parseValueWithUnit(val, undefined, 'pt') + 'pt'\n    );\n    mergeValue(result, 'backgroundColor', mergedFormat.backgroundColor, isFirst, conflictSolution);\n    mergeValue(result, 'textColor', mergedFormat.textColor, isFirst, conflictSolution);\n    mergeValue(result, 'fontWeight', mergedFormat.fontWeight, isFirst, conflictSolution);\n    mergeValue(result, 'lineHeight', mergedFormat.lineHeight, isFirst, conflictSolution);\n}\n\nfunction retrieveParagraphFormat(\n    result: ContentModelFormatState,\n    paragraph: ReadonlyContentModelParagraph,\n    isFirst: boolean,\n    conflictSolution: ConflictFormatSolution = 'remove'\n) {\n    const headingLevel = parseInt((paragraph.decorator?.tagName || '').substring(1));\n    const validHeadingLevel = headingLevel >= 1 && headingLevel <= 6 ? headingLevel : undefined;\n\n    mergeValue(result, 'marginBottom', paragraph.format.marginBottom, isFirst, conflictSolution);\n    mergeValue(result, 'marginTop', paragraph.format.marginTop, isFirst, conflictSolution);\n    mergeValue(result, 'headingLevel', validHeadingLevel, isFirst, conflictSolution);\n    mergeValue(result, 'textAlign', paragraph.format.textAlign, isFirst, conflictSolution);\n    mergeValue(result, 'direction', paragraph.format.direction, isFirst, conflictSolution);\n}\n\nfunction retrieveStructureFormat(\n    result: ContentModelFormatState,\n    path: ReadonlyContentModelBlockGroup[],\n    isFirst: boolean,\n    conflictSolution: ConflictFormatSolution = 'remove'\n) {\n    const listItemIndex = getClosestAncestorBlockGroupIndex(path, ['ListItem'], []);\n    const containerIndex = getClosestAncestorBlockGroupIndex(path, ['FormatContainer'], []);\n\n    if (listItemIndex >= 0) {\n        const listItem = path[listItemIndex] as ReadonlyContentModelListItem;\n        const listType = listItem?.levels[listItem.levels.length - 1]?.listType;\n\n        mergeValue(result, 'isBullet', listType == 'UL', isFirst, conflictSolution);\n        mergeValue(result, 'isNumbering', listType == 'OL', isFirst, conflictSolution);\n    }\n\n    mergeValue(\n        result,\n        'isBlockQuote',\n        containerIndex >= 0 &&\n            (path[containerIndex] as ReadonlyContentModelFormatContainer)?.tagName == 'blockquote',\n        isFirst,\n        conflictSolution\n    );\n}\n\nfunction retrieveTableFormat(\n    tableContext: ReadonlyTableSelectionContext,\n    result: ContentModelFormatState\n) {\n    const tableFormat = getTableMetadata(tableContext.table);\n\n    result.isInTable = true;\n    result.tableHasHeader = tableContext.table.rows.some(row =>\n        row.cells.some(cell => cell.isHeader)\n    );\n\n    if (tableFormat) {\n        result.tableFormat = tableFormat;\n    }\n}\n\nfunction retrieveImageFormat(image: ReadonlyContentModelImage, result: ContentModelFormatState) {\n    const { format } = image;\n    const borderKey = 'borderTop';\n    const extractedBorder = extractBorderValues(format[borderKey]);\n    const borderColor = extractedBorder.color;\n    const borderWidth = extractedBorder.width;\n    const borderStyle = extractedBorder.style;\n\n    result.imageFormat = {\n        borderColor,\n        borderWidth,\n        borderStyle,\n        boxShadow: format.boxShadow,\n        borderRadius: format.borderRadius,\n    };\n    result.imageEditingMetadata = getImageMetadata(image);\n}\n\nfunction mergeValue<K extends keyof ContentModelFormatState>(\n    format: ContentModelFormatState,\n    key: K,\n    newValue: ContentModelFormatState[K] | undefined,\n    isFirst: boolean,\n    conflictSolution: ConflictFormatSolution = 'remove',\n    parseFn: (val: ContentModelFormatState[K]) => ContentModelFormatState[K] = val => val\n) {\n    if (isFirst) {\n        if (newValue !== undefined) {\n            format[key] = newValue;\n        }\n    } else if (parseFn(newValue) !== parseFn(format[key])) {\n        switch (conflictSolution) {\n            case 'remove':\n                delete format[key];\n                break;\n            case 'keepFirst':\n                break;\n            case 'returnMultiple':\n                if (typeof format[key] === 'string') {\n                    (format[key] as string) = 'Multiple';\n                } else {\n                    delete format[key];\n                }\n                break;\n        }\n    }\n}\n\nfunction px2Pt(px: string) {\n    if (px) {\n        const index = px.indexOf('px');\n        if (index !== -1 && index === px.length - 2) {\n            // Edge may not handle the floating computing well which causes the calculated value to be a little less than the actual value\n            // So add 0.05 to fix it\n            return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\n        }\n    }\n    return px;\n}\n\nfunction hasAllRequiredFormat(format: ContentModelSegmentFormat) {\n    return !!format.fontFamily && !!format.fontSize && !!format.textColor;\n}\n","import type {\n    DeleteSelectionContext,\n    DeleteSelectionResult,\n    DeleteSelectionStep,\n    ValidDeleteSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Run editing steps on top of a given context object which includes current insert point and previous editing result\n * @param steps The editing steps to run\n * @param context Context for the editing steps.\n */\nexport function runEditSteps(steps: DeleteSelectionStep[], context: DeleteSelectionResult) {\n    steps.forEach(step => {\n        if (step && isValidDeleteSelectionContext(context)) {\n            step(context);\n        }\n    });\n}\n\nfunction isValidDeleteSelectionContext(\n    context: DeleteSelectionContext\n): context is ValidDeleteSelectionContext {\n    return !!context.insertPoint;\n}\n","import { mutateBlock } from '../common/mutate';\nimport { parseColor } from '../../formatHandlers/utils/color';\nimport { updateTableCellMetadata } from '../metadata/updateTableCellMetadata';\nimport type { ShallowMutableContentModelTableCell } from 'roosterjs-content-model-types';\n\n// Using the HSL (hue, saturation and lightness) representation for RGB color values.\n// If the value of the lightness is less than 20, the color is dark.\n// If the value of the lightness is more than 80, the color is bright\nconst DARK_COLORS_LIGHTNESS = 20;\nconst BRIGHT_COLORS_LIGHTNESS = 80;\nconst White = '#ffffff';\nconst Black = '#000000';\n\n/**\n * Set shade color of table cell\n * @param cell The cell to set shade color to\n * @param color The color to set\n * @param isColorOverride @optional When pass true, it means this shade color is not part of table format, so it can be preserved when apply table format\n * @param applyToSegments @optional When pass true, we will also apply text color from table cell to its child blocks and segments\n */\nexport function setTableCellBackgroundColor(\n    cell: ShallowMutableContentModelTableCell,\n    color: string | null | undefined,\n    isColorOverride?: boolean,\n    applyToSegments?: boolean\n) {\n    if (color) {\n        cell.format.backgroundColor = color;\n\n        if (isColorOverride) {\n            updateTableCellMetadata(cell, metadata => {\n                metadata = metadata || {};\n                metadata.bgColorOverride = true;\n                return metadata;\n            });\n        }\n\n        const lightness = calculateLightness(color);\n\n        if (lightness < DARK_COLORS_LIGHTNESS) {\n            cell.format.textColor = White;\n        } else if (lightness > BRIGHT_COLORS_LIGHTNESS) {\n            cell.format.textColor = Black;\n        } else {\n            delete cell.format.textColor;\n        }\n\n        if (applyToSegments) {\n            setAdaptiveCellColor(cell);\n        }\n    } else {\n        delete cell.format.backgroundColor;\n        delete cell.format.textColor;\n        if (applyToSegments) {\n            removeAdaptiveCellColor(cell);\n        }\n    }\n}\n\nfunction removeAdaptiveCellColor(cell: ShallowMutableContentModelTableCell) {\n    cell.blocks.forEach(readonlyBlock => {\n        if (readonlyBlock.blockType == 'Paragraph') {\n            const block = mutateBlock(readonlyBlock);\n\n            if (\n                block.segmentFormat?.textColor &&\n                shouldRemoveColor(block.segmentFormat?.textColor, cell.format.backgroundColor || '')\n            ) {\n                delete block.segmentFormat.textColor;\n            }\n            block.segments.forEach(segment => {\n                if (\n                    segment.format.textColor &&\n                    shouldRemoveColor(segment.format.textColor, cell.format.backgroundColor || '')\n                ) {\n                    delete segment.format.textColor;\n                }\n            });\n        }\n    });\n}\n\nfunction setAdaptiveCellColor(cell: ShallowMutableContentModelTableCell) {\n    if (cell.format.textColor) {\n        cell.blocks.forEach(readonlyBlock => {\n            if (readonlyBlock.blockType == 'Paragraph') {\n                const block = mutateBlock(readonlyBlock);\n\n                if (!block.segmentFormat?.textColor) {\n                    block.segmentFormat = {\n                        ...block.segmentFormat,\n                        textColor: cell.format.textColor,\n                    };\n                }\n                block.segments.forEach(segment => {\n                    if (!segment.format?.textColor) {\n                        segment.format = {\n                            ...segment.format,\n                            textColor: cell.format.textColor,\n                        };\n                    }\n                });\n            }\n        });\n    }\n}\n\n/**\n * If the cell background color is too dark or too bright, and the text color is white or black, we should remove the text color\n * @param textColor the segment or block text color\n * @param cellBackgroundColor the cell background color\n * @returns\n */\nfunction shouldRemoveColor(textColor: string, cellBackgroundColor: string) {\n    const lightness = calculateLightness(cellBackgroundColor);\n    if (\n        ([White, 'rgb(255,255,255)'].indexOf(textColor) > -1 &&\n            (lightness > BRIGHT_COLORS_LIGHTNESS || cellBackgroundColor == '')) ||\n        ([Black, 'rgb(0,0,0)'].indexOf(textColor) > -1 &&\n            (lightness < DARK_COLORS_LIGHTNESS || cellBackgroundColor == ''))\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction calculateLightness(color: string) {\n    const colorValues = parseColor(color);\n\n    // Use the values of r,g,b to calculate the lightness in the HSl representation\n    //First calculate the fraction of the light in each color, since in css the value of r,g,b is in the interval of [0,255], we have\n    if (colorValues) {\n        const red = colorValues[0] / 255;\n        const green = colorValues[1] / 255;\n        const blue = colorValues[2] / 255;\n\n        //Then the lightness in the HSL representation is the average between maximum fraction of r,g,b and the minimum fraction\n        return (Math.max(red, green, blue) + Math.min(red, green, blue)) * 50;\n    } else {\n        return 255;\n    }\n}\n","import { BulletListType } from '../../constants/BulletListType';\nimport { NumberingListType } from '../../constants/NumberingListType';\nimport type { ListMetadataFormat } from 'roosterjs-content-model-types';\n\nconst DefaultOrderedListStyles = [\n    NumberingListType.Decimal,\n    NumberingListType.LowerAlpha,\n    NumberingListType.LowerRoman,\n];\nconst DefaultUnorderedListStyles = [\n    BulletListType.Disc,\n    BulletListType.Circle,\n    BulletListType.Square,\n];\nconst OrderedListStyleRevertMap: Record<string, number> = {\n    'lower-alpha': NumberingListType.LowerAlpha,\n    'lower-latin': NumberingListType.LowerAlpha,\n    'upper-alpha': NumberingListType.UpperAlpha,\n    'upper-latin': NumberingListType.UpperAlpha,\n    'lower-roman': NumberingListType.LowerRoman,\n    'upper-roman': NumberingListType.UpperRoman,\n};\nconst UnorderedListStyleRevertMap: Record<string, number> = {\n    disc: BulletListType.Disc,\n    circle: BulletListType.Circle,\n    square: BulletListType.Square,\n};\n\n/**\n * Get automatic list style of a list item according to its lis type and metadata.\n * @param listType The list type, either OL or UL\n * @param metadata Metadata of this list item from list item model\n * @param depth Depth of list level, start from 0\n * @param existingStyleType Existing list style type in format, if any\n * @returns A number to represent list style type.\n * This will be the value of either NumberingListType (when listType is OL) or BulletListType (when listType is UL).\n * When there is a specified list style in its metadata, return this value, otherwise\n * When specified \"applyListStyleFromLevel\" in metadata, calculate auto list type from its depth, otherwise\n * When there is already listStyleType in list level format, find a related style type index, otherwise\n * return undefined\n */\nexport function getAutoListStyleType(\n    listType: 'OL' | 'UL',\n    metadata: ListMetadataFormat,\n    depth: number,\n    existingStyleType?: string\n): number | undefined {\n    const { orderedStyleType, unorderedStyleType, applyListStyleFromLevel } = metadata;\n\n    if (listType == 'OL') {\n        return typeof orderedStyleType == 'number'\n            ? orderedStyleType\n            : applyListStyleFromLevel\n            ? DefaultOrderedListStyles[depth % DefaultOrderedListStyles.length]\n            : existingStyleType\n            ? OrderedListStyleRevertMap[existingStyleType]\n            : undefined;\n    } else {\n        return typeof unorderedStyleType == 'number'\n            ? unorderedStyleType\n            : applyListStyleFromLevel\n            ? DefaultUnorderedListStyles[depth % DefaultUnorderedListStyles.length]\n            : existingStyleType\n            ? UnorderedListStyleRevertMap[existingStyleType]\n            : undefined;\n    }\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { NumberingListType } from '../../constants/NumberingListType';\n\nconst CharCodeOfA = 65;\nconst RomanValues: Record<string, number> = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n};\n\n/**\n * Get the list number for a list item according to list style type and its index number\n * @param styleType The list style number, should be a value of NumberingListType type\n * @param listNumber List number, start from 1\n * @returns A string for this list item. For example, when pass in NumberingListType.LowerAlpha and 2, it returns \"b\"\n */\nexport function getOrderedListNumberStr(styleType: number, listNumber: number): string {\n    switch (styleType) {\n        case NumberingListType.LowerAlpha:\n        case NumberingListType.LowerAlphaDash:\n        case NumberingListType.LowerAlphaDoubleParenthesis:\n        case NumberingListType.LowerAlphaParenthesis:\n            return convertDecimalsToAlpha(listNumber, true /*isLowerCase*/);\n\n        case NumberingListType.UpperAlpha:\n        case NumberingListType.UpperAlphaDash:\n        case NumberingListType.UpperAlphaDoubleParenthesis:\n        case NumberingListType.UpperAlphaParenthesis:\n            return convertDecimalsToAlpha(listNumber, false /*isLowerCase*/);\n\n        case NumberingListType.LowerRoman:\n        case NumberingListType.LowerRomanDash:\n        case NumberingListType.LowerRomanDoubleParenthesis:\n        case NumberingListType.LowerRomanParenthesis:\n            return convertDecimalsToRoman(listNumber, true /*isLowerCase*/);\n\n        case NumberingListType.UpperRoman:\n        case NumberingListType.UpperRomanDash:\n        case NumberingListType.UpperRomanDoubleParenthesis:\n        case NumberingListType.UpperRomanParenthesis:\n            return convertDecimalsToRoman(listNumber, false /*isLowerCase*/);\n\n        default:\n            return listNumber + '';\n    }\n}\n\nfunction convertDecimalsToAlpha(decimal: number, isLowerCase?: boolean): string {\n    let alpha = '';\n    decimal--;\n\n    while (decimal >= 0) {\n        alpha = String.fromCharCode((decimal % 26) + CharCodeOfA) + alpha;\n        decimal = Math.floor(decimal / 26) - 1;\n    }\n    return isLowerCase ? alpha.toLowerCase() : alpha;\n}\n\nfunction convertDecimalsToRoman(decimal: number, isLowerCase?: boolean) {\n    let romanValue = '';\n\n    for (const i of getObjectKeys(RomanValues)) {\n        const timesRomanCharAppear = Math.floor(decimal / RomanValues[i]);\n        decimal = decimal - timesRomanCharAppear * RomanValues[i];\n        romanValue = romanValue + i.repeat(timesRomanCharAppear);\n    }\n    return isLowerCase ? romanValue.toLocaleLowerCase() : romanValue;\n}\n","import type {\n    ArrayDefinition,\n    BooleanDefinition,\n    Definition,\n    NumberDefinition,\n    ObjectDefinition,\n    ObjectPropertyDefinition,\n    StringDefinition,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create a number definition\n * @param isOptional Whether this property is optional\n * @param value Optional value of the number\n * @param minValue Optional minimum value\n * @param maxValue Optional maximum value\n * @param allowNull Allow the property to be null\n * @returns The number definition object\n */\nexport function createNumberDefinition(\n    isOptional?: boolean,\n    value?: number,\n    minValue?: number,\n    maxValue?: number,\n    allowNull?: boolean\n): NumberDefinition {\n    return {\n        type: 'number',\n        isOptional,\n        value,\n        maxValue,\n        minValue,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create a boolean definition\n * @param isOptional  Whether this property is optional\n * @param value Optional expected boolean value\n * @param allowNull Allow the property to be null\n * @returns  The boolean definition object\n */\nexport function createBooleanDefinition(\n    isOptional?: boolean,\n    value?: boolean,\n    allowNull?: boolean\n): BooleanDefinition {\n    return {\n        type: 'boolean',\n        isOptional,\n        value,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create a string definition\n * @param isOptional  Whether this property is optional\n * @param value Optional expected string value\n * @param allowNull Allow the property to be null\n * @returns  The string definition object\n */\nexport function createStringDefinition(\n    isOptional?: boolean,\n    value?: string,\n    allowNull?: boolean\n): StringDefinition {\n    return {\n        type: 'string',\n        isOptional,\n        value,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create an array definition\n * @param itemDef Definition of each item of the related array\n * @param isOptional  Whether this property is optional\n * @param allowNull Allow the property to be null\n * @returns  The array definition object\n */\nexport function createArrayDefinition<T>(\n    itemDef: Definition<T>,\n    isOptional?: boolean,\n    minLength?: number,\n    maxLength?: number,\n    allowNull?: boolean\n): ArrayDefinition<T[]> {\n    return {\n        type: 'array',\n        isOptional,\n        itemDef,\n        minLength,\n        maxLength,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create an object definition\n * @param propertyDef Definition of each property of the related object\n * @param isOptional  Whether this property is optional\n * @param allowNull Allow the property to be null\n * @returns  The object definition object\n */\nexport function createObjectDefinition<T extends Object>(\n    propertyDef: ObjectPropertyDefinition<T>,\n    isOptional?: boolean,\n    allowNull?: boolean\n): ObjectDefinition<T> {\n    return {\n        type: 'object',\n        isOptional,\n        propertyDef,\n        allowNull,\n    };\n}\n","import { getMetadata, updateMetadata } from './updateMetadata';\nimport {\n    createBooleanDefinition,\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from './definitionCreators';\nimport type {\n    ContentModelImage,\n    ImageMetadataFormat,\n    ReadonlyContentModelImage,\n} from 'roosterjs-content-model-types';\n\nconst NumberDefinition = createNumberDefinition(true);\nconst BooleanDefinition = createBooleanDefinition(true);\n\n/**\n * @internal\n * Definition of ImageMetadataFormat\n */\nconst ImageMetadataFormatDefinition = createObjectDefinition<Required<ImageMetadataFormat>>({\n    widthPx: NumberDefinition,\n    heightPx: NumberDefinition,\n    leftPercent: NumberDefinition,\n    rightPercent: NumberDefinition,\n    topPercent: NumberDefinition,\n    bottomPercent: NumberDefinition,\n    angleRad: NumberDefinition,\n    src: createStringDefinition(),\n    naturalHeight: NumberDefinition,\n    naturalWidth: NumberDefinition,\n    flippedHorizontal: BooleanDefinition,\n    flippedVertical: BooleanDefinition,\n});\n\n/**\n * Get image metadata\n * @param image The image Content Model\n */\nexport function getImageMetadata(image: ReadonlyContentModelImage): ImageMetadataFormat | null {\n    return getMetadata(image, ImageMetadataFormatDefinition);\n}\n\n/**\n * Update image metadata with a callback\n * @param image The image Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateImageMetadata(\n    image: ContentModelImage,\n    callback?: (format: ImageMetadataFormat | null) => ImageMetadataFormat | null\n): ImageMetadataFormat | null {\n    return updateMetadata(image, callback, ImageMetadataFormatDefinition);\n}\n","import { BulletListType } from '../../constants/BulletListType';\nimport { getMetadata, updateMetadata } from './updateMetadata';\nimport { NumberingListType } from '../../constants/NumberingListType';\nimport {\n    createBooleanDefinition,\n    createNumberDefinition,\n    createObjectDefinition,\n} from './definitionCreators';\nimport type {\n    ListMetadataFormat,\n    ObjectDefinition,\n    ReadonlyContentModelWithDataset,\n    ShallowMutableContentModelWithDataset,\n} from 'roosterjs-content-model-types';\n\n/**\n * Metadata definition for List\n */\nexport const ListMetadataDefinition: ObjectDefinition<ListMetadataFormat> = createObjectDefinition<\n    ListMetadataFormat\n>(\n    {\n        orderedStyleType: createNumberDefinition(\n            true /** isOptional */,\n            undefined /** value **/,\n            NumberingListType.Min,\n            NumberingListType.Max\n        ),\n        unorderedStyleType: createNumberDefinition(\n            true /** isOptional */,\n            undefined /** value **/,\n            BulletListType.Min,\n            BulletListType.Max\n        ),\n        applyListStyleFromLevel: createBooleanDefinition(true /*isOptional*/),\n    },\n    true /** isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Get list metadata\n * @param list The list Content Model (metadata holder)\n */\nexport function getListMetadata(\n    list: ReadonlyContentModelWithDataset<ListMetadataFormat>\n): ListMetadataFormat | null {\n    return getMetadata(list, ListMetadataDefinition);\n}\n\n/**\n * Update list metadata with a callback\n * @param list The list Content Model (metadata holder)\n * @param callback The callback function used for updating metadata\n */\nexport function updateListMetadata(\n    list: ShallowMutableContentModelWithDataset<ListMetadataFormat>,\n    callback?: (format: ListMetadataFormat | null) => ListMetadataFormat | null\n): ListMetadataFormat | null {\n    return updateMetadata(list, callback, ListMetadataDefinition);\n}\n","import { validate } from './validate';\nimport type {\n    Definition,\n    ReadonlyContentModelWithDataset,\n    ShallowMutableContentModelWithDataset,\n} from 'roosterjs-content-model-types';\n\nconst EditingInfoDatasetName = 'editingInfo';\n\n/**\n * Retrieve metadata from the given model.\n * @param model The Content Model to retrieve metadata from\n * @param definition Definition of this metadata type, used for validate the metadata object\n * @returns Metadata of the model, or null if it does not contain a valid metadata\n */\nexport function getMetadata<T>(\n    model: ReadonlyContentModelWithDataset<T>,\n    definition?: Definition<T>\n): T | null {\n    const metadataString = model.dataset[EditingInfoDatasetName];\n    let obj: Object | null = null;\n\n    try {\n        obj = JSON.parse(metadataString);\n    } catch {}\n\n    return !definition || validate(obj, definition) ? (obj as T) : null;\n}\n\n/**\n * Update metadata of the given model\n * @param model The model to update metadata to\n * @param callback A callback function to update metadata\n * @param definition @optional Metadata definition used for verify the metadata object\n * @returns The metadata object if any, or null\n */\nexport function updateMetadata<T>(\n    model: ShallowMutableContentModelWithDataset<T>,\n    callback?: (metadata: T | null) => T | null,\n    definition?: Definition<T>\n): T | null {\n    let obj = getMetadata(model, definition);\n\n    if (callback) {\n        obj = callback(obj);\n\n        if (!obj) {\n            delete model.dataset[EditingInfoDatasetName];\n        } else if (!definition || validate(obj, definition)) {\n            model.dataset[EditingInfoDatasetName] = JSON.stringify(obj);\n        }\n    }\n\n    return obj;\n}\n\n/**\n * Check if the given model has metadata\n * @param model The content model to check\n */\nexport function hasMetadata<T>(model: ReadonlyContentModelWithDataset<T> | HTMLElement): boolean {\n    return !!model.dataset[EditingInfoDatasetName];\n}\n","import { createBooleanDefinition, createObjectDefinition } from './definitionCreators';\nimport { getMetadata, updateMetadata } from './updateMetadata';\nimport type {\n    ReadonlyContentModelTableCell,\n    ShallowMutableContentModelTableCell,\n    TableCellMetadataFormat,\n} from 'roosterjs-content-model-types';\n\nconst TableCellMetadataFormatDefinition = createObjectDefinition<Required<TableCellMetadataFormat>>(\n    {\n        bgColorOverride: createBooleanDefinition(true /** isOptional */),\n        vAlignOverride: createBooleanDefinition(true /** isOptional */),\n        borderOverride: createBooleanDefinition(true /** isOptional */),\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Get table cell metadata\n * @param cell The table cell Content Model\n */\nexport function getTableCellMetadata(\n    cell: ReadonlyContentModelTableCell\n): TableCellMetadataFormat | null {\n    return getMetadata(cell, TableCellMetadataFormatDefinition);\n}\n\n/**\n * Update table cell metadata with a callback\n * @param cell The table cell Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateTableCellMetadata(\n    cell: ShallowMutableContentModelTableCell,\n    callback?: (format: TableCellMetadataFormat | null) => TableCellMetadataFormat | null\n): TableCellMetadataFormat | null {\n    return updateMetadata(cell, callback, TableCellMetadataFormatDefinition);\n}\n","import { getMetadata, updateMetadata } from './updateMetadata';\nimport { TableBorderFormat } from '../../constants/TableBorderFormat';\nimport {\n    createBooleanDefinition,\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from './definitionCreators';\nimport type {\n    ReadonlyContentModelTable,\n    ShallowMutableContentModelTable,\n    TableMetadataFormat,\n} from 'roosterjs-content-model-types';\n\nconst NullStringDefinition = createStringDefinition(\n    false /** isOptional */,\n    undefined /** value */,\n    true /** allowNull */\n);\n\nconst BooleanDefinition = createBooleanDefinition(false /** isOptional */);\n\nconst TableFormatDefinition = createObjectDefinition<Required<TableMetadataFormat>>(\n    {\n        topBorderColor: NullStringDefinition,\n        bottomBorderColor: NullStringDefinition,\n        verticalBorderColor: NullStringDefinition,\n        hasHeaderRow: BooleanDefinition,\n        headerRowColor: NullStringDefinition,\n        hasFirstColumn: BooleanDefinition,\n        hasBandedColumns: BooleanDefinition,\n        hasBandedRows: BooleanDefinition,\n        bgColorEven: NullStringDefinition,\n        bgColorOdd: NullStringDefinition,\n        tableBorderFormat: createNumberDefinition(\n            false /** isOptional */,\n            undefined /* value */,\n            TableBorderFormat.Min /* first table border format */,\n            TableBorderFormat.Max /* last table border format */\n        ),\n        verticalAlign: NullStringDefinition,\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Get table metadata\n * @param table The table Content Model\n */\nexport function getTableMetadata(table: ReadonlyContentModelTable): TableMetadataFormat | null {\n    return getMetadata(table, TableFormatDefinition);\n}\n\n/**\n * Update table metadata with a callback\n * @param table The table Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateTableMetadata(\n    table: ShallowMutableContentModelTable,\n    callback?: (format: TableMetadataFormat | null) => TableMetadataFormat | null\n): TableMetadataFormat | null {\n    return updateMetadata(table, callback, TableFormatDefinition);\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { Definition } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Validate the given object with a type definition object\n * @param input The object to validate\n * @param def The type definition object used for validation\n * @returns True if the object passed the validation, otherwise false\n */\nexport function validate<T>(input: any, def: Definition<T>): input is T {\n    let result = false;\n    if ((def.isOptional && typeof input === 'undefined') || (def.allowNull && input === null)) {\n        result = true;\n    } else if (\n        (!def.isOptional && typeof input === 'undefined') ||\n        (!def.allowNull && input === null)\n    ) {\n        return false;\n    } else {\n        switch (def.type) {\n            case 'string':\n                result =\n                    typeof input === 'string' &&\n                    (typeof def.value === 'undefined' || input === def.value);\n                break;\n\n            case 'number':\n                result =\n                    typeof input === 'number' &&\n                    (typeof def.value === 'undefined' || areSameNumbers(def.value, input)) &&\n                    (typeof def.minValue === 'undefined' || input >= def.minValue) &&\n                    (typeof def.maxValue === 'undefined' || input <= def.maxValue);\n                break;\n\n            case 'boolean':\n                result =\n                    typeof input === 'boolean' &&\n                    (typeof def.value === 'undefined' || input === def.value);\n                break;\n\n            case 'array':\n                result =\n                    Array.isArray(input) &&\n                    (typeof def.minLength === 'undefined' || input.length >= def.minLength) &&\n                    (typeof def.maxLength === 'undefined' || input.length <= def.maxLength) &&\n                    input.every(x => validate(x, def.itemDef));\n                break;\n\n            case 'object':\n                result =\n                    typeof input === 'object' &&\n                    getObjectKeys(def.propertyDef).every(x =>\n                        validate(input[x], def.propertyDef[x])\n                    );\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction areSameNumbers(n1: number, n2: number) {\n    return Math.abs(n1 - n2) < 1e-3;\n}\n","import { getClosestAncestorBlockGroupIndex } from '../editing/getClosestAncestorBlockGroupIndex';\nimport { isBlockGroupOfType } from '../typeCheck/isBlockGroupOfType';\nimport { iterateSelections } from './iterateSelections';\nimport { mutateBlock } from '../common/mutate';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelBlockGroupType,\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelTable,\n    IterateSelectionsOption,\n    OperationalBlocks,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelListItem,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelTable,\n    ReadonlyOperationalBlocks,\n    ReadonlyTableSelectionContext,\n    ShallowMutableContentModelParagraph,\n    ShallowMutableContentModelSegment,\n    TableSelectionContext,\n    TypeOfBlockGroup,\n} from 'roosterjs-content-model-types';\n\n//#region getSelectedSegmentsAndParagraphs\n/**\n * Get an array of selected parent paragraph and child segment pair\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item, in that case paragraph will be null\n * @param includingEntity True to include entity in result as well\n */\nexport function getSelectedSegmentsAndParagraphs(\n    model: ContentModelDocument,\n    includingFormatHolder: boolean,\n    includingEntity?: boolean\n): [ContentModelSegment, ContentModelParagraph | null, ContentModelBlockGroup[]][];\n\n/**\n * Get an array of selected parent paragraph and child segment pair, return mutable paragraph and segments\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item, in that case paragraph will be null\n * @param includingEntity True to include entity in result as well\n * @param mutate Set to true to indicate we will mutate the selected paragraphs\n */\nexport function getSelectedSegmentsAndParagraphs(\n    model: ReadonlyContentModelDocument,\n    includingFormatHolder: boolean,\n    includingEntity: boolean,\n    mutate: true\n): [\n    ShallowMutableContentModelSegment,\n    ContentModelParagraph | null,\n    ReadonlyContentModelBlockGroup[]\n][];\n\n/**\n * Get an array of selected parent paragraph and child segment pair (Readonly)\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item, in that case paragraph will be null\n * @param includingEntity True to include entity in result as well\n */\nexport function getSelectedSegmentsAndParagraphs(\n    model: ReadonlyContentModelDocument,\n    includingFormatHolder: boolean,\n    includingEntity?: boolean\n): [\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelParagraph | null,\n    ReadonlyContentModelBlockGroup[]\n][];\n\nexport function getSelectedSegmentsAndParagraphs(\n    model: ReadonlyContentModelDocument,\n    includingFormatHolder: boolean,\n    includingEntity?: boolean,\n    mutate?: boolean\n): [\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelParagraph | null,\n    ReadonlyContentModelBlockGroup[]\n][] {\n    const selections = collectSelections(model, {\n        includeListFormatHolder: includingFormatHolder ? 'allSegments' : 'never',\n    });\n    const result: [\n        ReadonlyContentModelSegment,\n        ReadonlyContentModelParagraph | null,\n        ReadonlyContentModelBlockGroup[]\n    ][] = [];\n\n    selections.forEach(({ segments, block, path }) => {\n        if (segments) {\n            if (\n                includingFormatHolder &&\n                !block &&\n                segments.length == 1 &&\n                path[0].blockGroupType == 'ListItem' &&\n                segments[0] == path[0].formatHolder\n            ) {\n                const list = path[0];\n\n                if (mutate) {\n                    mutateBlock(list);\n                }\n\n                result.push([list.formatHolder, null, path]);\n            } else if (block?.blockType == 'Paragraph') {\n                if (mutate) {\n                    mutateBlock(block);\n                }\n\n                segments.forEach(segment => {\n                    if (\n                        includingEntity ||\n                        segment.segmentType != 'Entity' ||\n                        !segment.entityFormat.isReadonly\n                    ) {\n                        result.push([segment, block, path]);\n                    }\n                });\n            }\n        } else if (block?.blockType == 'Entity' && includingEntity) {\n            // Here we treat the entity as segment since they are compatible, then it has no parent paragraph\n            result.push([block, null /*paragraph*/, path]);\n        }\n    });\n\n    return result;\n}\n//#endregion\n\n//#region getSelectedSegments\n/**\n * Get an array of selected segments from a content model\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item\n */\nexport function getSelectedSegments(\n    model: ContentModelDocument,\n    includingFormatHolder: boolean\n): ContentModelSegment[];\n\n/**\n * Get an array of selected segments from a content model, return mutable segments\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item\n * @param mutate Set to true to indicate we will mutate the selected paragraphs\n */\nexport function getSelectedSegments(\n    model: ReadonlyContentModelDocument,\n    includingFormatHolder: boolean,\n    mutate: true\n): ShallowMutableContentModelSegment[];\n\n/**\n * Get an array of selected segments from a content model (Readonly)\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item\n */\nexport function getSelectedSegments(\n    model: ReadonlyContentModelDocument,\n    includingFormatHolder: boolean\n): ReadonlyContentModelSegment[];\n\nexport function getSelectedSegments(\n    model: ReadonlyContentModelDocument,\n    includingFormatHolder: boolean,\n    mutate?: boolean\n): ReadonlyContentModelSegment[] {\n    const segments = mutate\n        ? getSelectedSegmentsAndParagraphs(\n              model,\n              includingFormatHolder,\n              false /*includeEntity*/,\n              true /*mutate*/\n          )\n        : getSelectedSegmentsAndParagraphs(model, includingFormatHolder);\n\n    return segments.map(x => x[0]);\n}\n//#endregion\n\n//#region getSelectedParagraphs\n/**\n * Get any array of selected paragraphs from a content model\n * @param model The Content Model to get selection from\n */\nexport function getSelectedParagraphs(model: ContentModelDocument): ContentModelParagraph[];\n\n/**\n * Get any array of selected paragraphs from a content model, return mutable paragraphs\n * @param model The Content Model to get selection from\n * @param mutate Set to true to indicate we will mutate the selected paragraphs\n */\nexport function getSelectedParagraphs(\n    model: ReadonlyContentModelDocument,\n    mutate: true\n): ShallowMutableContentModelParagraph[];\n\n/**\n * Get any array of selected paragraphs from a content model (Readonly)\n * @param model The Content Model to get selection from\n */\nexport function getSelectedParagraphs(\n    model: ReadonlyContentModelDocument\n): ReadonlyContentModelParagraph[];\n\nexport function getSelectedParagraphs(\n    model: ReadonlyContentModelDocument,\n    mutate?: boolean\n): ReadonlyContentModelParagraph[] {\n    const selections = collectSelections(model, { includeListFormatHolder: 'never' });\n    const result: ReadonlyContentModelParagraph[] = [];\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ block }) => {\n        if (block?.blockType == 'Paragraph') {\n            result.push(mutate ? mutateBlock(block) : block);\n        }\n    });\n\n    return result;\n}\n//#endregion\n\n//#region getOperationalBlocks\n/**\n * Get an array of block group - block pair that is of the expected block group type from selection\n * @param group The root block group to search\n * @param blockGroupTypes The expected block group types\n * @param stopTypes Block group types that will stop searching when hit\n * @param deepFirst True means search in deep first, otherwise wide first\n */\nexport function getOperationalBlocks<T extends ContentModelBlockGroup>(\n    group: ContentModelBlockGroup,\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[],\n    deepFirst?: boolean\n): OperationalBlocks<T>[];\n\n/**\n * Get an array of block group - block pair that is of the expected block group type from selection (Readonly)\n * @param group The root block group to search\n * @param blockGroupTypes The expected block group types\n * @param stopTypes Block group types that will stop searching when hit\n * @param deepFirst True means search in deep first, otherwise wide first\n */\nexport function getOperationalBlocks<T extends ReadonlyContentModelBlockGroup>(\n    group: ReadonlyContentModelBlockGroup,\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[],\n    deepFirst?: boolean\n): ReadonlyOperationalBlocks<T>[];\n\nexport function getOperationalBlocks<T extends ContentModelBlockGroup>(\n    group: ReadonlyContentModelBlockGroup,\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[],\n    deepFirst?: boolean\n): ReadonlyOperationalBlocks<T>[] {\n    const result: ReadonlyOperationalBlocks<T>[] = [];\n    const findSequence = deepFirst ? blockGroupTypes.map(type => [type]) : [blockGroupTypes];\n    const selections = collectSelections(group, {\n        includeListFormatHolder: 'never',\n        contentUnderSelectedTableCell: 'ignoreForTable', // When whole table is selected, we treat the table as a single block\n    });\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ path, block }) => {\n        for (let i = 0; i < findSequence.length; i++) {\n            const groupIndex = getClosestAncestorBlockGroupIndex(path, findSequence[i], stopTypes);\n\n            if (groupIndex >= 0) {\n                if (result.filter(x => x.block == path[groupIndex]).length <= 0) {\n                    result.push({\n                        parent: path[groupIndex + 1],\n                        block: path[groupIndex] as T,\n                        path: path.slice(groupIndex + 1),\n                    });\n                }\n                break;\n            } else if (i == findSequence.length - 1 && block) {\n                result.push({\n                    parent: path[0],\n                    block: block,\n                    path,\n                });\n                break;\n            }\n        }\n    });\n\n    return result;\n}\n//#endregion\n\n//#region getFirstSelectedTable\n/**\n * Get the first selected table from content model\n * @param model The Content Model to get selection from\n */\nexport function getFirstSelectedTable(\n    model: ContentModelDocument\n): [ContentModelTable | undefined, ContentModelBlockGroup[]];\n\n/**\n * Get the first selected table from content model (Readonly)\n * @param model The Content Model to get selection from\n */\nexport function getFirstSelectedTable(\n    model: ReadonlyContentModelDocument\n): [ReadonlyContentModelTable | undefined, ReadonlyContentModelBlockGroup[]];\n\nexport function getFirstSelectedTable(\n    model: ReadonlyContentModelDocument\n): [ReadonlyContentModelTable | undefined, ReadonlyContentModelBlockGroup[]] {\n    const selections = collectSelections(model, { includeListFormatHolder: 'never' });\n    let table: ReadonlyContentModelTable | undefined;\n    let resultPath: ReadonlyContentModelBlockGroup[] = [];\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ block, tableContext, path }) => {\n        if (!table) {\n            if (block?.blockType == 'Table') {\n                table = block;\n                resultPath = [...path];\n            } else if (tableContext?.table) {\n                table = tableContext.table;\n\n                const parent = path.filter(\n                    group => group.blocks.indexOf(tableContext.table) >= 0\n                )[0];\n                const index = path.indexOf(parent);\n                resultPath = index >= 0 ? path.slice(index) : [];\n            }\n        }\n    });\n\n    return [table, resultPath];\n}\n//#endregion\n\n//#region getFirstSelectedListItem\n/**\n * Get the first selected list item from content model\n * @param model The Content Model to get selection from\n */\nexport function getFirstSelectedListItem(\n    model: ContentModelDocument\n): ContentModelListItem | undefined;\n\n/**\n * Get the first selected list item from content model (Readonly)\n * @param model The Content Model to get selection from\n */\nexport function getFirstSelectedListItem(\n    model: ReadonlyContentModelDocument\n): ReadonlyContentModelListItem | undefined;\n\nexport function getFirstSelectedListItem(\n    model: ReadonlyContentModelDocument\n): ReadonlyContentModelListItem | undefined {\n    let listItem: ContentModelListItem | undefined;\n\n    getOperationalBlocks(model, ['ListItem'], ['TableCell']).forEach(r => {\n        if (!listItem && isBlockGroupOfType<ContentModelListItem>(r.block, 'ListItem')) {\n            listItem = r.block;\n        }\n    });\n\n    return listItem;\n}\n//#endregion\n\n//#region collectSelections\ninterface SelectionInfo {\n    path: ContentModelBlockGroup[];\n    segments?: ContentModelSegment[];\n    block?: ContentModelBlock;\n    tableContext?: TableSelectionContext;\n}\n\ninterface ReadonlySelectionInfo {\n    path: ReadonlyContentModelBlockGroup[];\n    segments?: ReadonlyContentModelSegment[];\n    block?: ReadonlyContentModelBlock;\n    tableContext?: ReadonlyTableSelectionContext;\n}\n\nfunction collectSelections(\n    group: ContentModelBlockGroup,\n    option?: IterateSelectionsOption\n): SelectionInfo[];\n\nfunction collectSelections(\n    group: ReadonlyContentModelBlockGroup,\n    option?: IterateSelectionsOption\n): ReadonlySelectionInfo[];\n\nfunction collectSelections(\n    group: ReadonlyContentModelBlockGroup,\n    option?: IterateSelectionsOption\n): ReadonlySelectionInfo[] {\n    const selections: ReadonlySelectionInfo[] = [];\n\n    iterateSelections(\n        group,\n        (path, tableContext, block, segments) => {\n            selections.push({\n                path,\n                tableContext,\n                block,\n                segments,\n            });\n        },\n        option\n    );\n\n    return selections;\n}\n//#endregion\n\n//#region utils\nfunction removeUnmeaningfulSelections(selections: ReadonlySelectionInfo[]) {\n    if (\n        selections.length > 1 &&\n        isOnlySelectionMarkerSelected(selections, false /*checkFirstParagraph*/)\n    ) {\n        selections.pop();\n    }\n\n    // Remove head paragraph if first selection marker is the only selection\n    if (\n        selections.length > 1 &&\n        isOnlySelectionMarkerSelected(selections, true /*checkFirstParagraph*/)\n    ) {\n        selections.shift();\n    }\n}\n\nfunction isOnlySelectionMarkerSelected(\n    selections: ReadonlySelectionInfo[],\n    checkFirstParagraph: boolean\n): boolean {\n    const selection = selections[checkFirstParagraph ? 0 : selections.length - 1];\n\n    if (\n        selection.block?.blockType == 'Paragraph' &&\n        selection.segments &&\n        selection.segments.length > 0\n    ) {\n        const allSegments = selection.block.segments;\n        const segment = selection.segments[0];\n\n        return (\n            selection.segments.length == 1 &&\n            segment.segmentType == 'SelectionMarker' &&\n            segment == allSegments[checkFirstParagraph ? allSegments.length - 1 : 0]\n        );\n    } else {\n        return false;\n    }\n}\n//#endregion\n","import { hasSelectionInBlockGroup } from '../selection/hasSelectionInBlockGroup';\nimport type {\n    ReadonlyContentModelTable,\n    TableSelectionCoordinates,\n} from 'roosterjs-content-model-types';\n\n/**\n * Get selection coordinates of a table. If there is no selection, return null\n * @param table The table model to get selection from\n */\nexport function getSelectedCells(\n    table: ReadonlyContentModelTable\n): TableSelectionCoordinates | null {\n    let firstRow = -1;\n    let firstColumn = -1;\n    let lastRow = -1;\n    let lastColumn = -1;\n    let hasSelection = false;\n\n    table.rows.forEach((row, rowIndex) =>\n        row.cells.forEach((cell, colIndex) => {\n            if (hasSelectionInBlockGroup(cell)) {\n                hasSelection = true;\n\n                if (firstRow < 0) {\n                    firstRow = rowIndex;\n                }\n\n                if (firstColumn < 0) {\n                    firstColumn = colIndex;\n                }\n\n                lastRow = Math.max(lastRow, rowIndex);\n                lastColumn = Math.max(lastColumn, colIndex);\n            }\n        })\n    );\n\n    return hasSelection ? { firstRow, firstColumn, lastRow, lastColumn } : null;\n}\n","import { hasSelectionInBlockGroup } from './hasSelectionInBlockGroup';\nimport { hasSelectionInSegment } from './hasSelectionInSegment';\nimport type { ReadonlyContentModelBlock } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given block\n * @param block The block to check\n */\nexport function hasSelectionInBlock(block: ReadonlyContentModelBlock): boolean {\n    switch (block.blockType) {\n        case 'Paragraph':\n            return block.segments.some(hasSelectionInSegment);\n\n        case 'Table':\n            return block.rows.some(row => row.cells.some(hasSelectionInBlockGroup));\n\n        case 'BlockGroup':\n            return hasSelectionInBlockGroup(block);\n\n        case 'Divider':\n        case 'Entity':\n            return !!block.isSelected;\n\n        default:\n            return false;\n    }\n}\n","import { hasSelectionInBlock } from './hasSelectionInBlock';\nimport type { ReadonlyContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given block\n * @param block The block to check\n */\nexport function hasSelectionInBlockGroup(group: ReadonlyContentModelBlockGroup): boolean {\n    if (group.blockGroupType == 'TableCell' && group.isSelected) {\n        return true;\n    }\n\n    if (group.blocks.some(hasSelectionInBlock)) {\n        return true;\n    }\n\n    return false;\n}\n","import { hasSelectionInBlock } from './hasSelectionInBlock';\nimport type { ReadonlyContentModelSegment } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given segment\n * @param segment The segment to check\n */\nexport function hasSelectionInSegment(segment: ReadonlyContentModelSegment): boolean {\n    return (\n        segment.isSelected ||\n        (segment.segmentType == 'General' && segment.blocks.some(hasSelectionInBlock))\n    );\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelBlockWithCache,\n    ContentModelDocument,\n    IterateSelectionsCallback,\n    IterateSelectionsOption,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelSegment,\n    ReadonlyIterateSelectionsCallback,\n    ReadonlyTableSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * This is a temporary type to pass the information of whether element cache should be persisted when possible\n */\nexport interface ContentModelDocumentWithPersistedCache extends ContentModelDocument {\n    /**\n     * When set to\n     */\n    persistCache?: boolean;\n}\n\n/**\n * Iterate all selected elements in a given model\n * @param group The given Content Model to iterate selection from\n * @param callback The callback function to access the selected element\n * @param option Option to determine how to iterate\n */\nexport function iterateSelections(\n    group: ContentModelBlockGroup,\n    callback: IterateSelectionsCallback,\n    option?: IterateSelectionsOption\n): void;\n\n/**\n * Iterate all selected elements in a given model (Readonly)\n * @param group The given Content Model to iterate selection from\n * @param callback The callback function to access the selected element\n * @param option Option to determine how to iterate\n */\nexport function iterateSelections(\n    group: ReadonlyContentModelBlockGroup,\n    callback: ReadonlyIterateSelectionsCallback,\n    option?: IterateSelectionsOption\n): void;\n\nexport function iterateSelections(\n    group: ReadonlyContentModelBlockGroup,\n    callback: ReadonlyIterateSelectionsCallback | IterateSelectionsCallback,\n    option?: IterateSelectionsOption\n): void {\n    const persistCache =\n        group.blockGroupType == 'Document'\n            ? (group as ContentModelDocumentWithPersistedCache).persistCache\n            : false;\n    const internalCallback: ReadonlyIterateSelectionsCallback = persistCache\n        ? (callback as ReadonlyIterateSelectionsCallback)\n        : (path, tableContext, block, segments) => {\n              if (!!(block as ContentModelBlockWithCache)?.cachedElement) {\n                  delete (block as ContentModelBlockWithCache).cachedElement;\n              }\n\n              return (callback as ReadonlyIterateSelectionsCallback)(\n                  path,\n                  tableContext,\n                  block,\n                  segments\n              );\n          };\n\n    internalIterateSelections([group], internalCallback, option);\n}\n\nfunction internalIterateSelections(\n    path: ReadonlyContentModelBlockGroup[],\n    callback: ReadonlyIterateSelectionsCallback,\n    option?: IterateSelectionsOption,\n    table?: ReadonlyTableSelectionContext,\n    treatAllAsSelect?: boolean\n): boolean {\n    const parent = path[0];\n    const includeListFormatHolder = option?.includeListFormatHolder || 'allSegments';\n    const contentUnderSelectedTableCell = option?.contentUnderSelectedTableCell || 'include';\n    const contentUnderSelectedGeneralElement =\n        option?.contentUnderSelectedGeneralElement || 'contentOnly';\n\n    let hasSelectedSegment = false;\n    let hasUnselectedSegment = false;\n\n    for (let i = 0; i < parent.blocks.length; i++) {\n        const block = parent.blocks[i];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                const newPath = [block, ...path];\n\n                if (block.blockGroupType == 'General') {\n                    const isSelected = treatAllAsSelect || block.isSelected;\n                    const handleGeneralContent =\n                        !isSelected ||\n                        contentUnderSelectedGeneralElement == 'both' ||\n                        contentUnderSelectedGeneralElement == 'contentOnly';\n                    const handleGeneralElement =\n                        isSelected &&\n                        (contentUnderSelectedGeneralElement == 'both' ||\n                            contentUnderSelectedGeneralElement == 'generalElementOnly' ||\n                            block.blocks.length == 0);\n\n                    if (\n                        (handleGeneralContent &&\n                            internalIterateSelections(\n                                newPath,\n                                callback,\n                                option,\n                                table,\n                                isSelected\n                            )) ||\n                        (handleGeneralElement && callback(path, table, block))\n                    ) {\n                        return true;\n                    }\n                } else if (\n                    internalIterateSelections(newPath, callback, option, table, treatAllAsSelect)\n                ) {\n                    return true;\n                }\n                break;\n\n            case 'Table':\n                const rows = block.rows;\n                const isWholeTableSelected = rows.every(row =>\n                    row.cells.every(cell => cell.isSelected)\n                );\n\n                if (contentUnderSelectedTableCell != 'include' && isWholeTableSelected) {\n                    if (callback(path, table, block)) {\n                        return true;\n                    }\n                } else {\n                    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                        const row = rows[rowIndex];\n\n                        for (let colIndex = 0; colIndex < row.cells.length; colIndex++) {\n                            const cell = row.cells[colIndex];\n                            if (!cell) {\n                                continue;\n                            }\n\n                            const newTable: ReadonlyTableSelectionContext = {\n                                table: block,\n                                rowIndex,\n                                colIndex,\n                                isWholeTableSelected,\n                            };\n\n                            if (cell.isSelected && callback(path, newTable)) {\n                                return true;\n                            }\n\n                            if (\n                                !cell.isSelected ||\n                                contentUnderSelectedTableCell != 'ignoreForTableOrCell'\n                            ) {\n                                const newPath = [cell, ...path];\n                                const isSelected = treatAllAsSelect || cell.isSelected;\n\n                                if (\n                                    internalIterateSelections(\n                                        newPath,\n                                        callback,\n                                        option,\n                                        newTable,\n                                        isSelected\n                                    )\n                                ) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                break;\n\n            case 'Paragraph':\n                const segments: ReadonlyContentModelSegment[] = [];\n\n                for (let i = 0; i < block.segments.length; i++) {\n                    const segment = block.segments[i];\n                    const isSelected = treatAllAsSelect || segment.isSelected;\n\n                    if (segment.segmentType == 'General') {\n                        const handleGeneralContent =\n                            !isSelected ||\n                            contentUnderSelectedGeneralElement == 'both' ||\n                            contentUnderSelectedGeneralElement == 'contentOnly';\n                        const handleGeneralElement =\n                            isSelected &&\n                            (contentUnderSelectedGeneralElement == 'both' ||\n                                contentUnderSelectedGeneralElement == 'generalElementOnly' ||\n                                segment.blocks.length == 0);\n\n                        if (\n                            handleGeneralContent &&\n                            internalIterateSelections(\n                                [segment, ...path],\n                                callback,\n                                option,\n                                table,\n                                isSelected\n                            )\n                        ) {\n                            return true;\n                        }\n\n                        if (handleGeneralElement) {\n                            segments.push(segment);\n                        }\n                    } else if (isSelected) {\n                        segments.push(segment);\n                    }\n\n                    if (isSelected) {\n                        hasSelectedSegment = true;\n                    } else {\n                        hasUnselectedSegment = true;\n                    }\n                }\n\n                if (segments.length > 0 && callback(path, table, block, segments)) {\n                    return true;\n                }\n                break;\n\n            case 'Divider':\n            case 'Entity':\n                if ((treatAllAsSelect || block.isSelected) && callback(path, table, block)) {\n                    return true;\n                }\n\n                break;\n        }\n    }\n\n    if (\n        includeListFormatHolder != 'never' &&\n        parent.blockGroupType == 'ListItem' &&\n        hasSelectedSegment &&\n        (!hasUnselectedSegment || includeListFormatHolder == 'anySegment') &&\n        // When whole list item is selected, also add its format holder as selected segment\n        callback(path, table, undefined /*block*/, [parent.formatHolder])\n    ) {\n        return true;\n    }\n\n    return false;\n}\n","import { isGeneralSegment } from '../typeCheck/isGeneralSegment';\nimport { mutateBlock, mutateSegment } from '../common/mutate';\nimport type {\n    MutableType,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n    ReadonlyContentModelTable,\n    ReadonlySelectable,\n    ShallowMutableSelectable,\n    TableCellCoordinate,\n} from 'roosterjs-content-model-types';\n\n/**\n * Set selection into Content Model. If the Content Model already has selection, existing selection will be overwritten by the new one.\n * @param group The root level group of Content Model\n * @param start The start selected element. If not passed, existing selection of content model will be cleared\n * @param end The end selected element. If not passed, only the start element will be selected. If passed, all elements between start and end elements will be selected\n */\nexport function setSelection(\n    group: ReadonlyContentModelBlockGroup,\n    start?: ReadonlySelectable,\n    end?: ReadonlySelectable\n) {\n    setSelectionToBlockGroup(group, false /*isInSelection*/, start || null, end || null);\n}\n\nfunction setSelectionToBlockGroup(\n    group: ReadonlyContentModelBlockGroup,\n    isInSelection: boolean,\n    start: ReadonlySelectable | null,\n    end: ReadonlySelectable | null\n): boolean {\n    return handleSelection(isInSelection, group, start, end, isInSelection => {\n        if (isGeneralSegment(group) && needToSetSelection(group, isInSelection)) {\n            setIsSelected(mutateBlock(group), isInSelection);\n        }\n\n        const blocksToDelete: number[] = [];\n\n        group.blocks.forEach((block, i) => {\n            isInSelection = setSelectionToBlock(block, isInSelection, start, end);\n\n            if (block.blockType == 'Paragraph' && block.segments.length == 0 && block.isImplicit) {\n                blocksToDelete.push(i);\n            }\n        });\n\n        let index: number | undefined;\n\n        if (blocksToDelete.length > 0) {\n            const mutableGroup = mutateBlock(group);\n\n            while ((index = blocksToDelete.pop()) !== undefined) {\n                if (index >= 0) {\n                    mutableGroup.blocks.splice(index, 1);\n                }\n            }\n        }\n\n        return isInSelection;\n    });\n}\n\nfunction setSelectionToBlock(\n    block: ReadonlyContentModelBlock,\n    isInSelection: boolean,\n    start: ReadonlySelectable | null,\n    end: ReadonlySelectable | null\n) {\n    switch (block.blockType) {\n        case 'BlockGroup':\n            return setSelectionToBlockGroup(block, isInSelection, start, end);\n\n        case 'Table':\n            return setSelectionToTable(block, isInSelection, start, end);\n\n        case 'Divider':\n        case 'Entity':\n            return handleSelection(isInSelection, block, start, end, isInSelection => {\n                if (needToSetSelection(block, isInSelection)) {\n                    const mutableBlock = mutateBlock(block);\n\n                    if (isInSelection) {\n                        mutableBlock.isSelected = true;\n                    } else {\n                        delete mutableBlock.isSelected;\n                    }\n                }\n\n                return isInSelection;\n            });\n\n        case 'Paragraph':\n            const segmentsToDelete: number[] = [];\n\n            block.segments.forEach((segment, i) => {\n                isInSelection = handleSelection(\n                    isInSelection,\n                    segment,\n                    start,\n                    end,\n                    isInSelection => {\n                        return setSelectionToSegment(\n                            block,\n                            segment,\n                            isInSelection,\n                            segmentsToDelete,\n                            start,\n                            end,\n                            i\n                        );\n                    }\n                );\n            });\n\n            if (segmentsToDelete.length > 0) {\n                const mutablePara = mutateBlock(block);\n\n                let index: number | undefined;\n\n                while ((index = segmentsToDelete.pop()) !== undefined) {\n                    if (index >= 0) {\n                        mutablePara.segments.splice(index, 1);\n                    }\n                }\n            }\n\n            return isInSelection;\n\n        default:\n            return isInSelection;\n    }\n}\n\nfunction setSelectionToTable(\n    table: ReadonlyContentModelTable,\n    isInSelection: boolean,\n    start: ReadonlySelectable | null,\n    end: ReadonlySelectable | null\n): boolean {\n    const first = findCell(table, start);\n    const last = end ? findCell(table, end) : first;\n\n    if (!isInSelection) {\n        for (let row = 0; row < table.rows.length; row++) {\n            const currentRow = table.rows[row];\n            for (let col = 0; col < currentRow.cells.length; col++) {\n                const currentCell = table.rows[row].cells[col];\n                const isSelected =\n                    row >= first.row && row <= last.row && col >= first.col && col <= last.col;\n\n                if (needToSetSelection(currentCell, isSelected)) {\n                    setIsSelected(mutateBlock(currentCell), isSelected);\n                }\n\n                if (!isSelected) {\n                    setSelectionToBlockGroup(currentCell, false /*isInSelection*/, start, end);\n                }\n            }\n        }\n    } else {\n        table.rows.forEach(row =>\n            row.cells.forEach(cell => {\n                const wasInSelection = isInSelection;\n\n                isInSelection = setSelectionToBlockGroup(cell, isInSelection, start, end);\n\n                if (wasInSelection && isInSelection) {\n                    mutateBlock(cell).isSelected = true;\n                }\n            })\n        );\n    }\n\n    return isInSelection;\n}\n\nfunction findCell(\n    table: ReadonlyContentModelTable,\n    cell: ReadonlySelectable | null\n): TableCellCoordinate {\n    let col = -1;\n    const row = cell\n        ? table.rows.findIndex(\n              row => (col = (row.cells as ReadonlyArray<ReadonlySelectable>).indexOf(cell)) >= 0\n          )\n        : -1;\n\n    return { row, col };\n}\n\nfunction setSelectionToSegment(\n    paragraph: ReadonlyContentModelParagraph,\n    segment: ReadonlyContentModelSegment,\n    isInSelection: boolean,\n    segmentsToDelete: number[],\n    start: ReadonlySelectable | null,\n    end: ReadonlySelectable | null,\n    i: number\n) {\n    switch (segment.segmentType) {\n        case 'SelectionMarker':\n            if (!isInSelection || (segment != start && segment != end)) {\n                // Delete the selection marker when\n                // 1. It is not in selection any more. Or\n                // 2. It is in middle of selection, so no need to have it\n                segmentsToDelete.push(i);\n            }\n            return isInSelection;\n\n        case 'General':\n            internalSetSelectionToSegment(paragraph, segment, isInSelection);\n\n            return segment != start && segment != end\n                ? setSelectionToBlockGroup(segment, isInSelection, start, end)\n                : isInSelection;\n\n        case 'Image':\n            const isSelectedAsImageSelection = start == segment && (!end || end == segment);\n\n            internalSetSelectionToSegment(\n                paragraph,\n                segment,\n                isInSelection,\n                !segment.isSelectedAsImageSelection != !isSelectedAsImageSelection\n                    ? image => (image.isSelectedAsImageSelection = isSelectedAsImageSelection)\n                    : undefined\n            );\n\n            return isInSelection;\n        default:\n            internalSetSelectionToSegment(paragraph, segment, isInSelection);\n            return isInSelection;\n    }\n}\n\nfunction internalSetSelectionToSegment<T extends ReadonlyContentModelSegment>(\n    paragraph: ReadonlyContentModelParagraph,\n    segment: T,\n    isInSelection: boolean,\n    additionAction?: (segment: MutableType<T>) => void\n) {\n    if (additionAction || needToSetSelection(segment, isInSelection)) {\n        mutateSegment(paragraph, segment, mutableSegment => {\n            setIsSelected(mutableSegment, isInSelection);\n            additionAction?.(mutableSegment);\n        });\n    }\n}\n\nfunction needToSetSelection(selectable: ReadonlySelectable, isSelected: boolean) {\n    return !selectable.isSelected != !isSelected;\n}\n\nfunction setIsSelected(selectable: ShallowMutableSelectable, value: boolean) {\n    if (value) {\n        selectable.isSelected = true;\n    } else {\n        delete selectable.isSelected;\n    }\n\n    return value;\n}\n\nfunction handleSelection(\n    isInSelection: boolean,\n    model: ReadonlyContentModelBlockGroup | ReadonlyContentModelBlock | ReadonlyContentModelSegment,\n    start: ReadonlySelectable | null,\n    end: ReadonlySelectable | null,\n    callback: (isInSelection: boolean) => boolean\n) {\n    isInSelection = isInSelection || model == start;\n    isInSelection = callback(isInSelection);\n    return isInSelection && !!end && model != end;\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    TypeOfBlockGroup,\n} from 'roosterjs-content-model-types';\n\n/**\n * Check if the given content model block or block group is of the expected block group type\n * @param input The object to check\n * @param type The expected type\n */\nexport function isBlockGroupOfType<T extends ContentModelBlockGroup>(\n    input: ContentModelBlock | ContentModelBlockGroup | null | undefined,\n    type: TypeOfBlockGroup<T>\n): input is T;\n\n/**\n * Check if the given content model block or block group is of the expected block group type (Readonly)\n * @param input The object to check\n * @param type The expected type\n */\nexport function isBlockGroupOfType<T extends ReadonlyContentModelBlockGroup>(\n    input: ReadonlyContentModelBlock | ReadonlyContentModelBlockGroup | null | undefined,\n    type: TypeOfBlockGroup<T>\n): input is T;\n\nexport function isBlockGroupOfType<\n    T extends ContentModelBlockGroup | ReadonlyContentModelBlockGroup\n>(\n    input:\n        | ReadonlyContentModelBlock\n        | ReadonlyContentModelBlockGroup\n        | ContentModelBlock\n        | ContentModelBlockGroup\n        | null\n        | undefined,\n    type: TypeOfBlockGroup<T>\n): input is T {\n    const item = <T | null | undefined>input;\n\n    return item?.blockGroupType == type;\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelGeneralSegment,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelGeneralSegment,\n    ShallowMutableContentModelBlockGroup,\n    ShallowMutableContentModelGeneralSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Check if the given block group is a general segment\n * @param group The group to check\n */\nexport function isGeneralSegment(\n    group: ContentModelBlockGroup | ContentModelGeneralSegment\n): group is ContentModelGeneralSegment;\n\n/**\n * Check if the given block group is a general segment (Shallow mutable)\n * @param group The group to check\n */\nexport function isGeneralSegment(\n    group: ShallowMutableContentModelBlockGroup | ShallowMutableContentModelGeneralSegment\n): group is ShallowMutableContentModelGeneralSegment;\n\n/**\n * Check if the given block group is a general segment (Readonly)\n * @param group The group to check\n */\nexport function isGeneralSegment(\n    group: ReadonlyContentModelBlockGroup | ReadonlyContentModelGeneralSegment\n): group is ReadonlyContentModelGeneralSegment;\n\nexport function isGeneralSegment(\n    group: ReadonlyContentModelBlockGroup | ReadonlyContentModelGeneralSegment\n): group is ContentModelGeneralSegment {\n    return (\n        group.blockGroupType == 'General' &&\n        (<ContentModelGeneralSegment>group).segmentType == 'General'\n    );\n}\n","import { isNodeOfType } from '../domUtils/isNodeOfType';\nimport { toArray } from '../domUtils/toArray';\nimport type { ContentModelDocumentWithPersistedCache } from '../modelApi/selection/iterateSelections';\nimport type {\n    ContentModelDocument,\n    DOMSelection,\n    ModelToDomBlockAndSegmentNode,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create DOM tree fragment from Content Model document\n * @param doc Document object of the target DOM tree\n * @param root Target node that will become the container of new DOM tree.\n * When a DOM node with existing node is passed, it will be merged with content model so that unchanged blocks\n * won't be touched.\n * @param model The content model document to generate DOM tree from\n * @param context The context object for Content Model to DOM conversion\n * @returns The selection range created in DOM tree from this model, or null when there is no selection\n */\nexport function contentModelToDom(\n    doc: Document,\n    root: Node,\n    model: ContentModelDocument,\n    context: ModelToDomContext\n): DOMSelection | null {\n    context.modelHandlers.blockGroupChildren(doc, root, model, context);\n\n    const range = extractSelectionRange(doc, context);\n\n    if (model.hasRevertedRangeSelection && range?.type == 'range') {\n        range.isReverted = true;\n    }\n\n    if (context.domIndexer && context.allowCacheElement) {\n        (model as ContentModelDocumentWithPersistedCache).persistCache = true;\n    }\n\n    root.normalize();\n\n    return range;\n}\n\nfunction extractSelectionRange(doc: Document, context: ModelToDomContext): DOMSelection | null {\n    const {\n        regularSelection: { start, end },\n        tableSelection,\n        imageSelection,\n    } = context;\n\n    let startPosition: { container: Node; offset: number } | undefined;\n    let endPosition: { container: Node; offset: number } | undefined;\n\n    if (imageSelection) {\n        return imageSelection;\n    } else if (\n        (startPosition = start && calcPosition(start)) &&\n        (endPosition = end && calcPosition(end))\n    ) {\n        const range = doc.createRange();\n\n        range.setStart(startPosition.container, startPosition.offset);\n        range.setEnd(endPosition.container, endPosition.offset);\n\n        return {\n            type: 'range',\n            range,\n            isReverted: false,\n        };\n    } else if (tableSelection) {\n        return tableSelection;\n    } else {\n        return null;\n    }\n}\n\nfunction calcPosition(\n    pos: ModelToDomBlockAndSegmentNode\n): { container: Node; offset: number } | undefined {\n    let result: { container: Node; offset: number } | undefined;\n\n    if (pos.block) {\n        if (!pos.segment) {\n            result = { container: pos.block, offset: 0 };\n        } else if (isNodeOfType(pos.segment, 'TEXT_NODE')) {\n            result = {\n                container: pos.segment,\n                offset: pos.offset ?? pos.segment.nodeValue?.length ?? 0,\n            };\n        } else if (pos.segment.parentNode) {\n            result = {\n                container: pos.segment.parentNode,\n                offset:\n                    toArray(pos.segment.parentNode.childNodes as NodeListOf<Node>).indexOf(\n                        pos.segment\n                    ) + 1,\n            };\n        }\n    }\n\n    if (result && isNodeOfType(result.container, 'DOCUMENT_FRAGMENT_NODE')) {\n        const childNodes = result.container.childNodes;\n\n        if (childNodes.length > result.offset) {\n            result = { container: childNodes[result.offset], offset: 0 };\n        } else if (result.container.lastChild) {\n            const container = result.container.lastChild;\n            result = {\n                container,\n                offset: isNodeOfType(container, 'TEXT_NODE')\n                    ? container.nodeValue?.length ?? 0\n                    : container.childNodes.length,\n            };\n        } else {\n            result = undefined;\n        }\n    }\n\n    return result;\n}\n","import { defaultContentModelHandlers } from './defaultContentModelHandlers';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport {\n    defaultFormatAppliers,\n    defaultFormatKeysPerCategory,\n} from '../../formatHandlers/defaultFormatHandlers';\nimport type {\n    RewriteFromModelContext,\n    EditorContext,\n    FormatApplier,\n    FormatAppliers,\n    FormatAppliersPerCategory,\n    ModelToDomContext,\n    ModelToDomFormatContext,\n    ModelToDomOption,\n    ModelToDomSelectionContext,\n    ModelToDomSettings,\n    TextFormatApplier,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create context object fro Content Model to DOM conversion\n * @param editorContext Context of editor\n * @param options Option array to customize the Model to DOM conversion behavior\n */\nexport function createModelToDomContext(\n    editorContext?: EditorContext,\n    ...options: (ModelToDomOption | undefined)[]\n): ModelToDomContext {\n    return createModelToDomContextWithConfig(createModelToDomConfig(options), editorContext);\n}\n\n/**\n * Create context object for Content Model to DOM conversion with an existing configure\n * @param config A full config object to define how to convert Content Model to DOM tree\n * @param editorContext Context of editor\n */\nexport function createModelToDomContextWithConfig(\n    config: ModelToDomSettings,\n    editorContext?: EditorContext\n): ModelToDomContext {\n    return Object.assign(\n        {},\n        editorContext,\n        createModelToDomSelectionContext(),\n        createModelToDomFormatContext(),\n        createRewriteFromModelContext(),\n        config\n    );\n}\n\nfunction createModelToDomSelectionContext(): ModelToDomSelectionContext {\n    return {\n        regularSelection: {\n            current: {\n                block: null,\n                segment: null,\n            },\n        },\n    };\n}\n\nfunction createModelToDomFormatContext(): ModelToDomFormatContext {\n    return {\n        listFormat: {\n            threadItemCounts: [],\n            nodeStack: [],\n        },\n        implicitFormat: {},\n    };\n}\n\nfunction createRewriteFromModelContext(): RewriteFromModelContext {\n    return {\n        rewriteFromModel: {\n            addedBlockElements: [],\n            removedBlockElements: [],\n        },\n    };\n}\n\n/**\n * Create Content Model to DOM Config object\n * @param options All customizations of DOM creation\n */\nexport function createModelToDomConfig(\n    options: (ModelToDomOption | undefined)[]\n): ModelToDomSettings {\n    return {\n        modelHandlers: Object.assign(\n            {},\n            defaultContentModelHandlers,\n            ...options.map(x => x?.modelHandlerOverride)\n        ),\n        formatAppliers: buildFormatAppliers(\n            options.map(x => x?.formatApplierOverride),\n            options.map(x => x?.additionalFormatAppliers)\n        ),\n        defaultModelHandlers: defaultContentModelHandlers,\n        defaultFormatAppliers,\n        metadataAppliers: Object.assign({}, ...options.map(x => x?.metadataAppliers)),\n    };\n}\n\n/**\n * @internal Export for test only\n * Build format appliers used by Content Model to DOM conversion\n */\nexport function buildFormatAppliers(\n    overrides: (Partial<FormatAppliers> | undefined)[] = [],\n    additionalAppliersArray: (Partial<FormatAppliersPerCategory> | undefined)[] = []\n): FormatAppliersPerCategory {\n    const combinedOverrides = Object.assign({}, ...overrides);\n\n    const result = getObjectKeys(defaultFormatKeysPerCategory).reduce(\n        (result, key) => {\n            const value = defaultFormatKeysPerCategory[key]\n                .map(\n                    formatKey =>\n                        (combinedOverrides[formatKey] === undefined\n                            ? defaultFormatAppliers[formatKey]\n                            : combinedOverrides[formatKey]) as FormatApplier<any>\n                )\n                .concat(\n                    ...additionalAppliersArray.map(\n                        appliers => (appliers?.[key] ?? []) as FormatApplier<any>[]\n                    )\n                );\n\n            result[key] = value;\n\n            return result;\n        },\n        {\n            text: [] as TextFormatApplier[],\n        } as FormatAppliersPerCategory\n    );\n\n    additionalAppliersArray.forEach(appliers => {\n        if (appliers?.text) {\n            result.text = result.text.concat(appliers.text);\n        }\n    });\n\n    return result;\n}\n","import { handleBlock } from '../handlers/handleBlock';\nimport { handleBlockGroupChildren } from '../handlers/handleBlockGroupChildren';\nimport { handleBr } from '../handlers/handleBr';\nimport { handleDivider } from '../handlers/handleDivider';\nimport { handleEntityBlock, handleEntitySegment } from '../handlers/handleEntity';\nimport { handleFormatContainer } from '../handlers/handleFormatContainer';\nimport { handleGeneralBlock, handleGeneralSegment } from '../handlers/handleGeneralModel';\nimport { handleImage } from '../handlers/handleImage';\nimport { handleList } from '../handlers/handleList';\nimport { handleListItem } from '../handlers/handleListItem';\nimport { handleParagraph } from '../handlers/handleParagraph';\nimport { handleSegment } from '../handlers/handleSegment';\nimport { handleSegmentDecorator } from '../handlers/handleSegmentDecorator';\nimport { handleTable } from '../handlers/handleTable';\nimport { handleText } from '../handlers/handleText';\nimport type { ContentModelHandlerMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const defaultContentModelHandlers: ContentModelHandlerMap = {\n    block: handleBlock,\n    blockGroupChildren: handleBlockGroupChildren,\n    br: handleBr,\n    entityBlock: handleEntityBlock,\n    entitySegment: handleEntitySegment,\n    generalBlock: handleGeneralBlock,\n    generalSegment: handleGeneralSegment,\n    divider: handleDivider,\n    image: handleImage,\n    list: handleList,\n    listItem: handleListItem,\n    paragraph: handleParagraph,\n    formatContainer: handleFormatContainer,\n    segment: handleSegment,\n    segmentDecorator: handleSegmentDecorator,\n    table: handleTable,\n    text: handleText,\n};\n","import type {\n    ContentModelBlock,\n    ContentModelBlockHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBlock: ContentModelBlockHandler<ContentModelBlock> = (\n    doc: Document,\n    parent: Node,\n    block: ContentModelBlock,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    const handlers = context.modelHandlers;\n\n    switch (block.blockType) {\n        case 'Table':\n            refNode = handlers.table(doc, parent, block, context, refNode);\n            break;\n        case 'Paragraph':\n            refNode = handlers.paragraph(doc, parent, block, context, refNode);\n            break;\n        case 'Entity':\n            refNode = handlers.entityBlock(doc, parent, block, context, refNode);\n            break;\n        case 'Divider':\n            refNode = handlers.divider(doc, parent, block, context, refNode);\n            break;\n        case 'BlockGroup':\n            switch (block.blockGroupType) {\n                case 'General':\n                    refNode = handlers.generalBlock(doc, parent, block, context, refNode);\n                    break;\n\n                case 'FormatContainer':\n                    refNode = handlers.formatContainer(doc, parent, block, context, refNode);\n                    break;\n\n                case 'ListItem':\n                    refNode = handlers.listItem(doc, parent, block, context, refNode);\n                    break;\n            }\n\n            break;\n    }\n\n    return refNode;\n};\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBlockGroupChildren: ContentModelHandler<ContentModelBlockGroup> = (\n    doc: Document,\n    parent: Node,\n    group: ContentModelBlockGroup,\n    context: ModelToDomContext\n) => {\n    const { listFormat } = context;\n    const nodeStack = listFormat.nodeStack;\n    let refNode: Node | null = parent.firstChild;\n\n    try {\n        group.blocks.forEach((childBlock, index) => {\n            // When process list, we need a node stack.\n            // When there are two continuous lists, they should share the same stack\n            // so that list items with same type/threadId can be merged into the same list element\n            // In other cases, clear the stack so that two separate lists won't share the same list element\n            if (\n                index == 0 ||\n                childBlock.blockType != 'BlockGroup' ||\n                childBlock.blockGroupType != 'ListItem'\n            ) {\n                listFormat.nodeStack = [];\n            }\n\n            refNode = context.modelHandlers.block(doc, parent, childBlock, context, refNode);\n\n            if (childBlock.blockType == 'Entity') {\n                context.domIndexer?.onBlockEntity(childBlock, group);\n            }\n        });\n\n        // Remove all rest node if any since they don't appear in content model\n        while (refNode) {\n            const next = refNode.nextSibling;\n\n            if (isNodeOfType(refNode, 'ELEMENT_NODE')) {\n                context.rewriteFromModel.removedBlockElements.push(refNode);\n            }\n\n            refNode.parentNode?.removeChild(refNode);\n            refNode = next;\n        }\n    } finally {\n        listFormat.nodeStack = nodeStack;\n    }\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport type { ContentModelBr, ContentModelSegmentHandler } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBr: ContentModelSegmentHandler<ContentModelBr> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const br = doc.createElement('br');\n    const element = doc.createElement('span');\n    element.appendChild(br);\n    parent.appendChild(element);\n\n    handleSegmentCommon(doc, br, element, segment, context, segmentNodes);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelDivider,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleDivider: ContentModelBlockHandler<ContentModelDivider> = (\n    doc: Document,\n    parent: Node,\n    divider: ContentModelDivider,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let element = context.allowCacheElement ? divider.cachedElement : undefined;\n\n    if (element && !divider.isSelected) {\n        refNode = reuseCachedElement(parent, element, refNode, context.rewriteFromModel);\n    } else {\n        element = doc.createElement(divider.tagName);\n\n        if (context.allowCacheElement) {\n            divider.cachedElement = element;\n        }\n\n        parent.insertBefore(element, refNode);\n        context.rewriteFromModel.addedBlockElements.push(element);\n\n        applyFormat(element, context.formatAppliers.divider, divider.format, context);\n\n        if (divider.size) {\n            element.setAttribute('size', divider.size);\n        }\n    }\n\n    context.onNodeCreated?.(divider, element);\n\n    return refNode;\n};\n","import { addDelimiters } from '../../domUtils/entityUtils';\nimport { applyFormat } from '../utils/applyFormat';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { wrap } from '../../domUtils/wrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelEntity,\n    ContentModelSegmentFormat,\n    ContentModelSegmentHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst BlockEntityContainer = '_E_EBlockEntityContainer';\n\n/**\n * @internal\n */\nexport const handleEntityBlock: ContentModelBlockHandler<ContentModelEntity> = (\n    doc,\n    parent,\n    entityModel,\n    context,\n    refNode\n) => {\n    const { entityFormat, wrapper } = entityModel;\n\n    applyFormat(wrapper, context.formatAppliers.entity, entityFormat, context);\n\n    const isCursorAroundEntity =\n        context.addDelimiterForEntity &&\n        wrapper.style.display == 'inline-block' &&\n        wrapper.style.width == '100%';\n    const isContained = wrapper.parentElement?.classList.contains(BlockEntityContainer);\n    const elementToReuse = isContained && isCursorAroundEntity ? wrapper.parentElement! : wrapper;\n\n    refNode = reuseCachedElement(parent, elementToReuse, refNode, context.rewriteFromModel);\n\n    if (isCursorAroundEntity) {\n        if (!isContained) {\n            const element = wrap(doc, wrapper, 'div');\n            element.classList.add(BlockEntityContainer);\n        }\n        addDelimiters(doc, wrapper, getSegmentFormat(context), context);\n    }\n\n    context.onNodeCreated?.(entityModel, wrapper);\n\n    return refNode;\n};\n\n/**\n * @internal\n */\nexport const handleEntitySegment: ContentModelSegmentHandler<ContentModelEntity> = (\n    doc,\n    parent,\n    entityModel,\n    context,\n    newSegments\n) => {\n    const { entityFormat, wrapper, format } = entityModel;\n\n    parent.appendChild(wrapper);\n    newSegments?.push(wrapper);\n\n    if (getObjectKeys(format).length > 0) {\n        const span = wrap(doc, wrapper, 'span');\n\n        applyFormat(span, context.formatAppliers.segment, format, context);\n    }\n\n    applyFormat(wrapper, context.formatAppliers.entity, entityFormat, context);\n\n    if (context.addDelimiterForEntity && entityFormat.isReadonly) {\n        const [after, before] = addDelimiters(doc, wrapper, getSegmentFormat(context), context);\n\n        if (newSegments) {\n            newSegments.push(after, before);\n\n            if (after.firstChild) {\n                newSegments.push(after.firstChild);\n            }\n\n            if (before.firstChild) {\n                newSegments.push(before.firstChild);\n            }\n        }\n\n        context.regularSelection.current.segment = after;\n    } else {\n        context.regularSelection.current.segment = wrapper;\n    }\n\n    context.onNodeCreated?.(entityModel, wrapper);\n};\nfunction getSegmentFormat(\n    context: ModelToDomContext\n): ContentModelSegmentFormat | null | undefined {\n    return {\n        ...context.pendingFormat?.format,\n        ...context.defaultFormat,\n    };\n}\n","import { applyFormat } from '../utils/applyFormat';\nimport { isBlockGroupEmpty } from '../../modelApi/common/isEmpty';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockHandler,\n    ContentModelFormatContainer,\n    ContentModelSegmentFormat,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst PreChildFormat: ContentModelSegmentFormat & ContentModelBlockFormat = {\n    fontFamily: 'monospace',\n    whiteSpace: 'pre',\n};\n\n/**\n * @internal\n */\nexport const handleFormatContainer: ContentModelBlockHandler<ContentModelFormatContainer> = (\n    doc: Document,\n    parent: Node,\n    container: ContentModelFormatContainer,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let element = context.allowCacheElement ? container.cachedElement : undefined;\n\n    if (element) {\n        refNode = reuseCachedElement(parent, element, refNode, context.rewriteFromModel);\n\n        context.modelHandlers.blockGroupChildren(doc, element, container, context);\n    } else if (!isBlockGroupEmpty(container)) {\n        const containerNode = doc.createElement(container.tagName);\n\n        if (context.allowCacheElement) {\n            container.cachedElement = containerNode;\n        }\n\n        parent.insertBefore(containerNode, refNode);\n        context.rewriteFromModel.addedBlockElements.push(containerNode);\n\n        stackFormat(context, container.tagName, () => {\n            applyFormat(containerNode, context.formatAppliers.container, container.format, context);\n            applyFormat(\n                containerNode,\n                context.formatAppliers.segmentOnBlock,\n                container.format,\n                context\n            );\n\n            applyFormat(containerNode, context.formatAppliers.container, container.format, context);\n        });\n\n        if (container.tagName == 'pre') {\n            stackFormat(context, PreChildFormat, () => {\n                context.modelHandlers.blockGroupChildren(doc, containerNode, container, context);\n            });\n        } else {\n            context.modelHandlers.blockGroupChildren(doc, containerNode, container, context);\n        }\n\n        element = containerNode;\n    }\n\n    if (element) {\n        context.onNodeCreated?.(container, element);\n    }\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { wrap } from '../../domUtils/wrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelGeneralBlock,\n    ContentModelGeneralSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleGeneralBlock: ContentModelBlockHandler<ContentModelGeneralBlock> = (\n    doc,\n    parent,\n    group,\n    context,\n    refNode\n) => {\n    let node: HTMLElement = group.element;\n\n    if (refNode && node.parentNode == parent) {\n        refNode = reuseCachedElement(parent, node, refNode, context.rewriteFromModel);\n    } else {\n        node = node.cloneNode() as HTMLElement;\n        group.element = node as HTMLElement;\n\n        applyFormat(node, context.formatAppliers.general, group.format, context);\n\n        parent.insertBefore(node, refNode);\n        context.rewriteFromModel.addedBlockElements.push(node);\n    }\n\n    context.onNodeCreated?.(group, node);\n    context.modelHandlers.blockGroupChildren(doc, node, group, context);\n\n    return refNode;\n};\n\n/**\n * @internal\n */\nexport const handleGeneralSegment: ContentModelSegmentHandler<ContentModelGeneralSegment> = (\n    doc,\n    parent,\n    group,\n    context,\n    segmentNodes\n) => {\n    const node = group.element.cloneNode() as HTMLElement;\n    group.element = node;\n    parent.appendChild(node);\n\n    if (isNodeOfType(node, 'ELEMENT_NODE')) {\n        const element = wrap(doc, node, 'span');\n\n        handleSegmentCommon(doc, node, element, group, context, segmentNodes);\n        applyFormat(node, context.formatAppliers.general, group.format, context);\n\n        context.onNodeCreated?.(group, node);\n    }\n\n    context.modelHandlers.blockGroupChildren(doc, node, group, context);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport { parseValueWithUnit } from '../../formatHandlers/utils/parseValueWithUnit';\nimport type { ContentModelImage, ContentModelSegmentHandler } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleImage: ContentModelSegmentHandler<ContentModelImage> = (\n    doc,\n    parent,\n    imageModel,\n    context,\n    segmentNodes\n) => {\n    const img = doc.createElement('img');\n    const element = document.createElement('span');\n\n    parent.appendChild(element);\n    element.appendChild(img);\n\n    img.src = imageModel.src;\n\n    if (imageModel.alt) {\n        img.alt = imageModel.alt;\n    }\n\n    if (imageModel.title) {\n        img.title = imageModel.title;\n    }\n\n    applyFormat(img, context.formatAppliers.image, imageModel.format, context);\n    applyFormat(img, context.formatAppliers.dataset, imageModel.dataset, context);\n\n    const { width, height } = imageModel.format;\n    const widthNum = width ? parseValueWithUnit(width) : 0;\n    const heightNum = height ? parseValueWithUnit(height) : 0;\n\n    if (widthNum > 0) {\n        img.width = widthNum;\n    }\n\n    if (heightNum > 0) {\n        img.height = heightNum;\n    }\n\n    if (imageModel.isSelectedAsImageSelection) {\n        context.imageSelection = {\n            type: 'image',\n            image: img,\n        };\n    }\n\n    handleSegmentCommon(doc, img, element, imageModel, context, segmentNodes);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { applyMetadata } from '../utils/applyMetadata';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelListItem,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleList: ContentModelBlockHandler<ContentModelListItem> = (\n    doc: Document,\n    parent: Node,\n    listItem: ContentModelListItem,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let layer = 0;\n    const { nodeStack } = context.listFormat;\n\n    if (nodeStack.length == 0) {\n        nodeStack.push({\n            node: parent,\n        });\n    }\n\n    // Skip existing list levels that has same properties so we can reuse them\n    for (; layer < listItem.levels.length && layer + 1 < nodeStack.length; layer++) {\n        const stackLevel = nodeStack[layer + 1];\n        const itemLevel = listItem.levels[layer];\n\n        if (\n            stackLevel.listType != itemLevel.listType ||\n            stackLevel.dataset?.editingInfo != itemLevel.dataset.editingInfo ||\n            (itemLevel.listType == 'OL' &&\n                typeof itemLevel.format.startNumberOverride === 'number') ||\n            (itemLevel.listType == 'UL' &&\n                itemLevel.format.listStyleType != stackLevel.format?.listStyleType)\n        ) {\n            break;\n        }\n    }\n\n    // Cut off remained list levels that we can't reuse\n    nodeStack.splice(layer + 1);\n\n    // Create new list levels that are after reused ones\n    for (; layer < listItem.levels.length; layer++) {\n        const level = listItem.levels[layer];\n        const newList = doc.createElement(level.listType || 'UL');\n        const lastParent = nodeStack[nodeStack.length - 1].node;\n\n        lastParent.insertBefore(newList, layer == 0 ? refNode : null);\n        nodeStack.push({ node: newList, ...level });\n\n        applyFormat(newList, context.formatAppliers.listLevelThread, level.format, context);\n\n        // Need to apply metadata after applying list level format since the list numbers value relies on the result of list thread handling\n        applyMetadata(level, context.metadataAppliers.listLevel, level.format, context);\n\n        // Need to apply listItemElement formats after applying metadata since the list numbers value relies on the result of metadata handling\n        applyFormat(newList, context.formatAppliers.listLevel, level.format, context);\n        applyFormat(newList, context.formatAppliers.dataset, level.dataset, context);\n\n        context.onNodeCreated?.(level, newList);\n    }\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { applyMetadata } from '../utils/applyMetadata';\nimport { isGenericRoleElement } from '../../domUtils/isGenericRoleElement';\nimport { setParagraphNotImplicit } from '../../modelApi/block/setParagraphNotImplicit';\nimport { stackFormat } from '../utils/stackFormat';\nimport { unwrap } from '../../domUtils/unwrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelListItem,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst HtmlRoleAttribute = 'role';\nconst PresentationRoleValue = 'presentation';\n\n/**\n * @internal\n */\nexport const handleListItem: ContentModelBlockHandler<ContentModelListItem> = (\n    doc: Document,\n    parent: Node,\n    listItem: ContentModelListItem,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    refNode = context.modelHandlers.list(doc, parent, listItem, context, refNode);\n\n    const { nodeStack } = context.listFormat;\n\n    const listParent = nodeStack?.[nodeStack?.length - 1]?.node || parent;\n    const li = doc.createElement('li');\n    const level = listItem.levels[listItem.levels.length - 1];\n\n    // It is possible listParent is the same with parent param.\n    // This happens when outdent a list item to cause it has no list level\n    listParent.insertBefore(li, refNode?.parentNode == listParent ? refNode : null);\n    context.rewriteFromModel.addedBlockElements.push(li);\n\n    if (level) {\n        applyFormat(li, context.formatAppliers.segment, listItem.formatHolder.format, context);\n        applyFormat(li, context.formatAppliers.listItemThread, level.format, context);\n\n        // Need to apply metadata after applying listItem format since the list numbers value relies on the result of list thread handling\n        applyMetadata(level, context.metadataAppliers.listItem, listItem.format, context);\n\n        // Need to apply listItemElement formats after applying metadata since the list numbers value relies on the result of metadata handling\n        applyFormat(li, context.formatAppliers.listItemElement, listItem.format, context);\n\n        stackFormat(context, listItem.formatHolder.format, () => {\n            context.modelHandlers.blockGroupChildren(doc, li, listItem, context);\n        });\n    } else {\n        // There is no level for this list item, that means it should be moved out of the list\n        // For each paragraph, make it not implicit so it will have a DIV around it, to avoid more paragraphs connected together\n        listItem.blocks.forEach(setParagraphNotImplicit);\n\n        context.modelHandlers.blockGroupChildren(doc, li, listItem, context);\n\n        unwrap(li);\n    }\n\n    // Add role=\"presentation\" to all generic role elements inside the LI element\n    // This is to make sure the elements are announced correctly by screen readers\n    // when using arrow keys to navigate the list.\n    for (let index = 0; index < li.children.length; index++) {\n        const element = li.children.item(index);\n        if (isGenericRoleElement(element)) {\n            element.setAttribute(HtmlRoleAttribute, PresentationRoleValue);\n        }\n    }\n\n    context.onNodeCreated?.(listItem, li);\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { optimize } from '../optimizers/optimize';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport { unwrap } from '../../domUtils/unwrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelParagraph,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst DefaultParagraphTag = 'div';\n\n/**\n * @internal\n */\nexport const handleParagraph: ContentModelBlockHandler<ContentModelParagraph> = (\n    doc: Document,\n    parent: Node,\n    paragraph: ContentModelParagraph,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let container = context.allowCacheElement ? paragraph.cachedElement : undefined;\n\n    if (container && paragraph.segments.every(x => x.segmentType != 'General' && !x.isSelected)) {\n        refNode = reuseCachedElement(parent, container, refNode, context.rewriteFromModel);\n    } else {\n        stackFormat(context, paragraph.decorator?.tagName || null, () => {\n            const needParagraphWrapper =\n                !paragraph.isImplicit ||\n                !!paragraph.decorator ||\n                (getObjectKeys(paragraph.format).length > 0 &&\n                    paragraph.segments.some(segment => segment.segmentType != 'SelectionMarker'));\n            const formatOnWrapper = needParagraphWrapper\n                ? {\n                      ...(paragraph.decorator?.format || {}),\n                      ...paragraph.segmentFormat,\n                  }\n                : {};\n\n            container = doc.createElement(paragraph.decorator?.tagName || DefaultParagraphTag);\n\n            parent.insertBefore(container, refNode);\n\n            context.regularSelection.current = {\n                block: needParagraphWrapper ? container : container.parentNode,\n                segment: null,\n            };\n\n            const handleSegments = () => {\n                const parent = container;\n\n                if (parent) {\n                    const firstSegment = paragraph.segments[0];\n\n                    if (firstSegment?.segmentType == 'SelectionMarker') {\n                        // Make sure there is a segment created before selection marker.\n                        // If selection marker is the first selected segment in a paragraph, create a dummy text node,\n                        // so after rewrite, the regularSelection object can have a valid segment object set to the text node.\n                        context.modelHandlers.text(\n                            doc,\n                            parent,\n                            {\n                                ...firstSegment,\n                                segmentType: 'Text',\n                                text: '',\n                            },\n                            context,\n                            []\n                        );\n                    }\n\n                    paragraph.segments.forEach(segment => {\n                        const newSegments: Node[] = [];\n                        context.modelHandlers.segment(doc, parent, segment, context, newSegments);\n\n                        newSegments.forEach(node => {\n                            context.domIndexer?.onSegment(node, paragraph, [segment]);\n                        });\n                    });\n                }\n            };\n\n            if (needParagraphWrapper) {\n                stackFormat(context, formatOnWrapper, handleSegments);\n\n                applyFormat(container, context.formatAppliers.block, paragraph.format, context);\n                applyFormat(container, context.formatAppliers.container, paragraph.format, context);\n                applyFormat(\n                    container,\n                    context.formatAppliers.segmentOnBlock,\n                    formatOnWrapper,\n                    context\n                );\n\n                context.paragraphMap?.applyMarkerToDom(container, paragraph);\n            } else {\n                handleSegments();\n            }\n\n            optimize(container, context);\n\n            // It is possible the next sibling node is changed during processing child segments\n            // e.g. When this paragraph is an implicit paragraph and it contains an inline entity segment\n            // The segment will be appended to container as child then the container will be removed\n            // since this paragraph it is implicit. In that case container.nextSibling will become original\n            // inline entity's next sibling. So reset refNode to its real next sibling (after change) here\n            // to make sure the value is correct.\n            refNode = container.nextSibling;\n\n            if (container) {\n                context.onNodeCreated?.(paragraph, container);\n                context.domIndexer?.onParagraph(container);\n            }\n\n            if (needParagraphWrapper) {\n                if (context.allowCacheElement) {\n                    paragraph.cachedElement = container;\n                }\n\n                context.rewriteFromModel.addedBlockElements.push(container);\n            } else {\n                unwrap(container);\n                container = undefined;\n            }\n        });\n    }\n\n    return refNode;\n};\n","import type {\n    ContentModelSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleSegment: ContentModelSegmentHandler<ContentModelSegment> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const regularSelection = context.regularSelection;\n\n    // If start position is not set yet, and current segment is in selection, set start position\n    if (segment.isSelected && !regularSelection.start) {\n        regularSelection.start = {\n            ...regularSelection.current,\n        };\n    }\n\n    switch (segment.segmentType) {\n        case 'Text':\n            context.modelHandlers.text(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Br':\n            context.modelHandlers.br(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Image':\n            context.modelHandlers.image(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'General':\n            context.modelHandlers.generalSegment(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Entity':\n            context.modelHandlers.entitySegment(doc, parent, segment, context, segmentNodes);\n            break;\n    }\n\n    // If end position is not set, or it is not finalized, and current segment is still in selection, set end position\n    // If there is other selection, we will overwrite regularSelection.end when we process that segment\n    if (segment.isSelected && regularSelection.start) {\n        regularSelection.end = {\n            ...regularSelection.current,\n        };\n    }\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { stackFormat } from '../utils/stackFormat';\nimport { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type {\n    ContentModelSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleSegmentDecorator: ContentModelSegmentHandler<ContentModelSegment> = (\n    _,\n    parent,\n    segment,\n    context\n) => {\n    const { code, link } = segment;\n\n    if (isNodeOfType(parent, 'ELEMENT_NODE')) {\n        if (link) {\n            stackFormat(context, 'a', () => {\n                const a = wrapAllChildNodes(parent, 'a');\n\n                applyFormat(a, context.formatAppliers.link, link.format, context);\n                applyFormat(a, context.formatAppliers.dataset, link.dataset, context);\n\n                context.onNodeCreated?.(link, a);\n            });\n        }\n\n        if (code) {\n            stackFormat(context, 'code', () => {\n                const codeNode = wrapAllChildNodes(parent, 'code');\n\n                applyFormat(codeNode, context.formatAppliers.code, code.format, context);\n\n                context.onNodeCreated?.(code, codeNode);\n            });\n        }\n    }\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { hasMetadata } from '../../modelApi/metadata/updateMetadata';\nimport { isBlockEmpty } from '../../modelApi/common/isEmpty';\nimport { moveChildNodes } from '../../domUtils/moveChildNodes';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelTable,\n    ModelToDomContext,\n    TableSelection,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleTable: ContentModelBlockHandler<ContentModelTable> = (\n    doc: Document,\n    parent: Node,\n    table: ContentModelTable,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    if (isBlockEmpty(table)) {\n        // Empty table, do not create TABLE element and just return\n        return refNode;\n    }\n\n    let tableNode = context.allowCacheElement ? table.cachedElement : undefined;\n\n    if (tableNode) {\n        refNode = reuseCachedElement(parent, tableNode, refNode, context.rewriteFromModel);\n\n        moveChildNodes(tableNode);\n    } else {\n        tableNode = doc.createElement('table');\n\n        if (context.allowCacheElement) {\n            table.cachedElement = tableNode;\n        }\n\n        parent.insertBefore(tableNode, refNode);\n        context.rewriteFromModel.addedBlockElements.push(tableNode);\n\n        applyFormat(tableNode, context.formatAppliers.block, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.table, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.tableBorder, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.dataset, table.dataset, context);\n    }\n\n    context.onNodeCreated?.(table, tableNode);\n\n    const tbody = doc.createElement('tbody');\n    tableNode.appendChild(tbody);\n\n    for (let row = 0; row < table.rows.length; row++) {\n        const tableRow = table.rows[row];\n\n        if (tableRow.cells.length == 0) {\n            // Skip empty row\n            continue;\n        }\n\n        const tr = (context.allowCacheElement && tableRow.cachedElement) || doc.createElement('tr');\n        tbody.appendChild(tr);\n        moveChildNodes(tr);\n\n        if (!tableRow.cachedElement) {\n            if (context.allowCacheElement) {\n                tableRow.cachedElement = tr;\n            }\n\n            applyFormat(tr, context.formatAppliers.tableRow, tableRow.format, context);\n        }\n\n        context.onNodeCreated?.(tableRow, tr);\n\n        for (let col = 0; col < tableRow.cells.length; col++) {\n            const cell = tableRow.cells[col];\n\n            if (cell.isSelected) {\n                const tableSelection: TableSelection = context.tableSelection || {\n                    type: 'table',\n                    table: tableNode,\n                    firstColumn: col,\n                    lastColumn: col,\n                    firstRow: row,\n                    lastRow: row,\n                };\n\n                if (tableSelection.table == tableNode) {\n                    tableSelection.lastColumn = Math.max(tableSelection.lastColumn, col);\n                    tableSelection.lastRow = Math.max(tableSelection.lastRow, row);\n                }\n\n                context.tableSelection = tableSelection;\n            }\n\n            if (!cell.spanAbove && !cell.spanLeft) {\n                const tag = cell.isHeader ? 'th' : 'td';\n                const td =\n                    (context.allowCacheElement && cell.cachedElement) || doc.createElement(tag);\n\n                tr.appendChild(td);\n\n                let rowSpan = 1;\n                let colSpan = 1;\n                let width = table.widths[col];\n                let height = tableRow.height;\n\n                for (; table.rows[row + rowSpan]?.cells[col]?.spanAbove; rowSpan++) {\n                    height += table.rows[row + rowSpan].height;\n                }\n                for (; tableRow.cells[col + colSpan]?.spanLeft; colSpan++) {\n                    width += table.widths[col + colSpan];\n                }\n\n                if (rowSpan > 1) {\n                    td.rowSpan = rowSpan;\n                }\n\n                if (colSpan > 1) {\n                    td.colSpan = colSpan;\n                }\n\n                if (!cell.cachedElement || (cell.format.useBorderBox && hasMetadata(table))) {\n                    if (width > 0 && !td.style.width) {\n                        td.style.width = width + 'px';\n                    }\n\n                    if (height > 0 && !td.style.height) {\n                        td.style.height = height + 'px';\n                    }\n                }\n\n                stackFormat(context, tag, () => {\n                    if (!cell.cachedElement) {\n                        if (context.allowCacheElement) {\n                            cell.cachedElement = td;\n                        }\n\n                        applyFormat(td, context.formatAppliers.block, cell.format, context);\n                        applyFormat(td, context.formatAppliers.tableCell, cell.format, context);\n                        applyFormat(\n                            td,\n                            context.formatAppliers.tableCellBorder,\n                            cell.format,\n                            context\n                        );\n                        applyFormat(td, context.formatAppliers.dataset, cell.dataset, context);\n                    }\n\n                    context.modelHandlers.blockGroupChildren(doc, td, cell, context);\n                });\n\n                context.onNodeCreated?.(cell, td);\n            }\n        }\n    }\n\n    context.domIndexer?.onTable(tableNode, table);\n\n    return refNode;\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport type { ContentModelSegmentHandler, ContentModelText } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleText: ContentModelSegmentHandler<ContentModelText> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const txt = doc.createTextNode(segment.text);\n    const element = doc.createElement('span');\n\n    parent.appendChild(element);\n    element.appendChild(txt);\n\n    context.formatAppliers.text.forEach(applier => applier(segment.format, txt, context));\n\n    handleSegmentCommon(doc, txt, element, segment, context, segmentNodes);\n};\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\n\nconst OptimizeTags = ['SPAN', 'B', 'EM', 'I', 'U', 'SUB', 'SUP', 'STRIKE', 'S', 'A', 'CODE'];\n\n/**\n * @internal\n */\nexport function mergeNode(root: Node) {\n    for (let child = root.firstChild; child; ) {\n        const next = child.nextSibling;\n\n        if (\n            next &&\n            isNodeOfType(child, 'ELEMENT_NODE') &&\n            isNodeOfType(next, 'ELEMENT_NODE') &&\n            child.tagName == next.tagName &&\n            OptimizeTags.indexOf(child.tagName) >= 0 &&\n            hasSameAttributes(child, next)\n        ) {\n            while (next.firstChild) {\n                child.appendChild(next.firstChild);\n            }\n\n            next.parentNode!.removeChild(next);\n        } else {\n            child = next;\n        }\n    }\n}\n\nfunction hasSameAttributes(element1: HTMLElement, element2: HTMLElement) {\n    const attr1 = element1.attributes;\n    const attr2 = element2.attributes;\n\n    if (attr1.length != attr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < attr1.length; i++) {\n        if (attr1[i].name != attr2[i].name || attr1[i].value != attr2[i].value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { isEntityElement } from '../../domUtils/entityUtils';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { mergeNode } from './mergeNode';\nimport { removeUnnecessarySpan } from './removeUnnecessarySpan';\nimport type {\n    ModelToDomBlockAndSegmentNode,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function optimize(root: Node, context: ModelToDomContext) {\n    /**\n     * Do no do any optimization to entity\n     */\n    if (isEntityElement(root)) {\n        return;\n    }\n\n    removeUnnecessarySpan(root);\n    mergeNode(root);\n\n    for (let child = root.firstChild; child; child = child.nextSibling) {\n        optimize(child, context);\n    }\n\n    normalizeTextNode(root, context);\n}\n\n// Merge continuous text nodes into one single node (same with normalize()),\n// and update selection and dom indexes\nfunction normalizeTextNode(root: Node, context: ModelToDomContext) {\n    let lastText: Text | null = null;\n    let child: Node | null;\n    let next: Node | null;\n    const selection = context.regularSelection;\n\n    for (\n        child = root.firstChild, next = child ? child.nextSibling : null;\n        child;\n        child = next, next = child ? child.nextSibling : null\n    ) {\n        if (!isNodeOfType(child, 'TEXT_NODE')) {\n            lastText = null;\n        } else if (!lastText) {\n            lastText = child;\n        } else {\n            const originalLength = lastText.nodeValue?.length ?? 0;\n\n            context.domIndexer?.onMergeText(lastText, child);\n            lastText.nodeValue += child.nodeValue ?? '';\n\n            if (selection) {\n                updateSelection(selection.start, lastText, child, originalLength);\n                updateSelection(selection.end, lastText, child, originalLength);\n            }\n\n            root.removeChild(child);\n        }\n    }\n}\n\nfunction updateSelection(\n    mark: ModelToDomBlockAndSegmentNode | undefined,\n    lastText: Text,\n    nextText: Text,\n    lastTextOriginalLength: number\n) {\n    if (mark && mark.offset == undefined) {\n        if (mark.segment == lastText) {\n            mark.offset = lastTextOriginalLength;\n        } else if (mark.segment == nextText) {\n            mark.segment = lastText;\n        }\n    }\n}\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\n\n/**\n * @internal\n */\nexport function removeUnnecessarySpan(root: Node) {\n    for (let child = root.firstChild; child; ) {\n        if (\n            isNodeOfType(child, 'ELEMENT_NODE') &&\n            child.tagName == 'SPAN' &&\n            child.attributes.length == 0\n        ) {\n            const node = child;\n            let refNode = child.nextSibling;\n            child = child.nextSibling;\n\n            while (node.lastChild) {\n                const newNode = node.lastChild;\n                root.insertBefore(newNode, refNode);\n                refNode = newNode;\n            }\n\n            root.removeChild(node);\n        } else {\n            child = child.nextSibling;\n        }\n    }\n}\n","import type {\n    ContentModelFormatBase,\n    FormatApplier,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Apply formats to the given HTML element using specified appliers\n * @param element The element to apply formats to\n * @param appliers The appliers we are using to apply formats\n * @param format The format object we get format info from\n * @param context Content Model to DOM context\n */\nexport function applyFormat<T extends ContentModelFormatBase>(\n    element: HTMLElement,\n    appliers: (FormatApplier<T> | null)[],\n    format: T,\n    context: ModelToDomContext\n) {\n    appliers.forEach(applier => {\n        applier?.(format, element, context);\n    });\n}\n","import { updateMetadata } from '../../modelApi/metadata/updateMetadata';\nimport type {\n    ContentModelFormatBase,\n    ContentModelWithDataset,\n    MetadataApplier,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function applyMetadata<TMetadata, TFormat extends ContentModelFormatBase>(\n    model: ContentModelWithDataset<TMetadata>,\n    applier: MetadataApplier<TMetadata, TFormat> | undefined,\n    format: TFormat,\n    context: ModelToDomContext\n) {\n    if (applier) {\n        updateMetadata(\n            model,\n            metadata => {\n                applier.applierFunction(metadata, format, context);\n                return metadata;\n            },\n            applier.metadataDefinition\n        );\n    }\n}\n","import { applyFormat } from './applyFormat';\nimport type { ContentModelSegment, ModelToDomContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function handleSegmentCommon(\n    doc: Document,\n    segmentNode: Node,\n    containerNode: HTMLElement,\n    segment: ContentModelSegment,\n    context: ModelToDomContext,\n    segmentNodes: Node[]\n) {\n    if (!segmentNode.firstChild) {\n        context.regularSelection.current.segment = segmentNode;\n    }\n\n    applyFormat(containerNode, context.formatAppliers.styleBasedSegment, segment.format, context);\n\n    segmentNodes?.push(segmentNode);\n    context.modelHandlers.segmentDecorator(doc, containerNode, segment, context, segmentNodes);\n\n    applyFormat(containerNode, context.formatAppliers.elementBasedSegment, segment.format, context);\n\n    context.onNodeCreated?.(segment, segmentNode);\n}\n","import { defaultContentModelFormatMap } from '../../config/defaultContentModelFormatMap';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelSegmentFormat,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function stackFormat(\n    context: ModelToDomContext,\n    tagNameOrFormat: string | (ContentModelSegmentFormat & ContentModelBlockFormat) | null,\n    callback: () => void\n) {\n    const newFormat =\n        typeof tagNameOrFormat === 'string'\n            ? defaultContentModelFormatMap[tagNameOrFormat]\n            : tagNameOrFormat;\n\n    if (newFormat) {\n        const implicitFormat = context.implicitFormat;\n\n        try {\n            context.implicitFormat = {\n                ...implicitFormat,\n                ...newFormat,\n            };\n\n            callback();\n        } finally {\n            context.implicitFormat = implicitFormat;\n        }\n    } else {\n        callback();\n    }\n}\n","import type {\n    ModelToTextCallbacks,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n} from 'roosterjs-content-model-types';\n\nconst TextForHR = '________________________________________';\nconst defaultCallbacks: Required<ModelToTextCallbacks> = {\n    onDivider: divider => (divider.tagName == 'hr' ? TextForHR : ''),\n    onEntityBlock: () => '',\n    onEntitySegment: entity => entity.wrapper.textContent ?? '',\n    onGeneralSegment: segment => segment.element.textContent ?? '',\n    onImage: () => ' ',\n    onText: text => text.text,\n    onParagraph: () => true,\n    onTable: () => true,\n    onBlockGroup: () => true,\n};\n\n/**\n * Convert Content Model to plain text\n * @param model The source Content Model\n * @param [separator='\\r\\n'] The separator string used for connect lines\n * @param callbacks  Callbacks to customize the behavior of contentModelToText function\n */\nexport function contentModelToText(\n    model: ReadonlyContentModelDocument,\n    separator: string = '\\r\\n',\n    callbacks?: ModelToTextCallbacks\n): string {\n    const textArray: string[] = [];\n    const fullCallbacks = Object.assign({}, defaultCallbacks, callbacks);\n\n    contentModelToTextArray(model, textArray, fullCallbacks);\n\n    return textArray.join(separator);\n}\n\nfunction contentModelToTextArray(\n    group: ReadonlyContentModelBlockGroup,\n    textArray: string[],\n    callbacks: Required<ModelToTextCallbacks>\n) {\n    if (callbacks.onBlockGroup(group)) {\n        group.blocks.forEach(block => {\n            switch (block.blockType) {\n                case 'Paragraph':\n                    if (callbacks.onParagraph(block)) {\n                        let text = '';\n\n                        block.segments.forEach(segment => {\n                            switch (segment.segmentType) {\n                                case 'Br':\n                                    textArray.push(text);\n                                    text = '';\n                                    break;\n\n                                case 'Entity':\n                                    text += callbacks.onEntitySegment(segment);\n                                    break;\n\n                                case 'General':\n                                    text += callbacks.onGeneralSegment(segment);\n                                    break;\n\n                                case 'Text':\n                                    text += callbacks.onText(segment);\n                                    break;\n\n                                case 'Image':\n                                    text += callbacks.onImage(segment);\n                                    break;\n                            }\n                        });\n\n                        if (text) {\n                            textArray.push(text);\n                        }\n                    }\n\n                    break;\n\n                case 'Divider':\n                    textArray.push(callbacks.onDivider(block));\n                    break;\n                case 'Entity':\n                    textArray.push(callbacks.onEntityBlock(block));\n                    break;\n\n                case 'Table':\n                    if (callbacks.onTable(block)) {\n                        block.rows.forEach(row =>\n                            row.cells.forEach(cell => {\n                                contentModelToTextArray(cell, textArray, callbacks);\n                            })\n                        );\n                    }\n                    break;\n\n                case 'BlockGroup':\n                    contentModelToTextArray(block, textArray, callbacks);\n                    break;\n            }\n        });\n    }\n}\n","type HeadingLevelTags = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nconst HeaderFontSizes: Record<HeadingLevelTags, string> = {\n    h1: '2em',\n    h2: '1.5em',\n    h3: '1.17em',\n    h4: '1em',\n    h5: '0.83em',\n    h6: '0.67em',\n};\n\n/**\n * @internal\n */\nexport const headingLevels = [\n    { prefix: '# ', tagName: 'h1', fontSize: HeaderFontSizes.h1 },\n    { prefix: '## ', tagName: 'h2', fontSize: HeaderFontSizes.h2 },\n    { prefix: '### ', tagName: 'h3', fontSize: HeaderFontSizes.h3 },\n    { prefix: '#### ', tagName: 'h4', fontSize: HeaderFontSizes.h4 },\n    { prefix: '##### ', tagName: 'h5', fontSize: HeaderFontSizes.h5 },\n    { prefix: '###### ', tagName: 'h6', fontSize: HeaderFontSizes.h6 },\n];\n\n/**\n * @internal\n */\nexport const MarkdownHeadings: Record<string, string> = {\n    h1: '# ',\n    h2: '## ',\n    h3: '### ',\n    h4: '#### ',\n    h5: '##### ',\n    h6: '###### ',\n};\n","export { convertMarkdownToContentModel } from './markdownToModel/convertMarkdownToContentModel';\nexport { convertContentModelToMarkdown } from './modelToMarkdown/convertContentModelToMarkdown';\nexport { MarkdownLineBreaks } from '../lib/constants/markdownLineBreaks';\n","import type { ContentModelText } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function applyLink(\n    textSegment: ContentModelText,\n    text: string,\n    url: string\n): ContentModelText {\n    textSegment.text = text;\n    textSegment.link = {\n        dataset: {},\n        format: {\n            href: url,\n            underline: true,\n        },\n    };\n\n    return textSegment;\n}\n","import { adjustHeading } from '../utils/adjustHeading';\nimport { applyLink } from './applyLink';\nimport { applyTextFormatting } from './applyTextFormatting';\nimport { createBr, createText } from 'roosterjs-content-model-dom';\nimport { createImageSegment } from '../creators/createImageSegment';\nimport { splitParagraphSegments } from '../utils/splitParagraphSegments';\n\nimport type {\n    ContentModelParagraph,\n    ContentModelParagraphDecorator,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function applySegmentFormatting(\n    text: string,\n    paragraph: ContentModelParagraph,\n    decorator?: ContentModelParagraphDecorator\n): ContentModelParagraph | undefined {\n    if (text.length === 0) {\n        const br = createBr();\n        paragraph.segments.push(br);\n    } else {\n        const textSegments = splitParagraphSegments(text);\n        for (const segment of textSegments) {\n            const formattedSegment = createText(segment.text);\n            if (segment.type === 'image') {\n                const image = createImageSegment(segment.text, segment.url);\n                paragraph.segments.push(image);\n            } else {\n                if (segment.type === 'link') {\n                    applyLink(formattedSegment, segment.text, segment.url);\n                }\n                adjustHeading(formattedSegment, decorator);\n                const formattedSegments = applyTextFormatting(formattedSegment);\n                paragraph.segments.push(...formattedSegments);\n            }\n        }\n    }\n\n    return paragraph;\n}\n","import { createText } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelLink,\n    ContentModelSegmentFormat,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\nconst SPLIT_PATTERN = /(\\*\\*\\*.*?\\*\\*\\*|\\*\\*.*?\\*\\*|\\*.*?\\*)/;\n\n/**\n * @internal\n */\nexport function applyTextFormatting(textSegment: ContentModelText) {\n    const texts = splitSegments(textSegment.text);\n    const textSegments: ContentModelText[] = [];\n    for (const text of texts) {\n        textSegments.push(createFormattedSegment(text, textSegment.format, textSegment.link));\n    }\n    return textSegments;\n}\n\nfunction splitSegments(text: string): string[] {\n    return text.split(SPLIT_PATTERN).filter(s => s.trim().length > 0);\n}\n\nfunction createFormattedSegment(\n    text: string,\n    format: ContentModelSegmentFormat,\n    link?: ContentModelLink\n): ContentModelText {\n    if (text.startsWith('***') && text.endsWith('***')) {\n        format = { ...format, fontWeight: 'bold', italic: true };\n        text = text.replace(/\\*\\*\\*/g, '');\n        text = text + ' ';\n    } else if (text.startsWith('**') && text.endsWith('**')) {\n        format = { ...format, fontWeight: 'bold' };\n        text = text.replace(/\\*\\*/g, '');\n        text = text + ' ';\n    } else if (text.startsWith('*') && text.endsWith('*')) {\n        format = { ...format, italic: true };\n        text = text.replace(/\\*/g, '');\n        text = text + ' ';\n    }\n\n    return createText(text, format, link);\n}\n","import { markdownProcessor } from './processor/markdownProcessor';\nimport type { ContentModelDocument } from 'roosterjs-content-model-types';\n\n/**\n * Convert the whole content to ContentModel with the given plain text\n * @param editor The editor instance\n * @param text The markdown text\n * @param splitLinesPattern The pattern to split lines. Default is /\\r\\n|\\r|\\\\n|\\n/\n * @returns The ContentModelDocument\n */\nexport function convertMarkdownToContentModel(\n    text: string,\n    splitLinesPattern?: string\n): ContentModelDocument {\n    const pattern = splitLinesPattern || /\\r\\n|\\r|\\\\n|\\n/;\n    return markdownProcessor(text, pattern);\n}\n","import { createBlockQuoteFromMarkdown } from './createBlockQuoteFromMarkdown';\nimport { createListFromMarkdown } from './createListFromMarkdown';\nimport type {\n    ContentModelBlockGroupType,\n    ContentModelFormatContainer,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\nconst MarkdownBlockGroupType: Record<string, ContentModelBlockGroupType> = {\n    unordered_list: 'ListItem',\n    ordered_list: 'ListItem',\n    blockquote: 'FormatContainer',\n};\n\n/**\n * @internal\n */\nexport function createBlockGroupFromMarkdown(\n    text: string,\n    patternName: string,\n    group?: ContentModelFormatContainer\n): ContentModelFormatContainer | ContentModelListItem {\n    if (MarkdownBlockGroupType[patternName] === 'ListItem') {\n        return createListFromMarkdown(text, patternName === 'ordered_list' ? 'OL' : 'UL');\n    } else {\n        return createBlockQuoteFromMarkdown(text, group);\n    }\n}\n","import { createFormatContainer } from 'roosterjs-content-model-dom';\nimport { createParagraphFromMarkdown } from './createParagraphFromMarkdown';\nimport type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n} from 'roosterjs-content-model-types';\n\nconst QuoteFormat: ContentModelFormatContainerFormat = {\n    borderLeft: '3px solid rgb(200, 200, 200)',\n    textColor: 'rgb(102, 102, 102)',\n    marginTop: '1em',\n    marginBottom: '1em',\n    marginLeft: '40px',\n    marginRight: '40px',\n    paddingLeft: '10px',\n};\n\n/**\n * @internal\n */\nexport function createBlockQuoteFromMarkdown(\n    text: string,\n    blockquote?: ContentModelFormatContainer\n): ContentModelFormatContainer {\n    text = text.replace('>', '');\n    const paragraph = createParagraphFromMarkdown(text);\n    const quote = blockquote || createFormatContainer('blockquote', QuoteFormat);\n    quote.blocks.push(paragraph);\n    return quote;\n}\n","import { createImage } from 'roosterjs-content-model-dom';\nimport type { ContentModelImage } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createImageSegment(text: string, url: string): ContentModelImage {\n    const image = createImage(url);\n    image.alt = text;\n    return image;\n}\n","import { createListItem, createListLevel } from 'roosterjs-content-model-dom';\nimport { createParagraphFromMarkdown } from './createParagraphFromMarkdown';\nimport type { ContentModelListItem } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createListFromMarkdown(text: string, listType: 'OL' | 'UL'): ContentModelListItem {\n    const marker = text.trim().split(' ')[0];\n    const isDummy = isDummyListItem(marker);\n    const itemText = isDummy ? text : text.trim().substring(marker.length);\n    const paragraph = createParagraphFromMarkdown(itemText.trim());\n    const levels = createLevels(text, listType, isDummy);\n    const listModel = createListItem(levels);\n    listModel.blocks.push(paragraph);\n    return listModel;\n}\n\nfunction createLevels(text: string, listType: 'OL' | 'UL', isDummy: boolean) {\n    const level = createListLevel(listType);\n    if (isDummy) {\n        level.format.displayForDummyItem = 'block';\n    }\n    const levels = [level];\n    if (isSubListItem(text)) {\n        levels.push(level);\n    }\n    return levels;\n}\n\nfunction isSubListItem(item: string): boolean {\n    return item.startsWith(' ');\n}\n\nconst isDummyListItem = (item: string) => {\n    return item != '-' && item != '+' && item != '*' && !item.endsWith('.');\n};\n","import { applySegmentFormatting } from '../appliers/applySegmentFormatting';\nimport { createParagraph } from 'roosterjs-content-model-dom';\nimport { getHeadingDecorator } from '../utils/getHeadingDecorator';\n\nimport type { ContentModelParagraph } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createParagraphFromMarkdown(text: string): ContentModelParagraph {\n    const paragraph = createParagraph();\n    const headingType = getHeadingDecorator(text);\n    if (headingType) {\n        paragraph.decorator = headingType;\n    }\n    applySegmentFormatting(text, paragraph, headingType);\n    return paragraph;\n}\n","import { createParagraphFromMarkdown } from './createParagraphFromMarkdown';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\nimport {\n    applyTableFormat,\n    createTable,\n    createTableCell,\n    createTableRow,\n} from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\nexport function createTableFromMarkdown(tableLines: string[]): ContentModelTable {\n    const tableDivider = tableLines[1].split('|').filter(content => content.trim() !== '');\n    tableLines.splice(1, 1);\n    const table = createTable(0, { borderCollapse: true });\n    for (const line of tableLines) {\n        createTableModel(line, table, tableDivider);\n    }\n    applyTableFormat(table, {\n        hasHeaderRow: true,\n    });\n    return table;\n}\n\nfunction createTableModel(markdown: string, table: ContentModelTable, tableDivider: string[]) {\n    const contents = markdown.split('|');\n    if (contents[0].trim() === '') {\n        contents.shift();\n    }\n    if (contents[contents.length - 1].trim() === '') {\n        contents.pop();\n    }\n\n    addTableRow(table, contents, tableDivider);\n}\n\nfunction addTableRow(table: ContentModelTable, contents: string[], tableDivider: string[]) {\n    const row = createTableRow();\n    let index = 0;\n    for (const content of contents) {\n        const paragraph = createParagraphFromMarkdown(content);\n        const cell = createTableCell();\n        cell.blocks.push(paragraph);\n        if (tableDivider[index]) {\n            cell.format.textAlign = getCellAlignment(tableDivider[index]);\n        }\n        row.cells.push(cell);\n        index++;\n    }\n    table.rows.push(row);\n}\n\nfunction getCellAlignment(content: string) {\n    if (content.startsWith(':') && content.endsWith(':')) {\n        return 'center';\n    }\n    if (content.endsWith(':')) {\n        return 'end';\n    }\n    return 'start';\n}\n","import { createBlockGroupFromMarkdown } from '../creators/createBlockGroupFromMarkdown';\nimport { createContentModelDocument, createDivider } from 'roosterjs-content-model-dom';\nimport { createParagraphFromMarkdown } from '../creators/createParagraphFromMarkdown';\nimport { createTableFromMarkdown } from '../creators/createTableFromMarkdown';\nimport { isMarkdownTable } from '../utils/isMarkdownTable';\n\nimport type {\n    ContentModelBlockType,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelListItem,\n    ShallowMutableContentModelDocument,\n} from 'roosterjs-content-model-types';\n\ninterface MarkdownContext {\n    lastQuote?: ContentModelFormatContainer;\n    lastList?: ContentModelListItem;\n    tableLines: string[];\n}\n\nconst MarkdownPattern: Record<string, RegExp> = {\n    heading: /^#{1,6} .*/,\n    horizontal_line: /^---$/,\n    table: /^\\|.*\\|\\s*$/,\n    blockquote: /^>\\s.*$/,\n    unordered_list: /^\\s*[\\*\\-\\+] .*/,\n    ordered_list: /^\\s*\\d+\\. .*/,\n    space: /^\\s*$/,\n    paragraph: /^[^#\\-\\*\\d\\|].*/,\n};\n\nconst MarkdownBlockType: Record<string, ContentModelBlockType> = {\n    heading: 'Paragraph',\n    horizontal_line: 'Divider',\n    paragraph: 'Paragraph',\n    unordered_list: 'BlockGroup',\n    ordered_list: 'BlockGroup',\n    table: 'Table',\n    blockquote: 'BlockGroup',\n    space: 'Paragraph',\n};\n\n/**\n * @internal\n * Process markdown text and convert it to ContentModelDocument\n * @param text The markdown text\n * @param splitLinesPattern The pattern to split lines. Default is /\\r\\n|\\r|\\\\n|\\n/\n * @returns The ContentModelDocument\n */\n\nexport function markdownProcessor(\n    text: string,\n    splitLinesPattern: string | RegExp\n): ContentModelDocument {\n    const markdownText = text.split(splitLinesPattern);\n    markdownText.push(''); // Add an empty line to make sure the last block is processed\n    const doc = createContentModelDocument();\n    return convertMarkdownText(doc, markdownText);\n}\n\nfunction addMarkdownBlockToModel(\n    model: ShallowMutableContentModelDocument,\n    blockType: ContentModelBlockType,\n    markdown: string,\n    patternName: string,\n    markdownContext: MarkdownContext\n) {\n    if (\n        blockType !== 'Table' &&\n        markdownContext.tableLines &&\n        markdownContext.tableLines.length > 0\n    ) {\n        if (\n            markdownContext.tableLines.length > 2 &&\n            markdownContext.tableLines[1].trim().length > 0 &&\n            isMarkdownTable(markdownContext.tableLines[1]) &&\n            markdownContext.tableLines.length > 1\n        ) {\n            const tableModel = createTableFromMarkdown(markdownContext.tableLines);\n            model.blocks.push(tableModel);\n        } else {\n            for (const line of markdownContext.tableLines) {\n                const paragraph = createParagraphFromMarkdown(line);\n                model.blocks.push(paragraph);\n            }\n        }\n        markdownContext.tableLines.length = 0;\n    }\n\n    if (patternName == 'space') {\n        markdownContext.tableLines = [];\n        markdownContext.lastQuote = undefined;\n        markdownContext.lastList = undefined;\n        return;\n    }\n\n    if (blockType == 'Paragraph' && (markdownContext.lastList || markdownContext.lastQuote)) {\n        blockType = 'BlockGroup';\n        patternName = markdownContext.lastList\n            ? markdownContext.lastList.levels[0].listType == 'OL'\n                ? 'ordered_list'\n                : 'unordered_list'\n            : 'blockquote';\n    }\n\n    switch (blockType) {\n        case 'Paragraph':\n            const paragraph = createParagraphFromMarkdown(markdown);\n            model.blocks.push(paragraph);\n            break;\n        case 'Divider':\n            const divider = createDivider('hr');\n            model.blocks.push(divider);\n            break;\n        case 'BlockGroup':\n            const blockGroup = createBlockGroupFromMarkdown(\n                markdown,\n                patternName,\n                markdownContext.lastQuote\n            );\n            if (!markdownContext.lastQuote) {\n                model.blocks.push(blockGroup);\n            }\n            markdownContext.lastQuote =\n                blockGroup.blockGroupType == 'FormatContainer' ? blockGroup : undefined;\n            markdownContext.lastList =\n                blockGroup.blockGroupType == 'ListItem' ? blockGroup : undefined;\n            break;\n        case 'Table':\n            markdownContext.tableLines = markdownContext.tableLines || [];\n            markdownContext.tableLines.push(markdown);\n            break;\n    }\n\n    if (blockType !== 'BlockGroup') {\n        markdownContext.lastQuote = undefined;\n        markdownContext.lastList = undefined;\n    }\n}\n\nfunction convertMarkdownText(model: ContentModelDocument, lines: string[]): ContentModelDocument {\n    const markdownContext: MarkdownContext = {\n        lastQuote: undefined,\n        lastList: undefined,\n        tableLines: [],\n    };\n    for (const line of lines) {\n        let matched = false;\n        for (const patternName in MarkdownPattern) {\n            if (MarkdownPattern.hasOwnProperty(patternName)) {\n                const pattern = MarkdownPattern[patternName];\n                if (pattern.test(line)) {\n                    addMarkdownBlockToModel(\n                        model,\n                        MarkdownBlockType[patternName],\n                        line,\n                        patternName,\n                        markdownContext\n                    );\n                    matched = true;\n                    break;\n                }\n            }\n        }\n\n        if (!matched) {\n            addMarkdownBlockToModel(model, 'Paragraph', line, 'paragraph', markdownContext);\n        }\n    }\n    return model;\n}\n","import { MarkdownHeadings } from '../../constants/headings';\nimport type {\n    ContentModelParagraphDecorator,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustHeading(\n    textSegment: ContentModelText,\n    decorator?: ContentModelParagraphDecorator\n): ContentModelText {\n    const markdownToBeRemoved = MarkdownHeadings[decorator?.tagName || ''];\n    if (markdownToBeRemoved) {\n        textSegment.text = textSegment.text.replace(markdownToBeRemoved, '');\n    }\n    return textSegment;\n}\n","import { headingLevels } from '../../constants/headings';\nimport type { ContentModelParagraphDecorator } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function getHeadingDecorator(text: string): ContentModelParagraphDecorator | undefined {\n    for (const level of headingLevels) {\n        if (text.startsWith(level.prefix)) {\n            return {\n                tagName: level.tagName,\n                format: {\n                    fontWeight: 'bold',\n                    fontSize: level.fontSize,\n                },\n            };\n        }\n    }\n\n    return undefined;\n}\n","/**\n * @internal\n */\nexport function isMarkdownTable(text: string): boolean {\n    const columns = text.split('|').filter(s => s !== '');\n    const pattern = /^:?-+:?$/;\n\n    return columns.length > 0 && columns.every(c => pattern.test(c.trim()));\n}\n","const linkRegex = /(\\[([^\\[]+)\\]\\((https?:\\/\\/[^\\)]+)\\))|(\\!\\[([^\\[]+)\\]\\((https?:\\/\\/[^\\)]+)\\))/g;\n\n/**\n * @internal\n */\ninterface MarkdownSegment {\n    text: string;\n    url: string;\n    type: 'text' | 'link' | 'image';\n}\n\nconst isValidUrl = (url: string) => {\n    try {\n        new URL(url);\n        return true;\n    } catch (_) {\n        return false;\n    }\n};\n\n/**\n * @internal\n */\nexport function splitParagraphSegments(text: string): MarkdownSegment[] {\n    const result: MarkdownSegment[] = [];\n    let lastIndex = 0;\n    let match: RegExpExecArray | null = null;\n\n    while ((match = linkRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n            result.push({ type: 'text', text: text.slice(lastIndex, match.index), url: '' });\n        }\n\n        if (match[2] && match[3]) {\n            result.push(\n                isValidUrl(match[3])\n                    ? { type: 'link', text: match[2], url: match[3] }\n                    : { type: 'text', text: match[0], url: '' }\n            );\n        } else if (match[5] && match[6]) {\n            result.push(\n                isValidUrl(match[6])\n                    ? { type: 'image', text: match[5], url: match[6] }\n                    : { type: 'text', text: match[0], url: '' }\n            );\n        }\n\n        lastIndex = linkRegex.lastIndex;\n    }\n\n    if (lastIndex < text.length) {\n        result.push({ type: 'text', text: text.slice(lastIndex), url: '' });\n    }\n\n    return result;\n}\n","import { modelProcessor } from './processor/modelProcessor';\nimport type { MarkdownLineBreaks } from '../constants/markdownLineBreaks';\nimport type { ContentModelDocument } from 'roosterjs-content-model-types';\n\n/**\n * Export content model document to markdown\n * @param selection The editor selection\n * @param newLine The new line string to use. Default is '\\n\\n'\n * @returns The markdown string\n */\nexport function convertContentModelToMarkdown(\n    model: ContentModelDocument,\n    newLine?: MarkdownLineBreaks\n): string {\n    return modelProcessor(model, newLine);\n}\n","import { createMarkdownBlockGroup } from './createMarkdownBlockGroup';\nimport { createMarkdownParagraph } from './createMarkdownParagraph';\nimport { createMarkdownTable } from './createMarkdownTable';\nimport type { ParagraphContext } from './createMarkdownParagraph';\nimport type { ContentModelBlock } from 'roosterjs-content-model-types';\nimport type { ListCounter } from './createMarkdownBlockGroup';\nimport type { MarkdownLineBreaks } from '../../constants/markdownLineBreaks';\n\n/**\n * @internal\n */\nexport interface MarkdownLineBreaksByBlockType {\n    table: string;\n    paragraph: string;\n    divider: string;\n}\n\nconst DEFAULT_NEW_LINE: MarkdownLineBreaksByBlockType = {\n    table: '',\n    paragraph: '',\n    divider: '\\n\\n',\n};\n\n/**\n * @internal\n */\nexport function createMarkdownBlock(\n    block: ContentModelBlock,\n    newLinePattern: MarkdownLineBreaks,\n    listCounter: ListCounter,\n    newLines?: Partial<MarkdownLineBreaksByBlockType>,\n    paragraphContext?: ParagraphContext\n): string {\n    let markdownString = '';\n    const lines = { ...DEFAULT_NEW_LINE, ...newLines };\n    switch (block.blockType) {\n        case 'Paragraph':\n            markdownString += createMarkdownParagraph(block, paragraphContext) + lines.paragraph;\n            break;\n        case 'BlockGroup':\n            markdownString += createMarkdownBlockGroup(block, newLinePattern, listCounter);\n            break;\n        case 'Table':\n            markdownString += createMarkdownTable(block, newLinePattern, listCounter) + lines.table;\n            break;\n        case 'Divider':\n            if (!paragraphContext?.ignoreLineBreaks) {\n                markdownString += '---' + lines.divider;\n            }\n\n            break;\n        case 'Entity':\n            break;\n        default:\n            break;\n    }\n    return markdownString;\n}\n","import { createMarkdownBlock } from './createMarkdownBlock';\nimport type { MarkdownLineBreaks } from '../../constants/markdownLineBreaks';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelFormatContainer,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface ListCounter {\n    listItemCount: number;\n    subListItemCount: number;\n}\n\n/**\n * @internal\n */\nexport function createMarkdownBlockGroup(\n    blockGroup: ContentModelBlockGroup,\n    newLinePattern: MarkdownLineBreaks,\n    listCounter: ListCounter\n): string {\n    let markdownString = '';\n    switch (blockGroup.blockGroupType) {\n        case 'ListItem':\n            if (listCounter) {\n                markdownString += createMarkdownListItem(blockGroup, newLinePattern, listCounter);\n            }\n            break;\n        case 'FormatContainer':\n            markdownString += createMarkdownBlockQuote(blockGroup, newLinePattern, listCounter);\n            break;\n        default:\n            const { blocks } = blockGroup;\n            for (const block of blocks) {\n                markdownString += createMarkdownBlock(block, newLinePattern, listCounter);\n            }\n            break;\n    }\n    return markdownString;\n}\n\nfunction createMarkdownListItem(\n    listItem: ContentModelListItem,\n    newLinePattern: MarkdownLineBreaks,\n    listCounter: ListCounter\n): string {\n    let markdownString = '';\n    const { blocks } = listItem;\n    for (const block of blocks) {\n        markdownString += createMarkdownBlock(\n            block,\n            newLinePattern,\n            listCounter,\n            undefined /* newLines */,\n            {\n                ignoreLineBreaks: true,\n            }\n        );\n    }\n    const lastIndex = listItem.levels.length - 1;\n    const isSubList = lastIndex + 1 > 1;\n    const dummyFormat = listItem.levels[lastIndex].format.displayForDummyItem;\n    if (dummyFormat && dummyFormat !== 'listItem') {\n        return (markdownString = ` ${markdownString}`);\n    }\n\n    if (isSubList) {\n        listCounter.subListItemCount++;\n        if (listItem.levels[lastIndex].listType == 'OL') {\n            markdownString = `   ${listCounter.subListItemCount}. ${markdownString}`;\n        } else {\n            markdownString = `  - ${markdownString}`;\n        }\n    } else {\n        listCounter.listItemCount++;\n        if (listItem.levels[lastIndex].listType == 'OL') {\n            markdownString = `${listCounter.listItemCount}. ${markdownString}`;\n        } else {\n            markdownString = `- ${markdownString}`;\n        }\n    }\n\n    return markdownString + newLinePattern.newLine;\n}\n\nfunction createMarkdownBlockQuote(\n    blockquote: ContentModelFormatContainer,\n    newLinePattern: MarkdownLineBreaks,\n    listCounter: ListCounter\n): string {\n    let markdownString = '';\n    if (blockquote.tagName == 'blockquote') {\n        const { blocks } = blockquote;\n        for (const block of blocks) {\n            markdownString +=\n                '> ' +\n                createMarkdownBlock(block, newLinePattern, listCounter, undefined /* newLines */, {\n                    ignoreLineBreaks: true,\n                }) +\n                newLinePattern.newLine;\n        }\n    }\n\n    return `${markdownString}\\n`;\n}\n","import { MarkdownHeadings } from '../../constants/headings';\nimport type { ContentModelParagraph, ContentModelText } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface ParagraphContext {\n    ignoreLineBreaks: boolean;\n}\n\n/**\n * @internal\n */\nexport function createMarkdownParagraph(\n    paragraph: ContentModelParagraph,\n    context?: ParagraphContext\n): string {\n    const { segments } = paragraph;\n    let markdownString = '';\n    for (const segment of segments) {\n        switch (segment.segmentType) {\n            case 'Text':\n                markdownString += textProcessor(segment);\n                break;\n            case 'Image':\n                markdownString += `![${segment.alt}](${segment.src})`;\n                break;\n            case 'Br':\n                if (!context?.ignoreLineBreaks) {\n                    markdownString += '\\n';\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    if (paragraph.decorator) {\n        const { tagName } = paragraph.decorator;\n        const prefix = MarkdownHeadings[tagName];\n        markdownString = `${prefix}${markdownString}`;\n    }\n\n    return markdownString;\n}\n\nfunction textProcessor(text: ContentModelText): string {\n    let markdownString = text.text;\n    if (text.link) {\n        markdownString = `[${text.text}](${text.link.format.href})`;\n    }\n    if (text.format.fontWeight == 'bold') {\n        markdownString = `**${markdownString}**`;\n    }\n    if (text.format.italic) {\n        markdownString = `*${markdownString}*`;\n    }\n    return markdownString;\n}\n","import { createMarkdownBlock } from './createMarkdownBlock';\nimport type { MarkdownLineBreaks } from '../../constants/markdownLineBreaks';\nimport type { ListCounter } from './createMarkdownBlockGroup';\nimport type { ContentModelTable, ContentModelTableRow } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createMarkdownTable(\n    table: ContentModelTable,\n    newLinePattern: MarkdownLineBreaks,\n    listCounter: ListCounter\n): string {\n    let markdownString = '';\n    const { rows } = table;\n    let firstRow = true;\n    for (const row of rows) {\n        markdownString += '|';\n        for (const cell of row.cells) {\n            for (const block of cell.blocks) {\n                markdownString += createMarkdownBlock(\n                    block,\n                    newLinePattern,\n                    listCounter,\n                    {\n                        divider: '',\n                    },\n                    {\n                        ignoreLineBreaks: true,\n                    }\n                );\n            }\n            markdownString += '|';\n        }\n        markdownString += newLinePattern.newLine;\n        if (firstRow) {\n            markdownString += addTableDivider(row);\n            firstRow = false;\n        }\n    }\n\n    return markdownString;\n}\n\nfunction addTableDivider(headerRow: ContentModelTableRow) {\n    let divider = '|';\n    const { cells } = headerRow;\n    for (const cell of cells) {\n        switch (cell.format.textAlign) {\n            case 'center':\n                divider += ':----:|';\n                break;\n            case 'end':\n                divider += '----:|';\n                break;\n            default:\n                divider += '----|';\n                break;\n        }\n    }\n    return divider + '\\n';\n}\n","import { createMarkdownBlock } from '../creators/createMarkdownBlock';\nimport type { MarkdownLineBreaks } from '../../constants/markdownLineBreaks';\nimport type { ListCounter } from '../creators/createMarkdownBlockGroup';\nimport type { ContentModelDocument } from 'roosterjs-content-model-types';\n\nconst DEFAULT_NEW_LINE: MarkdownLineBreaks = {\n    lineBreak: '\\n\\n',\n    newLine: '\\n',\n};\n\n/**\n * @internal\n */\nexport function modelProcessor(\n    model: ContentModelDocument,\n    newLine: MarkdownLineBreaks = DEFAULT_NEW_LINE\n): string {\n    let markdown = '';\n    const listCounter: ListCounter = {\n        listItemCount: 0,\n        subListItemCount: 0,\n    };\n    for (const block of model.blocks) {\n        const isListItem = block.blockType === 'BlockGroup' && block.blockGroupType === 'ListItem';\n        if (!isListItem && (listCounter.listItemCount > 0 || listCounter.subListItemCount > 0)) {\n            listCounter.listItemCount = 0;\n            listCounter.subListItemCount = 0;\n            markdown += newLine.newLine;\n        }\n\n        markdown += createMarkdownBlock(block, newLine, listCounter, {\n            table: newLine.newLine,\n            paragraph: newLine.lineBreak,\n            divider: newLine.lineBreak,\n        });\n    }\n\n    return markdown;\n}\n","import { ChangeSource } from 'roosterjs-content-model-dom';\nimport { checkAndInsertHorizontalLine } from './horizontalLine/checkAndInsertHorizontalLine';\nimport { createLink } from './link/createLink';\nimport { formatTextSegmentBeforeSelectionMarker, promoteLink } from 'roosterjs-content-model-api';\nimport { keyboardListTrigger } from './list/keyboardListTrigger';\nimport { transformFraction } from './numbers/transformFraction';\nimport { transformHyphen } from './hyphen/transformHyphen';\nimport { transformOrdinals } from './numbers/transformOrdinals';\nimport { unlink } from './link/unlink';\nimport type { AutoFormatOptions } from './interface/AutoFormatOptions';\nimport type {\n    ContentChangedEvent,\n    ContentModelText,\n    EditorInputEvent,\n    EditorPlugin,\n    FormatContentModelContext,\n    FormatContentModelOptions,\n    IEditor,\n    KeyDownEvent,\n    PluginEvent,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\ninterface Feature {\n    enabled: boolean;\n    transformFunction: (\n        model: ReadonlyContentModelDocument,\n        previousSegment: ContentModelText,\n        paragraph: ShallowMutableContentModelParagraph,\n        context: FormatContentModelContext\n    ) => boolean | HTMLElement;\n    changeSource: string;\n    apiName: string;\n}\n\n/**\n * @internal\n */\nconst DefaultOptions: Partial<AutoFormatOptions> = {\n    autoBullet: false,\n    autoNumbering: false,\n    autoUnlink: false,\n    autoLink: false,\n    autoHyphen: false,\n    autoFraction: false,\n    autoOrdinals: false,\n    removeListMargins: false,\n    autoHorizontalLine: false,\n};\n\n/**\n * Auto Format plugin handles auto formatting, such as transforming * characters into a bullet list.\n * It can be customized with options to enable or disable auto list features.\n */\nexport class AutoFormatPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    /**\n     * @param options An optional parameter that takes in an object of type AutoFormatOptions, which includes the following properties:\n     *  - autoBullet: A boolean that enables or disables automatic bullet list formatting. Defaults to false.\n     *  - autoNumbering: A boolean that enables or disables automatic numbering formatting. Defaults to false.\n     *  - removeListMargins: A boolean to remove list margins when it is automatically triggered. Defaults to false.\n     *  - autoHyphen: A boolean that enables or disables automatic hyphen transformation. Defaults to false.\n     *  - autoFraction: A boolean that enables or disables automatic fraction transformation. Defaults to false.\n     *  - autoOrdinals: A boolean that enables or disables automatic ordinal number transformation. Defaults to false.\n     *  - autoLink: A boolean that enables or disables automatic hyperlink url address creation when pasting or typing content. Defaults to false.\n     *  - autoUnlink: A boolean that enables or disables automatic hyperlink removal when pressing backspace. Defaults to false.\n     *  - autoTel: A boolean that enables or disables automatic hyperlink telephone numbers transformation. Defaults to false.\n     *  - autoMailto: A boolean that enables or disables automatic hyperlink email address transformation. Defaults to false.\n     *  - autoHorizontalLine: A boolean that enables or disables automatic horizontal line creation. Defaults to false.\n     */\n    constructor(private options: AutoFormatOptions = DefaultOptions) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'AutoFormat';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case 'input':\n                    this.handleEditorInputEvent(this.editor, event);\n                    break;\n                case 'keyDown':\n                    this.handleKeyDownEvent(this.editor, event);\n                    break;\n                case 'contentChanged':\n                    this.handleContentChangedEvent(this.editor, event);\n                    break;\n            }\n        }\n    }\n\n    private autoLink: Feature = {\n        enabled: !!(this.options.autoLink || this.options.autoTel || this.options.autoMailto),\n        transformFunction: (_model, previousSegment, paragraph, context) => {\n            const { autoLink, autoTel, autoMailto } = this.options;\n            const linkSegment = promoteLink(previousSegment, paragraph, {\n                autoLink,\n                autoTel,\n                autoMailto,\n            });\n\n            if (linkSegment) {\n                return createAnchor(linkSegment.link?.format.href || '', linkSegment.text);\n            }\n            return false;\n        },\n        apiName: 'autoLink',\n        changeSource: ChangeSource.AutoLink,\n    };\n\n    private tabFeatures: Feature[] = [\n        {\n            enabled: !!(this.options.autoBullet || this.options.autoNumbering),\n            transformFunction: (model, _previousSegment, paragraph, context) =>\n                keyboardListTrigger(\n                    model,\n                    paragraph,\n                    context,\n                    this.options.autoBullet,\n                    this.options.autoNumbering,\n                    this.options.removeListMargins\n                ),\n            apiName: 'autoToggleList',\n            changeSource: ChangeSource.AutoFormat,\n        },\n        this.autoLink,\n    ];\n\n    private features: Feature[] = [\n        ...this.tabFeatures,\n        {\n            enabled: !!this.options.autoHyphen,\n            apiName: 'autoHyphen',\n            changeSource: ChangeSource.Format,\n            transformFunction: (_model, previousSegment, paragraph, context) =>\n                transformHyphen(previousSegment, paragraph, context),\n        },\n        {\n            enabled: !!this.options.autoFraction,\n            apiName: 'autoFraction',\n            changeSource: ChangeSource.Format,\n            transformFunction: (_model, previousSegment, paragraph, context) =>\n                transformFraction(previousSegment, paragraph, context),\n        },\n        {\n            enabled: !!this.options.autoOrdinals,\n            apiName: 'autoOrdinal',\n            changeSource: ChangeSource.Format,\n            transformFunction: (_model, previousSegment, paragraph, context) =>\n                transformOrdinals(previousSegment, paragraph, context),\n        },\n    ];\n\n    private enterFeatures: Feature[] = [\n        {\n            enabled: !!this.options.autoHorizontalLine,\n            transformFunction: (model, _previousSegment, paragraph, context) =>\n                checkAndInsertHorizontalLine(model, paragraph, context),\n            apiName: 'autoHorizontalLine',\n            changeSource: ChangeSource.AutoFormat,\n        },\n        this.autoLink,\n    ];\n\n    private handleKeyboardEvents(editor: IEditor, features: Feature[]): FormatContentModelOptions {\n        const formatOptions: FormatContentModelOptions = {\n            changeSource: '',\n            apiName: '',\n            getChangeData: undefined,\n        };\n\n        formatTextSegmentBeforeSelectionMarker(\n            editor,\n            (model, previousSegment, paragraph, _markerFormat, context) => {\n                let featureApplied: Feature | undefined = undefined;\n                for (const feature of features) {\n                    if (feature.enabled) {\n                        const result = feature.transformFunction(\n                            model,\n                            previousSegment,\n                            paragraph,\n                            context\n                        );\n                        if (result) {\n                            if (typeof result !== 'boolean') {\n                                formatOptions.getChangeData = () => result;\n                            }\n                            featureApplied = feature;\n                            break;\n                        }\n                    }\n                }\n\n                if (featureApplied) {\n                    formatOptions.changeSource = featureApplied.changeSource;\n                    formatOptions.apiName = featureApplied.apiName;\n                }\n\n                return !!featureApplied;\n            },\n            formatOptions\n        );\n        return formatOptions;\n    }\n\n    private handleEditorInputEvent(editor: IEditor, event: EditorInputEvent) {\n        const rawEvent = event.rawEvent;\n        const selection = editor.getDOMSelection();\n        if (\n            rawEvent.inputType === 'insertText' &&\n            selection &&\n            selection.type === 'range' &&\n            selection.range.collapsed\n        ) {\n            switch (rawEvent.data) {\n                case ' ':\n                    this.handleKeyboardEvents(editor, this.features);\n                    break;\n            }\n        }\n    }\n\n    private handleKeyDownEvent(editor: IEditor, event: KeyDownEvent) {\n        const rawEvent = event.rawEvent;\n        if (!rawEvent.defaultPrevented && !event.handledByEditFeature) {\n            switch (rawEvent.key) {\n                case 'Backspace':\n                    if (this.options.autoUnlink) {\n                        unlink(editor, rawEvent);\n                    }\n                    break;\n                case 'Tab':\n                    if (!rawEvent.shiftKey) {\n                        const eventHandled = this.handleKeyboardEvents(editor, this.tabFeatures);\n                        if (eventHandled.apiName == 'autoToggleList') {\n                            event.rawEvent.preventDefault();\n                        }\n                    }\n                    break;\n                case 'Enter':\n                    const eventHandled = this.handleKeyboardEvents(editor, this.enterFeatures);\n                    if (eventHandled.apiName == 'autoHorizontalLine') {\n                        event.rawEvent.preventDefault();\n                    }\n                    break;\n            }\n        }\n    }\n\n    private handleContentChangedEvent(editor: IEditor, event: ContentChangedEvent) {\n        const { autoLink, autoTel, autoMailto } = this.options;\n        if (event.source == 'Paste' && (autoLink || autoTel || autoMailto)) {\n            createLink(editor, {\n                autoLink,\n                autoTel,\n                autoMailto,\n            });\n        }\n    }\n}\n\nconst createAnchor = (url: string, text: string) => {\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    anchor.textContent = text;\n    return anchor;\n};\n","import type {\n    ContentModelDividerFormat,\n    FormatContentModelContext,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\nimport {\n    addBlock,\n    createContentModelDocument,\n    createDivider,\n    mergeModel,\n} from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\nexport type HorizontalLineTriggerCharacter = '-' | '=' | '_' | '*' | '~' | '#';\nconst HorizontalLineTriggerCharacters: HorizontalLineTriggerCharacter[] = [\n    '-',\n    '=',\n    '_',\n    '*',\n    '~',\n    '#',\n];\n\nconst commonStyles: ContentModelDividerFormat = {\n    width: '98%',\n    display: 'inline-block',\n};\n\nconst HorizontalLineStyles: Map<\n    HorizontalLineTriggerCharacter,\n    ContentModelDividerFormat\n> = new Map([\n    [\n        '-',\n        {\n            borderTop: '1px none',\n            borderRight: '1px none',\n            borderBottom: '1px solid',\n            borderLeft: '1px none',\n            ...commonStyles,\n        },\n    ],\n    [\n        '=',\n        {\n            borderTop: '3pt double',\n            borderRight: '3pt none',\n            borderBottom: '3pt none',\n            borderLeft: '3pt none',\n            ...commonStyles,\n        },\n    ],\n    [\n        '_',\n        {\n            borderTop: '1px solid',\n            borderRight: '1px none',\n            borderBottom: '1px solid',\n            borderLeft: '1px none',\n            ...commonStyles,\n        },\n    ],\n    [\n        '*',\n        {\n            borderTop: '1px none',\n            borderRight: '1px none',\n            borderBottom: '3px dotted',\n            borderLeft: '1px none',\n            ...commonStyles,\n        },\n    ],\n    [\n        '~',\n        {\n            borderTop: '1px none',\n            borderRight: '1px none',\n            borderBottom: '1px solid',\n            borderLeft: '1px none',\n            ...commonStyles,\n        },\n    ],\n    [\n        '#',\n        {\n            borderTop: '3pt double',\n            borderRight: '3pt none',\n            borderBottom: '3pt double',\n            borderLeft: '3pt none',\n            ...commonStyles,\n        },\n    ],\n]);\n\n/**\n * @internal exported only for unit test\n *\n * Create a horizontal line and insert it into the model\n *\n * @param model the model to insert horizontal line into\n * @param context the formatting context\n */\nexport function insertHorizontalLineIntoModel(\n    model: ReadonlyContentModelDocument,\n    context: FormatContentModelContext,\n    triggerChar: HorizontalLineTriggerCharacter\n) {\n    const hr = createDivider('hr', HorizontalLineStyles.get(triggerChar));\n    const doc = createContentModelDocument();\n    addBlock(doc, hr);\n    mergeModel(model, doc, context);\n}\n\n/**\n * @internal\n *\n * Check if the current line should be formatted as horizontal line, and insert horizontal line if needed\n *\n * @param editor The editor to check and insert horizontal line\n * @param event The keydown event\n * @returns True if horizontal line is inserted, otherwise false\n */\nexport const checkAndInsertHorizontalLine = (\n    model: ReadonlyContentModelDocument,\n    paragraph: ShallowMutableContentModelParagraph,\n    context: FormatContentModelContext\n) => {\n    const allText = paragraph.segments.reduce(\n        (acc, segment) => (segment.segmentType === 'Text' ? acc + segment.text : acc),\n        ''\n    );\n    // At least 3 characters are needed to trigger horizontal line\n    if (allText.length < 3) {\n        return false;\n    }\n\n    return HorizontalLineTriggerCharacters.some(triggerCharacter => {\n        const shouldFormat = allText.split('').every(char => char === triggerCharacter);\n        if (shouldFormat) {\n            paragraph.segments = paragraph.segments.filter(s => s.segmentType != 'Text');\n            insertHorizontalLineIntoModel(model, context, triggerCharacter);\n            context.canUndoByBackspace = true;\n        }\n        return shouldFormat;\n    });\n};\n","import { splitTextSegment } from 'roosterjs-content-model-api';\nimport type {\n    ContentModelText,\n    FormatContentModelContext,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function transformHyphen(\n    previousSegment: ContentModelText,\n    paragraph: ShallowMutableContentModelParagraph,\n    context: FormatContentModelContext\n): boolean {\n    const segments = previousSegment.text.split(' ');\n    const dashes = segments[segments.length - 2];\n    if (dashes === '--') {\n        const textIndex = previousSegment.text.lastIndexOf('--');\n        const textSegment = splitTextSegment(previousSegment, paragraph, textIndex, textIndex + 2);\n        textSegment.text = textSegment.text.replace('--', '—');\n        context.canUndoByBackspace = true;\n        return true;\n    } else {\n        const text = segments.pop();\n        const hasDashes = text && text?.indexOf('--') > -1;\n        if (hasDashes && text.trim() !== '--') {\n            const textIndex = previousSegment.text.indexOf(text);\n            const textSegment = splitTextSegment(\n                previousSegment,\n                paragraph,\n                textIndex,\n                textIndex + text.length - 1\n            );\n\n            const textLength = textSegment.text.length;\n            if (textSegment.text[0] !== '-' && textSegment.text[textLength - 1] !== '-') {\n                textSegment.text = textSegment.text.replace('--', '—');\n                context.canUndoByBackspace = true;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n","import { ChangeSource } from 'roosterjs-content-model-dom';\nimport { formatTextSegmentBeforeSelectionMarker, promoteLink } from 'roosterjs-content-model-api';\nimport type {\n    ContentModelLink,\n    IEditor,\n    ContentModelText,\n    AutoLinkOptions,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createLink(editor: IEditor, autoLinkOptions: AutoLinkOptions) {\n    let anchorNode: Node | null = null;\n    const links: ContentModelLink[] = [];\n\n    formatTextSegmentBeforeSelectionMarker(\n        editor,\n        (_model, segment, paragraph) => {\n            let promotedSegment: ContentModelText | null = null;\n\n            if (segment.link) {\n                links.push(segment.link);\n\n                return true;\n            } else if (\n                (promotedSegment = promoteLink(segment, paragraph, autoLinkOptions)) &&\n                promotedSegment.link\n            ) {\n                links.push(promotedSegment.link);\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            changeSource: ChangeSource.AutoLink,\n            onNodeCreated: (modelElement, node) => {\n                if (!anchorNode && links.indexOf(modelElement as ContentModelLink) >= 0) {\n                    anchorNode = node;\n                }\n            },\n            getChangeData: () => anchorNode,\n        }\n    );\n}\n","import { formatTextSegmentBeforeSelectionMarker } from 'roosterjs-content-model-api';\n\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function unlink(editor: IEditor, rawEvent: KeyboardEvent) {\n    formatTextSegmentBeforeSelectionMarker(editor, (_model, linkSegment, _paragraph) => {\n        if (linkSegment?.link) {\n            linkSegment.link = undefined;\n            rawEvent.preventDefault();\n\n            return true;\n        }\n        return false;\n    });\n}\n","/**\n * @internal\n * Convert english alphabet numbers into decimal numbers\n * @param letter The letter that needs to be converted\n * @returns\n */\nexport function convertAlphaToDecimals(letter: string): number | undefined {\n    const alpha = letter.toUpperCase();\n    if (alpha) {\n        let result = 0;\n        for (let i = 0; i < alpha.length; i++) {\n            const charCode = alpha.charCodeAt(i) - 65 + 1;\n            result = result * 26 + charCode;\n        }\n\n        return result;\n    }\n    return undefined;\n}\n","import { convertAlphaToDecimals } from './convertAlphaToDecimals';\n\n/**\n * @internal\n */\nexport function getIndex(listIndex: string) {\n    const index = listIndex.replace(/[^a-zA-Z0-9 ]/g, '');\n    const indexNumber = parseInt(index);\n    return !isNaN(indexNumber) ? indexNumber : convertAlphaToDecimals(index);\n}\n","import { findListItemsInSameThread } from 'roosterjs-content-model-api';\nimport { getNumberingListStyle } from './getNumberingListStyle';\nimport type {\n    ContentModelListItem,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelListItem,\n    ReadonlyContentModelParagraph,\n} from 'roosterjs-content-model-types';\nimport {\n    BulletListType,\n    isBlockGroupOfType,\n    updateListMetadata,\n    getOperationalBlocks,\n    getSelectedSegmentsAndParagraphs,\n} from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\ninterface ListTypeStyle {\n    listType: 'UL' | 'OL';\n    styleType: number;\n    index?: number;\n}\n\n/**\n * @internal\n */\nexport function getListTypeStyle(\n    model: ReadonlyContentModelDocument,\n    shouldSearchForBullet: boolean = true,\n    shouldSearchForNumbering: boolean = true\n): ListTypeStyle | undefined {\n    const selectedSegmentsAndParagraphs = getSelectedSegmentsAndParagraphs(model, true);\n    if (!selectedSegmentsAndParagraphs[0]) {\n        return undefined;\n    }\n    const marker = selectedSegmentsAndParagraphs[0][0];\n    const paragraph = selectedSegmentsAndParagraphs[0][1];\n    const listMarkerSegment = paragraph?.segments[0];\n\n    if (\n        marker &&\n        marker.segmentType == 'SelectionMarker' &&\n        listMarkerSegment &&\n        listMarkerSegment.segmentType == 'Text'\n    ) {\n        const listMarker = listMarkerSegment.text.trim();\n        const bulletType = bulletListType.get(listMarker);\n\n        if (bulletType && shouldSearchForBullet) {\n            return { listType: 'UL', styleType: bulletType };\n        } else if (shouldSearchForNumbering) {\n            const { previousList, hasSpaceBetween } = getPreviousListLevel(model, paragraph);\n            const previousIndex = getPreviousListIndex(model, previousList);\n            const previousListStyle = getPreviousListStyle(previousList);\n            const numberingType = getNumberingListStyle(\n                listMarker,\n                previousIndex,\n                previousListStyle\n            );\n\n            if (numberingType) {\n                return {\n                    listType: 'OL',\n                    styleType: numberingType,\n                    index: getIndex(\n                        listMarker,\n                        previousListStyle,\n                        numberingType,\n                        previousIndex,\n                        hasSpaceBetween\n                    ),\n                };\n            }\n        }\n    }\n    return undefined;\n}\n\nconst getIndex = (\n    listMarker: string,\n    previousListStyle?: number,\n    numberingType?: number,\n    previousIndex?: number,\n    hasSpaceBetween?: boolean\n) => {\n    const newList = isNewList(listMarker);\n    return previousListStyle && previousListStyle !== numberingType && newList\n        ? 1\n        : !newList && previousListStyle === numberingType && hasSpaceBetween && previousIndex\n        ? previousIndex + 1\n        : undefined;\n};\n\nconst getPreviousListIndex = (\n    model: ReadonlyContentModelDocument,\n    previousListItem?: ReadonlyContentModelListItem\n) => {\n    return previousListItem ? findListItemsInSameThread(model, previousListItem).length : undefined;\n};\n\nconst getPreviousListLevel = (\n    model: ReadonlyContentModelDocument,\n    paragraph: ReadonlyContentModelParagraph\n) => {\n    const blocks = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    )[0];\n    let previousList: ContentModelListItem | undefined = undefined;\n    let hasSpaceBetween = false;\n    if (blocks) {\n        const listBlockIndex = blocks.parent.blocks.indexOf(paragraph);\n\n        if (listBlockIndex > -1) {\n            for (let i = listBlockIndex - 1; i > -1; i--) {\n                const item = blocks.parent.blocks[i];\n                if (isBlockGroupOfType<ContentModelListItem>(item, 'ListItem')) {\n                    previousList = item;\n                    break;\n                } else {\n                    hasSpaceBetween = listBlockIndex > 0 ? true : false;\n                }\n            }\n        }\n    }\n\n    return { previousList, hasSpaceBetween };\n};\n\nconst getPreviousListStyle = (list?: ContentModelListItem) => {\n    if (list?.levels[0].dataset) {\n        return updateListMetadata(list.levels[0])?.orderedStyleType;\n    }\n};\n\nconst bulletListType: Map<string, number> = new Map<string, number>([\n    ['*', BulletListType.Disc],\n    ['-', BulletListType.Dash],\n    ['--', BulletListType.Square],\n    ['->', BulletListType.LongArrow],\n    ['-->', BulletListType.DoubleLongArrow],\n    ['=>', BulletListType.UnfilledArrow],\n    ['>', BulletListType.ShortArrow],\n    ['—', BulletListType.Hyphen],\n]);\n\nconst isNewList = (listMarker: string) => {\n    const marker = listMarker.replace(/[^\\w\\s]/g, '');\n    const pattern = /^[1aAiI]$/;\n    return pattern.test(marker);\n};\n","import { getIndex } from './getIndex';\nimport { NumberingListType } from 'roosterjs-content-model-dom';\n\nconst enum NumberingTypes {\n    Decimal = 1,\n    LowerAlpha = 2,\n    UpperAlpha = 3,\n    LowerRoman = 4,\n    UpperRoman = 5,\n}\n\nconst enum Character {\n    Dot = 1,\n    Dash = 2,\n    Parenthesis = 3,\n    DoubleParenthesis = 4,\n}\n\nconst characters: Record<string, number> = {\n    '.': Character.Dot,\n    '-': Character.Dash,\n    ')': Character.Parenthesis,\n};\n\nconst lowerRomanTypes = [\n    NumberingListType.LowerRoman,\n    NumberingListType.LowerRomanDash,\n    NumberingListType.LowerRomanDoubleParenthesis,\n    NumberingListType.LowerRomanParenthesis,\n];\nconst upperRomanTypes = [\n    NumberingListType.UpperRoman,\n    NumberingListType.UpperRomanDash,\n    NumberingListType.UpperRomanDoubleParenthesis,\n    NumberingListType.UpperRomanParenthesis,\n];\nconst numberingTriggers = ['1', 'a', 'A', 'I', 'i'];\nconst lowerRomanNumbers = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\nconst upperRomanNumbers = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n\nconst identifyNumberingType = (text: string, previousListStyle?: number) => {\n    if (!isNaN(parseInt(text))) {\n        return NumberingTypes.Decimal;\n    } else if (/[a-z]+/g.test(text)) {\n        if (\n            (previousListStyle === NumberingTypes.LowerRoman &&\n                lowerRomanTypes.indexOf(previousListStyle) > -1 &&\n                lowerRomanNumbers.indexOf(text[0]) > -1) ||\n            (!previousListStyle && text === 'i')\n        ) {\n            return NumberingTypes.LowerRoman;\n        } else if (\n            previousListStyle === NumberingTypes.LowerAlpha ||\n            (!previousListStyle && text === 'a')\n        ) {\n            return NumberingTypes.LowerAlpha;\n        }\n    } else if (/[A-Z]+/g.test(text)) {\n        if (\n            (previousListStyle == NumberingTypes.UpperRoman &&\n                upperRomanTypes.indexOf(previousListStyle) > -1 &&\n                upperRomanNumbers.indexOf(text[0]) > -1) ||\n            (!previousListStyle && text === 'I')\n        ) {\n            return NumberingTypes.UpperRoman;\n        } else if (\n            previousListStyle == NumberingTypes.UpperAlpha ||\n            (!previousListStyle && text === 'A')\n        ) {\n            return NumberingTypes.UpperAlpha;\n        }\n    }\n};\n\nconst numberingListTypes: Record<number, (char: number) => number | undefined> = {\n    [NumberingTypes.Decimal]: char => DecimalsTypes[char] || undefined,\n    [NumberingTypes.LowerAlpha]: char => LowerAlphaTypes[char] || undefined,\n    [NumberingTypes.UpperAlpha]: char => UpperAlphaTypes[char] || undefined,\n    [NumberingTypes.LowerRoman]: char => LowerRomanTypes[char] || undefined,\n    [NumberingTypes.UpperRoman]: char => UpperRomanTypes[char] || undefined,\n};\n\nconst UpperRomanTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.UpperRoman,\n    [Character.Dash]: NumberingListType.UpperRomanDash,\n    [Character.Parenthesis]: NumberingListType.UpperRomanParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.UpperRomanDoubleParenthesis,\n};\n\nconst LowerRomanTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.LowerRoman,\n    [Character.Dash]: NumberingListType.LowerRomanDash,\n    [Character.Parenthesis]: NumberingListType.LowerRomanParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.LowerRomanDoubleParenthesis,\n};\n\nconst UpperAlphaTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.UpperAlpha,\n    [Character.Dash]: NumberingListType.UpperAlphaDash,\n    [Character.Parenthesis]: NumberingListType.UpperAlphaParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.UpperAlphaDoubleParenthesis,\n};\n\nconst LowerAlphaTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.LowerAlpha,\n    [Character.Dash]: NumberingListType.LowerAlphaDash,\n    [Character.Parenthesis]: NumberingListType.LowerAlphaParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.LowerAlphaDoubleParenthesis,\n};\n\nconst DecimalsTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.Decimal,\n    [Character.Dash]: NumberingListType.DecimalDash,\n    [Character.Parenthesis]: NumberingListType.DecimalParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.DecimalDoubleParenthesis,\n};\n\nconst identifyNumberingListType = (\n    numbering: string,\n    isDoubleParenthesis: boolean,\n    previousListStyle?: number\n): number | undefined => {\n    const separatorCharacter = isDoubleParenthesis\n        ? Character.DoubleParenthesis\n        : characters[numbering[numbering.length - 1]];\n    // if separator is not valid, no need to check if the number is valid.\n    if (separatorCharacter) {\n        const number = isDoubleParenthesis ? numbering.slice(1, -1) : numbering.slice(0, -1);\n        const numberingType = identifyNumberingType(number, previousListStyle);\n        return numberingType ? numberingListTypes[numberingType](separatorCharacter) : undefined;\n    }\n    return undefined;\n};\n\n/**\n * @internal\n */\nexport function getNumberingListStyle(\n    textBeforeCursor: string,\n    previousListIndex?: number,\n    previousListStyle?: number\n): number | undefined {\n    const trigger = textBeforeCursor.trim();\n    const isDoubleParenthesis = trigger[0] === '(' && trigger[trigger.length - 1] === ')';\n    //Only the staring items ['1', 'a', 'A', 'I', 'i'] must trigger a new list. All the other triggers is used to keep the list chain.\n    //The index is always the characters before the last character\n    const listIndex = isDoubleParenthesis ? trigger.slice(1, -1) : trigger.slice(0, -1);\n    const index = getIndex(listIndex);\n    const isContinuosList = numberingTriggers.indexOf(listIndex) < 0;\n\n    if (\n        !index ||\n        index < 1 ||\n        (!previousListIndex && isContinuosList) ||\n        (previousListIndex && isContinuosList && !canAppendList(index, previousListIndex))\n    ) {\n        return undefined;\n    }\n\n    const numberingType = isValidNumbering(listIndex)\n        ? identifyNumberingListType(\n              trigger,\n              isDoubleParenthesis,\n              isContinuosList ? previousListStyle : undefined\n          )\n        : undefined;\n    return numberingType;\n}\n\n/**\n * Check if index has only numbers or only letters to avoid sequence of character such 1:1. trigger a list.\n * @param index\n * @returns\n */\nfunction isValidNumbering(index: string) {\n    return Number(index) || /^[A-Za-z\\s]*$/.test(index);\n}\n\nfunction canAppendList(index?: number, previousListIndex?: number) {\n    return previousListIndex && index && previousListIndex + 1 === index;\n}\n","import { getListTypeStyle } from './getListTypeStyle';\nimport { getOperationalBlocks, isBlockGroupOfType } from 'roosterjs-content-model-dom';\nimport {\n    getListAnnounceData,\n    setListType,\n    setModelListStartNumber,\n    setModelListStyle,\n} from 'roosterjs-content-model-api';\nimport type {\n    ContentModelListItem,\n    FormatContentModelContext,\n    ReadonlyContentModelDocument,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function keyboardListTrigger(\n    model: ReadonlyContentModelDocument,\n    paragraph: ShallowMutableContentModelParagraph,\n    context: FormatContentModelContext,\n    shouldSearchForBullet: boolean = true,\n    shouldSearchForNumbering: boolean = true,\n    removeListMargins?: boolean\n) {\n    const listStyleType = getListTypeStyle(model, shouldSearchForBullet, shouldSearchForNumbering);\n    if (listStyleType) {\n        paragraph.segments.splice(0, 1);\n        const { listType, styleType, index } = listStyleType;\n        triggerList(model, listType, styleType, index, removeListMargins);\n        context.canUndoByBackspace = true;\n        setAnnounceData(model, context);\n\n        return true;\n    }\n    return false;\n}\n\nconst triggerList = (\n    model: ReadonlyContentModelDocument,\n    listType: 'OL' | 'UL',\n    styleType: number,\n    index?: number,\n    removeListMargins?: boolean\n) => {\n    setListType(model, listType, removeListMargins);\n    const isOrderedList = listType == 'OL';\n    if (index && index > 0 && isOrderedList) {\n        setModelListStartNumber(model, index);\n    }\n    setModelListStyle(\n        model,\n        isOrderedList\n            ? {\n                  orderedStyleType: styleType,\n                  applyListStyleFromLevel: false,\n              }\n            : {\n                  unorderedStyleType: styleType,\n                  applyListStyleFromLevel: false,\n              }\n    );\n};\nfunction setAnnounceData(model: ReadonlyContentModelDocument, context: FormatContentModelContext) {\n    const [paragraphOrListItems] = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        [] // Set stop types to be empty so we can find list items even cross the boundary of table, then we can always operation on the list item if any\n    );\n\n    if (paragraphOrListItems && isBlockGroupOfType(paragraphOrListItems.block, 'ListItem')) {\n        const { path, block } = paragraphOrListItems;\n        context.announceData = getListAnnounceData([block, ...path]);\n    }\n}\n","import { splitTextSegment } from 'roosterjs-content-model-api';\nimport type {\n    ContentModelText,\n    FormatContentModelContext,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst FRACTIONS: Map<string, string> = new Map<string, string>([\n    ['1/2', '½'],\n    ['1/4', '¼'],\n    ['3/4', '¾'],\n]);\n\n/**\n * @internal\n */\nexport function transformFraction(\n    previousSegment: ContentModelText,\n    paragraph: ShallowMutableContentModelParagraph,\n    context: FormatContentModelContext\n): boolean {\n    const fraction = previousSegment.text.split(' ').pop()?.trim();\n    const text = fraction ? FRACTIONS.get(fraction) : undefined;\n\n    if (fraction && text) {\n        const textLength = previousSegment.text.length - 1;\n        const textIndex = textLength - fraction.length;\n        const textSegment = splitTextSegment(previousSegment, paragraph, textIndex, textLength);\n        textSegment.text = text;\n\n        context.canUndoByBackspace = true;\n        return true;\n    }\n\n    return false;\n}\n","import { splitTextSegment } from 'roosterjs-content-model-api';\n\nimport type {\n    ContentModelText,\n    FormatContentModelContext,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst getOrdinal = (value: number) => {\n    const ORDINALS: Record<number, string> = {\n        1: 'st',\n        2: 'nd',\n        3: 'rd',\n    };\n    return ORDINALS[value] || 'th';\n};\n\nconst ORDINALS = ['st', 'nd', 'rd', 'th'];\n\n/**\n * The two last characters of ordinal number (st, nd, rd, th)\n */\nconst ORDINAL_LENGTH = 2;\n\n/**\n * @internal\n */ export function transformOrdinals(\n    previousSegment: ContentModelText,\n    paragraph: ShallowMutableContentModelParagraph,\n    context: FormatContentModelContext\n): boolean {\n    const value = previousSegment.text.split(' ').pop()?.trim();\n    let shouldAddSuperScript = false;\n    if (value) {\n        const isOrdinal = ORDINALS.indexOf(value) > -1;\n        if (isOrdinal) {\n            const index = paragraph.segments.indexOf(previousSegment);\n            const numberSegment = paragraph.segments[index - 1];\n            let numericValue: number | null = null;\n            if (\n                numberSegment &&\n                numberSegment.segmentType == 'Text' &&\n                (numericValue = getNumericValue(numberSegment.text, true /* checkFullText */)) &&\n                getOrdinal(numericValue) === value\n            ) {\n                shouldAddSuperScript = true;\n            }\n        } else {\n            const ordinal = value.substring(value.length - ORDINAL_LENGTH); // This value  is equal st, nd, rd, th\n            const numericValue = getNumericValue(value); //This is the numeric part. Ex: 10th, numeric value =\n            if (numericValue && getOrdinal(numericValue) === ordinal) {\n                shouldAddSuperScript = true;\n            }\n        }\n\n        if (shouldAddSuperScript) {\n            const ordinalSegment = splitTextSegment(\n                previousSegment,\n                paragraph,\n                previousSegment.text.length - 3,\n                previousSegment.text.length - 1\n            );\n\n            ordinalSegment.format.superOrSubScriptSequence = 'super';\n            context.canUndoByBackspace = true;\n        }\n    }\n    return shouldAddSuperScript;\n}\n\nfunction getNumericValue(text: string, checkFullText: boolean = false): number | null {\n    const number = checkFullText ? text : text.substring(0, text.length - ORDINAL_LENGTH);\n    const isNumber = /^-?\\d+$/.test(number);\n    if (isNumber) {\n        return parseInt(text);\n    }\n    return null;\n}\n","import type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-content-model-types';\n\n/**\n * Context Menu options for ContextMenu plugin\n */\nexport interface ContextMenuOptions<T> {\n    /**\n     * Render function for the context menu\n     * @param container The container HTML element, it will be located at the mouse click position,\n     * so the callback just need to render menu content into this container\n     * @param onDismiss The onDismiss callback, some menu render need to know this callback so that\n     * it can handle the dismiss event\n     */\n    render: (container: HTMLElement, items: (T | null)[], onDismiss: () => void) => void;\n\n    /**\n     * Dismiss function for the context menu, it will be called when user wants to dismiss this context menu\n     * e.g. user click away so the menu should be dismissed\n     * @param container The container HTML element\n     */\n    dismiss?: (container: HTMLElement) => void;\n\n    /**\n     * Whether the default context menu is allowed. @default false\n     */\n    allowDefaultMenu?: boolean;\n}\n\n/**\n * An editor plugin that support showing a context menu using render() function from options parameter\n */\nexport class ContextMenuPluginBase<T> implements EditorPlugin {\n    private container: HTMLElement | null = null;\n    private editor: IEditor | null = null;\n    private isMenuShowing: boolean = false;\n\n    /**\n     * Create a new instance of ContextMenu class\n     * @param options An options object to determine how to show/hide the context menu\n     */\n    constructor(private options: ContextMenuOptions<T>) {}\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'ContextMenu';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.onDismiss();\n\n        if (this.container?.parentNode) {\n            this.container.parentNode.removeChild(this.container);\n            this.container = null;\n        }\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == 'contextMenu' && event.items.length > 0) {\n            const { rawEvent, items } = event;\n\n            this.onDismiss();\n\n            if (!this.options.allowDefaultMenu) {\n                rawEvent.preventDefault();\n            }\n\n            if (this.initContainer(rawEvent.pageX, rawEvent.pageY)) {\n                this.options.render(this.container!, items as T[], this.onDismiss);\n                this.isMenuShowing = true;\n            }\n        }\n    }\n\n    private initContainer(x: number, y: number) {\n        if (!this.container && this.editor) {\n            this.container = this.editor.getDocument().createElement('div');\n\n            this.container.style.position = 'fixed';\n            this.container.style.width = '0';\n            this.container.style.height = '0';\n            this.editor.getDocument().body.appendChild(this.container);\n        }\n        this.container?.style.setProperty('left', x + 'px');\n        this.container?.style.setProperty('top', y + 'px');\n        return !!this.container;\n    }\n\n    private onDismiss = () => {\n        if (this.container && this.isMenuShowing) {\n            this.options.dismiss?.(this.container);\n            this.isMenuShowing = false;\n        }\n    };\n}\n","import { formatTextSegmentBeforeSelectionMarker } from 'roosterjs-content-model-api';\nimport type {\n    ContentModelText,\n    EditorInputEvent,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * The CustomReplace interface defines a custom replacement that can be used in CustomReplacePlugin.\n */\nexport interface CustomReplace {\n    /**\n     * The string to replace in the editor.\n     */\n    stringToReplace: string;\n\n    /**\n     * The string to replace with.\n     */\n    replacementString: string;\n\n    /**\n     * The handler to replace the string.\n     * @param previousSegment The text segment to replace.\n     * @param stringToReplace The string to replace.\n     * @param replacementString The string to replace with.\n     * @param paragraph The paragraph that contains the text segment.\n     * @returns True if the string is replaced successfully, otherwise false.\n     */\n    replacementHandler: (\n        previousSegment: ContentModelText,\n        stringToReplace: string,\n        replacementString: string,\n        paragraph?: ShallowMutableContentModelParagraph\n    ) => boolean;\n}\n\n/**\n * CustomReplacePlugin is a plugin that allows you to replace a string with another string in the editor.\n */\nexport class CustomReplacePlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private triggerKeys: string[] = [];\n\n    /**\n     * @param customReplacements Custom replacement rules.\n     * Ex: [{ stringToReplace: ':)', replacementString: '🙂', replacementHandler: replaceEmojis }]\n     */\n    constructor(private customReplacements: CustomReplace[]) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'CustomReplace';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.triggerKeys = this.customReplacements.map(replacement =>\n            replacement.stringToReplace.slice(-1)\n        );\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case 'input':\n                    this.handleEditorInputEvent(this.editor, event);\n                    break;\n            }\n        }\n    }\n\n    private handleEditorInputEvent(editor: IEditor, event: EditorInputEvent) {\n        const rawEvent = event.rawEvent;\n        const selection = editor.getDOMSelection();\n        const key = rawEvent.data;\n        if (\n            this.customReplacements.length > 0 &&\n            rawEvent.inputType === 'insertText' &&\n            selection &&\n            selection.type === 'range' &&\n            selection.range.collapsed &&\n            key &&\n            this.triggerKeys.indexOf(key) > -1\n        ) {\n            formatTextSegmentBeforeSelectionMarker(\n                editor,\n                (_model, previousSegment, paragraph, _markerFormat, context) => {\n                    const replaced = this.customReplacements.some(\n                        ({ stringToReplace, replacementString, replacementHandler }) => {\n                            return replacementHandler(\n                                previousSegment,\n                                stringToReplace,\n                                replacementString,\n                                paragraph\n                            );\n                        }\n                    );\n                    if (replaced) {\n                        context.canUndoByBackspace = true;\n                        return true;\n                    }\n                    return false;\n                }\n            );\n        }\n    }\n}\n","import { keyboardDelete } from './keyboardDelete';\nimport { keyboardEnter } from './keyboardEnter';\nimport { keyboardInput } from './keyboardInput';\nimport { keyboardTab } from './keyboardTab';\nimport { parseTableCells } from 'roosterjs-content-model-dom';\nimport type {\n    DOMSelection,\n    EditorPlugin,\n    IEditor,\n    KeyDownEvent,\n    PluginEvent,\n} from 'roosterjs-content-model-types';\n\n/**\n * Options to customize the keyboard handling behavior of Edit plugin\n */\nexport type EditOptions = {\n    /**\n     * Whether to handle Tab key in keyboard. @default true\n     */\n    handleTabKey?: boolean;\n\n    /**\n     * Whether expanded selection within a text node should be handled by CM when pressing Backspace/Delete key.\n     * @default true\n     */\n    handleExpandedSelectionOnDelete?: boolean;\n\n    /**\n     * Callback function to determine whether the Rooster should handle the Enter key press.\n     * If the function returns true, the Rooster will handle the Enter key press instead of the browser.\n     * @param editor - The editor instance.\n     * @returns A boolean\n     */\n    shouldHandleEnterKey?: ((editor: IEditor) => boolean) | boolean;\n};\n\nconst BACKSPACE_KEY = 8;\nconst DELETE_KEY = 46;\n/**\n * According to https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n * 229 can be sent in variants generated when Long press (iOS) or using IM.\n *\n * Other cases: https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n */\nconst DEAD_KEY = 229;\n\nconst DefaultOptions: Partial<EditOptions> = {\n    handleTabKey: true,\n    handleExpandedSelectionOnDelete: true,\n};\n\n/**\n * Edit plugins helps editor to do editing operation on top of content model.\n * This includes:\n * 1. Delete Key\n * 2. Backspace Key\n * 3. Tab Key\n */\nexport class EditPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n    private shouldHandleNextInputEvent = false;\n    private selectionAfterDelete: DOMSelection | null = null;\n    private handleNormalEnter: (editor: IEditor) => boolean = (editor: IEditor) => false;\n\n    /**\n     * @param options An optional parameter that takes in an object of type EditOptions, which includes the following properties:\n     * handleTabKey: A boolean that enables or disables Tab key handling. Defaults to true.\n     */\n    constructor(private options: EditOptions = DefaultOptions) {\n        this.options = { ...DefaultOptions, ...options };\n    }\n\n    private createNormalEnterChecker(result: boolean) {\n        return result ? () => true : () => false;\n    }\n\n    private getHandleNormalEnter(editor: IEditor) {\n        switch (typeof this.options.shouldHandleEnterKey) {\n            case 'function':\n                return this.options.shouldHandleEnterKey;\n                break;\n            case 'boolean':\n                return this.createNormalEnterChecker(this.options.shouldHandleEnterKey);\n                break;\n            default:\n                return this.createNormalEnterChecker(\n                    editor.isExperimentalFeatureEnabled('HandleEnterKey')\n                );\n                break;\n        }\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'Edit';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.handleNormalEnter = this.getHandleNormalEnter(editor);\n\n        if (editor.getEnvironment().isAndroid) {\n            this.disposer = this.editor.attachDomEvent({\n                beforeinput: {\n                    beforeDispatch: e => this.handleBeforeInputEvent(editor, e),\n                },\n            });\n        }\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n        this.disposer?.();\n        this.disposer = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case 'keyDown':\n                    this.handleKeyDownEvent(this.editor, event);\n                    break;\n                case 'keyUp':\n                    if (this.selectionAfterDelete) {\n                        this.editor.setDOMSelection(this.selectionAfterDelete);\n                        this.selectionAfterDelete = null;\n                    }\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * Handle an event exclusively means other plugin will not receive this event in\n     * onPluginEvent method.\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\n     * the final result depends on the order of the plugins are added into editor\n     * @param event The event to check:\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        if (\n            this.editor &&\n            this.options.handleTabKey &&\n            event.eventType == 'keyDown' &&\n            event.rawEvent.key == 'Tab' &&\n            !event.rawEvent.shiftKey\n        ) {\n            const selection = this.editor.getDOMSelection();\n            const startContainer =\n                selection?.type == 'range' && selection.range.collapsed\n                    ? selection.range.startContainer\n                    : null;\n            const table = startContainer\n                ? this.editor.getDOMHelper().findClosestElementAncestor(startContainer, 'table')\n                : null;\n            const parsedTable = table && parseTableCells(table);\n\n            if (parsedTable) {\n                const lastRow = parsedTable[parsedTable.length - 1];\n                const lastCell = lastRow && lastRow[lastRow.length - 1];\n\n                if (typeof lastCell == 'object' && lastCell.contains(startContainer)) {\n                    // When TAB in the last cell of a table, we will generate new table row, so prevent other plugins handling this event\n                    // e.g. SelectionPlugin will move the focus out of table, which is conflict with this behavior\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private handleKeyDownEvent(editor: IEditor, event: KeyDownEvent) {\n        const rawEvent = event.rawEvent;\n        const hasCtrlOrMetaKey = rawEvent.ctrlKey || rawEvent.metaKey;\n\n        if (!rawEvent.defaultPrevented && !event.handledByEditFeature) {\n            switch (rawEvent.key) {\n                case 'Backspace':\n                    // Use our API to handle BACKSPACE/DELETE key.\n                    // No need to clear cache here since if we rely on browser's behavior, there will be Input event and its handler will reconcile cache\n                    keyboardDelete(editor, rawEvent, this.options.handleExpandedSelectionOnDelete);\n                    break;\n\n                case 'Delete':\n                    // Use our API to handle BACKSPACE/DELETE key.\n                    // No need to clear cache here since if we rely on browser's behavior, there will be Input event and its handler will reconcile cache\n                    // And leave it to browser when shift key is pressed so that browser will trigger cut event\n                    if (!event.rawEvent.shiftKey) {\n                        keyboardDelete(\n                            editor,\n                            rawEvent,\n                            this.options.handleExpandedSelectionOnDelete\n                        );\n                    }\n                    break;\n\n                case 'Tab':\n                    if (this.options.handleTabKey && !hasCtrlOrMetaKey) {\n                        keyboardTab(editor, rawEvent);\n                    }\n                    break;\n                case 'Unidentified':\n                    if (editor.getEnvironment().isAndroid) {\n                        this.shouldHandleNextInputEvent = true;\n                    }\n                    break;\n\n                case 'Enter':\n                    if (\n                        !hasCtrlOrMetaKey &&\n                        !event.rawEvent.isComposing &&\n                        event.rawEvent.keyCode !== DEAD_KEY\n                    ) {\n                        keyboardEnter(editor, rawEvent, this.handleNormalEnter(editor));\n                    }\n                    break;\n\n                default:\n                    keyboardInput(editor, rawEvent);\n                    break;\n            }\n        }\n    }\n\n    private handleBeforeInputEvent(editor: IEditor, rawEvent: Event) {\n        // Some Android IMEs doesn't fire correct keydown event for BACKSPACE/DELETE key\n        // Here we translate input event to BACKSPACE/DELETE keydown event to be compatible with existing logic\n        if (\n            !this.shouldHandleNextInputEvent ||\n            !(rawEvent instanceof InputEvent) ||\n            rawEvent.defaultPrevented\n        ) {\n            return;\n        }\n        this.shouldHandleNextInputEvent = false;\n\n        let handled = false;\n        switch (rawEvent.inputType) {\n            case 'deleteContentBackward':\n                handled = keyboardDelete(\n                    editor,\n                    new KeyboardEvent('keydown', {\n                        key: 'Backspace',\n                        keyCode: BACKSPACE_KEY,\n                        which: BACKSPACE_KEY,\n                    }),\n                    this.options.handleExpandedSelectionOnDelete\n                );\n                break;\n            case 'deleteContentForward':\n                handled = keyboardDelete(\n                    editor,\n                    new KeyboardEvent('keydown', {\n                        key: 'Delete',\n                        keyCode: DELETE_KEY,\n                        which: DELETE_KEY,\n                    }),\n                    this.options.handleExpandedSelectionOnDelete\n                );\n                break;\n        }\n\n        if (handled) {\n            rawEvent.preventDefault();\n\n            // Restore the selection on keyup event to avoid the cursor jump issue\n            // See: https://issues.chromium.org/issues/330596261\n            this.selectionAfterDelete = editor.getDOMSelection();\n        }\n    }\n}\n","import { deleteSegment, mutateBlock } from 'roosterjs-content-model-dom';\nimport type { DeleteSelectionStep } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deleteAllSegmentBefore: DeleteSelectionStep = context => {\n    if (context.deleteResult != 'notDeleted') {\n        return;\n    }\n\n    const { paragraph, marker } = context.insertPoint;\n    const index = paragraph.segments.indexOf(marker);\n    const mutableParagraph = mutateBlock(paragraph);\n\n    for (let i = index - 1; i >= 0; i--) {\n        const segment = mutableParagraph.segments[i];\n\n        segment.isSelected = true;\n\n        if (deleteSegment(paragraph, segment, context.formatContext)) {\n            context.deleteResult = 'range';\n        }\n    }\n};\n","import { getLeafSiblingBlock } from '../utils/getLeafSiblingBlock';\nimport { setModelIndentation } from 'roosterjs-content-model-api';\nimport {\n    deleteBlock,\n    deleteSegment,\n    getClosestAncestorBlockGroupIndex,\n    mutateBlock,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\nimport type { ReadonlyBlockAndPath } from '../utils/getLeafSiblingBlock';\nimport type {\n    DeleteSelectionStep,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelParagraph,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\nfunction getDeleteCollapsedSelection(direction: 'forward' | 'backward'): DeleteSelectionStep {\n    return context => {\n        if (context.deleteResult != 'notDeleted') {\n            return;\n        }\n\n        const isForward = direction == 'forward';\n        const { paragraph, marker, path, tableContext } = context.insertPoint;\n        const segments = paragraph.segments;\n\n        fixupBr(paragraph);\n\n        const index = segments.indexOf(marker) + (isForward ? 1 : -1);\n        const segmentToDelete = segments[index];\n        let blockToDelete: ReadonlyBlockAndPath | null;\n        let root: ReadonlyContentModelDocument | null;\n\n        if (segmentToDelete) {\n            if (deleteSegment(paragraph, segmentToDelete, context.formatContext, direction)) {\n                context.deleteResult = 'singleChar';\n\n                // It is possible that we have deleted everything from this paragraph, so we need to mark it as not implicit\n                // to avoid losing its format. See https://github.com/microsoft/roosterjs/issues/1953\n                setParagraphNotImplicit(paragraph);\n            }\n        } else if (\n            shouldOutdentParagraph(isForward, segments, paragraph, path) &&\n            (root = getRoot(path))\n        ) {\n            setModelIndentation(root, 'outdent');\n            context.deleteResult = 'range';\n        } else if ((blockToDelete = getLeafSiblingBlock(path, paragraph, isForward))) {\n            const { block: readonlyBlock, path, siblingSegment } = blockToDelete;\n\n            if (readonlyBlock.blockType == 'Paragraph') {\n                const block = mutateBlock(readonlyBlock);\n\n                if (siblingSegment) {\n                    // When selection is under general segment, need to check if it has a sibling sibling, and delete from it\n                    if (deleteSegment(block, siblingSegment, context.formatContext, direction)) {\n                        context.deleteResult = 'range';\n                    }\n                } else {\n                    if (isForward) {\n                        context.lastParagraph = block;\n                    } else {\n                        if (block.segments[block.segments.length - 1]?.segmentType == 'Br') {\n                            mutateBlock(block).segments.pop();\n                        }\n\n                        context.insertPoint = {\n                            marker,\n                            paragraph: block,\n                            path,\n                            tableContext,\n                        };\n                        context.lastParagraph = paragraph;\n                    }\n\n                    context.deleteResult = 'range';\n                }\n\n                // When go across table, getLeafSiblingBlock will return null, when we are here, we must be in the same table context\n                context.lastTableContext = tableContext;\n            } else {\n                if (\n                    deleteBlock(\n                        mutateBlock(path[0]).blocks,\n                        readonlyBlock,\n                        undefined /*replacement*/,\n                        context.formatContext,\n                        direction\n                    )\n                ) {\n                    context.deleteResult = 'range';\n                }\n            }\n        } else {\n            // We have nothing to delete, in this case we don't want browser handle it as well.\n            // Because when Backspace on an empty document, it will also delete the only DIV and SPAN element, causes\n            // editor is really empty. We don't want that happen. So the handling should stop here.\n            context.deleteResult = 'nothingToDelete';\n        }\n    };\n}\n\nfunction getRoot(path: ReadonlyContentModelBlockGroup[]): ReadonlyContentModelDocument | null {\n    const lastInPath = path[path.length - 1];\n    return lastInPath.blockGroupType == 'Document' ? lastInPath : null;\n}\n\nfunction shouldOutdentParagraph(\n    isForward: boolean,\n    segments: ReadonlyContentModelSegment[],\n    paragraph: ReadonlyContentModelParagraph,\n    path: ReadonlyContentModelBlockGroup[]\n) {\n    return (\n        !isForward &&\n        segments.length == 1 &&\n        segments[0].segmentType == 'SelectionMarker' &&\n        paragraph.format.marginLeft &&\n        parseInt(paragraph.format.marginLeft) &&\n        getClosestAncestorBlockGroupIndex(path, ['Document', 'TableCell'], ['ListItem']) > -1\n    );\n}\n\n/**\n * If the last segment is BR, remove it for now. We may add it back later when normalize model.\n * So that if this is an empty paragraph, it will start to delete next block\n */\nfunction fixupBr(paragraph: ReadonlyContentModelParagraph) {\n    const { segments } = paragraph;\n\n    if (segments[segments.length - 1]?.segmentType == 'Br') {\n        const segmentsWithoutBr = segments.filter(x => x.segmentType != 'SelectionMarker');\n\n        if (segmentsWithoutBr[segmentsWithoutBr.length - 2]?.segmentType != 'Br') {\n            mutateBlock(paragraph).segments.pop();\n        }\n    }\n}\n\n/**\n * @internal if we didn't delete anything, and we want to delete forward, now perform it\n */\nexport const forwardDeleteCollapsedSelection = getDeleteCollapsedSelection('forward');\n\n/**\n * @internal if we didn't delete anything, and we want to delete backward, now perform it\n */\nexport const backwardDeleteCollapsedSelection = getDeleteCollapsedSelection('backward');\n","import {\n    unwrapBlock,\n    getClosestAncestorBlockGroupIndex,\n    createFormatContainer,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DeleteSelectionStep,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelFormatContainer,\n    ReadonlyContentModelParagraph,\n    ShallowMutableContentModelFormatContainer,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deleteEmptyQuote: DeleteSelectionStep = context => {\n    const { deleteResult } = context;\n\n    if (\n        deleteResult == 'nothingToDelete' ||\n        deleteResult == 'notDeleted' ||\n        deleteResult == 'range'\n    ) {\n        const { insertPoint, formatContext } = context;\n        const { path, paragraph } = insertPoint;\n        const rawEvent = formatContext?.rawEvent as KeyboardEvent;\n        const index = getClosestAncestorBlockGroupIndex(\n            path,\n            ['FormatContainer'],\n            ['TableCell', 'ListItem']\n        );\n        const quote = path[index];\n\n        if (quote && quote.blockGroupType === 'FormatContainer' && quote.tagName == 'blockquote') {\n            const parent = path[index + 1];\n            const quoteBlockIndex = parent.blocks.indexOf(quote);\n\n            if (isEmptyQuote(quote)) {\n                unwrapBlock(parent, quote);\n                rawEvent?.preventDefault();\n                context.deleteResult = 'range';\n            } else if (\n                rawEvent?.key === 'Enter' &&\n                quote.blocks.indexOf(paragraph) >= 0 &&\n                isEmptyParagraph(paragraph)\n            ) {\n                insertNewLine(mutateBlock(quote), parent, quoteBlockIndex, paragraph);\n                rawEvent?.preventDefault();\n                context.deleteResult = 'range';\n            }\n        }\n    }\n};\n\nconst isEmptyQuote = (quote: ReadonlyContentModelFormatContainer) => {\n    return (\n        quote.blocks.length === 1 &&\n        quote.blocks[0].blockType === 'Paragraph' &&\n        isEmptyParagraph(quote.blocks[0])\n    );\n};\n\nconst isEmptyParagraph = (paragraph: ReadonlyContentModelParagraph) => {\n    return paragraph.segments.every(\n        s => s.segmentType === 'SelectionMarker' || s.segmentType === 'Br'\n    );\n};\n\nconst insertNewLine = (\n    quote: ShallowMutableContentModelFormatContainer,\n    parent: ReadonlyContentModelBlockGroup,\n    quoteIndex: number,\n    paragraph: ShallowMutableContentModelParagraph\n) => {\n    const paraIndex = quote.blocks.indexOf(paragraph);\n\n    if (paraIndex >= 0) {\n        const mutableParent = mutateBlock(parent);\n\n        if (paraIndex < quote.blocks.length - 1) {\n            const newQuote: ShallowMutableContentModelFormatContainer = createFormatContainer(\n                quote.tagName,\n                quote.format\n            );\n\n            newQuote.blocks.push(\n                ...quote.blocks.splice(paraIndex + 1, quote.blocks.length - paraIndex - 1)\n            );\n\n            mutableParent.blocks.splice(quoteIndex + 1, 0, newQuote);\n        }\n\n        mutableParent.blocks.splice(quoteIndex + 1, 0, paragraph);\n        quote.blocks.splice(paraIndex, 1);\n\n        if (quote.blocks.length == 0) {\n            mutableParent.blocks.splice(quoteIndex, 0);\n        }\n    }\n};\n","import { getClosestAncestorBlockGroupIndex } from 'roosterjs-content-model-dom';\nimport type { DeleteSelectionStep, ContentModelListItem } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deleteList: DeleteSelectionStep = context => {\n    if (context.deleteResult != 'notDeleted') {\n        return;\n    }\n\n    const { paragraph, marker, path } = context.insertPoint;\n\n    if (paragraph.segments[0] == marker) {\n        const index = getClosestAncestorBlockGroupIndex<ContentModelListItem>(\n            path,\n            ['ListItem'],\n            ['TableCell', 'FormatContainer']\n        );\n        const item = path[index] as ContentModelListItem | undefined;\n        const lastLevel = item?.levels[item.levels.length - 1];\n\n        if (lastLevel && item?.blocks[0] == paragraph) {\n            if (lastLevel.format.displayForDummyItem == 'block') {\n                item.levels.pop();\n            } else {\n                lastLevel.format.displayForDummyItem = 'block';\n            }\n\n            context.deleteResult = 'range';\n        }\n    }\n};\n","import {\n    isPunctuation,\n    isSpace,\n    isWhiteSpacePreserved,\n    mutateBlock,\n    normalizeText,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DeleteSelectionContext,\n    DeleteSelectionStep,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst enum DeleteWordState {\n    Start,\n    Punctuation,\n    Text,\n    NonText,\n    Space,\n    End,\n}\n\ninterface CharInfo {\n    text: boolean;\n    space: boolean;\n    punctuation: boolean;\n}\n\nfunction getDeleteWordSelection(direction: 'forward' | 'backward'): DeleteSelectionStep {\n    return context => {\n        if (context.deleteResult != 'notDeleted') {\n            return;\n        }\n\n        const { marker, paragraph } = context.insertPoint;\n        const startIndex = paragraph.segments.indexOf(marker);\n        const deleteNext = direction == 'forward';\n\n        const iterator = iterateSegments(mutateBlock(paragraph), startIndex, deleteNext, context);\n        let curr = iterator.next();\n\n        for (let state = DeleteWordState.Start; state != DeleteWordState.End && !curr.done; ) {\n            const { punctuation, space, text } = curr.value;\n\n            // This is a state machine of how to delete a whole word together with space and punctuations.\n            // For a full state machine chart, see\n            // Forward delete: https://github.com/microsoft/roosterjs/blob/master/assets/design-charts/ForwardDeleteWord.png\n            // Backward delete: https://github.com/microsoft/roosterjs/blob/master/assets/design-charts/BackwardDeleteWord.png\n            switch (state) {\n                case DeleteWordState.Start:\n                    state = space\n                        ? DeleteWordState.Space\n                        : punctuation\n                        ? DeleteWordState.Punctuation\n                        : DeleteWordState.Text;\n                    curr = iterator.next(true /*delete*/);\n                    break;\n\n                case DeleteWordState.Punctuation:\n                    if (deleteNext && space) {\n                        state = DeleteWordState.NonText;\n                        curr = iterator.next(true /*delete*/);\n                    } else if (punctuation) {\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = DeleteWordState.End;\n                    }\n                    break;\n\n                case DeleteWordState.Text:\n                    if (deleteNext && space) {\n                        state = DeleteWordState.NonText;\n                        curr = iterator.next(true /*delete*/);\n                    } else if (text) {\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = DeleteWordState.End;\n                    }\n                    break;\n\n                case DeleteWordState.NonText:\n                    if (punctuation || !space) {\n                        state = DeleteWordState.End;\n                    } else {\n                        curr = iterator.next(true /*delete*/);\n                    }\n                    break;\n\n                case DeleteWordState.Space:\n                    if (space) {\n                        curr = iterator.next(true /*delete*/);\n                    } else if (punctuation) {\n                        state = deleteNext ? DeleteWordState.NonText : DeleteWordState.Punctuation;\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = deleteNext ? DeleteWordState.End : DeleteWordState.Text;\n                    }\n                    break;\n            }\n        }\n    };\n}\n\nfunction* iterateSegments(\n    paragraph: ShallowMutableContentModelParagraph,\n    markerIndex: number,\n    forward: boolean,\n    context: DeleteSelectionContext\n): Generator<CharInfo, null, boolean> {\n    const step = forward ? 1 : -1;\n    const segments = paragraph.segments;\n    const preserveWhiteSpace = isWhiteSpacePreserved(paragraph.format.whiteSpace);\n\n    for (let i = markerIndex + step; i >= 0 && i < segments.length; i += step) {\n        const segment = segments[i];\n\n        switch (segment.segmentType) {\n            case 'Text':\n                for (\n                    let j = forward ? 0 : segment.text.length - 1;\n                    j >= 0 && j < segment.text.length;\n                    j += step\n                ) {\n                    const c = segment.text[j];\n                    const punctuation = isPunctuation(c);\n                    const space = isSpace(c);\n                    const text = !punctuation && !space;\n\n                    if (yield { punctuation, space, text }) {\n                        let newText = segment.text;\n\n                        newText = newText.substring(0, j) + newText.substring(j + 1);\n\n                        if (!preserveWhiteSpace) {\n                            newText = normalizeText(newText, forward);\n                        }\n\n                        context.deleteResult = 'range';\n\n                        if (newText) {\n                            segment.text = newText;\n\n                            if (step > 0) {\n                                j -= step;\n                            }\n                        } else {\n                            segments.splice(i, 1);\n\n                            if (step > 0) {\n                                i -= step;\n                            }\n\n                            break;\n                        }\n                    }\n                }\n                break;\n\n            case 'Image':\n                if (\n                    yield { punctuation: true, space: false, text: false } // Treat image as punctuation since they have the same behavior.\n                ) {\n                    segments.splice(i, 1);\n\n                    if (step > 0) {\n                        i -= step;\n                    }\n\n                    context.deleteResult = 'range';\n                }\n                break;\n\n            case 'SelectionMarker':\n                break;\n\n            default:\n                return null;\n        }\n    }\n\n    return null;\n}\n\n/**\n * @internal\n */\nexport const forwardDeleteWordSelection = getDeleteWordSelection('forward');\n\n/**\n * @internal\n */\nexport const backwardDeleteWordSelection = getDeleteWordSelection('backward');\n","import { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type {\n    DeleteResult,\n    FormatContentModelContext,\n    IEditor,\n    ReadonlyContentModelDocument,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @return True means content is changed, so need to rewrite content model to editor. Otherwise false\n */\nexport function handleKeyboardEventResult(\n    editor: IEditor,\n    model: ReadonlyContentModelDocument,\n    rawEvent: KeyboardEvent,\n    result: DeleteResult,\n    context: FormatContentModelContext\n): boolean {\n    context.skipUndoSnapshot = true;\n    context.clearModelCache = false;\n\n    switch (result) {\n        case 'notDeleted':\n            // We have not delete anything, we will let browser handle this event, so that current cached model may be invalid\n            context.clearModelCache = true;\n\n            // Return false here since we didn't do any change to Content Model, so no need to rewrite with Content Model\n            return false;\n\n        case 'nothingToDelete':\n            // We known there is nothing to delete, no need to let browser keep handling the event\n            rawEvent.preventDefault();\n            return false;\n\n        case 'range':\n        case 'singleChar':\n            // We have deleted what we need from content model, no need to let browser keep handling the event\n            rawEvent.preventDefault();\n            normalizeContentModel(model);\n\n            if (result == 'range') {\n                // A range is about to be deleted, so add an undo snapshot immediately\n                context.skipUndoSnapshot = false;\n            }\n\n            // Trigger an event to let plugins know the content is about to be changed by Content Model keyboard editing.\n            // So plugins can do proper handling. e.g. UndoPlugin can decide whether take a snapshot before this change happens.\n            editor.triggerEvent('beforeKeyboardEditing', {\n                rawEvent,\n            });\n\n            return true;\n    }\n}\n\n/**\n * @internal\n */\nexport function shouldDeleteWord(rawEvent: KeyboardEvent, isMac: boolean) {\n    return (\n        (isMac && rawEvent.altKey && !rawEvent.metaKey) ||\n        (!isMac && rawEvent.ctrlKey && !rawEvent.altKey)\n    );\n}\n\n/**\n * @internal\n */\nexport function shouldDeleteAllSegmentsBefore(rawEvent: KeyboardEvent) {\n    return rawEvent.metaKey && !rawEvent.altKey;\n}\n","import { promoteLink } from 'roosterjs-content-model-api';\nimport type { DeleteSelectionStep } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleAutoLink: DeleteSelectionStep = context => {\n    const { deleteResult, insertPoint } = context;\n\n    if (deleteResult == 'notDeleted' || deleteResult == 'nothingToDelete') {\n        const { marker, paragraph } = insertPoint;\n        const index = paragraph.segments.indexOf(marker);\n        const segBefore = index > 0 ? paragraph.segments[index - 1] : null;\n\n        if (\n            segBefore?.segmentType == 'Text' &&\n            promoteLink(segBefore, paragraph, {\n                autoLink: true,\n            }) &&\n            context.formatContext\n        ) {\n            context.formatContext.canUndoByBackspace = true;\n        }\n\n        // Do not set deleteResult here since we haven't really start a new paragraph, we need other delete step to keep working on it\n    }\n};\n","import { getListAnnounceData } from 'roosterjs-content-model-api';\nimport { splitParagraph } from '../utils/splitParagraph';\nimport {\n    copyFormat,\n    createListItem,\n    createListLevel,\n    getClosestAncestorBlockGroupIndex,\n    isBlockGroupOfType,\n    ListFormats,\n    mutateBlock,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelListItem,\n    DeleteSelectionStep,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelListItem,\n    ShallowMutableContentModelListItem,\n    ValidDeleteSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleEnterOnList: DeleteSelectionStep = context => {\n    const { deleteResult, insertPoint } = context;\n\n    if (deleteResult == 'notDeleted' || deleteResult == 'nothingToDelete') {\n        const { path } = insertPoint;\n        const index = getClosestAncestorBlockGroupIndex(\n            path,\n            ['ListItem'],\n            ['TableCell', 'FormatContainer']\n        );\n\n        const readonlyListItem = path[index];\n        const listParent = path[index + 1];\n\n        if (readonlyListItem?.blockGroupType === 'ListItem' && listParent) {\n            let listItem = mutateBlock(readonlyListItem);\n\n            if (isEmptyListItem(listItem)) {\n                listItem.levels.pop();\n            } else {\n                listItem = createNewListItem(context, listItem, listParent);\n\n                if (context.formatContext) {\n                    context.formatContext.announceData = getListAnnounceData([\n                        listItem,\n                        ...path.slice(index + 1),\n                    ]);\n                }\n            }\n\n            const listIndex = listParent.blocks.indexOf(listItem);\n            const nextBlock = listParent.blocks[listIndex + 1];\n\n            if (nextBlock) {\n                if (\n                    isBlockGroupOfType<ContentModelListItem>(nextBlock, 'ListItem') &&\n                    nextBlock.levels[0]\n                ) {\n                    nextBlock.levels.forEach(level => {\n                        // Remove startNumberOverride so that next list item can join current list, unless it is 1.\n                        // List start with 1 means it should be an explicit new list and should never join another list before it\n                        if (level.format.startNumberOverride !== 1) {\n                            level.format.startNumberOverride = undefined;\n                        }\n                    });\n\n                    if (listItem.levels.length == 0) {\n                        const nextBlockIndex = findIndex(\n                            listParent.blocks,\n                            nextBlock.levels.length\n                        );\n\n                        nextBlock.levels[\n                            nextBlock.levels.length - 1\n                        ].format.startNumberOverride = nextBlockIndex;\n                    }\n                }\n            }\n\n            context.deleteResult = 'range';\n        }\n    }\n};\n\nconst isEmptyListItem = (listItem: ReadonlyContentModelListItem) => {\n    return listItem.blocks.length === 1 && isEmptyParagraph(listItem.blocks[0]);\n};\n\nconst isEmptyParagraph = (block: ReadonlyContentModelBlock) => {\n    return (\n        block.blockType === 'Paragraph' &&\n        block.segments.length === 2 &&\n        block.segments[0].segmentType === 'SelectionMarker' &&\n        block.segments[1].segmentType === 'Br'\n    );\n};\n\nconst createNewListItem = (\n    context: ValidDeleteSelectionContext,\n    listItem: ReadonlyContentModelListItem,\n    listParent: ReadonlyContentModelBlockGroup\n) => {\n    const { insertPoint } = context;\n    const listIndex = listParent.blocks.indexOf(listItem);\n    const currentPara = insertPoint.paragraph;\n    const paraIndex = listItem.blocks.indexOf(currentPara);\n    const newParagraph = splitParagraph(insertPoint);\n\n    const levels = createNewListLevel(listItem);\n    const newListItem: ShallowMutableContentModelListItem = createListItem(\n        levels,\n        listItem.formatHolder.format\n    );\n\n    newListItem.blocks.push(newParagraph);\n\n    copyFormat<ContentModelBlockFormat>(newListItem.format, listItem.format, ListFormats);\n\n    const remainingBlockCount = listItem.blocks.length - paraIndex - 1;\n\n    if (paraIndex >= 0 && remainingBlockCount > 0) {\n        newListItem.blocks.push(\n            ...mutateBlock(listItem).blocks.splice(paraIndex + 1, remainingBlockCount)\n        );\n    }\n\n    insertPoint.paragraph = newParagraph;\n    mutateBlock(listParent).blocks.splice(listIndex + 1, 0, newListItem);\n\n    if (context.lastParagraph == currentPara) {\n        context.lastParagraph = newParagraph;\n    }\n\n    return newListItem;\n};\n\nconst createNewListLevel = (listItem: ReadonlyContentModelListItem) => {\n    return listItem.levels.map(level => {\n        return createListLevel(\n            level.listType,\n            {\n                ...level.format,\n                startNumberOverride: undefined,\n                displayForDummyItem: undefined, // When ENTER, we should create a new regular list item, so force its dummy item display to undefined\n            },\n            level.dataset\n        );\n    });\n};\n\nconst findIndex = (blocks: readonly ReadonlyContentModelBlock[], levelLength: number) => {\n    let counter = 1;\n    for (let i = 0; i < blocks.length; i++) {\n        const listItem = blocks[i];\n\n        if (\n            isBlockGroupOfType<ContentModelListItem>(listItem, 'ListItem') &&\n            listItem.levels.length === levelLength\n        ) {\n            counter++;\n        } else if (\n            isBlockGroupOfType<ContentModelListItem>(listItem, 'ListItem') &&\n            listItem.levels.length == 0\n        ) {\n            return counter;\n        }\n    }\n\n    return counter;\n};\n","import { mutateBlock } from 'roosterjs-content-model-dom';\nimport { splitParagraph } from '../utils/splitParagraph';\nimport type { DeleteSelectionStep } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleEnterOnParagraph: DeleteSelectionStep = context => {\n    const { paragraph, path } = context.insertPoint;\n    const paraIndex = path[0]?.blocks.indexOf(paragraph) ?? -1;\n\n    if (context.deleteResult == 'notDeleted' && paraIndex >= 0) {\n        const newPara = splitParagraph(context.insertPoint);\n\n        mutateBlock(path[0]).blocks.splice(paraIndex + 1, 0, newPara);\n\n        context.deleteResult = 'range';\n        context.lastParagraph = newPara;\n        context.insertPoint.paragraph = newPara;\n    }\n};\n","import { deleteAllSegmentBefore } from './deleteSteps/deleteAllSegmentBefore';\nimport { deleteEmptyQuote } from './deleteSteps/deleteEmptyQuote';\nimport { deleteList } from './deleteSteps/deleteList';\nimport {\n    ChangeSource,\n    deleteSelection,\n    isElementOfType,\n    isLinkUndeletable,\n    isModifierKey,\n    isNodeOfType,\n} from 'roosterjs-content-model-dom';\nimport {\n    handleKeyboardEventResult,\n    shouldDeleteAllSegmentsBefore,\n    shouldDeleteWord,\n} from './handleKeyboardEventCommon';\nimport {\n    backwardDeleteWordSelection,\n    forwardDeleteWordSelection,\n} from './deleteSteps/deleteWordSelection';\nimport {\n    backwardDeleteCollapsedSelection,\n    forwardDeleteCollapsedSelection,\n} from './deleteSteps/deleteCollapsedSelection';\nimport type { DOMSelection, DeleteSelectionStep, IEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Do keyboard event handling for DELETE/BACKSPACE key\n * @param editor The editor object\n * @param rawEvent DOM keyboard event\n * @param handleExpandedSelection Whether to handle expanded selection within a text node by CM\n * @returns True if the event is handled by content model, otherwise false\n */\nexport function keyboardDelete(\n    editor: IEditor,\n    rawEvent: KeyboardEvent,\n    handleExpandedSelection: boolean = true\n) {\n    let handled = false;\n    const selection = editor.getDOMSelection();\n\n    if (shouldDeleteWithContentModel(selection, rawEvent, handleExpandedSelection)) {\n        editor.formatContentModel(\n            (model, context) => {\n                const result = deleteSelection(\n                    model,\n                    getDeleteSteps(rawEvent, !!editor.getEnvironment().isMac),\n                    context\n                ).deleteResult;\n\n                handled = handleKeyboardEventResult(editor, model, rawEvent, result, context);\n                return handled;\n            },\n            {\n                rawEvent,\n                changeSource: ChangeSource.Keyboard,\n                getChangeData: () => rawEvent.which,\n                scrollCaretIntoView: true,\n                apiName: rawEvent.key == 'Delete' ? 'handleDeleteKey' : 'handleBackspaceKey',\n            }\n        );\n    }\n\n    return handled;\n}\n\nfunction getDeleteSteps(rawEvent: KeyboardEvent, isMac: boolean): (DeleteSelectionStep | null)[] {\n    const isForward = rawEvent.key == 'Delete';\n    const deleteAllSegmentBeforeStep =\n        shouldDeleteAllSegmentsBefore(rawEvent) && !isForward ? deleteAllSegmentBefore : null;\n    const deleteWordSelection = shouldDeleteWord(rawEvent, isMac)\n        ? isForward\n            ? forwardDeleteWordSelection\n            : backwardDeleteWordSelection\n        : null;\n    const deleteCollapsedSelection = isForward\n        ? forwardDeleteCollapsedSelection\n        : backwardDeleteCollapsedSelection;\n    const deleteQuote = !isForward ? deleteEmptyQuote : null;\n    return [\n        deleteAllSegmentBeforeStep,\n        deleteWordSelection,\n        isForward ? null : deleteList,\n        deleteCollapsedSelection,\n        deleteQuote,\n    ];\n}\n\nfunction shouldDeleteWithContentModel(\n    selection: DOMSelection | null,\n    rawEvent: KeyboardEvent,\n    handleExpandedSelection: boolean\n) {\n    if (!selection) {\n        return false; // Nothing to delete\n    } else if (selection.type != 'range') {\n        return true;\n    } else if (!selection.range.collapsed) {\n        if (handleExpandedSelection) {\n            return true; // Selection is not collapsed, need to delete all selections\n        }\n\n        const range = selection.range;\n        const { startContainer, endContainer } = selection.range;\n        const isInSameTextNode =\n            startContainer === endContainer && isNodeOfType(startContainer, 'TEXT_NODE');\n        return !(\n            isInSameTextNode &&\n            !isModifierKey(rawEvent) &&\n            range.endOffset - range.startOffset < (startContainer.nodeValue?.length ?? 0)\n        );\n    } else {\n        const range = selection.range;\n        const startContainer = range.startContainer;\n        const startOffset = range.startOffset;\n\n        // When selection is collapsed and is in middle of text node, no need to use Content Model to delete\n        return !(\n            isNodeOfType(startContainer, 'TEXT_NODE') &&\n            !isModifierKey(rawEvent) &&\n            (canDeleteBefore(rawEvent, startContainer, startOffset) ||\n                canDeleteAfter(rawEvent, startContainer, startOffset))\n        );\n    }\n}\n\nfunction canDeleteBefore(rawEvent: KeyboardEvent, text: Text, offset: number) {\n    if (rawEvent.key != 'Backspace' || offset <= 1) {\n        return false;\n    }\n\n    const length = text.nodeValue?.length ?? 0;\n\n    if (offset == length) {\n        // At the end of text, need to check if next segment is deletable\n        const nextSibling = text.nextSibling;\n        const isNextSiblingUndeletable =\n            isNodeOfType(nextSibling, 'ELEMENT_NODE') &&\n            isElementOfType(nextSibling, 'a') &&\n            isLinkUndeletable(nextSibling) &&\n            !nextSibling.firstChild;\n\n        // If next sibling is undeletable, we cannot let browser handle it since it will remove the anchor\n        // So we return false here to let Content Model handle it\n        return !isNextSiblingUndeletable;\n    } else {\n        // In middle of text, we can safely let browser handle deletion\n        return true;\n    }\n}\n\nfunction canDeleteAfter(rawEvent: KeyboardEvent, text: Text, offset: number) {\n    return rawEvent.key == 'Delete' && offset < (text.nodeValue?.length ?? 0) - 1;\n}\n","import { deleteEmptyQuote } from './deleteSteps/deleteEmptyQuote';\nimport { handleAutoLink } from './inputSteps/handleAutoLink';\nimport { handleEnterOnList } from './inputSteps/handleEnterOnList';\nimport { handleEnterOnParagraph } from './inputSteps/handleEnterOnParagraph';\nimport {\n    ChangeSource,\n    deleteSelection,\n    normalizeContentModel,\n    runEditSteps,\n} from 'roosterjs-content-model-dom';\nimport type { IEditor, ReadonlyContentModelParagraph } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function keyboardEnter(\n    editor: IEditor,\n    rawEvent: KeyboardEvent,\n    handleNormalEnter: boolean\n) {\n    const selection = editor.getDOMSelection();\n\n    editor.formatContentModel(\n        (model, context) => {\n            // 1. delete the expanded selection if any, then merge paragraph\n            const result = deleteSelection(model, [], context);\n\n            // 2. Add line break\n            if (selection && selection.type != 'table') {\n                // For ENTER key, although we may have deleted something, since we still need to split the line, we always treat it as not delete\n                // so further delete steps can keep working\n                result.deleteResult = 'notDeleted';\n\n                const steps = rawEvent.shiftKey\n                    ? []\n                    : [handleAutoLink, handleEnterOnList, deleteEmptyQuote];\n\n                if (handleNormalEnter || hasEnterForEntity(result.insertPoint?.paragraph)) {\n                    steps.push(handleEnterOnParagraph);\n                }\n\n                runEditSteps(steps, result);\n            }\n\n            if (result.deleteResult == 'range') {\n                // We have deleted something, next input should inherit the segment format from deleted content, so set pending format here\n                context.newPendingFormat = result.insertPoint?.marker.format;\n\n                normalizeContentModel(model);\n\n                rawEvent.preventDefault();\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            rawEvent,\n            scrollCaretIntoView: true,\n            changeSource: ChangeSource.Keyboard,\n            getChangeData: () => rawEvent.which,\n            apiName: 'handleEnterKey',\n        }\n    );\n}\n\nfunction hasEnterForEntity(paragraph: ReadonlyContentModelParagraph | undefined) {\n    return (\n        paragraph &&\n        (paragraph.isImplicit || paragraph.segments.some(x => x.segmentType == 'SelectionMarker'))\n    );\n}\n","import {\n    ChangeSource,\n    createText,\n    deleteSelection,\n    isModifierKey,\n    normalizeContentModel,\n} from 'roosterjs-content-model-dom';\nimport type { DeleteSelectionStep, DOMSelection, IEditor } from 'roosterjs-content-model-types';\n\n// Insert a ZeroWidthSpace(ZWS) segment with selection before selection marker\n// so that later browser will replace this selection with inputted text and keep format\nconst ZWS = '\\u200B';\nconst insertZWS: DeleteSelectionStep = context => {\n    if (context.deleteResult == 'range') {\n        const { marker, paragraph } = context.insertPoint;\n        const index = paragraph.segments.indexOf(marker);\n\n        if (index >= 0) {\n            const text = createText(ZWS, marker.format, marker.link, marker.code);\n\n            text.isSelected = true;\n\n            paragraph.segments.splice(index, 0, text);\n        }\n    }\n};\n\n/**\n * @internal\n */\nexport function keyboardInput(editor: IEditor, rawEvent: KeyboardEvent) {\n    const selection = editor.getDOMSelection();\n\n    if (shouldInputWithContentModel(selection, rawEvent)) {\n        editor.takeSnapshot();\n\n        editor.formatContentModel(\n            (model, context) => {\n                const result = deleteSelection(model, [insertZWS], context);\n\n                // Skip undo snapshot here and add undo snapshot before the operation so that we don't add another undo snapshot in middle of this replace operation\n                context.skipUndoSnapshot = true;\n\n                if (result.deleteResult == 'range') {\n                    // We have deleted something, next input should inherit the segment format from deleted content, so set pending format here\n                    context.newPendingFormat = result.insertPoint?.marker.format;\n\n                    normalizeContentModel(model);\n\n                    // Do not preventDefault since we still want browser to handle the final input for now\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            {\n                scrollCaretIntoView: true,\n                rawEvent,\n                changeSource: ChangeSource.Keyboard,\n                getChangeData: () => rawEvent.which,\n                apiName: 'handleInputKey',\n            }\n        );\n\n        return true;\n    }\n}\n\nfunction shouldInputWithContentModel(selection: DOMSelection | null, rawEvent: KeyboardEvent) {\n    if (!selection) {\n        return false; // Nothing to delete\n    } else if (!isModifierKey(rawEvent) && (rawEvent.key == 'Space' || rawEvent.key.length == 1)) {\n        return selection.type != 'range' || !selection.range.collapsed;\n    } else {\n        return false;\n    }\n}\n","import { handleTabOnList } from './tabUtils/handleTabOnList';\nimport { handleTabOnParagraph } from './tabUtils/handleTabOnParagraph';\nimport { handleTabOnTable } from './tabUtils/handleTabOnTable';\nimport { handleTabOnTableCell } from './tabUtils/handleTabOnTableCell';\nimport { setModelIndentation } from 'roosterjs-content-model-api';\nimport {\n    ChangeSource,\n    getOperationalBlocks,\n    isBlockGroupOfType,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelListItem,\n    ContentModelTableCell,\n    FormatContentModelContext,\n    IEditor,\n    ReadonlyContentModelDocument,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function keyboardTab(editor: IEditor, rawEvent: KeyboardEvent) {\n    const selection = editor.getDOMSelection();\n\n    switch (selection?.type) {\n        case 'range':\n            editor.formatContentModel(\n                (model, context) => {\n                    return handleTab(model, rawEvent, context);\n                },\n                {\n                    apiName: 'handleTabKey',\n                    rawEvent,\n                    changeSource: ChangeSource.Keyboard,\n                    getChangeData: () => rawEvent.which,\n                }\n            );\n\n            return true;\n        case 'table':\n            editor.formatContentModel(\n                model => {\n                    return handleTabOnTable(model, rawEvent);\n                },\n                {\n                    apiName: 'handleTabKey',\n                    rawEvent,\n                    changeSource: ChangeSource.Keyboard,\n                    getChangeData: () => rawEvent.which,\n                }\n            );\n            return true;\n    }\n}\n\n/**\n * If multiple blocks are selected, indent or outdent the selected blocks with setModelIndentation.\n * If only one block is selected:\n * - If it is a table cell, call handleTabOnTableCell to handle the tab key.\n * - If it is a paragraph, call handleTabOnParagraph to handle the tab key.\n * - If it is a list item, call handleTabOnList to handle the tab key.\n */\nfunction handleTab(\n    model: ReadonlyContentModelDocument,\n    rawEvent: KeyboardEvent,\n    context: FormatContentModelContext\n) {\n    const blocks = getOperationalBlocks<ContentModelListItem | ContentModelTableCell>(\n        model,\n        ['ListItem', 'TableCell'],\n        []\n    );\n    const block = blocks.length > 0 ? blocks[0].block : undefined;\n\n    if (blocks.length > 1) {\n        setModelIndentation(model, rawEvent.shiftKey ? 'outdent' : 'indent');\n        rawEvent.preventDefault();\n        return true;\n    } else if (isBlockGroupOfType<ContentModelTableCell>(block, 'TableCell')) {\n        return handleTabOnTableCell(model, block, rawEvent);\n    } else if (block?.blockType === 'Paragraph') {\n        return handleTabOnParagraph(model, block, rawEvent, context);\n    } else if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n        return handleTabOnList(model, block, rawEvent, context);\n    }\n    return false;\n}\n","import { handleTabOnParagraph } from './handleTabOnParagraph';\nimport { setModelIndentation } from 'roosterjs-content-model-api';\nimport type {\n    FormatContentModelContext,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * 1. When the selection is collapsed and the cursor is at start of a list item, call setModelIndentation.\n * 2. Otherwise call handleTabOnParagraph.\n * @internal\n */\nexport function handleTabOnList(\n    model: ReadonlyContentModelDocument,\n    listItem: ReadonlyContentModelListItem,\n    rawEvent: KeyboardEvent,\n    context?: FormatContentModelContext\n) {\n    const selectedParagraph = findSelectedParagraph(listItem);\n    if (\n        !isMarkerAtStartOfBlock(listItem) &&\n        selectedParagraph.length == 1 &&\n        selectedParagraph[0].blockType === 'Paragraph'\n    ) {\n        return handleTabOnParagraph(model, selectedParagraph[0], rawEvent, context);\n    } else {\n        setModelIndentation(\n            model,\n            rawEvent.shiftKey ? 'outdent' : 'indent',\n            undefined /*length*/,\n            context\n        );\n        rawEvent.preventDefault();\n        return true;\n    }\n}\n\nfunction isMarkerAtStartOfBlock(listItem: ReadonlyContentModelListItem) {\n    return (\n        listItem.blocks[0].blockType == 'Paragraph' &&\n        listItem.blocks[0].segments[0].segmentType == 'SelectionMarker'\n    );\n}\n\nfunction findSelectedParagraph(listItem: ReadonlyContentModelListItem) {\n    return listItem.blocks.filter(\n        block =>\n            block.blockType == 'Paragraph' && block.segments.some(segment => segment.isSelected)\n    );\n}\n","import { setModelIndentation } from 'roosterjs-content-model-api';\nimport {\n    createSelectionMarker,\n    createText,\n    mutateBlock,\n    mutateSegment,\n} from 'roosterjs-content-model-dom';\nimport type {\n    FormatContentModelContext,\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\nconst tabSpaces = '    ';\nconst space = ' ';\n\n/**\n * @internal\n The handleTabOnParagraph function will handle the tab key in following scenarios:\n * 1. When the selection is collapsed and the cursor is at the end of a paragraph, add 4 spaces.\n * 2. When the selection is collapsed and the cursor is at the start of a paragraph, add 4 spaces.\n * 3. When the selection is collapsed and the cursor is at the middle of a paragraph, add 4 spaces.\n * 4. When the selection is not collapsed, replace the selected range with a single space.\n * 5. When the selection is not collapsed, but all segments are selected, call setModelIndention function to indent the whole paragraph\n The handleTabOnParagraph function will handle the shift + tab key in a indented paragraph in following scenarios:\n * 1. When the selection is collapsed and the cursor is at the end of a paragraph, remove 4 spaces.\n * 2. When the selection is collapsed and the cursor is at the start of a paragraph, call setModelIndention function to outdent the whole paragraph\n * 3. When the selection is collapsed and the cursor is at the middle of a paragraph, remove 4 spaces.\n * 4. When the selection is not collapsed, replace the selected range with a 4 space.\n * 5. When the selection is not collapsed, but all segments are selected, call setModelIndention function to outdent the whole paragraph\n */\nexport function handleTabOnParagraph(\n    model: ReadonlyContentModelDocument,\n    paragraph: ReadonlyContentModelParagraph,\n    rawEvent: KeyboardEvent,\n    context?: FormatContentModelContext\n) {\n    const selectedSegments = paragraph.segments.filter(segment => segment.isSelected);\n    const isCollapsed =\n        selectedSegments.length === 1 && selectedSegments[0].segmentType === 'SelectionMarker';\n    const isAllSelected = paragraph.segments.every(\n        segment =>\n            segment.isSelected || (segment.segmentType == 'Text' && segment.text.trim().length == 0)\n    );\n    if (isAllSelected) {\n        const { marginLeft, marginRight, direction } = paragraph.format;\n        const isRtl = direction === 'rtl';\n        if (\n            rawEvent.shiftKey &&\n            ((!isRtl && (!marginLeft || marginLeft == '0px')) ||\n                (isRtl && (!marginRight || marginRight == '0px')))\n        ) {\n            return false;\n        }\n        setModelIndentation(\n            model,\n            rawEvent.shiftKey ? 'outdent' : 'indent',\n            undefined /*length*/,\n            context\n        );\n    } else {\n        if (!isCollapsed) {\n            let firstSelectedSegmentIndex: number | undefined = undefined;\n            let lastSelectedSegmentIndex: number | undefined = undefined;\n\n            paragraph.segments.forEach((segment, index) => {\n                if (segment.isSelected) {\n                    if (!firstSelectedSegmentIndex) {\n                        firstSelectedSegmentIndex = index;\n                    }\n                    lastSelectedSegmentIndex = index;\n                }\n            });\n            if (firstSelectedSegmentIndex && lastSelectedSegmentIndex) {\n                const firstSelectedSegment = paragraph.segments[firstSelectedSegmentIndex];\n                const spaceText = createText(\n                    rawEvent.shiftKey ? tabSpaces : space,\n                    firstSelectedSegment.format\n                );\n                const marker = createSelectionMarker(firstSelectedSegment.format);\n\n                mutateBlock(paragraph).segments.splice(\n                    firstSelectedSegmentIndex,\n                    lastSelectedSegmentIndex - firstSelectedSegmentIndex + 1,\n                    spaceText,\n                    marker\n                );\n            } else {\n                return false;\n            }\n        } else {\n            const markerIndex = paragraph.segments.findIndex(\n                segment => segment.segmentType === 'SelectionMarker'\n            );\n\n            if (!rawEvent.shiftKey) {\n                const markerFormat = paragraph.segments[markerIndex].format;\n                const tabText = createText(tabSpaces, markerFormat);\n\n                mutateBlock(paragraph).segments.splice(markerIndex, 0, tabText);\n            } else {\n                if (markerIndex <= 0) {\n                    return false;\n                }\n                const tabText = paragraph.segments[markerIndex - 1];\n                const tabSpacesLength = tabSpaces.length;\n\n                if (tabText.segmentType == 'Text') {\n                    const tabSpaceTextLength = tabText.text.length - tabSpacesLength;\n\n                    if (tabText.text === tabSpaces) {\n                        mutateBlock(paragraph).segments.splice(markerIndex - 1, 1);\n                    } else if (tabText.text.substring(tabSpaceTextLength) === tabSpaces) {\n                        mutateSegment(paragraph, tabText, text => {\n                            text.text = text.text.substring(0, tabSpaceTextLength);\n                        });\n                    } else {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    rawEvent.preventDefault();\n    return true;\n}\n","import { getFirstSelectedTable } from 'roosterjs-content-model-dom';\nimport { setModelIndentation } from 'roosterjs-content-model-api';\nimport type {\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * When the whole table is selected, indent or outdent the whole table with setModelIndentation.\n * @internal\n */\nexport function handleTabOnTable(model: ReadonlyContentModelDocument, rawEvent: KeyboardEvent) {\n    const tableModel = getFirstSelectedTable(model)[0];\n    if (tableModel && isWholeTableSelected(tableModel)) {\n        setModelIndentation(model, rawEvent.shiftKey ? 'outdent' : 'indent');\n        rawEvent.preventDefault();\n        return true;\n    }\n    return false;\n}\n\nfunction isWholeTableSelected(tableModel: ReadonlyContentModelTable) {\n    const lastRow = tableModel.rows[tableModel.rows.length - 1];\n    const lastCell = lastRow?.cells[lastRow.cells.length - 1];\n\n    return tableModel.rows[0]?.cells[0]?.isSelected && lastCell?.isSelected;\n}\n","import { clearSelectedCells, insertTableRow } from 'roosterjs-content-model-api';\nimport {\n    createSelectionMarker,\n    getFirstSelectedTable,\n    mutateBlock,\n    normalizeTable,\n    setParagraphNotImplicit,\n    setSelection,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ReadonlyContentModelDocument,\n    ReadonlyContentModelTableCell,\n} from 'roosterjs-content-model-types';\n\n/**\n * When the cursor is on the last cell of a table, add new row and focus first new cell.\n * @internal\n */\nexport function handleTabOnTableCell(\n    model: ReadonlyContentModelDocument,\n    cell: ReadonlyContentModelTableCell,\n    rawEvent: KeyboardEvent\n) {\n    const readonlyTableModel = getFirstSelectedTable(model)[0];\n\n    if (readonlyTableModel) {\n        // Check if cursor is on last cell of the table\n        const lastRow = readonlyTableModel.rows[readonlyTableModel.rows.length - 1];\n        const lastColumn = lastRow ? lastRow.cells.length - 1 : -1;\n        const lastCell = lastRow?.cells[lastColumn];\n\n        if (!rawEvent.shiftKey && lastCell && lastCell === cell) {\n            const tableModel = mutateBlock(readonlyTableModel);\n            insertTableRow(tableModel, 'insertBelow');\n\n            // Clear Table selection\n            clearSelectedCells(tableModel, {\n                firstRow: tableModel.rows.length - 1,\n                firstColumn: 0,\n                lastRow: tableModel.rows.length - 1,\n                lastColumn: lastColumn,\n            });\n            normalizeTable(tableModel, model.format);\n\n            // Add selection marker to the first cell of the new row\n            const markerParagraph =\n                tableModel.rows[tableModel.rows.length - 1]?.cells[0]?.blocks[0];\n            if (markerParagraph.blockType == 'Paragraph') {\n                const marker = createSelectionMarker(model.format);\n\n                mutateBlock(markerParagraph).segments.unshift(marker);\n                setParagraphNotImplicit(markerParagraph);\n                setSelection(tableModel.rows[tableModel.rows.length - 1].cells[0], marker);\n            }\n\n            rawEvent.preventDefault();\n            return true;\n        }\n    }\n\n    return false;\n}\n","import { isGeneralSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelParagraph,\n    ReadonlyContentModelBlock,\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport type BlockAndPath = {\n    /**\n     * The sibling block\n     */\n    block: ReadonlyContentModelBlock;\n\n    /**\n     * Path of this sibling block\n     */\n    path: ReadonlyContentModelBlockGroup[];\n\n    /**\n     * If the input block is under a general segment, it is possible there are sibling segments under the same paragraph.\n     * Use this property to return the sibling sibling under the same paragraph\n     */\n    siblingSegment?: ReadonlyContentModelSegment;\n};\n\n/**\n * @internal\n */\nexport type ReadonlyBlockAndPath = {\n    /**\n     * The sibling block\n     */\n    block: ReadonlyContentModelBlock;\n\n    /**\n     * Path of this sibling block\n     */\n    path: ReadonlyContentModelBlockGroup[];\n\n    /**\n     * If the input block is under a general segment, it is possible there are sibling segments under the same paragraph.\n     * Use this property to return the sibling sibling under the same paragraph\n     */\n    siblingSegment?: ReadonlyContentModelSegment;\n};\n\n/**\n * @internal\n */\nexport function getLeafSiblingBlock(\n    path: ReadonlyContentModelBlockGroup[],\n    block: ReadonlyContentModelBlock,\n    isNext: boolean\n): BlockAndPath | null;\n\n/**\n * @internal (Readonly)\n */\nexport function getLeafSiblingBlock(\n    path: ReadonlyContentModelBlockGroup[],\n    block: ReadonlyContentModelBlock,\n    isNext: boolean\n): ReadonlyBlockAndPath | null;\n\nexport function getLeafSiblingBlock(\n    path: ReadonlyContentModelBlockGroup[],\n    block: ReadonlyContentModelBlock,\n    isNext: boolean\n): ReadonlyBlockAndPath | null {\n    const newPath = [...path];\n\n    while (newPath.length > 0) {\n        const group = newPath[0];\n        const index = group.blocks.indexOf(block);\n\n        if (index < 0) {\n            break;\n        }\n\n        let nextBlock = group.blocks[index + (isNext ? 1 : -1)];\n\n        if (nextBlock) {\n            while (nextBlock.blockType == 'BlockGroup') {\n                const child = nextBlock.blocks[isNext ? 0 : nextBlock.blocks.length - 1];\n\n                if (!child) {\n                    return { block: nextBlock, path: newPath };\n                } else if (child.blockType != 'BlockGroup') {\n                    newPath.unshift(nextBlock);\n                    return { block: child, path: newPath };\n                } else {\n                    newPath.unshift(nextBlock);\n                    nextBlock = child;\n                }\n            }\n\n            return { block: nextBlock, path: newPath };\n        } else if (isGeneralSegment(group)) {\n            // For general segment, we need to check if there is sibling segment under the same paragraph\n            // First let's find the parent paragraph of this segment\n            newPath.shift();\n\n            let segmentIndex = -1;\n            const segment = group;\n            const para = newPath[0]?.blocks.find(\n                x => x.blockType == 'Paragraph' && (segmentIndex = x.segments.indexOf(segment)) >= 0\n            ) as ContentModelParagraph;\n\n            if (para) {\n                // Now we have found the parent paragraph, so let's check if it has a sibling segment\n                const siblingSegment = para.segments[segmentIndex + (isNext ? 1 : -1)];\n\n                if (siblingSegment) {\n                    // Return this block, path and segment since we have found it\n                    return { block: para, path: newPath, siblingSegment };\n                } else {\n                    // No sibling segment, let's keep go upper level\n                    block = para;\n                }\n            } else {\n                // Parent sibling is not found (in theory this should never happen), just return null\n                break;\n            }\n        } else if (group.blockGroupType != 'Document' && group.blockGroupType != 'TableCell') {\n            newPath.shift();\n            block = group;\n        } else {\n            break;\n        }\n    }\n\n    return null;\n}\n","import {\n    copyFormat,\n    createBr,\n    createParagraph,\n    normalizeParagraph,\n    ParagraphFormats,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\nimport type {\n    InsertPoint,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Split the given paragraph from insert point into two paragraphs,\n * and move the selection marker to the beginning of the second paragraph\n * @param insertPoint The input insert point which includes the paragraph and selection marker\n * @param formatKeys The format that needs to be copied from the splitted paragraph, if not specified,  some default format will be copied\n * @returns The new paragraph it created\n */\nexport function splitParagraph(insertPoint: InsertPoint) {\n    const { paragraph, marker } = insertPoint;\n    const newParagraph: ShallowMutableContentModelParagraph = createParagraph(\n        false /*isImplicit*/,\n        {},\n        paragraph.segmentFormat\n    );\n\n    copyFormat(newParagraph.format, paragraph.format, ParagraphFormats);\n\n    const markerIndex = paragraph.segments.indexOf(marker);\n    const segments = paragraph.segments.splice(\n        markerIndex,\n        paragraph.segments.length - markerIndex\n    );\n\n    newParagraph.segments.push(...segments);\n\n    if (paragraph.segments.length == 0 && !paragraph.isImplicit) {\n        paragraph.segments.push(createBr(marker.format));\n    } else if (paragraph.segments.length > 0) {\n        setParagraphNotImplicit(paragraph);\n    }\n\n    insertPoint.paragraph = newParagraph;\n\n    normalizeParagraph(paragraph);\n\n    return newParagraph;\n}\n","import { ChangeSource } from 'roosterjs-content-model-dom';\nimport { fixupHiddenProperties } from './fixupHiddenProperties';\nimport type { IEditor, PluginEvent, EditorPlugin } from 'roosterjs-content-model-types';\nimport type { HiddenPropertyOptions } from './HiddenPropertyOptions';\n\n/**\n * HiddenPropertyPlugin helps editor to maintain hidden properties in DOM after editor content is reset using HTML\n */\nexport class HiddenPropertyPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n\n    /**\n     * Construct a new instance of FormatPlugin class\n     * @param option The editor option\n     */\n    constructor(private option: HiddenPropertyOptions) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'HiddenProperty';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        if (event.eventType == 'contentChanged' && event.source == ChangeSource.SetContent) {\n            fixupHiddenProperties(this.editor, this.option);\n        }\n    }\n}\n","import { setLinkUndeletable } from 'roosterjs-content-model-dom';\nimport type { HiddenPropertyOptions } from './HiddenPropertyOptions';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Maintain hidden properties in DOM after editor content is reset using HTML\n * This includes:\n * 1. Undeletable property\n */\nexport function fixupHiddenProperties(editor: IEditor, options: HiddenPropertyOptions) {\n    if (options.undeletableLinkChecker) {\n        checkUndeletable(editor, options.undeletableLinkChecker);\n    }\n\n    // Add more hidden properties checkers here\n}\n\nfunction checkUndeletable(editor: IEditor, checker: (link: HTMLAnchorElement) => boolean) {\n    const anchors = editor.getDOMHelper().queryElements('a');\n\n    for (const a of anchors) {\n        if (checker(a)) {\n            setLinkUndeletable(a, true);\n        }\n    }\n}\n","import { matchLink } from 'roosterjs-content-model-api';\nimport type { HyperlinkToolTip } from './HyperlinkToolTip';\nimport type {\n    DOMHelper,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    LinkData,\n} from 'roosterjs-content-model-types';\n\nconst defaultToolTipCallback: HyperlinkToolTip = (url: string) => url;\n\n/**\n * Hyperlink plugin does the following jobs for a hyperlink in editor:\n * 1. When hover on a link, show a tool tip\n * 2. When Ctrl+Click on a link, open a new window with the link\n * 3. When type directly on a link whose text matches its link url, update the link url with the link text\n */\nexport class HyperlinkPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private domHelper: DOMHelper | null = null;\n    private isMac: boolean = false;\n    private disposer: (() => void) | null = null;\n\n    private currentNode: Node | null = null;\n    private currentLink: HTMLAnchorElement | null = null;\n\n    /**\n     * Create a new instance of HyperLink class\n     * @param tooltip Tooltip to show when mouse hover over a link\n     * Default value is to return the href itself. If null, there will be no tooltip text.\n     * @param target (Optional) Target window name for hyperlink. If null, will use \"_blank\"\n     * @param onLinkClick (Optional) Open link callback (return false to use default behavior)\n     */\n    constructor(\n        private tooltip: HyperlinkToolTip = defaultToolTipCallback,\n        private target?: string,\n        private onLinkClick?: (anchor: HTMLAnchorElement, mouseEvent: MouseEvent) => boolean | void\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'Hyperlink';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    public initialize(editor: IEditor): void {\n        this.editor = editor;\n        this.domHelper = editor.getDOMHelper();\n        this.isMac = !!editor.getEnvironment().isMac;\n        this.disposer = editor.attachDomEvent({\n            mouseover: { beforeDispatch: this.onMouse },\n            mouseout: { beforeDispatch: this.onMouse },\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose(): void {\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n        }\n\n        this.currentNode = null;\n        this.currentLink = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    public onPluginEvent(event: PluginEvent): void {\n        let matchedLink: LinkData | null;\n\n        if (event.eventType == 'keyDown') {\n            const selection = this.editor?.getDOMSelection();\n            const node =\n                selection?.type == 'range' ? selection.range.commonAncestorContainer : null;\n\n            if (node && node != this.currentNode) {\n                this.currentNode = node;\n                this.currentLink = null;\n\n                this.runWithHyperlink(node, (href, a) => {\n                    if (\n                        node.textContent &&\n                        (matchedLink = matchLink(node.textContent)) &&\n                        matchedLink.normalizedUrl == href\n                    ) {\n                        this.currentLink = a;\n                    }\n                });\n            }\n        } else if (event.eventType == 'keyUp') {\n            const selection = this.editor?.getDOMSelection();\n            const node =\n                selection?.type == 'range' ? selection.range.commonAncestorContainer : null;\n\n            if (\n                node &&\n                node == this.currentNode &&\n                this.currentLink &&\n                this.currentLink.contains(node) &&\n                node.textContent &&\n                (matchedLink = matchLink(node.textContent))\n            ) {\n                this.currentLink.setAttribute('href', matchedLink.normalizedUrl);\n            }\n        } else if (event.eventType == 'mouseUp' && event.isClicking) {\n            this.runWithHyperlink(event.rawEvent.target as Node, (href, anchor) => {\n                if (\n                    !this.onLinkClick?.(anchor, event.rawEvent) &&\n                    this.isCtrlOrMetaPressed(event.rawEvent) &&\n                    event.rawEvent.button === 0\n                ) {\n                    event.rawEvent.preventDefault();\n\n                    const target = this.target || '_blank';\n                    const window = this.editor?.getDocument().defaultView;\n\n                    try {\n                        window?.open(href, target);\n                    } catch {}\n                }\n            });\n        } else if (event.eventType == 'contentChanged') {\n            this.domHelper?.setDomAttribute('title', null /*value*/);\n        }\n    }\n\n    protected onMouse = (e: Event) => {\n        this.runWithHyperlink(e.target as Node, (href, a) => {\n            const tooltip =\n                e.type == 'mouseover'\n                    ? typeof this.tooltip == 'function'\n                        ? this.tooltip(href, a)\n                        : this.tooltip\n                    : null;\n            this.domHelper?.setDomAttribute('title', tooltip);\n        });\n    };\n\n    private runWithHyperlink(node: Node, callback: (href: string, a: HTMLAnchorElement) => void) {\n        const a = this.domHelper?.findClosestElementAncestor(\n            node,\n            'a[href]'\n        ) as HTMLAnchorElement | null;\n        const href = a?.getAttribute('href');\n\n        if (href && a) {\n            callback(href, a);\n        }\n    }\n\n    private isCtrlOrMetaPressed(event: KeyboardEvent | MouseEvent): boolean {\n        return this.isMac ? event.metaKey : event.ctrlKey;\n    }\n}\n","import { createElement } from '../../pluginUtils/CreateElement/createElement';\nimport { ImageEditElementClass } from '../types/ImageEditElementClass';\nimport { isElementOfType, isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { CreateElementData } from '../../pluginUtils/CreateElement/CreateElementData';\nimport type { DNDDirectionX, DnDDirectionY } from '../types/DragAndDropContext';\nimport {\n    CROP_HANDLE_SIZE,\n    CROP_HANDLE_WIDTH,\n    ROTATION,\n    XS_CROP,\n    YS_CROP,\n} from '../constants/constants';\n\n/**\n * @internal\n */\nexport function createImageCropper(doc: Document) {\n    const cropper = getCropHTML()\n        .map(data => {\n            const cropper = createElement(data, doc);\n            if (\n                cropper &&\n                isNodeOfType(cropper, 'ELEMENT_NODE') &&\n                isElementOfType(cropper, 'div')\n            ) {\n                return cropper;\n            }\n        })\n        .filter(cropper => !!cropper) as HTMLDivElement[];\n    return cropper;\n}\n\n/**\n * @internal\n * Get HTML for crop elements, including 4 overlays (to show dark shadow), 1 container and 4 crop handles\n */\nexport function getCropHTML(): CreateElementData[] {\n    const overlayHTML: CreateElementData = {\n        tag: 'div',\n        style: 'position:absolute;background-color:rgb(0,0,0,0.5);pointer-events:none',\n        className: ImageEditElementClass.CropOverlay,\n    };\n    const containerHTML: CreateElementData = {\n        tag: 'div',\n        style: 'position:absolute;overflow:hidden;inset:0px;',\n        className: ImageEditElementClass.CropContainer,\n        children: [],\n    };\n\n    if (containerHTML) {\n        XS_CROP.forEach(x =>\n            YS_CROP.forEach(y => containerHTML.children?.push(getCropHTMLInternal(x, y)))\n        );\n    }\n    return [containerHTML, overlayHTML, overlayHTML, overlayHTML, overlayHTML];\n}\n\nfunction getCropHTMLInternal(x: DNDDirectionX, y: DnDDirectionY): CreateElementData {\n    const leftOrRight = x == 'w' ? 'left' : 'right';\n    const topOrBottom = y == 'n' ? 'top' : 'bottom';\n    const rotation = ROTATION[y + x];\n\n    return {\n        tag: 'div',\n        className: ImageEditElementClass.CropHandle,\n        style: `position:absolute;pointer-events:auto;cursor:${y}${x}-resize;${leftOrRight}:0;${topOrBottom}:0;width:${CROP_HANDLE_SIZE}px;height:${CROP_HANDLE_SIZE}px;transform:rotate(${rotation}deg)`,\n        dataset: { x, y },\n        children: getCropHandleHTML(),\n    };\n}\n\nfunction getCropHandleHTML(): CreateElementData[] {\n    const result: CreateElementData[] = [];\n    [0, 1].forEach(layer =>\n        [0, 1].forEach(dir => {\n            result.push(getCropHandleHTMLInternal(layer, dir));\n        })\n    );\n    return result;\n}\n\nfunction getCropHandleHTMLInternal(layer: number, dir: number): CreateElementData {\n    const position =\n        dir == 0\n            ? `right:${layer}px;height:${CROP_HANDLE_WIDTH - layer * 2}px;`\n            : `top:${layer}px;width:${CROP_HANDLE_WIDTH - layer * 2}px;`;\n    const bgColor = layer == 0 ? 'white' : 'black';\n\n    return {\n        tag: 'div',\n        style: `position:absolute;left:${layer}px;bottom:${layer}px;${position};background-color:${bgColor}`,\n    };\n}\n","import { rotateCoordinate } from '../utils/imageEditUtils';\nimport type { DragAndDropContext } from '../types/DragAndDropContext';\nimport type { DragAndDropHandler } from '../../pluginUtils/DragAndDrop/DragAndDropHandler';\nimport type { ImageCropMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Crop handle for DragAndDropHelper\n */\nexport const Cropper: DragAndDropHandler<DragAndDropContext, ImageCropMetadataFormat> = {\n    onDragStart: ({ editInfo }) => ({ ...editInfo }),\n    onDragging: ({ editInfo, x, y, options }, e, base, dx, dy) => {\n        [dx, dy] = rotateCoordinate(dx, dy, editInfo.angleRad ?? 0);\n\n        const {\n            widthPx,\n            heightPx,\n            leftPercent,\n            rightPercent,\n            topPercent,\n            bottomPercent,\n        } = editInfo;\n\n        if (\n            leftPercent === undefined ||\n            rightPercent === undefined ||\n            topPercent === undefined ||\n            bottomPercent === undefined ||\n            base.leftPercent === undefined ||\n            base.rightPercent === undefined ||\n            base.topPercent === undefined ||\n            base.bottomPercent === undefined ||\n            widthPx === undefined ||\n            heightPx === undefined\n        ) {\n            return false;\n        }\n\n        const { minWidth, minHeight } = options;\n        const widthPercent = 1 - leftPercent - rightPercent;\n        const heightPercent = 1 - topPercent - bottomPercent;\n\n        if (\n            widthPercent > 0 &&\n            heightPercent > 0 &&\n            minWidth !== undefined &&\n            minHeight !== undefined\n        ) {\n            const fullWidth = widthPx / widthPercent;\n            const fullHeight = heightPx / heightPercent;\n            const newLeft =\n                x != 'e'\n                    ? crop(base.leftPercent, dx, fullWidth, rightPercent, minWidth)\n                    : leftPercent;\n            const newRight =\n                x != 'w'\n                    ? crop(base.rightPercent, -dx, fullWidth, leftPercent, minWidth)\n                    : rightPercent;\n            const newTop =\n                y != 's'\n                    ? crop(base.topPercent, dy, fullHeight, bottomPercent, minHeight)\n                    : topPercent;\n            const newBottom =\n                y != 'n'\n                    ? crop(base.bottomPercent, -dy, fullHeight, topPercent, minHeight)\n                    : bottomPercent;\n\n            editInfo.leftPercent = newLeft;\n            editInfo.rightPercent = newRight;\n            editInfo.topPercent = newTop;\n            editInfo.bottomPercent = newBottom;\n            editInfo.widthPx = fullWidth * (1 - newLeft - newRight);\n            editInfo.heightPx = fullHeight * (1 - newTop - newBottom);\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n};\n\nfunction crop(\n    basePercentage: number,\n    deltaValue: number,\n    fullValue: number,\n    currentPercentage: number,\n    minValue: number\n): number {\n    const maxValue = fullValue * (1 - currentPercentage) - minValue;\n    const newValue = fullValue * basePercentage + deltaValue;\n    const validValue = Math.max(Math.min(newValue, maxValue), 0);\n    return validValue / fullValue;\n}\n","import { applyChange } from './utils/applyChange';\nimport { canRegenerateImage } from './utils/canRegenerateImage';\nimport { checkIfImageWasResized, isASmallImage } from './utils/imageEditUtils';\nimport { createImageWrapper } from './utils/createImageWrapper';\nimport { Cropper } from './Cropper/cropperContext';\nimport { EDITING_MARKER, findEditingImage } from './utils/findEditingImage';\nimport { getDropAndDragHelpers } from './utils/getDropAndDragHelpers';\nimport { getHTMLImageOptions } from './utils/getHTMLImageOptions';\nimport { getSelectedImage } from './utils/getSelectedImage';\nimport { getSelectedImageMetadata, updateImageEditInfo } from './utils/updateImageEditInfo';\nimport { ImageEditElementClass } from './types/ImageEditElementClass';\nimport { normalizeImageSelection } from './utils/normalizeImageSelection';\nimport { Resizer } from './Resizer/resizerContext';\nimport { Rotator } from './Rotator/rotatorContext';\nimport { updateRotateHandle } from './Rotator/updateRotateHandle';\nimport { updateWrapper } from './utils/updateWrapper';\nimport {\n    ChangeSource,\n    getSafeIdSelector,\n    getSelectedParagraphs,\n    isElementOfType,\n    isNodeOfType,\n    mutateBlock,\n    mutateSegment,\n    setImageState,\n    unwrap,\n} from 'roosterjs-content-model-dom';\nimport type { DragAndDropHelper } from '../pluginUtils/DragAndDrop/DragAndDropHelper';\nimport type { DragAndDropContext } from './types/DragAndDropContext';\nimport type { ImageHtmlOptions } from './types/ImageHtmlOptions';\nimport type { ImageEditOptions } from './types/ImageEditOptions';\nimport type {\n    ContentChangedEvent,\n    ContentModelImage,\n    EditorPlugin,\n    IEditor,\n    ImageEditOperation,\n    ImageEditor,\n    ImageMetadataFormat,\n    KeyDownEvent,\n    MouseDownEvent,\n    MouseUpEvent,\n    PluginEvent,\n} from 'roosterjs-content-model-types';\n\nconst DefaultOptions: Partial<ImageEditOptions> = {\n    borderColor: '#DB626C',\n    minWidth: 10,\n    minHeight: 10,\n    preserveRatio: true,\n    disableRotate: false,\n    disableSideResize: false,\n    onSelectState: ['resize', 'rotate'],\n};\n\nconst MouseRightButton = 2;\nconst DRAG_ID = '_dragging';\nconst IMAGE_EDIT_CLASS = 'imageEdit';\nconst IMAGE_EDIT_CLASS_CARET = 'imageEditCaretColor';\nconst IMAGE_EDIT_FORMAT_EVENT = 'ImageEditEvent';\n\n/**\n * ImageEdit plugin handles the following image editing features:\n * - Resize image\n * - Crop image\n * - Rotate image\n * - Flip image\n */\nexport class ImageEditPlugin implements ImageEditor, EditorPlugin {\n    protected editor: IEditor | null = null;\n    private shadowSpan: HTMLSpanElement | null = null;\n    private selectedImage: HTMLImageElement | null = null;\n    protected wrapper: HTMLSpanElement | null = null;\n    protected imageEditInfo: ImageMetadataFormat | null = null;\n    private imageHTMLOptions: ImageHtmlOptions | null = null;\n    private dndHelpers: DragAndDropHelper<DragAndDropContext, any>[] = [];\n    private clonedImage: HTMLImageElement | null = null;\n    private lastSrc: string | null = null;\n    private wasImageResized: boolean = false;\n    private isCropMode: boolean = false;\n    private resizers: HTMLDivElement[] = [];\n    private rotators: HTMLDivElement[] = [];\n    private croppers: HTMLDivElement[] = [];\n    private zoomScale: number = 1;\n    private disposer: (() => void) | null = null;\n    protected isEditing = false;\n\n    constructor(protected options: ImageEditOptions = DefaultOptions) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ImageEdit';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = editor.attachDomEvent({\n            blur: {\n                beforeDispatch: () => {\n                    if (this.isEditing && this.editor && !this.editor.isDisposed()) {\n                        this.applyFormatWithContentModel(\n                            this.editor,\n                            this.isCropMode,\n                            true /* shouldSelectImage */\n                        );\n                    }\n                },\n            },\n            dragstart: {\n                beforeDispatch: ev => {\n                    if (this.editor) {\n                        const target = ev.target as Node;\n                        if (this.isImageSelection(target)) {\n                            target.id = target.id + DRAG_ID;\n                        }\n                    }\n                },\n            },\n            dragend: {\n                beforeDispatch: ev => {\n                    if (this.editor) {\n                        const target = ev.target as Node;\n                        if (this.isImageSelection(target) && target.id.includes(DRAG_ID)) {\n                            target.id = target.id.replace(DRAG_ID, '').trim();\n                        }\n                    }\n                },\n            },\n        });\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n        }\n        this.isEditing = false;\n        this.cleanInfo();\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n        switch (event.eventType) {\n            case 'mouseDown':\n                this.mouseDownHandler(this.editor, event);\n                break;\n            case 'mouseUp':\n                this.mouseUpHandler(this.editor, event);\n                break;\n            case 'keyDown':\n                this.keyDownHandler(this.editor, event);\n                break;\n            case 'contentChanged':\n                this.contentChangedHandler(this.editor, event);\n                break;\n            case 'extractContentWithDom':\n                this.removeImageEditing(event.clonedRoot);\n                break;\n        }\n    }\n\n    private removeImageEditing(clonedRoot: HTMLElement) {\n        const images = clonedRoot.querySelectorAll('img');\n        images.forEach(image => {\n            if (image.dataset.editingInfo) {\n                delete image.dataset.editingInfo;\n            }\n        });\n    }\n\n    private isImageSelection(target: Node): target is HTMLElement {\n        return (\n            isNodeOfType(target, 'ELEMENT_NODE') &&\n            (isElementOfType(target, 'img') ||\n                !!(\n                    isElementOfType(target, 'span') &&\n                    target.firstElementChild &&\n                    isNodeOfType(target.firstElementChild, 'ELEMENT_NODE') &&\n                    isElementOfType(target.firstElementChild, 'img')\n                ))\n        );\n    }\n\n    private mouseUpHandler(editor: IEditor, event: MouseUpEvent) {\n        const selection = editor.getDOMSelection();\n        if ((selection && selection.type == 'image') || this.isEditing) {\n            const shouldSelectImage =\n                this.isImageSelection(event.rawEvent.target as Node) &&\n                event.rawEvent.button === MouseRightButton;\n            this.applyFormatWithContentModel(editor, this.isCropMode, shouldSelectImage);\n        }\n    }\n\n    private mouseDownHandler(editor: IEditor, event: MouseDownEvent) {\n        if (\n            this.isEditing &&\n            this.isImageSelection(event.rawEvent.target as Node) &&\n            event.rawEvent.button !== MouseRightButton &&\n            !this.isCropMode\n        ) {\n            this.applyFormatWithContentModel(\n                editor,\n                this.isCropMode,\n                this.shadowSpan === event.rawEvent.target\n            );\n        }\n    }\n\n    private onDropHandler(editor: IEditor) {\n        const selection = editor.getDOMSelection();\n        if (selection?.type == 'image') {\n            editor.formatContentModel(model => {\n                const imageDragged = findEditingImage(model, selection.image.id);\n                const imageDropped = findEditingImage(\n                    model,\n                    selection.image.id.replace(DRAG_ID, '').trim()\n                );\n                if (imageDragged && imageDropped) {\n                    const draggedIndex = imageDragged.paragraph.segments.indexOf(\n                        imageDragged.image\n                    );\n                    mutateBlock(imageDragged.paragraph).segments.splice(draggedIndex, 1);\n                    const segment = imageDropped.image;\n                    const paragraph = imageDropped.paragraph;\n                    mutateSegment(paragraph, segment, image => {\n                        image.isSelected = true;\n                        image.isSelectedAsImageSelection = true;\n                    });\n\n                    return true;\n                }\n                return false;\n            });\n        }\n    }\n\n    private keyDownHandler(editor: IEditor, event: KeyDownEvent) {\n        if (this.isEditing) {\n            if (\n                event.rawEvent.key === 'Escape' ||\n                event.rawEvent.key === 'Delete' ||\n                event.rawEvent.key === 'Backspace'\n            ) {\n                if (event.rawEvent.key === 'Escape') {\n                    this.removeImageWrapper();\n                }\n                this.cleanInfo();\n            } else {\n                if (event.rawEvent.key == 'Enter' && this.isCropMode) {\n                    event.rawEvent.preventDefault();\n                }\n                this.applyFormatWithContentModel(\n                    editor,\n                    this.isCropMode,\n                    true /** should selectImage */,\n                    false /* isApiOperation */\n                );\n            }\n        }\n    }\n\n    private setContentHandler(editor: IEditor) {\n        const selection = editor.getDOMSelection();\n        if (selection?.type == 'image') {\n            this.cleanInfo();\n            setImageState(selection.image, '');\n            this.isEditing = false;\n            this.isCropMode = false;\n        }\n    }\n\n    private formatEventHandler(event: ContentChangedEvent) {\n        if (this.isEditing && event.formatApiName !== IMAGE_EDIT_FORMAT_EVENT) {\n            this.cleanInfo();\n            this.isEditing = false;\n            this.isCropMode = false;\n        }\n    }\n\n    private contentChangedHandler(editor: IEditor, event: ContentChangedEvent) {\n        switch (event.source) {\n            case ChangeSource.SetContent:\n                this.setContentHandler(editor);\n                break;\n            case ChangeSource.Format:\n                this.formatEventHandler(event);\n                break;\n            case ChangeSource.Drop:\n                this.onDropHandler(editor);\n                break;\n        }\n    }\n\n    /**\n     * EXPOSED FOR TESTING PURPOSE ONLY\n     */\n    protected applyFormatWithContentModel(\n        editor: IEditor,\n        isCropMode: boolean,\n        shouldSelectImage: boolean,\n        isApiOperation?: boolean\n    ) {\n        let editingImageModel: ContentModelImage | undefined;\n        const selection = editor.getDOMSelection();\n\n        editor.formatContentModel(\n            model => {\n                const editingImage = getSelectedImage(model);\n                const previousSelectedImage = isApiOperation\n                    ? editingImage\n                    : findEditingImage(model);\n                let result = false;\n\n                if (\n                    shouldSelectImage ||\n                    previousSelectedImage?.image != editingImage?.image ||\n                    previousSelectedImage?.image.format.imageState == EDITING_MARKER ||\n                    isApiOperation\n                ) {\n                    const { lastSrc, selectedImage, imageEditInfo, clonedImage } = this;\n                    if (\n                        (this.isEditing || isApiOperation) &&\n                        previousSelectedImage &&\n                        lastSrc &&\n                        selectedImage &&\n                        imageEditInfo &&\n                        clonedImage\n                    ) {\n                        mutateSegment(\n                            previousSelectedImage.paragraph,\n                            previousSelectedImage.image,\n                            image => {\n                                applyChange(\n                                    editor,\n                                    selectedImage,\n                                    image,\n                                    imageEditInfo,\n                                    lastSrc,\n                                    this.wasImageResized || this.isCropMode,\n                                    clonedImage\n                                );\n\n                                image.isSelected = shouldSelectImage;\n                                image.isSelectedAsImageSelection = shouldSelectImage;\n                                image.format.imageState = undefined;\n\n                                if (selection?.type == 'range' && !selection.range.collapsed) {\n                                    const selectedParagraphs = getSelectedParagraphs(model, true);\n                                    const isImageInRange = selectedParagraphs.some(paragraph =>\n                                        paragraph.segments.includes(image)\n                                    );\n                                    if (isImageInRange) {\n                                        image.isSelected = true;\n                                    }\n                                }\n                            }\n                        );\n\n                        if (shouldSelectImage) {\n                            normalizeImageSelection(previousSelectedImage);\n                        }\n\n                        this.cleanInfo();\n                        result = true;\n                    }\n\n                    this.isEditing = false;\n                    this.isCropMode = false;\n\n                    if (\n                        editingImage &&\n                        selection?.type == 'image' &&\n                        !shouldSelectImage &&\n                        !isApiOperation\n                    ) {\n                        this.isEditing = true;\n                        this.isCropMode = isCropMode;\n                        mutateSegment(editingImage.paragraph, editingImage.image, image => {\n                            editingImageModel = image;\n                            this.imageEditInfo = updateImageEditInfo(image, selection.image);\n                            image.format.imageState = 'isEditing';\n                        });\n\n                        result = true;\n                    }\n                }\n\n                return result;\n            },\n            {\n                onNodeCreated: (model, node) => {\n                    if (\n                        !isApiOperation &&\n                        editingImageModel &&\n                        editingImageModel == model &&\n                        editingImageModel.format.imageState == EDITING_MARKER &&\n                        isNodeOfType(node, 'ELEMENT_NODE') &&\n                        isElementOfType(node, 'img')\n                    ) {\n                        if (isCropMode) {\n                            this.startCropMode(editor, node);\n                        } else {\n                            this.startRotateAndResize(editor, node);\n                        }\n                    }\n                },\n                apiName: IMAGE_EDIT_FORMAT_EVENT,\n            },\n            {\n                tryGetFromCache: true,\n            }\n        );\n    }\n\n    private startEditing(\n        editor: IEditor,\n        image: HTMLImageElement,\n        apiOperation: ImageEditOperation[]\n    ) {\n        if (!this.imageEditInfo) {\n            this.imageEditInfo = getSelectedImageMetadata(editor, image);\n        }\n        this.lastSrc = image.getAttribute('src');\n        this.imageHTMLOptions = getHTMLImageOptions(editor, this.options, this.imageEditInfo);\n        const {\n            resizers,\n            rotators,\n            wrapper,\n            shadowSpan,\n            imageClone,\n            croppers,\n        } = createImageWrapper(\n            editor,\n            image,\n            this.options,\n            this.imageEditInfo,\n            this.imageHTMLOptions,\n            apiOperation\n        );\n        this.shadowSpan = shadowSpan;\n        this.selectedImage = image;\n        this.wrapper = wrapper;\n        this.clonedImage = imageClone;\n        this.wasImageResized = checkIfImageWasResized(image);\n        this.resizers = resizers;\n        this.rotators = rotators;\n        this.croppers = croppers;\n        this.zoomScale = editor.getDOMHelper().calculateZoomScale();\n\n        editor.setEditorStyle(IMAGE_EDIT_CLASS, `outline-style:none!important;`, [\n            `span:has(>img${getSafeIdSelector(this.selectedImage.id)})`,\n        ]);\n\n        editor.setEditorStyle(IMAGE_EDIT_CLASS_CARET, `caret-color: transparent;`);\n    }\n\n    public startRotateAndResize(editor: IEditor, image: HTMLImageElement) {\n        if (this.imageEditInfo) {\n            this.startEditing(editor, image, ['resize', 'rotate']);\n            if (this.selectedImage && this.imageEditInfo && this.wrapper && this.clonedImage) {\n                const isMobileOrTable = !!editor.getEnvironment().isMobileOrTablet;\n                this.dndHelpers = [\n                    ...getDropAndDragHelpers(\n                        this.wrapper,\n                        this.imageEditInfo,\n                        this.options,\n                        ImageEditElementClass.ResizeHandle,\n                        Resizer,\n                        () => {\n                            if (\n                                this.imageEditInfo &&\n                                this.selectedImage &&\n                                this.wrapper &&\n                                this.clonedImage\n                            ) {\n                                updateWrapper(\n                                    this.imageEditInfo,\n                                    this.options,\n                                    this.selectedImage,\n                                    this.clonedImage,\n                                    this.wrapper,\n                                    this.resizers\n                                );\n                                this.wasImageResized = true;\n                            }\n                        },\n                        this.zoomScale,\n                        isMobileOrTable\n                    ),\n                    ...getDropAndDragHelpers(\n                        this.wrapper,\n                        this.imageEditInfo,\n                        this.options,\n                        ImageEditElementClass.RotateHandle,\n                        Rotator,\n                        () => {\n                            if (\n                                this.imageEditInfo &&\n                                this.selectedImage &&\n                                this.wrapper &&\n                                this.clonedImage\n                            ) {\n                                updateWrapper(\n                                    this.imageEditInfo,\n                                    this.options,\n                                    this.selectedImage,\n                                    this.clonedImage,\n                                    this.wrapper\n                                );\n                                this.updateRotateHandleState(\n                                    editor,\n                                    this.selectedImage,\n                                    this.wrapper,\n                                    this.rotators,\n                                    this.imageEditInfo?.angleRad\n                                );\n                            }\n                        },\n                        this.zoomScale,\n                        isMobileOrTable\n                    ),\n                ];\n\n                updateWrapper(\n                    this.imageEditInfo,\n                    this.options,\n                    this.selectedImage,\n                    this.clonedImage,\n                    this.wrapper,\n                    this.resizers\n                );\n\n                this.updateRotateHandleState(\n                    editor,\n                    this.selectedImage,\n                    this.wrapper,\n                    this.rotators,\n                    this.imageEditInfo?.angleRad\n                );\n            }\n        }\n    }\n\n    private updateRotateHandleState(\n        editor: IEditor,\n        image: HTMLImageElement,\n        wrapper: HTMLSpanElement,\n        rotators: HTMLDivElement[],\n        angleRad: number | undefined\n    ) {\n        const viewport = editor.getVisibleViewport();\n        const smallImage = isASmallImage(image.width, image.height);\n        if (viewport && rotators && rotators.length > 0) {\n            const rotator = rotators[0];\n            const rotatorHandle = rotator.firstElementChild;\n            if (\n                isNodeOfType(rotatorHandle, 'ELEMENT_NODE') &&\n                isElementOfType(rotatorHandle, 'div')\n            ) {\n                updateRotateHandle(\n                    viewport,\n                    angleRad ?? 0,\n                    wrapper,\n                    rotator,\n                    rotatorHandle,\n                    smallImage\n                );\n            }\n        }\n    }\n\n    public isOperationAllowed(operation: ImageEditOperation): boolean {\n        return (\n            operation === 'resize' ||\n            operation === 'rotate' ||\n            operation === 'flip' ||\n            operation === 'crop'\n        );\n    }\n\n    public canRegenerateImage(image: HTMLImageElement): boolean {\n        return canRegenerateImage(image);\n    }\n\n    private startCropMode(editor: IEditor, image: HTMLImageElement) {\n        if (this.imageEditInfo) {\n            this.startEditing(editor, image, ['crop']);\n            if (this.imageEditInfo && this.selectedImage && this.wrapper && this.clonedImage) {\n                this.dndHelpers = [\n                    ...getDropAndDragHelpers(\n                        this.wrapper,\n                        this.imageEditInfo,\n                        this.options,\n                        ImageEditElementClass.CropHandle,\n                        Cropper,\n                        () => {\n                            if (\n                                this.imageEditInfo &&\n                                this.selectedImage &&\n                                this.wrapper &&\n                                this.clonedImage\n                            ) {\n                                updateWrapper(\n                                    this.imageEditInfo,\n                                    this.options,\n                                    this.selectedImage,\n                                    this.clonedImage,\n                                    this.wrapper,\n                                    undefined,\n                                    this.croppers\n                                );\n                                this.isCropMode = true;\n                            }\n                        },\n                        this.zoomScale,\n                        !!editor.getEnvironment().isMobileOrTablet\n                    ),\n                ];\n                updateWrapper(\n                    this.imageEditInfo,\n                    this.options,\n                    this.selectedImage,\n                    this.clonedImage,\n                    this.wrapper,\n                    undefined,\n                    this.croppers\n                );\n            }\n        }\n    }\n\n    public cropImage() {\n        if (!this.editor) {\n            return;\n        }\n        if (!this.editor.getEnvironment().isSafari) {\n            this.editor.focus(); // Safari will keep the selection when click crop, then the focus() call should not be called\n        }\n        const selection = this.editor.getDOMSelection();\n        if (selection?.type == 'image') {\n            this.applyFormatWithContentModel(\n                this.editor,\n                true /* isCropMode */,\n                false /* shouldSelectImage */\n            );\n        }\n    }\n\n    private editImage(\n        editor: IEditor,\n        image: HTMLImageElement,\n        apiOperation: ImageEditOperation[],\n        operation: (imageEditInfo: ImageMetadataFormat) => void\n    ) {\n        this.startEditing(editor, image, apiOperation);\n        if (!this.selectedImage || !this.imageEditInfo || !this.wrapper || !this.clonedImage) {\n            return;\n        }\n\n        operation(this.imageEditInfo);\n\n        updateWrapper(\n            this.imageEditInfo,\n            this.options,\n            this.selectedImage,\n            this.clonedImage,\n            this.wrapper\n        );\n\n        this.applyFormatWithContentModel(\n            editor,\n            false /* isCrop */,\n            true /* shouldSelect*/,\n            true /* isApiOperation */\n        );\n    }\n\n    /**\n     * Exported for testing purpose only\n     */\n    public cleanInfo() {\n        this.editor?.setEditorStyle(IMAGE_EDIT_CLASS, null);\n        this.editor?.setEditorStyle(IMAGE_EDIT_CLASS_CARET, null);\n        this.selectedImage = null;\n        this.shadowSpan = null;\n        this.wrapper = null;\n        this.imageEditInfo = null;\n        this.imageHTMLOptions = null;\n        this.dndHelpers.forEach(helper => helper.dispose());\n        this.dndHelpers = [];\n        this.clonedImage = null;\n        this.lastSrc = null;\n        this.wasImageResized = false;\n        this.isCropMode = false;\n        this.resizers = [];\n        this.rotators = [];\n        this.croppers = [];\n    }\n\n    private removeImageWrapper() {\n        let image: HTMLImageElement | null = null;\n        if (this.shadowSpan && this.shadowSpan.parentElement) {\n            if (\n                this.shadowSpan.firstElementChild &&\n                isNodeOfType(this.shadowSpan.firstElementChild, 'ELEMENT_NODE') &&\n                isElementOfType(this.shadowSpan.firstElementChild, 'img')\n            ) {\n                image = this.shadowSpan.firstElementChild;\n            }\n            unwrap(this.shadowSpan);\n            this.shadowSpan = null;\n            this.wrapper = null;\n        }\n\n        return image;\n    }\n\n    public flipImage(direction: 'horizontal' | 'vertical') {\n        const selection = this.editor?.getDOMSelection();\n        if (!this.editor || !selection || selection.type !== 'image') {\n            return;\n        }\n        const image = selection.image;\n        if (this.editor) {\n            this.editImage(this.editor, image, ['flip'], imageEditInfo => {\n                const angleRad = imageEditInfo.angleRad || 0;\n                const isInVerticalPostion =\n                    (angleRad >= Math.PI / 2 && angleRad < (3 * Math.PI) / 4) ||\n                    (angleRad <= -Math.PI / 2 && angleRad > (-3 * Math.PI) / 4);\n                if (isInVerticalPostion) {\n                    if (direction === 'horizontal') {\n                        imageEditInfo.flippedVertical = !imageEditInfo.flippedVertical;\n                    } else {\n                        imageEditInfo.flippedHorizontal = !imageEditInfo.flippedHorizontal;\n                    }\n                } else {\n                    if (direction === 'vertical') {\n                        imageEditInfo.flippedVertical = !imageEditInfo.flippedVertical;\n                    } else {\n                        imageEditInfo.flippedHorizontal = !imageEditInfo.flippedHorizontal;\n                    }\n                }\n            });\n        }\n    }\n\n    public rotateImage(angleRad: number) {\n        const selection = this.editor?.getDOMSelection();\n        if (!this.editor || !selection || selection.type !== 'image') {\n            return;\n        }\n        const image = selection.image;\n        if (this.editor) {\n            this.editImage(this.editor, image, [], imageEditInfo => {\n                imageEditInfo.angleRad = (imageEditInfo.angleRad || 0) + angleRad;\n            });\n        }\n    }\n}\n","import { createElement } from '../../pluginUtils/CreateElement/createElement';\nimport { ImageEditElementClass } from '../types/ImageEditElementClass';\nimport { isElementOfType, isNodeOfType } from 'roosterjs-content-model-dom';\nimport { Xs, Ys } from '../constants/constants';\nimport type { CreateElementData } from '../../pluginUtils/CreateElement/CreateElementData';\nimport type { DNDDirectionX, DnDDirectionY } from '../types/DragAndDropContext';\n/**\n * @internal\n */\nexport interface OnShowResizeHandle {\n    (elementData: CreateElementData, x: DNDDirectionX, y: DnDDirectionY): void;\n}\n\nconst RESIZE_HANDLE_MARGIN = 6;\nconst RESIZE_HANDLE_SIZE = 10;\n\n/**\n * @internal\n */\nexport function createImageResizer(\n    doc: Document,\n    onShowResizeHandle?: OnShowResizeHandle\n): HTMLDivElement[] {\n    const cornerElements = getCornerResizeHTML(onShowResizeHandle);\n    const sideElements = getSideResizeHTML(onShowResizeHandle);\n    const handles = [...cornerElements, ...sideElements]\n        .map(element => {\n            const handle = createElement(element, doc);\n            if (isNodeOfType(handle, 'ELEMENT_NODE') && isElementOfType(handle, 'div')) {\n                return handle;\n            }\n        })\n        .filter(element => !!element) as HTMLDivElement[];\n    return handles;\n}\n\n/**\n * @internal\n * Get HTML for resize handles at the corners\n */\nfunction getCornerResizeHTML(onShowResizeHandle?: OnShowResizeHandle): CreateElementData[] {\n    const result: CreateElementData[] = [];\n\n    Xs.forEach(x =>\n        Ys.forEach(y => {\n            const elementData = (x == '') == (y == '') ? getResizeHandleHTML(x, y) : null;\n            if (onShowResizeHandle && elementData) {\n                onShowResizeHandle(elementData, x, y);\n            }\n            if (elementData) {\n                result.push(elementData);\n            }\n        })\n    );\n    return result;\n}\n\n/**\n * @internal\n * Get HTML for resize handles on the sides\n */\nfunction getSideResizeHTML(onShowResizeHandle?: OnShowResizeHandle): CreateElementData[] {\n    const result: CreateElementData[] = [];\n    Xs.forEach(x =>\n        Ys.forEach(y => {\n            const elementData = (x == '') != (y == '') ? getResizeHandleHTML(x, y) : null;\n            if (onShowResizeHandle && elementData) {\n                onShowResizeHandle(elementData, x, y);\n            }\n            if (elementData) {\n                result.push(elementData);\n            }\n        })\n    );\n    return result;\n}\n\nconst createHandleStyle = (direction: string, topOrBottom: string, leftOrRight: string) => {\n    return `position:relative;width:${RESIZE_HANDLE_SIZE}px;height:${RESIZE_HANDLE_SIZE}px;background-color: #FFFFFF;cursor:${direction}-resize;${topOrBottom}:-${RESIZE_HANDLE_MARGIN}px;${leftOrRight}:-${RESIZE_HANDLE_MARGIN}px;border-radius:100%;border: 2px solid #bfbfbf;box-shadow: 0px 0.36316px 1.36185px rgba(100, 100, 100, 0.25);`;\n};\n\nfunction getResizeHandleHTML(x: DNDDirectionX, y: DnDDirectionY): CreateElementData | null {\n    const leftOrRight = x == 'w' ? 'left' : 'right';\n    const topOrBottom = y == 'n' ? 'top' : 'bottom';\n    const leftOrRightValue = x == '' ? '50%' : '0px';\n    const topOrBottomValue = y == '' ? '50%' : '0px';\n    const direction = y + x;\n    return x == '' && y == ''\n        ? null\n        : {\n              tag: 'div',\n              style: `position:absolute;${leftOrRight}:${leftOrRightValue};${topOrBottom}:${topOrBottomValue}`,\n              children: [\n                  {\n                      tag: 'div',\n                      style: createHandleStyle(direction, topOrBottom, leftOrRight),\n                      className: ImageEditElementClass.ResizeHandle,\n                      dataset: { x, y },\n                  },\n              ],\n          };\n}\n","import { rotateCoordinate } from '../utils/imageEditUtils';\nimport type { DragAndDropHandler } from '../../pluginUtils/DragAndDrop/DragAndDropHandler';\nimport type { ImageResizeMetadataFormat } from 'roosterjs-content-model-types';\nimport type { DragAndDropContext } from '../types/DragAndDropContext';\n\n/**\n * @internal\n * The resize drag and drop handler\n */\nexport const Resizer: DragAndDropHandler<DragAndDropContext, ImageResizeMetadataFormat> = {\n    onDragStart: ({ editInfo }) => ({ ...editInfo }),\n    onDragging: ({ x, y, editInfo, options }, e, base, deltaX, deltaY) => {\n        if (\n            base.heightPx &&\n            base.widthPx &&\n            options.minWidth !== undefined &&\n            options.minHeight !== undefined\n        ) {\n            const ratio =\n                base.widthPx > 0 && base.heightPx > 0 ? (base.widthPx * 1.0) / base.heightPx : 0;\n            [deltaX, deltaY] = rotateCoordinate(deltaX, deltaY, editInfo.angleRad ?? 0);\n            const horizontalOnly = x == '';\n            const verticalOnly = y == '';\n            const shouldPreserveRatio =\n                !(horizontalOnly || verticalOnly) && (options.preserveRatio || e.shiftKey);\n            let newWidth = horizontalOnly\n                ? base.widthPx\n                : Math.max(base.widthPx + deltaX * (x == 'w' ? -1 : 1), options.minWidth);\n            let newHeight = verticalOnly\n                ? base.heightPx\n                : Math.max(base.heightPx + deltaY * (y == 'n' ? -1 : 1), options.minHeight);\n\n            if (shouldPreserveRatio && ratio > 0) {\n                if (ratio > 1) {\n                    // first sure newHeight is right，calculate newWidth\n                    newWidth = newHeight * ratio;\n                    if (newWidth < options.minWidth) {\n                        newWidth = options.minWidth;\n                        newHeight = newWidth / ratio;\n                    }\n                } else {\n                    // first sure newWidth is right，calculate newHeight\n                    newHeight = newWidth / ratio;\n                    if (newHeight < options.minHeight) {\n                        newHeight = options.minHeight;\n                        newWidth = newHeight * ratio;\n                    }\n                }\n            }\n\n            editInfo.widthPx = newWidth;\n            editInfo.heightPx = newHeight;\n            return true;\n        } else {\n            return false;\n        }\n    },\n};\n","/**\n * @internal\n */\nexport function updateSideHandlesVisibility(handles: HTMLDivElement[], isSmall: boolean) {\n    handles.forEach(handle => {\n        const { y, x } = handle.dataset;\n        const coordinate = (y ?? '') + (x ?? '');\n        const directions = ['n', 's', 'e', 'w'];\n        const isSideHandle = directions.indexOf(coordinate) > -1;\n        handle.style.display = isSideHandle && isSmall ? 'none' : '';\n    });\n}\n","import { createElement } from '../../pluginUtils/CreateElement/createElement';\nimport { ImageEditElementClass } from '../types/ImageEditElementClass';\nimport { isElementOfType, isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { CreateElementData } from '../../pluginUtils/CreateElement/CreateElementData';\nimport type { ImageHtmlOptions } from '../types/ImageHtmlOptions';\nimport {\n    ROTATE_GAP,\n    ROTATE_HANDLE_TOP,\n    ROTATE_ICON_MARGIN,\n    ROTATE_SIZE,\n    ROTATE_WIDTH,\n} from '../constants/constants';\n\n/**\n * @internal\n * Get HTML for rotate elements, including the rotate handle with icon, and a line between the handle and the image\n */\nexport function createImageRotator(doc: Document, htmlOptions: ImageHtmlOptions) {\n    return getRotateHTML(htmlOptions)\n        .map(element => {\n            const rotator = createElement(element, doc);\n            if (isNodeOfType(rotator, 'ELEMENT_NODE') && isElementOfType(rotator, 'div')) {\n                return rotator;\n            }\n        })\n        .filter(rotator => !!rotator) as HTMLDivElement[];\n}\n\n/**\n * @internal\n * Get HTML for rotate elements, including the rotate handle with icon, and a line between the handle and the image\n *\n */\nfunction getRotateHTML({\n    borderColor,\n    rotateHandleBackColor,\n}: ImageHtmlOptions): CreateElementData[] {\n    const handleLeft = ROTATE_SIZE / 2;\n    return [\n        {\n            tag: 'div',\n            className: ImageEditElementClass.RotateCenter,\n            style: `position:absolute;left:50%;width:1px;background-color:${borderColor};top:${-ROTATE_HANDLE_TOP}px;height:${ROTATE_GAP}px;margin-left:${-ROTATE_WIDTH}px;`,\n            children: [\n                {\n                    tag: 'div',\n                    className: ImageEditElementClass.RotateHandle,\n                    style: `position:absolute;background-color:${rotateHandleBackColor};border:solid 1px ${borderColor};border-radius:50%;width:${ROTATE_SIZE}px;height:${ROTATE_SIZE}px;left:-${\n                        handleLeft + ROTATE_WIDTH\n                    }px;cursor:move;top:${-ROTATE_SIZE}px;line-height: 0px;`,\n                    children: [getRotateIconHTML(borderColor)],\n                },\n            ],\n        },\n    ];\n}\n\nfunction getRotateIconHTML(borderColor: string): CreateElementData {\n    return {\n        tag: 'svg',\n        namespace: 'http://www.w3.org/2000/svg',\n        style: `width:16px;height:16px;margin: ${ROTATE_ICON_MARGIN}px ${ROTATE_ICON_MARGIN}px`,\n        children: [\n            {\n                tag: 'path',\n                namespace: 'http://www.w3.org/2000/svg',\n                attributes: {\n                    d: 'M 10.5,10.0 A 3.8,3.8 0 1 1 6.7,6.3',\n                    transform: 'matrix(1.1 1.1 -1.1 1.1 11.6 -10.8)',\n                    ['fill-opacity']: '0',\n                    stroke: borderColor,\n                },\n            },\n            {\n                tag: 'path',\n                namespace: 'http://www.w3.org/2000/svg',\n                attributes: {\n                    d: 'M12.0 3.648l.884-.884.53 2.298-2.298-.53z',\n                    stroke: borderColor,\n                },\n            },\n        ],\n    };\n}\n","import { DEFAULT_ROTATE_HANDLE_HEIGHT, DEG_PER_RAD } from '../constants/constants';\nimport type { ImageRotateMetadataFormat } from 'roosterjs-content-model-types';\nimport type { DragAndDropHandler } from '../../pluginUtils/DragAndDrop/DragAndDropHandler';\nimport type { DragAndDropContext } from '../types/DragAndDropContext';\n\n/**\n * @internal\n * The rotate drag and drop handler\n */\nexport const Rotator: DragAndDropHandler<DragAndDropContext, ImageRotateMetadataFormat> = {\n    onDragStart: ({ editInfo }) => ({ ...editInfo }),\n    onDragging: ({ editInfo, options }, e, base, deltaX, deltaY) => {\n        if (editInfo.heightPx) {\n            const distance = editInfo.heightPx / 2 + DEFAULT_ROTATE_HANDLE_HEIGHT;\n            const newX = distance * Math.sin(base.angleRad ?? 0) + deltaX;\n            const newY = distance * Math.cos(base.angleRad ?? 0) - deltaY;\n            let angleInRad = Math.atan2(newX, newY);\n\n            if (!e.altKey && options && options.minRotateDeg !== undefined) {\n                const angleInDeg = angleInRad * DEG_PER_RAD;\n                const adjustedAngleInDeg =\n                    Math.round(angleInDeg / options.minRotateDeg) * options.minRotateDeg;\n                angleInRad = adjustedAngleInDeg / DEG_PER_RAD;\n            }\n\n            if (editInfo.angleRad != angleInRad) {\n                editInfo.angleRad = angleInRad;\n                return true;\n            }\n        }\n        return false;\n    },\n};\n","import { DEG_PER_RAD, RESIZE_HANDLE_MARGIN, ROTATE_GAP, ROTATE_SIZE } from '../constants/constants';\nimport type { Rect } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Move rotate handle. When image is very close to the border of editor, rotate handle may not be visible.\n * Fix it by reduce the distance from image to rotate handle\n */\nexport function updateRotateHandle(\n    editorRect: Rect,\n    angleRad: number,\n    wrapper: HTMLElement,\n    rotateCenter: HTMLElement,\n    rotateHandle: HTMLElement,\n    isSmallImage: boolean\n) {\n    if (isSmallImage) {\n        rotateCenter.style.display = 'none';\n        rotateHandle.style.display = 'none';\n        return;\n    } else {\n        rotateCenter.style.display = '';\n        rotateHandle.style.display = '';\n        const rotateCenterRect = rotateCenter.getBoundingClientRect();\n        const wrapperRect = wrapper.getBoundingClientRect();\n        const ROTATOR_HEIGHT = ROTATE_SIZE + ROTATE_GAP + RESIZE_HANDLE_MARGIN;\n        if (rotateCenterRect && wrapperRect) {\n            let adjustedDistance = Number.MAX_SAFE_INTEGER;\n            const angle = angleRad * DEG_PER_RAD;\n\n            if (angle < 45 && angle > -45 && wrapperRect.top - editorRect.top < ROTATOR_HEIGHT) {\n                const top = rotateCenterRect.top - editorRect.top;\n                adjustedDistance = top;\n            } else if (\n                angle <= -80 &&\n                angle >= -100 &&\n                wrapperRect.left - editorRect.left < ROTATOR_HEIGHT\n            ) {\n                const left = rotateCenterRect.left - editorRect.left;\n                adjustedDistance = left;\n            } else if (\n                angle >= 80 &&\n                angle <= 100 &&\n                editorRect.right - wrapperRect.right < ROTATOR_HEIGHT\n            ) {\n                const right = rotateCenterRect.right - editorRect.right;\n                adjustedDistance = Math.min(editorRect.right - wrapperRect.right, right);\n            } else if (\n                (angle <= -160 || angle >= 160) &&\n                editorRect.bottom - wrapperRect.bottom < ROTATOR_HEIGHT\n            ) {\n                const bottom = rotateCenterRect.bottom - editorRect.bottom;\n                adjustedDistance = Math.min(editorRect.bottom - wrapperRect.bottom, bottom);\n            }\n\n            const rotateGap = Math.max(Math.min(ROTATE_GAP, adjustedDistance), 0);\n            const rotateTop = Math.max(Math.min(ROTATE_SIZE, adjustedDistance - rotateGap), 0);\n            rotateCenter.style.top = -rotateGap - RESIZE_HANDLE_MARGIN + 'px';\n            rotateCenter.style.height = rotateGap + 'px';\n            rotateHandle.style.top = -rotateTop + 'px';\n        }\n    }\n}\n","import type { DNDDirectionX, DnDDirectionY } from '../types/DragAndDropContext';\n\n/**\n * @internal\n */\nexport const RESIZE_HANDLE_SIZE = 10;\n\n/**\n * @internal\n */\nexport const RESIZE_HANDLE_MARGIN = 6;\n\n/**\n * @internal\n */\nexport const ROTATE_SIZE = 32;\n\n/**\n * @internal\n */\nexport const ROTATE_GAP = 15;\n\n/**\n * @internal\n */\nexport const DEG_PER_RAD = 180 / Math.PI;\n\n/**\n * @internal\n */\nexport const DEFAULT_ROTATE_HANDLE_HEIGHT = ROTATE_SIZE / 2 + ROTATE_GAP;\n\n/**\n * @internal\n */\nexport const ROTATE_ICON_MARGIN = 8;\n\n/**\n * @internal\n */\nexport const ROTATION: Record<string, number> = {\n    sw: 0,\n    nw: 90,\n    ne: 180,\n    se: 270,\n};\n\n/**\n * @internal\n */\nexport const Xs: DNDDirectionX[] = ['w', '', 'e'];\n\n/**\n * @internal\n */\nexport const Ys: DnDDirectionY[] = ['s', '', 'n'];\n\n/**\n * @internal\n */\nexport const ROTATE_WIDTH = 1;\n\n/**\n * @internal\n */\nexport const ROTATE_HANDLE_TOP = ROTATE_GAP + RESIZE_HANDLE_MARGIN;\n\n/**\n * @internal\n */\nexport const CROP_HANDLE_SIZE = 22;\n\n/**\n * @internal\n */\nexport const CROP_HANDLE_WIDTH = 7;\n\n/**\n * @internal\n */\nexport const XS_CROP: DNDDirectionX[] = ['w', 'e'];\n\n/**\n * @internal\n */\nexport const YS_CROP: DnDDirectionY[] = ['s', 'n'];\n\n/**\n * @internal\n */\nexport const MIN_HEIGHT_WIDTH = 3 * RESIZE_HANDLE_SIZE + 2 * RESIZE_HANDLE_MARGIN;\n\n/**\n * @internal\n */\nexport const RESIZE_IMAGE = 'resizeImage';\n","/**\n * @internal\n * CSS class names for image editing elements\n */\nexport enum ImageEditElementClass {\n    /**\n     * CSS class name for resize handle\n     */\n    ResizeHandle = 'r_resizeH',\n\n    /**\n     * CSS class name for rotate handle\n     */\n    RotateHandle = 'r_rotateH',\n\n    /**\n     * CSS class name for the container of rotate handle\n     */\n    RotateCenter = 'r_rotateC',\n\n    /**\n     * CSS class name for crop overlay\n     */\n    CropOverlay = 'r_cropO',\n\n    /**\n     * CSS class name for container of crop handle\n     */\n    CropContainer = 'r_cropC',\n\n    /**\n     * CSS class name for crop handle\n     */\n    CropHandle = 'r_cropH',\n}\n","import { checkEditInfoState } from './checkEditInfoState';\nimport { generateDataURL } from './generateDataURL';\nimport { getGeneratedImageSize } from './generateImageSize';\nimport { updateImageEditInfo } from './updateImageEditInfo';\nimport type {\n    ContentModelImage,\n    IEditor,\n    ImageMetadataFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Apply changes from the edit info of an image, write result to the image\n * @param editor The editor object that contains the image\n * @param image The image to apply the change\n * @param editInfo Edit info that contains the changed information of the image\n * @param previousSrc Last src value of the image before the change was made\n * @param wasResizedOrCropped if the image was resized or cropped apply the new image dimensions\n * @param editingImage (optional) Image in editing state\n */\nexport function applyChange(\n    editor: IEditor,\n    image: HTMLImageElement,\n    contentModelImage: ContentModelImage,\n    editInfo: ImageMetadataFormat,\n    previousSrc: string,\n    wasResizedOrCropped: boolean,\n    editingImage?: HTMLImageElement\n) {\n    let newSrc = '';\n    const imageEditing = editingImage ?? image;\n    const initEditInfo = updateImageEditInfo(contentModelImage, imageEditing) ?? undefined;\n    const state = checkEditInfoState(editInfo, initEditInfo);\n\n    switch (state) {\n        case 'ResizeOnly':\n            // For resize only case, no need to generate a new image, just reuse the original one\n            newSrc = editInfo.src || '';\n            break;\n        case 'SameWithLast':\n            // For SameWithLast case, image may be resized but the content is still the same with last one,\n            // so no need to create a new image, but just reuse last one\n            newSrc = previousSrc;\n            break;\n        case 'FullyChanged':\n            // For other cases (cropped, rotated, ...) we need to create a new image to reflect the change\n            newSrc = generateDataURL(editingImage ?? image, editInfo);\n            break;\n    }\n\n    const srcChanged = newSrc != previousSrc;\n\n    if (srcChanged) {\n        // If the src is changed, fire an EditImage event so that plugins knows that a new image is used, and can\n        // replace the new src with some other string and it will be used and set to the image\n        const event = editor.triggerEvent('editImage', {\n            image: image,\n            originalSrc: editInfo.src || image.src,\n            previousSrc,\n            newSrc,\n        });\n        newSrc = event.newSrc;\n    }\n\n    if (newSrc == editInfo.src) {\n        // If newSrc is the same with original one, it means there is only size change, but no rotation, no cropping,\n        // so we don't need to keep edit info, we can delete it\n        updateImageEditInfo(contentModelImage, imageEditing, null);\n    } else {\n        // Otherwise, save the new edit info to the image so that next time when we edit the same image, we know\n        // the edit info\n        updateImageEditInfo(contentModelImage, imageEditing, editInfo);\n    }\n\n    // Write back the change to image, and set its new size\n    const generatedImageSize = getGeneratedImageSize(editInfo);\n    if (!generatedImageSize) {\n        return;\n    }\n\n    contentModelImage.src = newSrc;\n\n    if (wasResizedOrCropped || state == 'FullyChanged') {\n        contentModelImage.format.width = generatedImageSize.targetWidth + 'px';\n        contentModelImage.format.height = generatedImageSize.targetHeight + 'px';\n    }\n}\n","/**\n * @internal\n * Check if we can regenerate edited image from the source image.\n * An image can't regenerate result when there is CORS issue of the source content.\n * @param img The image element to test\n * @returns True when we can regenerate the edited image, otherwise false\n */\nexport function canRegenerateImage(img: HTMLImageElement | null): boolean {\n    if (!img) {\n        return false;\n    }\n\n    try {\n        const canvas = img.ownerDocument.createElement('canvas');\n        canvas.width = 10;\n        canvas.height = 10;\n        const context = canvas.getContext('2d');\n        if (context) {\n            context.drawImage(img, 0, 0);\n            context.getImageData(0, 0, 1, 1);\n            return true;\n        }\n\n        return false;\n    } catch {\n        return false;\n    }\n}\n","import type {\n    ImageCropMetadataFormat,\n    ImageMetadataFormat,\n    ImageResizeMetadataFormat,\n    ImageRotateMetadataFormat,\n} from 'roosterjs-content-model-types';\n\nconst RESIZE_KEYS: (keyof ImageResizeMetadataFormat)[] = ['widthPx', 'heightPx'];\nconst ROTATE_KEYS: (keyof ImageRotateMetadataFormat)[] = ['angleRad'];\nconst CROP_KEYS: (keyof ImageCropMetadataFormat)[] = [\n    'leftPercent',\n    'rightPercent',\n    'topPercent',\n    'bottomPercent',\n];\nconst ROTATE_CROP_KEYS: (keyof ImageRotateMetadataFormat | keyof ImageCropMetadataFormat)[] = [\n    ...ROTATE_KEYS,\n    ...CROP_KEYS,\n];\nconst ALL_KEYS = [...ROTATE_CROP_KEYS, ...RESIZE_KEYS];\n\n/**\n * @internal\n * State of an edit info object for image editing.\n * It is returned by checkEditInfoState() function\n */\nexport type ImageEditInfoState =\n    /**\n     * Invalid edit info. It means the given edit info object is either null,\n     * or not all its member are of correct type\n     */\n    | 'Invalid'\n\n    /**\n     * The edit info shows that it is only potentially edited by resizing action.\n     * Image is not rotated or cropped, or event not changed at all.\n     */\n    | 'ResizeOnly'\n\n    /**\n     * When compare with another edit info, this value can be returned when both current\n     * edit info and the other one are not been rotated, and they have same cropping\n     * percentages. So that they can share the same image src, only width and height\n     * need to be adjusted.\n     */\n    | 'SameWithLast'\n\n    /**\n     * When this value is returned, it means the image is edited by either cropping or\n     * rotation, or both. Image source can't be reused, need to generate a new image src\n     * data uri.\n     */\n    | 'FullyChanged';\n\n/**\n * @internal\n * Check the state of an edit info\n * @param editInfo The edit info to check\n * @param compareTo An optional edit info to compare to\n * @returns If the source edit info is not valid (wrong type, missing field, ...), returns Invalid.\n * If the source edit info doesn't contain any rotation or cropping, returns ResizeOnly\n * If the compare edit info exists, and both of them don't contain rotation, and the have same cropping values,\n * returns SameWithLast. Otherwise, returns FullyChanged\n */\nexport function checkEditInfoState(\n    editInfo: ImageMetadataFormat,\n    compareTo?: ImageMetadataFormat\n): ImageEditInfoState {\n    if (!editInfo || !editInfo.src || ALL_KEYS.some(key => !isNumber(editInfo[key]))) {\n        return 'Invalid';\n    } else if (\n        ROTATE_CROP_KEYS.every(key => areSameNumber(editInfo[key], 0)) &&\n        !editInfo.flippedHorizontal &&\n        !editInfo.flippedVertical &&\n        (!compareTo || (compareTo && editInfo.angleRad === compareTo.angleRad))\n    ) {\n        return 'ResizeOnly';\n    } else if (\n        compareTo &&\n        ROTATE_KEYS.every(key => areSameNumber(editInfo[key], 0)) &&\n        ROTATE_KEYS.every(key => areSameNumber(compareTo[key], 0)) &&\n        CROP_KEYS.every(key => areSameNumber(editInfo[key], compareTo[key])) &&\n        compareTo.flippedHorizontal === editInfo.flippedHorizontal &&\n        compareTo.flippedVertical === editInfo.flippedVertical\n    ) {\n        return 'SameWithLast';\n    } else {\n        return 'FullyChanged';\n    }\n}\n\nfunction isNumber(o: any): o is number {\n    return typeof o === 'number';\n}\n\nfunction areSameNumber(n1?: number, n2?: number) {\n    return n1 != undefined && n2 != undefined && Math.abs(n1 - n2) < 1e-3;\n}\n","import { createImageCropper } from '../Cropper/createImageCropper';\nimport { createImageResizer } from '../Resizer/createImageResizer';\nimport { createImageRotator } from '../Rotator/createImageRotator';\nimport { wrap } from 'roosterjs-content-model-dom';\n\nimport type {\n    IEditor,\n    ImageEditOperation,\n    ImageMetadataFormat,\n} from 'roosterjs-content-model-types';\nimport type { ImageEditOptions } from '../types/ImageEditOptions';\nimport type { ImageHtmlOptions } from '../types/ImageHtmlOptions';\n\nconst IMAGE_EDIT_SHADOW_ROOT = 'ImageEditShadowRoot';\n\n/**\n * @internal\n */\nexport interface WrapperElements {\n    wrapper: HTMLSpanElement;\n    shadowSpan: HTMLElement;\n    imageClone: HTMLImageElement;\n    resizers: HTMLDivElement[];\n    rotators: HTMLDivElement[];\n    croppers: HTMLDivElement[];\n}\n\n/**\n * @internal\n */\nexport function createImageWrapper(\n    editor: IEditor,\n    image: HTMLImageElement,\n    options: ImageEditOptions,\n    editInfo: ImageMetadataFormat,\n    htmlOptions: ImageHtmlOptions,\n    operation: ImageEditOperation[]\n): WrapperElements {\n    const imageClone = cloneImage(image, editInfo);\n    const doc = editor.getDocument();\n\n    let rotators: HTMLDivElement[] = [];\n    if (!options.disableRotate && operation.indexOf('rotate') > -1) {\n        rotators = createImageRotator(doc, htmlOptions);\n    }\n    let resizers: HTMLDivElement[] = [];\n    if (operation.indexOf('resize') > -1) {\n        resizers = createImageResizer(doc);\n    }\n\n    let croppers: HTMLDivElement[] = [];\n    if (operation.indexOf('crop') > -1) {\n        croppers = createImageCropper(doc);\n    }\n\n    const wrapper = createWrapper(\n        editor,\n        imageClone,\n        options,\n        editInfo,\n        resizers,\n        rotators,\n        croppers\n    );\n    const imageSpan = wrap(doc, image, 'span');\n    const shadowSpan = createShadowSpan(wrapper, imageSpan);\n    return { wrapper, shadowSpan, imageClone, resizers, rotators, croppers };\n}\n\nconst createShadowSpan = (wrapper: HTMLElement, imageSpan: HTMLSpanElement) => {\n    const shadowRoot = imageSpan.attachShadow({\n        mode: 'open',\n    });\n    imageSpan.id = IMAGE_EDIT_SHADOW_ROOT;\n    wrapper.style.verticalAlign = 'bottom';\n    shadowRoot.appendChild(wrapper);\n    return imageSpan;\n};\n\nconst createWrapper = (\n    editor: IEditor,\n    image: HTMLImageElement,\n    options: ImageEditOptions,\n    editInfo: ImageMetadataFormat,\n    resizers?: HTMLDivElement[],\n    rotators?: HTMLDivElement[],\n    cropper?: HTMLDivElement[]\n) => {\n    const doc = editor.getDocument();\n    const wrapper = doc.createElement('span');\n    const imageBox = doc.createElement('div');\n\n    imageBox.setAttribute(\n        `style`,\n        `position:relative;width:100%;height:100%;overflow:hidden;transform:scale(1);`\n    );\n    imageBox.appendChild(image);\n    wrapper.setAttribute(\n        'style',\n        `font-size: 24px; margin: 0px; transform: rotate(${editInfo.angleRad ?? 0}rad);`\n    );\n    wrapper.style.display = editor.getEnvironment().isSafari\n        ? '-webkit-inline-flex'\n        : 'inline-flex';\n\n    const border = createBorder(editor, options.borderColor);\n    wrapper.appendChild(imageBox);\n    wrapper.appendChild(border);\n    wrapper.style.userSelect = 'none';\n\n    if (resizers && resizers?.length > 0) {\n        resizers.forEach(resizer => {\n            wrapper.appendChild(resizer);\n        });\n    }\n    if (rotators && rotators.length > 0) {\n        rotators.forEach(r => {\n            wrapper.appendChild(r);\n        });\n    }\n    if (cropper && cropper.length > 0) {\n        cropper.forEach(c => {\n            wrapper.appendChild(c);\n        });\n    }\n\n    return wrapper;\n};\n\nconst createBorder = (editor: IEditor, borderColor?: string) => {\n    const doc = editor.getDocument();\n    const resizeBorder = doc.createElement('div');\n    resizeBorder.setAttribute(\n        `style`,\n        `position:absolute;left:0;right:0;top:0;bottom:0;border:solid 2px ${borderColor};pointer-events:none;`\n    );\n    return resizeBorder;\n};\n\nconst cloneImage = (image: HTMLImageElement, editInfo: ImageMetadataFormat) => {\n    const imageClone = image.cloneNode(true) as HTMLImageElement;\n    imageClone.style.removeProperty('transform');\n    if (editInfo.src) {\n        imageClone.src = editInfo.src;\n        imageClone.removeAttribute('id');\n        imageClone.style.removeProperty('max-width');\n        imageClone.style.removeProperty('max-height');\n        imageClone.style.width = editInfo.widthPx + 'px';\n        imageClone.style.height = editInfo.heightPx + 'px';\n    }\n    return imageClone;\n};\n","import type { ImageMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Double check if the changed size can satisfy current width of container.\n * When resize an image and preserve ratio, its size can be limited by the size of container.\n * So we need to check the actual size and calculate the size again\n * @param editInfo Edit info of the image\n * @param preserveRatio Whether w/h ratio need to be preserved\n * @param actualWidth Actual width of the image after resize\n * @param actualHeight Actual height of the image after resize\n */\nexport function doubleCheckResize(\n    editInfo: ImageMetadataFormat,\n    preserveRatio: boolean,\n    actualWidth: number,\n    actualHeight: number\n) {\n    let { widthPx, heightPx } = editInfo;\n    if (widthPx == undefined || heightPx == undefined) {\n        return;\n    }\n    const ratio = heightPx > 0 ? widthPx / heightPx : 0;\n\n    actualWidth = Math.floor(actualWidth);\n    actualHeight = Math.floor(actualHeight);\n    widthPx = Math.floor(widthPx);\n    heightPx = Math.floor(heightPx);\n\n    editInfo.widthPx = actualWidth;\n    editInfo.heightPx = actualHeight;\n\n    if (preserveRatio && ratio > 0 && (widthPx !== actualWidth || heightPx !== actualHeight)) {\n        if (actualWidth < widthPx) {\n            editInfo.heightPx = actualWidth / ratio;\n        } else {\n            editInfo.widthPx = actualHeight * ratio;\n        }\n    }\n}\n","import { queryContentModelBlocks } from 'roosterjs-content-model-api';\nimport type {\n    ReadonlyContentModelBlockGroup,\n    ReadonlyContentModelParagraph,\n} from 'roosterjs-content-model-types';\nimport type { ImageAndParagraph } from '../types/ImageAndParagraph';\n\n/**\n * @internal\n */\nexport const EDITING_MARKER = 'isEditing';\n\n/**\n * @internal\n */\nexport function findEditingImage(\n    group: ReadonlyContentModelBlockGroup,\n    imageId?: string\n): ImageAndParagraph | null {\n    let imageAndParagraph: ImageAndParagraph | null = null;\n    queryContentModelBlocks<ReadonlyContentModelParagraph>(\n        group,\n        'Paragraph',\n        (paragraph: ReadonlyContentModelParagraph): paragraph is ReadonlyContentModelParagraph => {\n            for (const segment of paragraph.segments) {\n                if (\n                    segment.segmentType == 'Image' &&\n                    ((imageId && segment.format.id == imageId) ||\n                        segment.format.imageState == EDITING_MARKER)\n                ) {\n                    imageAndParagraph = { image: segment, paragraph };\n                    return true;\n                }\n            }\n            return false;\n        },\n        true /*findFirstOnly*/\n    );\n\n    return imageAndParagraph;\n}\n","import { getGeneratedImageSize } from './generateImageSize';\nimport type { ImageMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Generate new dataURL from an image and edit info\n * @param image The image to generate data URL from. It is supposed to have original src loaded\n * @param editInfo Edit info of the image\n * @returns A BASE64 encoded string with image prefix that represents the content of the generated image.\n * If there are rotate/crop/resize info in the edit info, the generated image will also reflect the result.\n * It is possible to throw exception since the original image may not be able to read its content from\n * the code, so better check canRegenerateImage() of the image first.\n * @throws Exception when fail to generate dataURL from canvas\n */\nexport function generateDataURL(image: HTMLImageElement, editInfo: ImageMetadataFormat): string {\n    const generatedImageSize = getGeneratedImageSize(editInfo);\n    if (!generatedImageSize) {\n        return '';\n    }\n\n    const {\n        angleRad,\n        widthPx,\n        heightPx,\n        bottomPercent,\n        leftPercent,\n        rightPercent,\n        topPercent,\n        naturalWidth,\n        naturalHeight,\n    } = editInfo;\n    const angle = angleRad || 0;\n    const left = leftPercent || 0;\n    const right = rightPercent || 0;\n    const top = topPercent || 0;\n    const bottom = bottomPercent || 0;\n    const nHeight = naturalHeight || image.naturalHeight;\n    const nWidth = naturalWidth || image.naturalHeight;\n    const width = widthPx || image.clientWidth;\n    const height = heightPx || image.clientHeight;\n\n    const imageWidth = nWidth * (1 - left - right);\n    const imageHeight = nHeight * (1 - top - bottom);\n\n    // Adjust the canvas size and scaling for high display resolution\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    const canvas = document.createElement('canvas');\n    const { targetWidth, targetHeight } = generatedImageSize;\n    canvas.width = targetWidth * devicePixelRatio;\n    canvas.height = targetHeight * devicePixelRatio;\n\n    const context = canvas.getContext('2d');\n    if (context) {\n        context.scale(devicePixelRatio, devicePixelRatio);\n        context.translate(targetWidth / 2, targetHeight / 2);\n        context.rotate(angle);\n        context.scale(editInfo.flippedHorizontal ? -1 : 1, editInfo.flippedVertical ? -1 : 1);\n        context.drawImage(\n            image,\n            nWidth * left,\n            nHeight * top,\n            imageWidth,\n            imageHeight,\n            -width / 2,\n            -height / 2,\n            width,\n            height\n        );\n    }\n\n    return canvas.toDataURL('image/png', 1.0);\n}\n","import type { ImageMetadataFormat } from 'roosterjs-content-model-types';\nimport type { GeneratedImageSize } from '../types/GeneratedImageSize';\n\n/**\n * @internal\n * Calculate the target size of an image.\n * For image that is not rotated, target size is the same with resizing/cropping size.\n * For image that is rotated, target size is calculated from resizing/cropping size and its rotate angle\n * Say an image is resized to 100w*100h, cropped 25% on each side, then rotated 45deg, so that cropped size\n * will be (both height and width) 100*(1-0.25-0,25) = 50px, then final image size will be 50*sqrt(2) = 71px\n * @param editInfo The edit info to calculate size from\n * @param beforeCrop True to calculate the full size of original image before crop, false to calculate the size\n * after crop\n * @returns A GeneratedImageSize object which contains original, visible and target target width and height of the image\n */\nexport function getGeneratedImageSize(\n    editInfo: ImageMetadataFormat,\n    beforeCrop?: boolean\n): GeneratedImageSize | undefined {\n    const {\n        widthPx: width,\n        heightPx: height,\n        angleRad,\n        leftPercent: left,\n        rightPercent: right,\n        topPercent: top,\n        bottomPercent: bottom,\n    } = editInfo;\n\n    if (\n        height == undefined ||\n        width == undefined ||\n        left == undefined ||\n        right == undefined ||\n        top == undefined ||\n        bottom == undefined\n    ) {\n        return;\n    }\n\n    const angle = angleRad ?? 0;\n\n    // Original image size before crop and rotate\n    const originalWidth = width / (1 - left - right);\n    const originalHeight = height / (1 - top - bottom);\n\n    // Visible size\n    const visibleWidth = beforeCrop ? originalWidth : width;\n    const visibleHeight = beforeCrop ? originalHeight : height;\n\n    // Target size after crop and rotate\n    const targetWidth =\n        Math.abs(visibleWidth * Math.cos(angle)) + Math.abs(visibleHeight * Math.sin(angle));\n    const targetHeight =\n        Math.abs(visibleWidth * Math.sin(angle)) + Math.abs(visibleHeight * Math.cos(angle));\n\n    return {\n        targetWidth,\n        targetHeight,\n        originalWidth,\n        originalHeight,\n        visibleWidth,\n        visibleHeight,\n    };\n}\n","import { DragAndDropHelper } from '../../pluginUtils/DragAndDrop/DragAndDropHelper';\nimport { toArray } from 'roosterjs-content-model-dom';\nimport type { ImageEditElementClass } from '../types/ImageEditElementClass';\nimport type { ImageMetadataFormat } from 'roosterjs-content-model-types';\nimport type { ImageEditOptions } from '../types/ImageEditOptions';\nimport type { DragAndDropHandler } from '../../pluginUtils/DragAndDrop/DragAndDropHandler';\nimport type { DragAndDropContext, DNDDirectionX, DnDDirectionY } from '../types/DragAndDropContext';\n\n/**\n * @internal\n */\nexport function getDropAndDragHelpers(\n    wrapper: HTMLElement,\n    editInfo: ImageMetadataFormat,\n    options: ImageEditOptions,\n    elementClass: ImageEditElementClass,\n    helper: DragAndDropHandler<DragAndDropContext, any>,\n    updateWrapper: (context: DragAndDropContext, _handle: HTMLElement) => void,\n    zoomScale: number,\n    useTouch: boolean\n): DragAndDropHelper<DragAndDropContext, any>[] {\n    return getEditElements(wrapper, elementClass).map(\n        element =>\n            new DragAndDropHelper<DragAndDropContext, any>(\n                element,\n                {\n                    editInfo: editInfo,\n                    options: options,\n                    elementClass,\n                    x: element.dataset.x as DNDDirectionX,\n                    y: element.dataset.y as DnDDirectionY,\n                },\n                updateWrapper,\n                helper,\n                zoomScale,\n                useTouch\n            )\n    );\n}\n\nfunction getEditElements(wrapper: HTMLElement, elementClass: ImageEditElementClass): HTMLElement[] {\n    return toArray(wrapper.querySelectorAll('.' + elementClass)) as HTMLElement[];\n}\n","import { isASmallImage } from './imageEditUtils';\nimport type { IEditor, ImageMetadataFormat } from 'roosterjs-content-model-types';\nimport type { ImageEditOptions } from '../types/ImageEditOptions';\nimport type { ImageHtmlOptions } from '../types/ImageHtmlOptions';\n\n/**\n * Default background colors for rotate handle\n */\nconst LIGHT_MODE_BGCOLOR = 'white';\nconst DARK_MODE_BGCOLOR = '#333';\n\n/**\n * @internal\n */\nexport const getHTMLImageOptions = (\n    editor: IEditor,\n    options: ImageEditOptions,\n    editInfo: ImageMetadataFormat\n): ImageHtmlOptions => {\n    return {\n        borderColor:\n            options.borderColor || (editor.isDarkMode() ? DARK_MODE_BGCOLOR : LIGHT_MODE_BGCOLOR),\n        rotateHandleBackColor: editor.isDarkMode() ? DARK_MODE_BGCOLOR : LIGHT_MODE_BGCOLOR,\n        isSmallImage: isASmallImage(editInfo.widthPx ?? 0, editInfo.heightPx ?? 0),\n    };\n};\n","import { getSelectedSegmentsAndParagraphs } from 'roosterjs-content-model-dom';\nimport type { ReadonlyContentModelDocument } from 'roosterjs-content-model-types';\nimport type { ImageAndParagraph } from '../types/ImageAndParagraph';\n\n/**\n * @internal\n */\nexport function getSelectedImage(model: ReadonlyContentModelDocument): ImageAndParagraph | null {\n    const selections = getSelectedSegmentsAndParagraphs(model, false);\n\n    if (selections.length == 1 && selections[0][0].segmentType == 'Image' && selections[0][1]) {\n        return {\n            image: selections[0][0],\n            paragraph: selections[0][1],\n        };\n    } else {\n        return null;\n    }\n}\n","import { MIN_HEIGHT_WIDTH } from '../constants/constants';\n\n/**\n * @internal\n */\nexport function getPx(value: number): string {\n    return value + 'px';\n}\n\n/**\n * @internal\n */\nexport function isASmallImage(widthPx: number, heightPx: number): boolean {\n    return widthPx && heightPx && (widthPx < MIN_HEIGHT_WIDTH || heightPx < MIN_HEIGHT_WIDTH)\n        ? true\n        : false;\n}\n\n/**\n * @internal Calculate the rotated x and y distance for mouse moving\n * @param x Original x distance\n * @param y Original y distance\n * @param angle Rotated angle, in radian\n * @returns rotated x and y distances\n */\nexport function rotateCoordinate(x: number, y: number, angle: number): [number, number] {\n    if (x == 0 && y == 0) {\n        return [0, 0];\n    }\n    const hypotenuse = Math.sqrt(x * x + y * y);\n    angle = Math.atan2(y, x) - angle;\n    return [hypotenuse * Math.cos(angle), hypotenuse * Math.sin(angle)];\n}\n\n/**\n * @internal\n */\nexport function setFlipped(\n    element: HTMLElement | null,\n    flippedHorizontally?: boolean,\n    flippedVertically?: boolean\n) {\n    if (element) {\n        element.style.transform = `scale(${flippedHorizontally ? -1 : 1}, ${\n            flippedVertically ? -1 : 1\n        })`;\n    }\n}\n\n/**\n * @internal\n */\nexport function setWrapperSizeDimensions(\n    wrapper: HTMLElement,\n    image: HTMLImageElement,\n    width: number,\n    height: number\n) {\n    const hasBorder = image.style.borderStyle;\n    if (hasBorder) {\n        const borderWidth = image.style.borderWidth ? 2 * parseInt(image.style.borderWidth) : 2;\n        wrapper.style.width = getPx(width + borderWidth);\n        wrapper.style.height = getPx(height + borderWidth);\n        return;\n    }\n    wrapper.style.width = getPx(width);\n    wrapper.style.height = getPx(height);\n}\n\n/**\n * @internal\n */\nexport function setSize(\n    element: HTMLElement,\n    left: number | undefined,\n    top: number | undefined,\n    right: number | undefined,\n    bottom: number | undefined,\n    width: number | undefined,\n    height: number | undefined\n) {\n    element.style.left = left !== undefined ? getPx(left) : element.style.left;\n    element.style.top = top !== undefined ? getPx(top) : element.style.top;\n    element.style.right = right !== undefined ? getPx(right) : element.style.right;\n    element.style.bottom = bottom !== undefined ? getPx(bottom) : element.style.bottom;\n    element.style.width = width !== undefined ? getPx(width) : element.style.width;\n    element.style.height = height !== undefined ? getPx(height) : element.style.height;\n}\n\n/**\n * @internal\n * Check if the current image was resized by the user\n * @param image the current image\n * @returns if the user resized the image, returns true, otherwise, returns false\n */\nexport function checkIfImageWasResized(image: HTMLImageElement): boolean {\n    const { style } = image;\n    const isMaxWidthInitial =\n        style.maxWidth === '' || style.maxWidth === 'initial' || style.maxWidth === 'auto';\n    if (\n        isMaxWidthInitial &&\n        (isFixedNumberValue(style.height) || isFixedNumberValue(style.width))\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * @internal\n */\nexport function isRTL(image: HTMLImageElement): boolean {\n    return window.getComputedStyle(image).direction === 'rtl';\n}\n\nfunction isFixedNumberValue(value: string | number) {\n    const numberValue = typeof value === 'string' ? parseInt(value) : value;\n    return !isNaN(numberValue);\n}\n","import { mutateBlock } from 'roosterjs-content-model-dom';\nimport type { ImageAndParagraph } from '../types/ImageAndParagraph';\n\n/**\n * Selecting directly on the image will only capture the image segment.\n * However, if the selection is made while the image is within a wrapper, it will capture the span that encloses the image.\n * In the last case, the selection will be marked as <---SelectionMarker---><---Image---><---SelectionMarker--->.\n * To fix this behavior the extra selection markers are removed.\n * @internal\n */\nexport function normalizeImageSelection(imageAndParagraph: ImageAndParagraph) {\n    const paragraph = imageAndParagraph.paragraph;\n    const index = paragraph.segments.indexOf(imageAndParagraph.image);\n    if (index > 0) {\n        const markerBefore = paragraph.segments[index - 1];\n        const markerAfter = paragraph.segments[index + 1];\n        if (\n            markerBefore &&\n            markerAfter &&\n            markerAfter.segmentType == 'SelectionMarker' &&\n            markerBefore.segmentType == 'SelectionMarker' &&\n            markerAfter.isSelected &&\n            markerBefore.isSelected\n        ) {\n            const mutatedParagraph = mutateBlock(paragraph);\n            mutatedParagraph.segments.splice(index - 1, 1);\n            mutatedParagraph.segments.splice(index, 1);\n        }\n        return imageAndParagraph;\n    }\n}\n","const PI = Math.PI;\nconst DIRECTIONS = 8;\nconst DirectionRad = (PI * 2) / DIRECTIONS;\nconst DirectionOrder = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n\nfunction handleRadIndexCalculator(angleRad: number): number {\n    const idx = Math.round(angleRad / DirectionRad) % DIRECTIONS;\n    return idx < 0 ? idx + DIRECTIONS : idx;\n}\n\nfunction rotateHandles(angleRad: number, y: string = '', x: string = ''): string {\n    const radIndex = handleRadIndexCalculator(angleRad);\n    const originalDirection = y + x;\n    const originalIndex = DirectionOrder.indexOf(originalDirection);\n    const rotatedIndex = originalIndex >= 0 && originalIndex + radIndex;\n    return rotatedIndex ? DirectionOrder[rotatedIndex % DIRECTIONS] : '';\n}\n/**\n * @internal\n * Rotate the resizer and cropper handles according to the image position.\n * @param handles The resizer handles.\n * @param angleRad The angle that the image was rotated.\n */\nexport function updateHandleCursor(handles: HTMLElement[], angleRad: number) {\n    handles.forEach(handle => {\n        const { y, x } = handle.dataset;\n        handle.style.cursor = `${rotateHandles(angleRad, y, x)}-resize`;\n    });\n}\n","import { getSelectedImage } from './getSelectedImage';\nimport { mutateSegment, updateImageMetadata } from 'roosterjs-content-model-dom';\n\nimport type {\n    ContentModelImage,\n    IEditor,\n    ImageMetadataFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function updateImageEditInfo(\n    contentModelImage: ContentModelImage,\n    image: HTMLImageElement,\n    newImageMetadata?: ImageMetadataFormat | null | undefined\n): ImageMetadataFormat {\n    const contentModelMetadata = updateImageMetadata(\n        contentModelImage,\n        newImageMetadata !== undefined\n            ? format => {\n                  format = newImageMetadata;\n                  return format;\n              }\n            : undefined\n    );\n    return { ...getInitialEditInfo(image), ...contentModelMetadata };\n}\n\nfunction getInitialEditInfo(image: HTMLImageElement): ImageMetadataFormat {\n    return {\n        src: image.getAttribute('src') || '',\n        widthPx: image.clientWidth,\n        heightPx: image.clientHeight,\n        naturalWidth: image.naturalWidth,\n        naturalHeight: image.naturalHeight,\n        leftPercent: 0,\n        rightPercent: 0,\n        topPercent: 0,\n        bottomPercent: 0,\n        angleRad: 0,\n    };\n}\n\n/**\n * @internal\n * @returns\n */\nexport function getSelectedImageMetadata(\n    editor: IEditor,\n    image: HTMLImageElement\n): ImageMetadataFormat {\n    let imageMetadata: ImageMetadataFormat = getInitialEditInfo(image);\n    editor.formatContentModel(model => {\n        const selectedImage = getSelectedImage(model);\n        if (selectedImage?.image) {\n            mutateSegment(selectedImage.paragraph, selectedImage?.image, modelImage => {\n                imageMetadata = updateImageEditInfo(modelImage, image);\n            });\n\n            return true;\n        }\n        return false;\n    });\n\n    return imageMetadata;\n}\n","import { doubleCheckResize } from './doubleCheckResize';\nimport { getGeneratedImageSize } from './generateImageSize';\nimport { ImageEditElementClass } from '../types/ImageEditElementClass';\nimport { isElementOfType, isNodeOfType, toArray } from 'roosterjs-content-model-dom';\nimport { updateHandleCursor } from './updateHandleCursor';\nimport { updateSideHandlesVisibility } from '../Resizer/updateSideHandlesVisibility';\nimport type { ImageEditOptions } from '../types/ImageEditOptions';\nimport type { ImageMetadataFormat } from 'roosterjs-content-model-types';\nimport {\n    getPx,\n    isASmallImage,\n    isRTL,\n    setFlipped,\n    setSize,\n    setWrapperSizeDimensions,\n} from './imageEditUtils';\n\n/**\n * @internal\n */\nexport function updateWrapper(\n    editInfo: ImageMetadataFormat,\n    options: ImageEditOptions,\n    image: HTMLImageElement,\n    clonedImage: HTMLImageElement,\n    wrapper: HTMLSpanElement,\n    resizers?: HTMLDivElement[],\n    croppers?: HTMLDivElement[]\n) {\n    const {\n        angleRad,\n        bottomPercent,\n        leftPercent,\n        rightPercent,\n        topPercent,\n        flippedHorizontal,\n        flippedVertical,\n    } = editInfo;\n\n    const generateImageSize = getGeneratedImageSize(editInfo, croppers && croppers?.length > 0);\n    if (!generateImageSize) {\n        return;\n    }\n    const {\n        targetWidth,\n        targetHeight,\n        originalWidth,\n        originalHeight,\n        visibleWidth,\n        visibleHeight,\n    } = generateImageSize;\n\n    const marginHorizontal = (targetWidth - visibleWidth) / 2;\n    const marginVertical = (targetHeight - visibleHeight) / 2;\n    const cropLeftPx = originalWidth * (leftPercent || 0);\n    const cropRightPx = originalWidth * (rightPercent || 0);\n    const cropTopPx = originalHeight * (topPercent || 0);\n    const cropBottomPx = originalHeight * (bottomPercent || 0);\n\n    // Update size and margin of the wrapper\n    wrapper.style.margin = `${marginVertical}px ${marginHorizontal}px`;\n    wrapper.style.transform = `rotate(${angleRad}rad)`;\n    setWrapperSizeDimensions(wrapper, image, visibleWidth, visibleHeight);\n\n    // Update the text-alignment to avoid the image to overflow if the parent element have align center or right\n    // or if the direction is Right To Left\n    if (isRTL(clonedImage)) {\n        wrapper.style.textAlign = 'right';\n        if (!croppers) {\n            clonedImage.style.left = getPx(cropLeftPx);\n            clonedImage.style.right = getPx(-cropRightPx);\n        }\n    } else {\n        wrapper.style.textAlign = 'left';\n    }\n\n    // Update size of the image\n    clonedImage.style.width = getPx(originalWidth);\n    clonedImage.style.height = getPx(originalHeight);\n    clonedImage.style.verticalAlign = 'bottom';\n    clonedImage.style.position = 'absolute';\n\n    //Update flip direction\n    setFlipped(clonedImage.parentElement, flippedHorizontal, flippedVertical);\n    const smallImage = isASmallImage(visibleWidth, visibleWidth);\n\n    if (!croppers) {\n        // For rotate/resize, set the margin of the image so that cropped part won't be visible\n        clonedImage.style.margin = `${-cropTopPx}px 0 0 ${-cropLeftPx}px`;\n    }\n\n    if (croppers && croppers.length > 0) {\n        const cropContainer = croppers[0];\n        const cropOverlays = croppers.filter(\n            cropper => cropper.className === ImageEditElementClass.CropOverlay\n        );\n        const cropHandles = toArray<HTMLElement>(\n            cropContainer.querySelectorAll(`.${ImageEditElementClass.CropHandle}`)\n        );\n\n        setSize(\n            cropContainer,\n            cropLeftPx,\n            cropTopPx,\n            cropRightPx,\n            cropBottomPx,\n            undefined,\n            undefined\n        );\n        setSize(cropOverlays[0], 0, 0, cropRightPx, undefined, undefined, cropTopPx);\n        setSize(cropOverlays[1], undefined, 0, 0, cropBottomPx, cropRightPx, undefined);\n        setSize(cropOverlays[2], cropLeftPx, undefined, 0, 0, undefined, cropBottomPx);\n        setSize(cropOverlays[3], 0, cropTopPx, undefined, 0, cropLeftPx, undefined);\n\n        if (angleRad !== undefined) {\n            updateHandleCursor(cropHandles, angleRad);\n        }\n    }\n\n    if (resizers) {\n        const clientWidth = wrapper.clientWidth;\n        const clientHeight = wrapper.clientHeight;\n\n        doubleCheckResize(editInfo, options.preserveRatio || false, clientWidth, clientHeight);\n\n        const resizeHandles = resizers\n            .map(resizer => {\n                const resizeHandle = resizer.firstElementChild;\n                if (\n                    isNodeOfType(resizeHandle, 'ELEMENT_NODE') &&\n                    isElementOfType(resizeHandle, 'div')\n                ) {\n                    return resizeHandle;\n                }\n            })\n            .filter(handle => !!handle) as HTMLDivElement[];\n\n        if (angleRad !== undefined) {\n            updateHandleCursor(resizeHandles, angleRad);\n        }\n\n        updateSideHandlesVisibility(resizeHandles, smallImage);\n    }\n}\n","export { TableEditPlugin } from './tableEdit/TableEditPlugin';\nexport { OnTableEditorCreatedCallback } from './tableEdit/OnTableEditorCreatedCallback';\nexport { TableEditFeatureName } from './tableEdit/editors/features/TableEditFeatureName';\nexport { TableWithRoot } from './tableEdit/TableWithRoot';\nexport { PastePlugin } from './paste/PastePlugin';\nexport { DefaultSanitizers } from './paste/DefaultSanitizers';\nexport { EditPlugin, EditOptions } from './edit/EditPlugin';\nexport { AutoFormatPlugin } from './autoFormat/AutoFormatPlugin';\nexport { AutoFormatOptions } from './autoFormat/interface/AutoFormatOptions';\n\nexport {\n    ShortcutBold,\n    ShortcutItalic,\n    ShortcutUnderline,\n    ShortcutClearFormat,\n    ShortcutUndo,\n    ShortcutUndo2,\n    ShortcutRedo,\n    ShortcutRedoAlt,\n    ShortcutRedoMacOS,\n    ShortcutBullet,\n    ShortcutNumbering,\n    ShortcutIncreaseFont,\n    ShortcutDecreaseFont,\n    ShortcutIndentList,\n    ShortcutOutdentList,\n} from './shortcut/shortcuts';\nexport { ShortcutPlugin } from './shortcut/ShortcutPlugin';\nexport { ShortcutKeyDefinition, ShortcutCommand } from './shortcut/ShortcutCommand';\nexport { ContextMenuPluginBase, ContextMenuOptions } from './contextMenuBase/ContextMenuPluginBase';\nexport { WatermarkPlugin } from './watermark/WatermarkPlugin';\nexport { WatermarkFormat } from './watermark/WatermarkFormat';\nexport { isModelEmptyFast } from './watermark/isModelEmptyFast';\nexport { MarkdownPlugin, MarkdownOptions } from './markdown/MarkdownPlugin';\nexport { HyperlinkPlugin } from './hyperlink/HyperlinkPlugin';\nexport { HyperlinkToolTip } from './hyperlink/HyperlinkToolTip';\nexport { PickerPlugin } from './picker/PickerPlugin';\nexport { PickerHelper } from './picker/PickerHelper';\nexport { PickerSelectionChangMode, PickerDirection, PickerHandler } from './picker/PickerHandler';\nexport { CustomReplacePlugin, CustomReplace } from './customReplace/CustomReplacePlugin';\nexport { ImageEditPlugin } from './imageEdit/ImageEditPlugin';\nexport { ImageEditOptions } from './imageEdit/types/ImageEditOptions';\nexport { HiddenPropertyPlugin } from './hiddenProperty/HiddenPropertyPlugin';\nexport { HiddenPropertyOptions } from './hiddenProperty/HiddenPropertyOptions';\n","import { setFormat } from './utils/setFormat';\nimport type {\n    ContentChangedEvent,\n    ContentModelCodeFormat,\n    EditorInputEvent,\n    EditorPlugin,\n    IEditor,\n    KeyDownEvent,\n    PluginEvent,\n} from 'roosterjs-content-model-types';\n\n/**\n *\n * Options for Markdown plugin\n *  - strikethrough: If true text between ~ will receive strikethrough format.\n *  - bold: If true text between * will receive bold format.\n *  - italic: If true text between _ will receive italic format.\n *  - codeFormat: If provided, text between ` will receive code format. If equal to {}, it will set the default code format.\n */\nexport interface MarkdownOptions {\n    strikethrough?: boolean;\n    bold?: boolean;\n    italic?: boolean;\n    codeFormat?: ContentModelCodeFormat;\n}\n\n/**\n * @internal\n */\nconst DefaultOptions: Partial<MarkdownOptions> = {\n    strikethrough: false,\n    bold: false,\n    italic: false,\n};\n\n/**\n * Markdown plugin handles markdown formatting, such as transforming * characters into bold text.\n */\nexport class MarkdownPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private shouldBold = false;\n    private shouldItalic = false;\n    private shouldStrikethrough = false;\n    private shouldCode = false;\n    private lastKeyTyped: string | null = null;\n\n    /**\n     * @param options An optional parameter that takes in an object of type MarkdownOptions, which includes the following properties:\n     *  - strikethrough: If true text between ~ will receive strikethrough format. Defaults to false.\n     *  - bold: If true text between * will receive bold format. Defaults to false.\n     *  - italic: If true text between _ will receive italic format. Defaults to false.\n     *  - codeFormat: If provided, text between ` will receive code format. Defaults to undefined.\n     */\n    constructor(private options: MarkdownOptions = DefaultOptions) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'Markdown';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n        this.disableAllFeatures();\n        this.lastKeyTyped = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case 'input':\n                    this.handleEditorInputEvent(this.editor, event);\n                    break;\n                case 'keyDown':\n                    this.handleBackspaceEvent(event);\n                    this.handleKeyDownEvent(event);\n                    break;\n                case 'contentChanged':\n                    this.handleContentChangedEvent(event);\n                    break;\n            }\n        }\n    }\n\n    private handleEditorInputEvent(editor: IEditor, event: EditorInputEvent) {\n        const rawEvent = event.rawEvent;\n        const selection = editor.getDOMSelection();\n        if (\n            selection &&\n            selection.type == 'range' &&\n            selection.range.collapsed &&\n            rawEvent.inputType == 'insertText'\n        ) {\n            switch (rawEvent.data) {\n                case '*':\n                    if (this.options.bold) {\n                        if (this.shouldBold) {\n                            setFormat(editor, '*', { fontWeight: 'bold' });\n                            this.shouldBold = false;\n                        } else {\n                            this.shouldBold = true;\n                        }\n                    }\n\n                    break;\n                case '~':\n                    if (this.options.strikethrough) {\n                        if (this.shouldStrikethrough) {\n                            setFormat(editor, '~', { strikethrough: true });\n                            this.shouldStrikethrough = false;\n                        } else {\n                            this.shouldStrikethrough = true;\n                        }\n                    }\n                    break;\n                case '_':\n                    if (this.options.italic) {\n                        if (this.shouldItalic) {\n                            setFormat(editor, '_', { italic: true });\n                            this.shouldItalic = false;\n                        } else {\n                            this.shouldItalic = true;\n                        }\n                    }\n                    break;\n                case '`':\n                    if (this.options.codeFormat) {\n                        if (this.shouldCode) {\n                            setFormat(editor, '`', {} /* format */, this.options.codeFormat);\n                            this.shouldCode = false;\n                        } else {\n                            this.shouldCode = true;\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n\n    private handleKeyDownEvent(event: KeyDownEvent) {\n        const rawEvent = event.rawEvent;\n        if (!event.handledByEditFeature && !rawEvent.defaultPrevented) {\n            switch (rawEvent.key) {\n                case 'Enter':\n                    this.disableAllFeatures();\n                    this.lastKeyTyped = null;\n                    break;\n                case ' ':\n                    if (this.lastKeyTyped === '*' && this.shouldBold) {\n                        this.shouldBold = false;\n                    } else if (this.lastKeyTyped === '~' && this.shouldStrikethrough) {\n                        this.shouldStrikethrough = false;\n                    } else if (this.lastKeyTyped === '_' && this.shouldItalic) {\n                        this.shouldItalic = false;\n                    } else if (this.lastKeyTyped === '`' && this.shouldCode) {\n                        this.shouldCode = false;\n                    }\n                    this.lastKeyTyped = null;\n                    break;\n                default:\n                    this.lastKeyTyped = rawEvent.key;\n                    break;\n            }\n        }\n    }\n\n    private handleBackspaceEvent(event: KeyDownEvent) {\n        if (!event.handledByEditFeature && event.rawEvent.key === 'Backspace') {\n            if (this.lastKeyTyped === '*' && this.shouldBold) {\n                this.shouldBold = false;\n            } else if (this.lastKeyTyped === '~' && this.shouldStrikethrough) {\n                this.shouldStrikethrough = false;\n            } else if (this.lastKeyTyped === '_' && this.shouldItalic) {\n                this.shouldItalic = false;\n            } else if (this.lastKeyTyped === '`' && this.shouldCode) {\n                this.shouldCode = false;\n            }\n            this.lastKeyTyped = null;\n        }\n    }\n\n    private handleContentChangedEvent(event: ContentChangedEvent) {\n        if (event.source == 'Format') {\n            this.disableAllFeatures();\n        }\n    }\n\n    private disableAllFeatures() {\n        this.shouldBold = false;\n        this.shouldItalic = false;\n        this.shouldStrikethrough = false;\n        this.shouldCode = false;\n    }\n}\n","import {\n    formatTextSegmentBeforeSelectionMarker,\n    splitTextSegment,\n} from 'roosterjs-content-model-api';\nimport type {\n    ContentModelCodeFormat,\n    ContentModelSegmentFormat,\n    IEditor,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setFormat(\n    editor: IEditor,\n    character: string,\n    format: ContentModelSegmentFormat,\n    codeFormat?: ContentModelCodeFormat\n) {\n    formatTextSegmentBeforeSelectionMarker(\n        editor,\n        (_model, previousSegment, paragraph, markerFormat, context) => {\n            if (previousSegment.text[previousSegment.text.length - 1] == character) {\n                const textSegment = previousSegment.text;\n                const textBeforeMarker = textSegment.slice(0, -1);\n                context.newPendingFormat = {\n                    ...markerFormat,\n                    strikethrough: !!markerFormat.strikethrough,\n                    italic: !!markerFormat.italic,\n                    fontWeight: markerFormat?.fontWeight ? 'bold' : undefined,\n                };\n                if (textBeforeMarker.indexOf(character) > -1) {\n                    const lastCharIndex = textSegment.length;\n                    const firstCharIndex = textSegment\n                        .substring(0, lastCharIndex - 1)\n                        .lastIndexOf(character);\n\n                    if (\n                        hasSpaceBeforeFirstCharacter(textSegment, firstCharIndex) &&\n                        lastCharIndex - firstCharIndex > 2\n                    ) {\n                        const formattedText = splitTextSegment(\n                            previousSegment,\n                            paragraph,\n                            firstCharIndex,\n                            lastCharIndex\n                        );\n\n                        formattedText.text = formattedText.text.replace(character, '').slice(0, -1);\n                        formattedText.format = {\n                            ...formattedText.format,\n                            ...format,\n                        };\n                        if (codeFormat) {\n                            formattedText.code = {\n                                format: codeFormat,\n                            };\n                        }\n\n                        context.canUndoByBackspace = true;\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    );\n}\n\n/**\n * The markdown should not be trigger inside a word, then check if exist a space before the trigger character\n * Should trigger markdown example: _one two_\n * Should not trigger markdown example: one_two_\n */\nfunction hasSpaceBeforeFirstCharacter(text: string, index: number) {\n    return !text[index - 1] || text[index - 1].trim().length == 0;\n}\n","import type { ValueSanitizer } from 'roosterjs-content-model-types';\n\n/**\n * Default style sanitizers for PastePlugin.\n */\nexport const DefaultSanitizers: Record<string, ValueSanitizer> = {\n    width: divParagraphSanitizer,\n    height: divParagraphSanitizer,\n    'inline-size': divParagraphSanitizer,\n    'block-size': divParagraphSanitizer,\n};\n\n/**\n * @internal\n * exported only for unit test\n */\nexport function divParagraphSanitizer(value: string, tagName: string): string | null {\n    const tag = tagName.toLowerCase();\n    if (tag == 'div' || tag == 'p') {\n        return null;\n    }\n    return value;\n}\n","import { addParser } from '../utils/addParser';\nimport { isNodeOfType, moveChildNodes } from 'roosterjs-content-model-dom';\nimport { setProcessor } from '../utils/setProcessor';\nimport type {\n    BeforePasteEvent,\n    ClipboardData,\n    DOMCreator,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\nconst TABLE_SELECTOR = 'table';\nconst DEFAULT_BORDER_STYLE = 'solid 1px #d4d4d4';\n\n/**\n * @internal\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\n * @param event The BeforePaste event\n * @param domCreator The DOM creator\n * @param allowExcelNoBorderTable Allow table copied from Excel without border\n * @param isNativeEvent Whether the event is native event\n */\nexport function processPastedContentFromExcel(\n    event: BeforePasteEvent,\n    domCreator: DOMCreator,\n    allowExcelNoBorderTable: boolean,\n    isNativeEvent: boolean\n) {\n    const { fragment, htmlBefore, htmlAfter, clipboardData } = event;\n\n    // For non native event we already validated that the content contains a table\n    if (isNativeEvent) {\n        validateExcelFragment(fragment, domCreator, htmlBefore, clipboardData, htmlAfter);\n    }\n\n    // For Excel Online\n    const firstChild = fragment.firstChild;\n    if (\n        isNodeOfType(firstChild, 'ELEMENT_NODE') &&\n        firstChild.tagName == 'div' &&\n        firstChild.firstChild\n    ) {\n        const tableFound = Array.from(firstChild.childNodes).every((child: Node) => {\n            // Tables pasted from Excel Online should be of the format: 0 to N META tags and 1 TABLE tag\n            const tagName = isNodeOfType(child, 'ELEMENT_NODE') && child.tagName;\n\n            return tagName == 'META'\n                ? true\n                : tagName == 'TABLE'\n                ? child == firstChild.lastChild\n                : false;\n        });\n\n        // Extract Table from Div\n        if (tableFound && firstChild.lastChild) {\n            event.fragment.replaceChildren(firstChild.lastChild);\n        }\n    }\n\n    setupExcelTableHandlers(\n        event,\n        allowExcelNoBorderTable,\n        isNativeEvent /* handleForNativeEvent */\n    );\n}\n\n/**\n * @internal\n * Exported only for unit test\n */\nexport function validateExcelFragment(\n    fragment: DocumentFragment,\n    domCreator: DOMCreator,\n    htmlBefore: string,\n    clipboardData: ClipboardData,\n    htmlAfter: string\n) {\n    // Clipboard content of Excel may contain the <StartFragment> and EndFragment comment tags inside the table\n    //\n    // @example\n    // <table>\n    // <!--StartFragment-->\n    // <tr>...</tr>\n    // <!--EndFragment-->\n    // </table>\n    //\n    // This causes that the fragment is not properly created and the table is not extracted.\n    // The content that is before the StartFragment is htmlBefore and the content that is after the EndFragment is htmlAfter.\n    // So attempt to create a new document fragment with the content of htmlBefore + clipboardData.html + htmlAfter\n    // If a table is found, replace the fragment with the new fragment\n    const result =\n        !fragment.querySelector(TABLE_SELECTOR) &&\n        domCreator.htmlToDOM(htmlBefore + clipboardData.html + htmlAfter);\n    if (result && result.querySelector(TABLE_SELECTOR)) {\n        moveChildNodes(fragment, result?.body);\n    } else {\n        // If the table is still not found, try to extract the table from the clipboard data using Regex\n        const html = clipboardData.html ? excelHandler(clipboardData.html, htmlBefore) : undefined;\n\n        if (html && clipboardData.html != html) {\n            const doc = domCreator.htmlToDOM(html);\n            moveChildNodes(fragment, doc?.body);\n        }\n    }\n}\n\n/**\n * @internal Export for test only\n * @param html Source html\n */\nexport function excelHandler(html: string, htmlBefore: string): string {\n    try {\n        if (html.match(LAST_TD_END_REGEX)) {\n            const trMatch = htmlBefore.match(LAST_TR_REGEX);\n            const tr = trMatch ? trMatch[0] : '<TR>';\n            html = tr + html + '</TR>';\n        }\n        if (html.match(LAST_TR_END_REGEX)) {\n            const tableMatch = htmlBefore.match(LAST_TABLE_REGEX);\n            const table = tableMatch ? tableMatch[0] : '<TABLE>';\n            html = table + html + '</TABLE>';\n        }\n    } finally {\n        return html;\n    }\n}\n\n/**\n * @internal\n * Exported only for unit test\n */\nexport function setupExcelTableHandlers(\n    event: BeforePasteEvent,\n    allowExcelNoBorderTable: boolean | undefined,\n    isNativeEvent: boolean\n) {\n    addParser(event.domToModelOption, 'tableCell', (format, element) => {\n        if (\n            !allowExcelNoBorderTable &&\n            (element.style.borderStyle === 'none' ||\n                (!isNativeEvent && element.style.borderStyle == ''))\n        ) {\n            format.borderBottom = DEFAULT_BORDER_STYLE;\n            format.borderLeft = DEFAULT_BORDER_STYLE;\n            format.borderRight = DEFAULT_BORDER_STYLE;\n            format.borderTop = DEFAULT_BORDER_STYLE;\n        }\n    });\n\n    setProcessor(event.domToModelOption, 'child', childProcessor);\n}\n\n/**\n * @internal\n * Exported only for unit test\n */\nexport const childProcessor: ElementProcessor<ParentNode> = (group, element, context) => {\n    const segmentFormat = { ...context.segmentFormat };\n    if (\n        group.blockGroupType === 'TableCell' &&\n        group.format.textColor &&\n        !context.segmentFormat.textColor\n    ) {\n        context.segmentFormat.textColor = group.format.textColor;\n    }\n\n    context.defaultElementProcessors.child(group, element, context);\n\n    if (group.blockGroupType === 'TableCell' && group.format.textColor) {\n        context.segmentFormat = segmentFormat;\n        delete group.format.textColor;\n    }\n};\n","import { addParser } from './utils/addParser';\nimport { BorderKeys, getObjectKeys } from 'roosterjs-content-model-dom';\nimport { chainSanitizerCallback } from './utils/chainSanitizerCallback';\nimport { DefaultSanitizers } from './DefaultSanitizers';\nimport { deprecatedBorderColorParser } from './parsers/deprecatedColorParser';\nimport { getPasteSource } from './pasteSourceValidations/getPasteSource';\nimport { parseLink } from './parsers/linkParser';\nimport { pasteButtonProcessor } from './processors/pasteButtonProcessor';\nimport { PastePropertyNames } from './pasteSourceValidations/constants';\nimport { processPastedContentFromExcel } from './Excel/processPastedContentFromExcel';\nimport { processPastedContentFromOneNote } from './oneNote/processPastedContentFromOneNote';\nimport { processPastedContentFromPowerPoint } from './PowerPoint/processPastedContentFromPowerPoint';\nimport { processPastedContentFromWordDesktop } from './WordDesktop/processPastedContentFromWordDesktop';\nimport { processPastedContentWacComponents } from './WacComponents/processPastedContentWacComponents';\nimport { setProcessor } from './utils/setProcessor';\nimport type {\n    BeforePasteEvent,\n    BorderFormat,\n    ContentModelBlockFormat,\n    ContentModelTableCellFormat,\n    DomToModelOptionForSanitizing,\n    EditorPlugin,\n    FormatParser,\n    IEditor,\n    PluginEvent,\n} from 'roosterjs-content-model-types';\n\n/**\n * Paste plugin, handles BeforePaste event and reformat some special content, including:\n * 1. Content copied from Word\n * 2. Content copied from Excel\n * 3. Content copied from Word Online or OneNote Online\n * 4. Content copied from Power Point\n */\nexport class PastePlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n\n    /**\n     * Construct a new instance of Paste class\n     * @param unknownTagReplacement Replace solution of unknown tags, default behavior is to replace with SPAN\n     * @param allowExcelNoBorderTable Allow table copied from Excel without border\n     */\n    constructor(\n        private allowExcelNoBorderTable?: boolean,\n        private domToModelForSanitizing: Pick<\n            DomToModelOptionForSanitizing,\n            | 'additionalAllowedTags'\n            | 'additionalDisallowedTags'\n            | 'styleSanitizers'\n            | 'attributeSanitizers'\n        > = {\n            styleSanitizers: DefaultSanitizers,\n            additionalAllowedTags: [],\n            additionalDisallowedTags: [],\n            attributeSanitizers: {},\n        }\n    ) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'Paste';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor || event.eventType != 'beforePaste') {\n            return;\n        }\n\n        if (!event.domToModelOption) {\n            return;\n        }\n\n        const pasteSource = getPasteSource(\n            event,\n            false /* shouldConvertSingleImage */,\n            this.editor.getEnvironment()\n        );\n        const pasteType = event.pasteType;\n\n        switch (pasteSource) {\n            case 'wordDesktop':\n                processPastedContentFromWordDesktop(event);\n                break;\n            case 'wacComponents':\n                processPastedContentWacComponents(event);\n                break;\n            case 'excelOnline':\n            case 'excelDesktop':\n            case 'excelNonNativeEvent':\n                if (pasteType === 'normal' || pasteType === 'mergeFormat') {\n                    // Handle HTML copied from Excel\n                    processPastedContentFromExcel(\n                        event,\n                        this.editor.getDOMCreator(),\n                        !!this.allowExcelNoBorderTable,\n                        pasteSource != 'excelNonNativeEvent' /* isNativeEvent */\n                    );\n                }\n                break;\n            case 'googleSheets':\n                event.domToModelOption.additionalAllowedTags.push(\n                    PastePropertyNames.GOOGLE_SHEET_NODE_NAME as Lowercase<string>\n                );\n                break;\n            case 'powerPointDesktop':\n                processPastedContentFromPowerPoint(event, this.editor.getDOMCreator());\n                break;\n\n            case 'oneNoteDesktop':\n                processPastedContentFromOneNote(event);\n                break;\n        }\n\n        addParser(event.domToModelOption, 'link', parseLink);\n        addParser(event.domToModelOption, 'tableCell', deprecatedBorderColorParser);\n        addParser(event.domToModelOption, 'tableCell', tableBorderParser);\n        addParser(event.domToModelOption, 'table', deprecatedBorderColorParser);\n        setProcessor(event.domToModelOption, 'button', pasteButtonProcessor);\n\n        if (pasteType === 'mergeFormat') {\n            addParser(event.domToModelOption, 'block', blockElementParser);\n            addParser(event.domToModelOption, 'listLevel', blockElementParser);\n        }\n\n        this.setEventSanitizers(event);\n    }\n\n    private setEventSanitizers(event: BeforePasteEvent) {\n        if (this.domToModelForSanitizing) {\n            const {\n                styleSanitizers,\n                attributeSanitizers,\n                additionalAllowedTags,\n                additionalDisallowedTags,\n            } = this.domToModelForSanitizing;\n            getObjectKeys(styleSanitizers).forEach(key =>\n                chainSanitizerCallback(\n                    event.domToModelOption.styleSanitizers,\n                    key,\n                    styleSanitizers[key]\n                )\n            );\n            getObjectKeys(attributeSanitizers).forEach(key =>\n                chainSanitizerCallback(\n                    event.domToModelOption.attributeSanitizers,\n                    key,\n                    attributeSanitizers[key]\n                )\n            );\n            event.domToModelOption.additionalAllowedTags.push(...additionalAllowedTags);\n            event.domToModelOption.additionalDisallowedTags.push(...additionalDisallowedTags);\n        }\n    }\n}\n\n/**\n * For block elements that have background color style, remove the background color when user selects the merge current format\n * paste option\n */\nconst blockElementParser: FormatParser<ContentModelBlockFormat> = (\n    format: ContentModelBlockFormat,\n    element: HTMLElement\n) => {\n    if (element.style.backgroundColor) {\n        delete format.backgroundColor;\n    }\n};\n\nconst ElementBorderKeys = new Map<\n    keyof BorderFormat,\n    {\n        c: keyof CSSStyleDeclaration;\n        s: keyof CSSStyleDeclaration;\n        w: keyof CSSStyleDeclaration;\n    }\n>([\n    ['borderTop', { w: 'borderTopWidth', s: 'borderTopStyle', c: 'borderTopColor' }],\n    ['borderRight', { w: 'borderRightWidth', s: 'borderRightStyle', c: 'borderRightColor' }],\n    ['borderBottom', { w: 'borderBottomWidth', s: 'borderBottomStyle', c: 'borderBottomColor' }],\n    ['borderLeft', { w: 'borderLeftWidth', s: 'borderLeftStyle', c: 'borderLeftColor' }],\n]);\n\nfunction tableBorderParser(format: ContentModelTableCellFormat, element: HTMLElement): void {\n    BorderKeys.forEach(key => {\n        if (!format[key]) {\n            const styleSet = ElementBorderKeys.get(key);\n            if (\n                styleSet &&\n                element.style[styleSet.w] &&\n                element.style[styleSet.s] &&\n                !element.style[styleSet.c]\n            ) {\n                format[key] = `${element.style[styleSet.w]} ${element.style[styleSet.s]}`;\n            }\n        }\n    });\n}\n","import { addParser } from '../utils/addParser';\nimport { processAsListItem, setupListFormat } from '../utils/customListUtils';\nimport { removeNegativeTextIndentParser } from '../parsers/removeNegativeTextIndentParser';\nimport { setProcessor } from '../utils/setProcessor';\nimport {\n    BulletListType,\n    getOrderedListNumberStr,\n    moveChildNodes,\n    NumberingListType,\n} from 'roosterjs-content-model-dom';\nimport type {\n    BeforePasteEvent,\n    ContentModelListItemLevelFormat,\n    DOMCreator,\n} from 'roosterjs-content-model-types';\n\nconst BulletSelector = '* > span > span[style*=mso-special-format]';\nconst MsOfficeSpecialFormat = 'mso-special-format';\nconst CssStyleKey = 'style';\nconst MsoSpecialFormatRegex = /mso-special-format:\\s*([^;]*)/;\n\nconst clearListItemStyles = (format: ContentModelListItemLevelFormat): void => {\n    delete format.textAlign;\n    delete format.marginLeft;\n    delete format.paddingLeft;\n};\n/**\n * @internal\n * Convert pasted content from PowerPoint\n * @param event The BeforePaste event\n */\n\nexport function processPastedContentFromPowerPoint(\n    event: BeforePasteEvent,\n    domCreator: DOMCreator\n) {\n    const { fragment, clipboardData, domToModelOption } = event;\n\n    if (clipboardData.html && !clipboardData.text && clipboardData.image) {\n        // It is possible that PowerPoint copied both image and HTML but not plain text.\n        // We always prefer HTML if any.\n        const doc = domCreator.htmlToDOM(clipboardData.html);\n\n        moveChildNodes(fragment, doc?.body);\n    }\n\n    addParser(domToModelOption, 'block', removeNegativeTextIndentParser);\n\n    setProcessor(domToModelOption, 'element', (group, element, context) => {\n        const style = element.getAttribute(CssStyleKey) || '';\n        // If the element is the bullet element, just ignore it, otherwise we will see an extra bullet in the list\n        if (style.includes(MsOfficeSpecialFormat) && context.listFormat.levels.length > 0) {\n            return;\n        }\n        const bulletElement = element.querySelector(BulletSelector) as HTMLElement;\n        if (bulletElement) {\n            const {\n                depth,\n                unorderedBulletType,\n                orderedBulletType,\n                startNumberOverrideOrBullet,\n                isOrderedList,\n                isNewList,\n            } = extractPowerPointListInfo(element, bulletElement);\n\n            // Setup the listformat with the metadata extracted from the bullet element\n            setupListFormat(\n                isOrderedList ? 'OL' : 'UL',\n                element,\n                context,\n                depth,\n                context.listFormat,\n                group,\n                [clearListItemStyles]\n            );\n\n            // Set the metadata for the list item, which will be used to set the correct bullet style type\n            const listMetadata = {\n                unorderedStyleType:\n                    !isOrderedList && unorderedBulletType\n                        ? BulletListType[unorderedBulletType]\n                        : undefined,\n                orderedStyleType:\n                    isOrderedList && orderedBulletType\n                        ? NumberingListType[orderedBulletType]\n                        : undefined,\n            };\n\n            // Process the Div element as a list item.\n            processAsListItem(context, element, group, listMetadata, bulletElement, listItem => {\n                if (isNewList) {\n                    listItem.levels[\n                        listItem.levels.length - 1\n                    ].format.startNumberOverride = parseInt(startNumberOverrideOrBullet);\n                }\n                clearListItemStyles(listItem.levels[listItem.levels.length - 1].format);\n                clearListItemStyles(listItem.format);\n            });\n        } else {\n            context.defaultElementProcessors.element?.(group, element, context);\n        }\n    });\n}\n\n/**\n * Extract list information from PowerPoint pasted content\n *\n * The lists from PowerPoint are represent as:\n *\n * - The class 0# represents the depth of the list, if the list is in the first level, the class attribute wont be present.\n * - The mso-special-format style represents the type of bullet and the start of the list.\n *      The first part of the mso-special-format is the type of bullet, and the second part is the start of the list.\n *  - All the items that are in the same list have the same mso-special-format style. Which we are leveraging to identify when a list is new or part of the existing list thread.\n *\n * @example\n *  `   <div class=\"O1\" style=\"...\">\n            <span style=\"font-size: 5pt\"\n                ><span style=\"mso-special-format: 'numbullet6\\,1'; font-family: +mj-lt\"\n                    >i.</span\n                ></span\n            ><span style=\"...;\">123</span>\n        </div> `\n *\n * @param element The element to extract list information from\n * @param bulletElement The bullet element to extract list information from\n * @returns The extracted list information\n */\nfunction extractPowerPointListInfo(element: HTMLElement, bulletElement: HTMLElement) {\n    const className = element.className.substring(1) || '0';\n    const depth = parseInt(className) + 1;\n    const style = bulletElement.getAttribute(CssStyleKey) || '';\n    const msoSpecialFormat = style.match(MsoSpecialFormatRegex);\n    const [bulletTypeHtml, startNumberOverrideOrBullet] =\n        msoSpecialFormat?.[1].replace('\"', '').split('\\\\,') || [];\n    const isOrderedList = OrderedListStyleMap.has(bulletTypeHtml);\n\n    const unorderedBulletType = UnorderedBullets.get(bulletElement.innerText);\n    const orderedBulletType = OrderedListStyleMap.get(bulletTypeHtml);\n\n    return {\n        depth,\n        unorderedBulletType,\n        orderedBulletType,\n        startNumberOverrideOrBullet,\n        isOrderedList,\n        isNewList:\n            isOrderedList &&\n            !!orderedBulletType &&\n            bulletElement.innerText ===\n                getPptListStart(orderedBulletType, startNumberOverrideOrBullet),\n    };\n}\n\nconst UnorderedBullets: Map<string, keyof typeof BulletListType> = new Map([\n    ['•', 'Disc'],\n    ['o', 'Circle'],\n    ['§', 'Square'],\n    ['q', 'BoxShadow'],\n    ['v', 'Xrhombus'],\n    ['Ø', 'ShortArrow'],\n    ['ü', 'CheckMark'],\n]);\n\nconst OrderedListStyleMap: Map<string, keyof typeof NumberingListType> = new Map([\n    ['numbullet1', 'UpperAlpha'],\n    ['numbullet2', 'DecimalParenthesis'],\n    ['numbullet3', 'Decimal'],\n    ['numbullet7', 'UpperRoman'],\n    ['numbullet9', 'LowerAlphaParenthesis'],\n    ['numbullet0', 'LowerAlpha'],\n    ['numbullet6', 'LowerRoman'],\n]);\n\nfunction getPptListStart(\n    orderedBulletType: keyof typeof NumberingListType,\n    startNumberOverride: string\n) {\n    const bullet = getOrderedListNumberStr(\n        NumberingListType[orderedBulletType],\n        parseInt(startNumberOverride)\n    );\n    switch (orderedBulletType) {\n        case 'Decimal':\n        case 'UpperAlpha':\n        case 'LowerAlpha':\n        case 'UpperRoman':\n        case 'LowerRoman':\n            return bullet + '.';\n        case 'DecimalParenthesis':\n        case 'LowerAlphaParenthesis':\n            return bullet + ')';\n\n        default:\n            return undefined;\n    }\n}\n","/**\n * @internal\n **/\nexport const WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES: string[] = [\n    'TableInsertRowGapBlank',\n    'TableColumnResizeHandle',\n    'TableCellTopBorderHandle',\n    'TableCellLeftBorderHandle',\n    'TableHoverColumnHandle',\n    'TableHoverRowHandle',\n];\n/**\n * @internal\n **/\nexport const BULLET_LIST_STYLE: string = 'BulletListStyle';\n/**\n * @internal\n **/\nexport const NUMBER_LIST_STYLE: string = 'NumberListStyle';\n/**\n * @internal\n **/\nexport const IMAGE_BORDER: string = 'WACImageBorder';\n/**\n * @internal\n **/\nexport const IMAGE_CONTAINER: string = 'WACImageContainer';\n/**\n * @internal\n **/\nexport const OUTLINE_ELEMENT: string = 'OutlineElement';\n/**\n * @internal\n **/\nexport const PARAGRAPH: string = 'Paragraph';\n/**\n * @internal\n **/\nexport const LIST_CONTAINER_ELEMENT_CLASS_NAME: string = 'ListContainerWrapper';\n/**\n * @internal\n **/\nexport const COMMENT_HIGHLIGHT_CLASS: string = 'CommentHighlightRest';\n/**\n * @internal\n **/\nexport const COMMENT_HIGHLIGHT_CLICKED_CLASS: string = 'CommentHighlightClicked';\n/**\n * @internal\n **/\nexport const TEMP_ELEMENTS_CLASSES: string[] = [\n    ...WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES,\n    'ListMarkerWrappingSpan',\n];\n\n/**\n * @internal\n */\nexport const REMOVE_MARGIN_ELEMENTS: string =\n    `span.${IMAGE_CONTAINER},span.${IMAGE_BORDER},.${COMMENT_HIGHLIGHT_CLASS},.${COMMENT_HIGHLIGHT_CLICKED_CLASS},` +\n    WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES.map(c => `table div[class^=\"${c}\"]`).join(',');\n\n/**\n * @internal\n **/\nexport const WAC_IDENTIFY_SELECTOR: string = `ul[class^=\"${BULLET_LIST_STYLE}\"]>.${OUTLINE_ELEMENT},ol[class^=\"${NUMBER_LIST_STYLE}\"]>.${OUTLINE_ELEMENT},${REMOVE_MARGIN_ELEMENTS}`;\n","import { addParser } from '../utils/addParser';\nimport { createListLevel, parseFormat } from 'roosterjs-content-model-dom';\nimport { setProcessor } from '../utils/setProcessor';\nimport {\n    COMMENT_HIGHLIGHT_CLASS,\n    COMMENT_HIGHLIGHT_CLICKED_CLASS,\n    LIST_CONTAINER_ELEMENT_CLASS_NAME,\n    REMOVE_MARGIN_ELEMENTS,\n    TEMP_ELEMENTS_CLASSES,\n} from './constants';\nimport type {\n    BeforePasteEvent,\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    DomToModelListFormat,\n    ElementProcessor,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\nconst LIST_ELEMENT_TAGS = ['UL', 'OL', 'LI'];\nconst LIST_ELEMENT_SELECTOR = LIST_ELEMENT_TAGS.join(',');\n\ninterface WacContext extends DomToModelListFormat {\n    /**\n     * Current list levels\n     */\n    currentListLevels?: ContentModelListLevel[];\n    /**\n     * Array to keep the start of the lists and determine if the start override should be set.\n     */\n    listItemThread?: number[];\n}\n\n/**\n * Wac components do not use sub and super tags, instead only add vertical align to a span.\n * This parser normalize the content for content model\n */\nconst wacSubSuperParser: FormatParser<ContentModelSegmentFormat> = (\n    format: ContentModelSegmentFormat,\n    element: HTMLElement\n): void => {\n    const verticalAlign = element.style.verticalAlign;\n    if (verticalAlign === 'super') {\n        format.superOrSubScriptSequence = 'super';\n    }\n    if (verticalAlign === 'sub') {\n        format.superOrSubScriptSequence = 'sub';\n    }\n};\n\n/**\n * This processor does:\n * 1) Remove the display and margin of the element.\n * 2) When an element should be ignored but should handle the child elements call the default child processor.\n * 3) Removes the End of Paragraph element to avoid empty lines, we should only remove this if the previous element of the EOP is an EmptyTextRun\n * 4) Finally call the default processor.\n * @returns\n */\nconst wacElementProcessor: ElementProcessor<HTMLElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext\n): void => {\n    const elementTag = element.tagName;\n\n    if (element.matches(REMOVE_MARGIN_ELEMENTS)) {\n        element.style.removeProperty('display');\n        element.style.removeProperty('margin');\n    }\n\n    if (element.classList.contains(LIST_CONTAINER_ELEMENT_CLASS_NAME)) {\n        context.elementProcessors.child(group, element, context);\n        return;\n    }\n\n    if (TEMP_ELEMENTS_CLASSES.some(className => element.classList.contains(className))) {\n        return;\n    } else if (shouldClearListContext(elementTag, element, context)) {\n        const { listFormat } = context;\n        listFormat.levels = [];\n        listFormat.listParent = undefined;\n    }\n\n    context.defaultElementProcessors.element(group, element, context);\n};\n\n/**\n * This processor calls the default list processor and then sets the correct list level and list bullet.\n */\nconst wacLiElementProcessor: ElementProcessor<HTMLLIElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLLIElement,\n    context: DomToModelContext\n): void => {\n    const level = parseInt(element.getAttribute('data-aria-level') ?? '');\n    const listFormat = context.listFormat as WacContext;\n    const listType =\n        listFormat.levels[context.listFormat.levels.length - 1]?.listType ||\n        (element.closest('ol,ul')?.tagName.toUpperCase() as 'UL' | 'OL');\n    const newLevel: ContentModelListLevel = createListLevel(listType, context.blockFormat);\n    parseFormat(element, context.formatParsers.listLevelThread, newLevel.format, context);\n    parseFormat(element, context.formatParsers.listLevel, newLevel.format, context);\n    context.listFormat.levels = listFormat.currentListLevels || context.listFormat.levels;\n\n    if (level > 0) {\n        if (level > context.listFormat.levels.length) {\n            while (level != context.listFormat.levels.length) {\n                context.listFormat.levels.push(newLevel);\n            }\n        } else {\n            context.listFormat.levels.splice(level, context.listFormat.levels.length - 1);\n            context.listFormat.levels[level - 1] = newLevel;\n        }\n    }\n\n    context.defaultElementProcessors.li?.(group, element, context);\n\n    const listParent = listFormat.listParent;\n    if (listParent) {\n        const lastblock = listParent.blocks[listParent.blocks.length - 1];\n        if (lastblock.blockType == 'BlockGroup' && lastblock.blockGroupType == 'ListItem') {\n            const currentLevel = lastblock.levels[lastblock.levels.length - 1];\n            updateStartOverride(currentLevel, element, context);\n        }\n    }\n\n    const newLevels: ContentModelListLevel[] = [];\n    listFormat.levels.forEach(v => {\n        const newValue: ContentModelListLevel = {\n            dataset: { ...v.dataset },\n            format: { ...v.format },\n            listType: v.listType,\n        };\n        newLevels.push(newValue);\n    });\n    listFormat.currentListLevels = newLevels;\n    listFormat.levels = [];\n};\n\n/**\n * This parsers does:\n * 1) Sets the display for dummy item to undefined when the current style is block.\n * 2) Removes the Margin Left\n */\nconst wacListItemParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement\n): void => {\n    if (element.style.display === 'block') {\n        format.displayForDummyItem = undefined;\n    }\n\n    format.marginLeft = undefined;\n    format.marginRight = undefined;\n};\n\n/**\n * Wac usually adds padding to lists which is unwanted so remove it.\n */\nconst wacListLevelParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat\n): void => {\n    format.marginLeft = undefined;\n    format.paddingLeft = undefined;\n};\n\n/**\n * This function returns whether we need to clear the list format.\n * Word Online wraps lists inside divs to have this structure:\n *\n *  <div class='ListContainerWrapper'>\n *      <ol>...</ol>\n *  </div>\n *  <div>\n *      <p>...</p>\n *  <div>\n *  <div class='ListContainerWrapper'>\n *      <ol>...</ol>\n *  </div>\n *\n *  So if a elements is not contained inside of a list we should clear the list context to prevent normal text to be\n *  transformed into list\n *  For the above scenario, if we do not clear the format, the content inside of the second div would be transformed to a list too.\n */\nfunction shouldClearListContext(\n    elementTag: string,\n    element: HTMLElement,\n    context: DomToModelContext\n) {\n    return (\n        context.listFormat.levels.length > 0 &&\n        LIST_ELEMENT_TAGS.every(tag => tag != elementTag) &&\n        !element.closest(LIST_ELEMENT_SELECTOR)\n    );\n}\n\nconst wacCommentParser: FormatParser<ContentModelSegmentFormat> = (\n    format: ContentModelSegmentFormat,\n    element: HTMLElement\n): void => {\n    if (\n        element.className.includes(COMMENT_HIGHLIGHT_CLASS) ||\n        element.className.includes(COMMENT_HIGHLIGHT_CLICKED_CLASS)\n    ) {\n        delete format.backgroundColor;\n    }\n};\n/**\n * @internal\n * Convert pasted content from Office Online\n * Once it is known that the document is from WAC\n * We need to remove the display property and margin from all the list item\n * @param ev BeforePasteEvent\n */\nexport function processPastedContentWacComponents(ev: BeforePasteEvent) {\n    addParser(ev.domToModelOption, 'segment', wacSubSuperParser);\n    addParser(ev.domToModelOption, 'listItemThread', wacListItemParser);\n    addParser(ev.domToModelOption, 'listItemElement', wacListItemParser);\n    addParser(ev.domToModelOption, 'listLevel', wacListLevelParser);\n    addParser(ev.domToModelOption, 'container', wacContainerParser);\n    addParser(ev.domToModelOption, 'table', wacContainerParser);\n    addParser(ev.domToModelOption, 'segment', wacCommentParser);\n\n    setProcessor(ev.domToModelOption, 'element', wacElementProcessor);\n    setProcessor(ev.domToModelOption, 'li', wacLiElementProcessor);\n}\n\nconst wacContainerParser: FormatParser<ContentModelBlockFormat> = (\n    format: ContentModelBlockFormat,\n    element: HTMLElement\n) => {\n    if (element.style.marginLeft.startsWith('-')) {\n        delete format.marginLeft;\n    }\n};\n\nfunction updateStartOverride(\n    currentLevel: ContentModelListLevel | undefined,\n    element: HTMLLIElement,\n    ctx: DomToModelContext\n) {\n    if (!currentLevel || currentLevel.listType == 'UL') {\n        return;\n    }\n\n    const list = element.closest('ol');\n    const listFormat = ctx.listFormat as WacContext;\n    const [start, listLevel] = extractWordListMetadata(list, element);\n\n    if (!listFormat.listItemThread) {\n        listFormat.listItemThread = [];\n    }\n\n    const thread: number | undefined = listFormat.listItemThread[listLevel];\n    if (thread && start - thread != 1) {\n        currentLevel.format.startNumberOverride = start;\n    }\n    listFormat.listItemThread[listLevel] = start;\n}\nfunction extractWordListMetadata(\n    list: HTMLElement | null | undefined,\n    item: HTMLElement | null | undefined\n) {\n    const itemIndex =\n        item && Array.from(list?.querySelectorAll('li') || []).indexOf(item as HTMLLIElement);\n    const start =\n        parseInt(list?.getAttribute('start') || '1') + (itemIndex && itemIndex > 0 ? itemIndex : 0);\n    const listLevel = parseInt(item?.getAttribute('data-aria-level') || '');\n\n    return [start, listLevel];\n}\n","import { getObjectKeys } from 'roosterjs-content-model-dom';\nimport type { WordMetadata } from './WordMetadata';\nimport type { BeforePasteEvent } from 'roosterjs-content-model-types';\n\nconst FORMATING_REGEX = /[\\n\\t'{}\"]+/g;\nconst STYLE_TAG = '<style';\nconst STYLE_TAG_END = '</style>';\nconst nonWordCharacterRegex = /\\W/;\n\nfunction extractStyleTagsFromHtml(htmlContent: string): string[] {\n    const styles: string[] = [];\n\n    let { styleIndex, styleEndIndex } = extractHtmlIndexes(htmlContent);\n    while (styleIndex >= 0 && styleEndIndex >= 0) {\n        const styleContent = htmlContent\n            .substring(styleIndex + STYLE_TAG.length, styleEndIndex)\n            .trim();\n        styles.push(styleContent);\n        ({ styleIndex, styleEndIndex } = extractHtmlIndexes(htmlContent, styleEndIndex + 1));\n    }\n    return styles;\n}\n\nfunction extractHtmlIndexes(html: string, startIndex: number = 0) {\n    const htmlLowercase = html.toLowerCase();\n    let styleIndex = htmlLowercase.indexOf(STYLE_TAG, startIndex);\n    let currentIndex = styleIndex + STYLE_TAG.length;\n    let nextChar = html.substring(currentIndex, currentIndex + 1);\n\n    while (!nonWordCharacterRegex.test(nextChar) && styleIndex > -1) {\n        styleIndex = htmlLowercase.indexOf(STYLE_TAG, styleIndex + 1);\n        currentIndex = styleIndex + STYLE_TAG.length;\n        nextChar = html.substring(currentIndex, currentIndex + 1);\n    }\n\n    const styleEndIndex = htmlLowercase.indexOf(STYLE_TAG_END, startIndex);\n    return { styleIndex, styleEndIndex };\n}\n\n/**\n * @internal\n * Word Desktop content has a style tag that contains data for the lists.\n * So this function query that style tag and extract the data from the innerHTML, since it is not available from the HTMLStyleElement.sheet.\n *\n * The format is like:\n * example of style element content\n * @list l0:level1 {\n * styleTag: styleValue;\n * ...\n * }\n *\n * To extract the data:\n * 1. Substring the value of the style selector, using @ index and { index\n * 2. Substring the value of the style rules by Substring the content between { and }\n * 3. Split the value of the rules using ; as separator { styleTag: styleValue; styleTag1: StyleValue1 } = ['styleTag: styleValue',  'styleTag1: StyleValue1']\n * 4. Split the value of the rule  using : as separator: styleTag: styleValue = [styleTag, styleValue]\n * 5. Save data in record and only use the required information.\n *\n */\nexport function getStyleMetadata(ev: BeforePasteEvent) {\n    const metadataMap: Map<string, WordMetadata> = new Map();\n    const headStyles = extractStyleTagsFromHtml(ev.htmlBefore || ev.clipboardData.rawHtml || '');\n\n    headStyles.forEach(text => {\n        let index = 0;\n        while (index >= 0) {\n            const indexAt = text.indexOf('@', index + 1);\n            const indexCurlyEnd = text.indexOf('}', indexAt);\n            const indexCurlyStart = text.indexOf('{', indexAt);\n            index = indexAt;\n\n            // 1.\n            const metadataName = text\n                .substring(indexAt + 1, indexCurlyStart)\n                .replace(FORMATING_REGEX, '')\n                .replace('list', '')\n                .trimRight()\n                .trimLeft();\n\n            // 2.\n            const dataName = text\n                .substring(indexCurlyStart, indexCurlyEnd + 1)\n                .trimLeft()\n                .trimRight();\n            const record: Record<string, string> = {};\n\n            // 3.\n            const entries = dataName.split(';');\n            entries.forEach(entry => {\n                // 4.\n                const [key, value] = entry.split(':');\n                if (key && value) {\n                    const formatedKey = key.replace(FORMATING_REGEX, '').trimRight().trimLeft();\n                    const formatedValue = value.replace(FORMATING_REGEX, '').trimRight().trimLeft();\n                    // 5.\n                    record[formatedKey] = formatedValue;\n                }\n            });\n\n            const data: WordMetadata = {\n                'mso-level-number-format': record['mso-level-number-format'],\n                'mso-level-start-at': record['mso-level-start-at'] || '1',\n                'mso-level-text': record['mso-level-text'],\n            };\n            if (getObjectKeys(data).some(key => !!data[key])) {\n                metadataMap.set(metadataName, data);\n            }\n        }\n    });\n\n    return metadataMap;\n}\n","import { addParser } from '../utils/addParser';\nimport { getStyleMetadata } from './getStyleMetadata';\nimport { getStyles } from '../utils/getStyles';\nimport { processWordComments } from './processWordComments';\nimport { processWordList } from './processWordLists';\nimport { removeNegativeTextIndentParser } from '../parsers/removeNegativeTextIndentParser';\nimport { setProcessor } from '../utils/setProcessor';\nimport type { WordMetadata } from './WordMetadata';\nimport type {\n    BeforePasteEvent,\n    ContentModelBlockFormat,\n    ContentModelListItemLevelFormat,\n    ContentModelTableFormat,\n    DomToModelContext,\n    ElementProcessor,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\nconst PERCENTAGE_REGEX = /%/;\n// Default line height in browsers according to https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#normal\nconst DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE = 1.2;\n\n/**\n * @internal\n * Handles Pasted content when source is Word Desktop\n * @param ev BeforePasteEvent\n */\nexport function processPastedContentFromWordDesktop(ev: BeforePasteEvent) {\n    const metadataMap: Map<string, WordMetadata> = getStyleMetadata(ev);\n\n    setProcessor(ev.domToModelOption, 'element', wordDesktopElementProcessor(metadataMap));\n    addParser(ev.domToModelOption, 'block', adjustPercentileLineHeight);\n    addParser(ev.domToModelOption, 'block', removeNegativeTextIndentParser);\n    addParser(ev.domToModelOption, 'listLevel', listLevelParser);\n    addParser(ev.domToModelOption, 'container', wordTableParser);\n    addParser(ev.domToModelOption, 'table', wordTableParser);\n}\n\nconst wordDesktopElementProcessor = (\n    metadataKey: Map<string, WordMetadata>\n): ElementProcessor<HTMLElement> => {\n    return (group, element, context) => {\n        const styles = getStyles(element);\n        // Process Word Lists or Word Commands, otherwise use the default processor on this element.\n        if (\n            !(\n                processWordList(styles, group, element, context, metadataKey) ||\n                processWordComments(styles, element)\n            )\n        ) {\n            context.defaultElementProcessors.element(group, element, context);\n        }\n    };\n};\n\nfunction adjustPercentileLineHeight(format: ContentModelBlockFormat, element: HTMLElement): void {\n    //If the line height is less than the browser default line height, line between the text is going to be too narrow\n    let parsedLineHeight: number;\n    if (\n        PERCENTAGE_REGEX.test(element.style.lineHeight) &&\n        !isNaN((parsedLineHeight = parseInt(element.style.lineHeight)))\n    ) {\n        format.lineHeight = (\n            DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE *\n            (parsedLineHeight / 100)\n        ).toString();\n    }\n}\n\nconst listLevelParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement,\n    _context: DomToModelContext,\n    defaultStyle: Readonly<Partial<CSSStyleDeclaration>>\n) => {\n    if (element.style.marginLeft != '') {\n        format.marginLeft = defaultStyle.marginLeft;\n    }\n\n    format.marginBottom = undefined;\n};\n\nconst wordTableParser: FormatParser<ContentModelTableFormat> = (format): void => {\n    if (format.marginLeft?.startsWith('-')) {\n        delete format.marginLeft;\n    }\n};\n","import { isElementOfType } from 'roosterjs-content-model-dom';\n\nconst MSO_COMMENT_ANCHOR_HREF_REGEX = /#_msocom_/;\nconst MSO_SPECIAL_CHARACTER = 'mso-special-character';\nconst MSO_SPECIAL_CHARACTER_COMMENT = 'comment';\nconst MSO_ELEMENT = 'mso-element';\nconst MSO_ELEMENT_COMMENT_LIST = 'comment-list';\n\n/**\n * @internal\n * Check whether the element contain Word attributes related to comments and if it does we should no process\n * this element.\n * @returns\n */\nexport function processWordComments(styles: Record<string, string>, element: HTMLElement) {\n    return (\n        styles[MSO_SPECIAL_CHARACTER] == MSO_SPECIAL_CHARACTER_COMMENT ||\n        (isElementOfType(element, 'a') && MSO_COMMENT_ANCHOR_HREF_REGEX.test(element.href)) ||\n        styles[MSO_ELEMENT] == MSO_ELEMENT_COMMENT_LIST\n    );\n}\n","import { getStyles } from '../utils/getStyles';\nimport { processAsListItem, setupListFormat } from '../utils/customListUtils';\nimport {\n    getListStyleTypeFromString,\n    isElementOfType,\n    isEmpty,\n    isNodeOfType,\n} from 'roosterjs-content-model-dom';\nimport type { WordMetadata } from './WordMetadata';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelListItem,\n    ContentModelListItemFormat,\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    DomToModelContext,\n    DomToModelListFormat,\n} from 'roosterjs-content-model-types';\n\n/** Word list metadata style name */\nconst MSO_LIST = 'mso-list';\nconst MSO_LIST_IGNORE = 'ignore';\nconst WORD_FIRST_LIST = 'l0';\nconst TEMPLATE_VALUE_REGEX = /%[0-9a-zA-Z]+/g;\nconst BULLET_METADATA = 'bullet';\n\ninterface WordDesktopListFormat extends DomToModelListFormat {\n    wordLevel?: number | '';\n    wordList?: string;\n    wordKnownLevels?: Map<string, ContentModelListLevel[]>;\n}\n\ninterface WordListFormat extends ContentModelListItemFormat {\n    wordList?: string;\n}\n\n/**\n * @internal\n * @param styles\n * @param group\n * @param element\n * @param context\n * @returns\n */\nexport function processWordList(\n    styles: Record<string, string>,\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext,\n    metadata: Map<string, WordMetadata>\n) {\n    const listFormat = context.listFormat as WordDesktopListFormat;\n    if (!listFormat.wordKnownLevels) {\n        listFormat.wordKnownLevels = new Map<string, ContentModelListLevel[]>();\n    }\n    const wordListStyle = styles[MSO_LIST] || '';\n\n    // If the element contains Ignore style, do not process it,\n    // Usually this element contains the fake bullet used in Word Desktop.\n    if (wordListStyle.toLowerCase() === MSO_LIST_IGNORE) {\n        return true;\n    }\n\n    const [lNumber, level] = wordListStyle.split(' ');\n    // Try get the list metadata from word, which follows this format: l1 level1 lfo2\n    // If we are able to get the level property means we can process this element to be a list\n    listFormat.wordLevel = level && parseInt(level.substr('level'.length));\n    listFormat.wordList = lNumber || WORD_FIRST_LIST;\n\n    if (listFormat.levels.length == 0) {\n        listFormat.levels =\n            (listFormat.wordList && listFormat.wordKnownLevels.get(listFormat.wordList)) || [];\n    }\n\n    if (wordListStyle && group && typeof listFormat.wordLevel === 'number') {\n        const { wordLevel, wordList } = listFormat;\n        // Retrieve the Fake bullet on the element and also the list type\n        const listMetadata = metadata.get(`${lNumber}:${level}`);\n        const listType =\n            listMetadata?.['mso-level-number-format']?.toLowerCase() != BULLET_METADATA\n                ? 'OL'\n                : 'UL';\n\n        // Create the new level of the list item and parse the format\n        setupListFormat(listType, element, context, wordLevel, listFormat, group, [\n            wordListPaddingParser,\n        ]);\n        (listFormat.levels[listFormat.levels.length - 1]\n            .format as WordListFormat).wordList = wordList;\n\n        const bullet = getBulletFromMetadata(listMetadata, listType);\n        const listFormatMetadata = bullet\n            ? {\n                  unorderedStyleType: listType == 'UL' ? bullet : undefined,\n                  orderedStyleType: listType == 'OL' ? bullet : undefined,\n              }\n            : undefined;\n\n        processAsListItem(\n            context,\n            element,\n            group,\n            listFormatMetadata,\n            getBulletElement(element),\n            listItem => {\n                if (listType == 'OL') {\n                    setStartNumber(listItem, context, listMetadata, element);\n                }\n            }\n        );\n\n        if (\n            listFormat.levels.length > 0 &&\n            listFormat.wordKnownLevels.get(wordList) != listFormat.levels\n        ) {\n            listFormat.wordKnownLevels.set(wordList, [...listFormat.levels]);\n        }\n        return true;\n    }\n\n    return false;\n}\n\nfunction getBulletFromMetadata(listMetadata: WordMetadata | undefined, listType: 'OL' | 'UL') {\n    const templateType = listMetadata?.['mso-level-number-format'] || 'decimal';\n    let templateFinal: string;\n\n    if (listMetadata?.['mso-level-text']) {\n        let templateValue: string = '';\n        switch (templateType) {\n            case 'alpha-upper':\n                templateValue = 'UpperAlpha';\n                break;\n            case 'alpha-lower':\n                templateValue = 'LowerAlpha';\n                break;\n            case 'roman-lower':\n                templateValue = 'LowerRoman';\n                break;\n            case 'roman-upper':\n                templateValue = 'UpperRoman';\n                break;\n            default:\n                templateValue = 'Number';\n                break;\n        }\n        const template = (listMetadata['mso-level-text'] || '')\n            .replace('\\\\', '')\n            .replace('\"', '')\n            .replace(TEMPLATE_VALUE_REGEX, '${' + templateValue + '}');\n\n        templateFinal = '\"' + template + ' \"';\n    } else {\n        switch (templateType) {\n            case 'alpha-lower':\n                templateFinal = 'lower-alpha';\n                break;\n            case 'roman-lower':\n                templateFinal = 'lower-roman';\n                break;\n            case 'roman-upper':\n                templateFinal = 'upper-roman';\n                break;\n            default:\n                templateFinal = 'decimal';\n                break;\n        }\n    }\n\n    return getListStyleTypeFromString(listType, templateFinal);\n}\n\nfunction setStartNumber(\n    listItem: ContentModelListItem,\n    context: DomToModelContext,\n    listMetadata: WordMetadata | undefined,\n    element: HTMLElement\n) {\n    const {\n        listParent,\n        wordList,\n        wordKnownLevels,\n        wordLevel,\n        levels,\n    } = context.listFormat as WordDesktopListFormat;\n\n    const block = getLastNotEmptyBlock(listParent);\n    if (\n        (block?.blockType != 'BlockGroup' ||\n            block.blockGroupType != 'ListItem' ||\n            (wordLevel &&\n                (block.levels[wordLevel]?.format as WordListFormat)?.wordList != wordList)) &&\n        wordList\n    ) {\n        const start = listMetadata?.['mso-level-start-at']\n            ? parseInt(listMetadata['mso-level-start-at'])\n            : NaN;\n        const knownLevel = wordKnownLevels?.get(wordList) || [];\n\n        if (start != undefined && !isNaN(start) && knownLevel.length != levels.length) {\n            listItem.levels[listItem.levels.length - 1].format.startNumberOverride = start;\n        } else if (\n            isElementOfType(element, 'li') &&\n            isNodeOfType(element.parentElement, 'ELEMENT_NODE') &&\n            isElementOfType(element.parentElement, 'ol') &&\n            element.parentElement.firstElementChild == element &&\n            knownLevel.length != element.parentElement.start\n        ) {\n            listItem.levels[listItem.levels.length - 1].format.startNumberOverride =\n                element.parentElement.start;\n        }\n    }\n}\n\nfunction getLastNotEmptyBlock(listParent: ContentModelBlockGroup | undefined) {\n    for (let index = (listParent?.blocks.length || 0) - 1; index > 0; index--) {\n        const result = listParent?.blocks[index];\n        if (result && !isEmpty(result)) {\n            return result;\n        }\n    }\n\n    return undefined;\n}\n\nfunction wordListPaddingParser(\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement\n): void {\n    if (element.style.marginLeft && element.style.marginLeft != '0in') {\n        format.paddingLeft = '0px';\n    }\n    if (element.style.marginRight && element.style.marginRight != '0in') {\n        format.paddingRight = '0px';\n    }\n}\n/**\n * Get the bullet element from word list item.\n * The first element of the list contains the bullet element, which contains the mso-list:ignore style.\n * @example\n *  <p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt;mso-list:l0 level1 lfo1'>\n *      <![if !supportLists]>\n *          <span lang=EN-US style='mso-fareast-font-family:Aptos;mso-fareast-theme-font:minor-latin; mso-bidi-font-family:Aptos;mso-bidi-theme-font:minor-latin;color:#C00000; mso-ansi-language:EN-US'>\n *              <span style='mso-list:Ignore'> <-- This is the bullet element\n *                  1.\n *                  <span style='font:7.0pt \"Times New Roman\"'>\n *                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n *                  </span>\n *              </span>\n *          </span>\n *      <![endif]>\n *      <span lang=EN-US style='color:#C00000; mso-ansi-language:EN-US'>\n *          Content in list<o:p></o:p>\n *      </span>\n *  </p>\n * @returns\n */\nfunction getBulletElement(element: HTMLElement): HTMLElement | undefined {\n    const firstChild = element.firstElementChild;\n    let isBulletElement = false;\n\n    if (firstChild) {\n        for (let i = 0; i < firstChild.childNodes.length; i++) {\n            const child = firstChild.childNodes[i];\n            if (isNodeOfType(child, 'ELEMENT_NODE')) {\n                const styles = getStyles(child);\n                const wordListStyle = styles[MSO_LIST] || '';\n\n                if (wordListStyle.toLowerCase() === MSO_LIST_IGNORE) {\n                    isBulletElement = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    return firstChild && isBulletElement ? (firstChild as HTMLElement) : undefined;\n}\n","import { setProcessor } from '../utils/setProcessor';\nimport type {\n    BeforePasteEvent,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\nconst OrderedListStyleMap = {\n    1: 'decimal',\n    a: 'lower-alpha',\n    A: 'upper-alpha',\n    i: 'lower-roman',\n    I: 'upper-roman',\n} as const;\n\nconst UnorderedListStyleMap = {\n    disc: 'disc',\n    circle: 'circle',\n    square: 'square',\n} as const;\n\n/**\n * @internal\n */\nexport interface OneNoteListContext {\n    listStyleType?: string;\n    startNumberOverride?: number;\n}\n\n/**\n * @internal\n */\nexport interface OneNoteDomToModelContext extends DomToModelContext {\n    oneNoteListContext?: OneNoteListContext;\n}\n\n/**\n * @internal\n * Processes the content pasted from OneNote by setting up custom processors\n * for ordered lists (`<ol>`) and list items (`<li>`). These processors handle\n * specific list styles and numbering overrides that may be present in OneNote\n * content.\n *\n * @param event - The `BeforePasteEvent` containing the DOM-to-model options\n * and other context information for the paste operation.\n */\nexport function processPastedContentFromOneNote(event: BeforePasteEvent): void {\n    setProcessor(event.domToModelOption, 'ol', processOrderedList);\n    setProcessor(event.domToModelOption, 'ul', processUnorderedList);\n    setProcessor(event.domToModelOption, 'li', processListItem);\n}\n\n/**\n * @internal exported only for unit test\n * Content from OneNote may have ordered lists with specific styles and start numbers.\n * This function processes the `<ol>` elements, extracting the `type` and `start` custom attributes\n * to set the appropriate list style and starting number in the `oneNoteListContext` of the provided context.\n * Which is then used to format the list items within the list.\n */\nexport const processOrderedList: ElementProcessor<HTMLOListElement> = (\n    group,\n    element,\n    cmContext\n) => {\n    const context = ensureOneNoteListContext(cmContext);\n\n    if (context.oneNoteListContext) {\n        const typeOfList = element.getAttribute('type');\n        if (typeOfList) {\n            const listStyle = OrderedListStyleMap[typeOfList as keyof typeof OrderedListStyleMap];\n            const startNumberOverride = parseInt(element.getAttribute('start') || '1') || 1;\n\n            context.oneNoteListContext.listStyleType = listStyle;\n            context.oneNoteListContext.startNumberOverride = startNumberOverride;\n        }\n    }\n\n    context.defaultElementProcessors.ol?.(group, element, context);\n};\n\n/**\n * @internal exported only for unit test\n * Content from OneNote may have ordered lists with specific styles and start numbers.\n * This function processes the `<ul>` elements, extracting the `type` custom attribute\n * to set the appropriate list style in the `oneNoteListContext` of the provided context.\n * Which is then used to format the list items within the list.\n */\nexport const processUnorderedList: ElementProcessor<HTMLUListElement> = (\n    group,\n    element,\n    cmContext\n) => {\n    const context = ensureOneNoteListContext(cmContext);\n\n    if (context.oneNoteListContext) {\n        const typeOfList = element.getAttribute('type');\n        if (typeOfList) {\n            const listStyle =\n                UnorderedListStyleMap[typeOfList as keyof typeof UnorderedListStyleMap];\n            context.oneNoteListContext.listStyleType = listStyle;\n        }\n    }\n\n    context.defaultElementProcessors.ul?.(group, element, context);\n};\n\n/**\n * @internal exported only for unit test\n * Processes the `<li>` elements within a list. It checks if the `oneNoteListContext`\n * is present in the provided context. If so, it applies the list style type and\n * start number override to the last level of the list format.\n * This ensures that the list items are formatted correctly according to the\n * OneNote list context.\n */\nexport const processListItem: ElementProcessor<HTMLLIElement> = (group, element, cmContext) => {\n    const context = ensureOneNoteListContext(cmContext);\n    let removeStartNumberOverride = false;\n\n    if (context.oneNoteListContext) {\n        const { listStyleType, startNumberOverride } = context.oneNoteListContext;\n        if (listStyleType) {\n            const lastLevel = context.listFormat.levels[context.listFormat.levels.length - 1];\n            lastLevel.format.listStyleType = listStyleType;\n\n            if (startNumberOverride) {\n                removeStartNumberOverride = true;\n                lastLevel.format.startNumberOverride = startNumberOverride;\n\n                delete context.oneNoteListContext.startNumberOverride;\n            }\n            delete context.oneNoteListContext.listStyleType;\n        }\n    }\n\n    context.defaultElementProcessors.li?.(group, element, context);\n\n    if (removeStartNumberOverride) {\n        delete context.listFormat.levels[context.listFormat.levels.length - 1].format\n            .startNumberOverride;\n    }\n};\n\nfunction ensureOneNoteListContext(cmContext: DomToModelContext): OneNoteDomToModelContext {\n    const context = cmContext as OneNoteDomToModelContext;\n\n    if (!context.oneNoteListContext) {\n        context.oneNoteListContext = {};\n    }\n\n    return context;\n}\n","import { BorderKeys, DeprecatedColors } from 'roosterjs-content-model-dom';\nimport type { BorderFormat, FormatParser } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deprecatedBorderColorParser: FormatParser<BorderFormat> = (\n    format: BorderFormat\n): void => {\n    BorderKeys.forEach(key => {\n        const value = format[key];\n        let color: string = '';\n        if (\n            value &&\n            DeprecatedColors.some(dColor => value.indexOf(dColor) > -1 && (color = dColor))\n        ) {\n            const newValue = value.replace(color, '').trimRight();\n            format[key] = newValue;\n        }\n    });\n};\n","import { isElementOfType } from 'roosterjs-content-model-dom';\nimport type { ContentModelHyperLinkFormat, FormatParser } from 'roosterjs-content-model-types';\n\nconst SUPPORTED_PROTOCOLS = ['http:', 'https:', 'notes:', 'mailto:', 'onenote:'];\nconst INVALID_LINKS_REGEX = /^file:\\/\\/\\/[a-zA-Z\\/]/i;\n\n/**\n * @internal\n */\nexport const parseLink: FormatParser<ContentModelHyperLinkFormat> = (format, element) => {\n    if (!isElementOfType(element, 'a')) {\n        return;\n    }\n\n    let url: URL | undefined;\n    try {\n        url = new URL(element.href);\n    } catch {\n        url = undefined;\n    }\n\n    if (\n        (url && SUPPORTED_PROTOCOLS.indexOf(url.protocol) === -1) ||\n        INVALID_LINKS_REGEX.test(element.href)\n    ) {\n        element.removeAttribute('href');\n        format.href = '';\n    }\n};\n","import type { FormatParser, TextIndentFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const removeNegativeTextIndentParser: FormatParser<TextIndentFormat> = format => {\n    if (format.textIndent?.startsWith('-')) {\n        delete format.textIndent;\n    }\n};\n","/**\n * @internal\n */\nexport const PastePropertyNames = {\n    /**\n     * Node attribute used to identify if the content is from Google Sheets.\n     */\n    GOOGLE_SHEET_NODE_NAME: 'google-sheets-html-origin',\n\n    /**\n     * Name of the HTMLMeta Property that provides the Office App Source of the pasted content\n     */\n    PROG_ID_NAME: 'ProgId',\n\n    /**\n     * Name of the HTMLMeta Property that identifies pated content as from Excel Desktop\n     */\n    EXCEL_DESKTOP_ATTRIBUTE_NAME: 'xmlns:x',\n};\n","import { WAC_IDENTIFY_SELECTOR } from '../WacComponents/constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\n/**\n * @internal\n * Check whether the fragment provided contain Wac Elements\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const documentContainWacElements: GetSourceFunction = props => {\n    const { fragment } = props;\n    return !!fragment.querySelector(WAC_IDENTIFY_SELECTOR);\n};\n","import { documentContainWacElements } from './documentContainWacElements';\nimport { isExcelDesktopDocument } from './isExcelDesktopDocument';\nimport { isExcelNotNativeEvent } from './isExcelNonNativeEvent';\nimport { isExcelOnlineDocument } from './isExcelOnlineDocument';\nimport { isGoogleSheetDocument } from './isGoogleSheetDocument';\nimport { isOneNoteDesktopDocument } from './isOneNoteDocument';\nimport { isPowerPointDesktopDocument } from './isPowerPointDesktopDocument';\nimport { isWordDesktopDocument } from './isWordDesktopDocument';\nimport { shouldConvertToSingleImage } from './shouldConvertToSingleImage';\nimport type {\n    BeforePasteEvent,\n    ClipboardData,\n    EditorEnvironment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport type GetSourceInputParams = {\n    htmlAttributes: Record<string, string>;\n    fragment: DocumentFragment;\n    shouldConvertSingleImage: boolean;\n    clipboardData: ClipboardData;\n    environment: EditorEnvironment;\n};\n\n/**\n * @internal\n * Represent the types of sources to handle in the Paste Plugin\n */\nexport type KnownPasteSourceType =\n    | 'wordDesktop'\n    | 'excelDesktop'\n    | 'excelOnline'\n    | 'powerPointDesktop'\n    | 'googleSheets'\n    | 'wacComponents'\n    | 'default'\n    | 'singleImage'\n    | 'excelNonNativeEvent'\n    | 'oneNoteDesktop';\n\n/**\n * @internal\n */\nexport type GetSourceFunction = (props: GetSourceInputParams) => boolean;\n\nconst getSourceFunctions = new Map<KnownPasteSourceType, GetSourceFunction>([\n    ['wordDesktop', isWordDesktopDocument],\n    ['excelDesktop', isExcelDesktopDocument],\n    ['excelOnline', isExcelOnlineDocument],\n    ['powerPointDesktop', isPowerPointDesktopDocument],\n    ['wacComponents', documentContainWacElements],\n    ['googleSheets', isGoogleSheetDocument],\n    ['singleImage', shouldConvertToSingleImage],\n    ['excelNonNativeEvent', isExcelNotNativeEvent],\n    ['oneNoteDesktop', isOneNoteDesktopDocument],\n]);\n\n/**\n * @internal\n * This function tries to get the source of the Pasted content\n * @param event the before paste event\n * @param shouldConvertSingleImage Whether convert single image is enabled.\n * @returns The Type of pasted content, if no type found will return {KnownSourceType.Default}\n */\nexport function getPasteSource(\n    event: BeforePasteEvent,\n    shouldConvertSingleImage: boolean,\n    environment: EditorEnvironment\n): KnownPasteSourceType {\n    const { htmlAttributes, clipboardData, fragment } = event;\n\n    let result: KnownPasteSourceType | null = null;\n    const param: GetSourceInputParams = {\n        htmlAttributes,\n        fragment,\n        shouldConvertSingleImage,\n        clipboardData,\n        environment,\n    };\n\n    getSourceFunctions.forEach((func, key) => {\n        if (!result && func(param)) {\n            result = key;\n        }\n    });\n\n    return result ?? 'default';\n}\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Excel Desktop documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isExcelDesktopDocument: GetSourceFunction = props => {\n    const { htmlAttributes } = props;\n    // The presence of this attribute confirms its origin from Excel Desktop\n    return htmlAttributes[PastePropertyNames.EXCEL_DESKTOP_ATTRIBUTE_NAME] == EXCEL_ATTRIBUTE_VALUE;\n};\n","import type { GetSourceFunction, GetSourceInputParams } from './getPasteSource';\n\nconst ShadowWorkbookClipboardType = 'web data/shadow-workbook';\n\n/**\n * @internal\n * When the clipboard content is retrieved programatically, the clipboard html does not contain the usual\n * attributes we use to determine if the content is from Excel. This function is used to handle that case.\n */\nexport const isExcelNotNativeEvent: GetSourceFunction = (props: GetSourceInputParams) => {\n    const { clipboardData } = props;\n\n    return (\n        clipboardData.types.includes(ShadowWorkbookClipboardType) &&\n        clipboardData.htmlFirstLevelChildTags?.length == 1 &&\n        clipboardData.htmlFirstLevelChildTags[0] == 'TABLE'\n    );\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\n// Excel Desktop also has this attribute\nconst EXCEL_ONLINE_ATTRIBUTE_VALUE = 'Excel.Sheet';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Excel Online documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isExcelOnlineDocument: GetSourceFunction = props => {\n    const { htmlAttributes } = props;\n    // The presence of Excel.Sheet confirms its origin from Excel, the absence of EXCEL_DESKTOP_ATTRIBUTE_NAME confirms it is from the Online version\n    return (\n        htmlAttributes[PastePropertyNames.PROG_ID_NAME] == EXCEL_ONLINE_ATTRIBUTE_VALUE &&\n        htmlAttributes[PastePropertyNames.EXCEL_DESKTOP_ATTRIBUTE_NAME] == undefined\n    );\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\n/**\n * @internal\n * Checks whether the fragment provided contain elements from Google sheets\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isGoogleSheetDocument: GetSourceFunction = props => {\n    const { fragment } = props;\n    return !!fragment.querySelector(PastePropertyNames.GOOGLE_SHEET_NODE_NAME);\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst ONE_NOTE_ATTRIBUTE_VALUE = 'OneNote.File';\n\n/**\n * @internal\n * Checks whether the provided HTML attributes identify a OneNote Desktop document\n * @param props Properties related to the PasteEvent\n * @returns True if the document is identified as a OneNote Desktop document, otherwise false\n */\nexport const isOneNoteDesktopDocument: GetSourceFunction = props => {\n    const { htmlAttributes } = props;\n    // The presence of this attribute confirms its origin from OneNote Desktop\n    return htmlAttributes[PastePropertyNames.PROG_ID_NAME] == ONE_NOTE_ATTRIBUTE_VALUE;\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst POWERPOINT_ATTRIBUTE_VALUE = 'PowerPoint.Slide';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Power Point Desktop documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isPowerPointDesktopDocument: GetSourceFunction = props => {\n    return props.htmlAttributes[PastePropertyNames.PROG_ID_NAME] == POWERPOINT_ATTRIBUTE_VALUE;\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\nconst WORD_PROG_ID = 'Word.Document';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Word Desktop documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isWordDesktopDocument: GetSourceFunction = props => {\n    const { htmlAttributes, clipboardData, environment } = props;\n\n    return (\n        htmlAttributes[WORD_ATTRIBUTE_NAME] == WORD_ATTRIBUTE_VALUE ||\n        htmlAttributes[PastePropertyNames.PROG_ID_NAME] == WORD_PROG_ID ||\n        // Safari removes the metadata from the clipboard html, so we need to do this check.\n        !!(\n            environment.isSafari &&\n            clipboardData.rawHtml &&\n            clipboardData.rawHtml\n                ?.replace(/ /g, '')\n                .indexOf(`${WORD_ATTRIBUTE_NAME}=\"${WORD_ATTRIBUTE_VALUE}`) > -1\n        )\n    );\n};\n","import type { GetSourceFunction } from './getPasteSource';\n\n/**\n * @internal\n * Checks whether the fragment only contains a single image to paste\n * and the editor have the ConvertSingleImageBody Experimental feature\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const shouldConvertToSingleImage: GetSourceFunction = props => {\n    const { shouldConvertSingleImage, clipboardData } = props;\n    return (\n        shouldConvertSingleImage &&\n        clipboardData.htmlFirstLevelChildTags?.length == 1 &&\n        clipboardData.htmlFirstLevelChildTags[0] == 'IMG'\n    );\n};\n","import { addSegment, createText, isNodeOfType, parseFormat } from 'roosterjs-content-model-dom';\nimport type {\n    ElementProcessor,\n    ContentModelBlockGroup,\n    DomToModelContext,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * This processor is used to process <button> elements in the DOM and convert them into Content Model.\n * It handles the button element by creating a text segment for each text node within the button.\n */\nexport const pasteButtonProcessor: ElementProcessor<HTMLButtonElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLButtonElement,\n    context: DomToModelContext\n): void => {\n    const format: ContentModelSegmentFormat = {};\n    parseFormat(element, context.formatParsers.segment, format, context);\n    // Recursively process text nodes in the button\n    processTextNodesRecursively(group, element, context, format);\n};\n\n/**\n * Helper function to recursively iterate through nodes and process text nodes\n */\nfunction processTextNodesRecursively(\n    group: ContentModelBlockGroup,\n    node: Node,\n    context: DomToModelContext,\n    format: ContentModelSegmentFormat\n): void {\n    if (node.nodeType === Node.TEXT_NODE) {\n        // Process text node directly\n        const text = createText(node.nodeValue || '', format);\n        addSegment(group, text);\n    } else if (isNodeOfType(node, 'ELEMENT_NODE')) {\n        const newFormat: ContentModelSegmentFormat = { ...format };\n        parseFormat(node, context.formatParsers.segment, newFormat, context);\n        // Recursively process all child nodes\n        for (let i = 0; i < node.childNodes.length; i++) {\n            processTextNodesRecursively(group, node.childNodes[i], context, newFormat);\n        }\n    }\n}\n","import type {\n    ContentModelFormatMap,\n    DomToModelOption,\n    FormatParser,\n    ElementFormatParserPerCategory,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addParser<TKey extends keyof ElementFormatParserPerCategory>(\n    domToModelOption: DomToModelOption,\n    entry: TKey,\n    additionalFormatParsers: FormatParser<ContentModelFormatMap[TKey]>\n) {\n    if (!domToModelOption.additionalFormatParsers) {\n        domToModelOption.additionalFormatParsers = {};\n    }\n    if (!domToModelOption.additionalFormatParsers[entry]) {\n        domToModelOption.additionalFormatParsers[entry] = [];\n    }\n\n    domToModelOption.additionalFormatParsers[entry]?.push(additionalFormatParsers);\n}\n","import type { ValueSanitizer } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Chain all callback for an style sanitizer\n * @param map The source callback map\n * @param name Name of the property to chain\n * @param newCallback A new callback to process the given name on the given map.\n */\nexport function chainSanitizerCallback(\n    map: Record<string, ValueSanitizer>,\n    name: string,\n    newCallback: ValueSanitizer\n) {\n    const finalCb =\n        typeof newCallback == 'function'\n            ? newCallback\n            : (value: string) => (newCallback ? value : null);\n    if (!map[name]) {\n        map[name] = finalCb;\n    } else {\n        const originalCallback = map[name];\n        map[name] = (value: string, tagName: string) => {\n            const og =\n                typeof originalCallback == 'function'\n                    ? originalCallback(value, tagName)\n                    : originalCallback\n                    ? value\n                    : false;\n            if (!og) {\n                return null;\n            } else {\n                return finalCb(og, tagName);\n            }\n        };\n    }\n}\n","import { removeNegativeTextIndentParser } from '../parsers/removeNegativeTextIndentParser';\nimport {\n    createListLevel,\n    parseFormat,\n    updateListMetadata,\n    createListItem,\n    addBlock,\n    isElementOfType,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DomToModelContext,\n    DomToModelListFormat,\n    ContentModelBlockGroup,\n    ContentModelListLevel,\n    ListMetadataFormat,\n    ContentModelListItem,\n    ContentModelListItemLevelFormat,\n    ContentModelListItemFormat,\n    FormatParser,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\nconst removeMargin = (format: ContentModelListItemFormat): void => {\n    delete format.marginLeft;\n};\n\n/**\n * @internal\n */\nexport function setupListFormat(\n    listType: 'OL' | 'UL',\n    element: HTMLElement,\n    context: DomToModelContext,\n    listDepth: number,\n    listFormat: DomToModelListFormat,\n    group: ContentModelBlockGroup,\n    additionalParsers: FormatParser<ContentModelListItemLevelFormat>[] = []\n) {\n    const newLevel: ContentModelListLevel = createListLevel(listType);\n    parseFormat(element, context.formatParsers.listLevel, newLevel.format, context);\n    parseFormat(element, additionalParsers.concat(removeMargin), newLevel.format, context);\n\n    // If the list format is in a different level, update the array so we get the new item\n    // To be in the same level as the provided level metadata.\n    if (listDepth > listFormat.levels.length) {\n        while (listDepth != listFormat.levels.length) {\n            listFormat.levels.push(newLevel);\n        }\n    } else {\n        listFormat.levels.splice(listDepth, listFormat.levels.length - 1);\n        listFormat.levels[listDepth - 1] = newLevel;\n    }\n\n    listFormat.listParent = group;\n}\n\n/**\n * @internal\n */\nexport function processAsListItem(\n    context: DomToModelContext,\n    element: HTMLElement,\n    group: ContentModelBlockGroup,\n    listFormatMetadata: ListMetadataFormat | undefined,\n    bulletElement: HTMLElement | undefined,\n    beforeProcessingChildren?: (listItem: ContentModelListItem) => void\n) {\n    const listFormat = context.listFormat;\n    const lastLevel = listFormat.levels[listFormat.levels.length - 1];\n    if (listFormatMetadata && lastLevel) {\n        updateListMetadata(lastLevel, metadata => Object.assign({}, metadata, listFormatMetadata));\n    }\n\n    const listItem = createListItem(listFormat.levels, context.segmentFormat);\n\n    parseFormat(element, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n    parseFormat(element, context.formatParsers.listItemElement, listItem.format, context);\n    parseFormat(\n        element,\n        [removeNegativeTextIndentParser, nonListElementParser],\n        listItem.format,\n        context\n    );\n    if (bulletElement) {\n        const format: ContentModelSegmentFormat = { ...context.segmentFormat };\n        parseFormat(bulletElement, context.formatParsers.segmentOnBlock, format, context);\n        listItem.formatHolder.format = format;\n    }\n\n    beforeProcessingChildren?.(listItem);\n\n    context.elementProcessors.child(listItem, element, context);\n    addBlock(group, listItem);\n}\n\nconst nonListElementParser: FormatParser<ContentModelListItemFormat> = (\n    format,\n    element,\n    _context,\n    defaultStyle\n): void => {\n    if (!isElementOfType(element, 'li')) {\n        Object.keys(defaultStyle).forEach(keyInput => {\n            const key = keyInput as keyof CSSStyleDeclaration;\n            const formatKey = keyInput as keyof ContentModelListItemFormat;\n            if (\n                key != 'display' &&\n                format[formatKey] != undefined &&\n                format[formatKey] == defaultStyle[key]\n            ) {\n                delete format[formatKey];\n            }\n        });\n    }\n};\n","/**\n * @internal\n * Get CSS styles of a given element in name-value pair format\n * @param element The element to get styles from\n */\nexport function getStyles(element: HTMLElement): Record<string, string> {\n    const result: Record<string, string> = {};\n    const style = element?.getAttribute('style') || '';\n    style.split(';').forEach(pair => {\n        const valueIndex = pair.indexOf(':');\n        const name = pair.slice(0, valueIndex);\n        const value = pair.slice(valueIndex + 1);\n        if (name && value) {\n            result[name.trim()] = value.trim();\n        }\n    });\n    return result;\n}\n","import type { DomToModelOption, ElementProcessorMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setProcessor<TKey extends keyof ElementProcessorMap>(\n    domToModelOption: DomToModelOption,\n    entry: TKey,\n    processorOverride: Partial<ElementProcessorMap>[TKey]\n) {\n    if (!domToModelOption.processorOverride) {\n        domToModelOption.processorOverride = {};\n    }\n\n    domToModelOption.processorOverride[entry] = processorOverride;\n}\n","import { formatTextSegmentBeforeSelectionMarker } from 'roosterjs-content-model-api';\nimport { getQueryString } from './getQueryString';\nimport { mergeModel } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelDocument,\n    ContentModelText,\n    FormatContentModelOptions,\n    IEditor,\n} from 'roosterjs-content-model-types';\nimport type { PickerDirection, PickerHandler } from './PickerHandler';\nimport type { PickerHelper } from './PickerHelper';\n\n/**\n * @internal\n */\nexport class PickerHelperImpl implements PickerHelper {\n    public direction: PickerDirection | null = null;\n\n    constructor(\n        public readonly editor: IEditor,\n        public readonly handler: PickerHandler,\n        private triggerCharacter: string\n    ) {}\n\n    /**\n     * Replace the query string with a given Content Model.\n     * This is used for commit a change from picker and insert the committed content into editor.\n     * @param model The Content Model to insert\n     * @param options Options for formatting content model\n     * @param canUndoByBackspace Whether this change can be undone using Backspace key\n     */\n    replaceQueryString(\n        model: ContentModelDocument,\n        options?: FormatContentModelOptions,\n        canUndoByBackspace?: boolean\n    ): void {\n        this.editor.focus();\n\n        formatTextSegmentBeforeSelectionMarker(\n            this.editor,\n            (target, previousSegment, paragraph, _, context) => {\n                const potentialSegments: ContentModelText[] = [];\n                const queryString = getQueryString(\n                    this.triggerCharacter,\n                    paragraph,\n                    previousSegment,\n                    potentialSegments\n                );\n\n                if (queryString) {\n                    potentialSegments.forEach(x => (x.isSelected = true));\n                    mergeModel(target, model, context);\n                    context.canUndoByBackspace = canUndoByBackspace;\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            options\n        );\n    }\n\n    /**\n     * Notify Picker Plugin that picker is closed from the handler code, so picker plugin can quit the suggesting state\n     */\n    closePicker() {\n        if (this.direction) {\n            this.direction = null;\n            this.handler.onClosePicker?.();\n        }\n    }\n}\n","import { ChangeSource, isCursorMovingKey, isPunctuation } from 'roosterjs-content-model-dom';\nimport { formatTextSegmentBeforeSelectionMarker } from 'roosterjs-content-model-api';\nimport { getQueryString } from './getQueryString';\nimport { PickerHelperImpl } from './PickerHelperImpl';\nimport type { PickerHandler } from './PickerHandler';\nimport type {\n    DOMInsertPoint,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n} from 'roosterjs-content-model-types';\n\n/**\n * PickerPlugin represents a plugin of editor which can handle picker related behaviors, including\n * - Show picker when special trigger key is pressed\n * - Hide picker\n * - Change selection in picker by Up/Down/Left/Right\n * - Apply selected item in picker\n *\n * PickerPlugin doesn't provide any UI, it just wraps related DOM events and invoke callback functions.\n */\nexport class PickerPlugin implements EditorPlugin {\n    private isMac: boolean = false;\n    private lastQueryString = '';\n    private helper: PickerHelperImpl | null = null;\n\n    /**\n     * Construct a new instance of PickerPlugin class\n     * @param triggerCharacter The character to trigger a picker to be shown\n     * @param handler Picker handler for receiving picker state change events\n     */\n    constructor(private triggerCharacter: string, private readonly handler: PickerHandler) {}\n\n    /**\n     * Get a friendly name\n     */\n    getName() {\n        return 'Picker';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.isMac = !!editor.getEnvironment().isMac;\n        this.helper = new PickerHelperImpl(editor, this.handler, this.triggerCharacter);\n        this.handler.onInitialize(this.helper);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.handler.onDispose();\n        this.helper = null;\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * Handle an event exclusively means other plugin will not receive this event in\n     * onPluginEvent method.\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\n     * the final result depends on the order of the plugins are added into editor\n     * @param event The event to check\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        return (\n            !!this.helper?.direction &&\n            event.eventType == 'keyDown' &&\n            (isCursorMovingKey(event.rawEvent) ||\n                event.rawEvent.key == 'Enter' ||\n                event.rawEvent.key == 'Tab' ||\n                event.rawEvent.key == 'Escape')\n        );\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.helper) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case 'contentChanged':\n                if (this.helper.direction) {\n                    if (event.source == ChangeSource.SetContent) {\n                        this.helper.closePicker();\n                    } else {\n                        this.onSuggestingInput(this.helper);\n                    }\n                }\n                break;\n\n            case 'keyDown':\n                if (this.helper.direction) {\n                    this.onSuggestingKeyDown(this.helper, event.rawEvent);\n                }\n                break;\n\n            case 'input':\n                if (this.helper.direction) {\n                    this.onSuggestingInput(this.helper);\n                } else {\n                    this.onInput(this.helper, event.rawEvent);\n                }\n                break;\n\n            case 'mouseUp':\n                if (this.helper.direction) {\n                    this.helper.closePicker();\n                }\n                break;\n        }\n    }\n\n    private onSuggestingKeyDown(helper: PickerHelperImpl, event: KeyboardEvent) {\n        switch (event.key) {\n            case 'ArrowLeft':\n            case 'ArrowRight':\n                if (helper.direction == 'horizontal' || helper.direction == 'both') {\n                    let isIncrement = event.key == 'ArrowRight';\n\n                    if (helper.editor.getDOMHelper().isRightToLeft()) {\n                        isIncrement = !isIncrement;\n                    }\n\n                    this.handler.onSelectionChanged?.(isIncrement ? 'next' : 'previous');\n                }\n\n                event.preventDefault();\n                break;\n            case 'ArrowUp':\n            case 'ArrowDown':\n                {\n                    const isIncrement = event.key == 'ArrowDown';\n\n                    if (helper.direction != 'horizontal') {\n                        this.handler.onSelectionChanged?.(\n                            helper.direction == 'both'\n                                ? isIncrement\n                                    ? 'nextRow'\n                                    : 'previousRow'\n                                : isIncrement\n                                ? 'next'\n                                : 'previous'\n                        );\n                    }\n                }\n\n                event.preventDefault();\n                break;\n            case 'PageUp':\n            case 'PageDown':\n                this.handler.onSelectionChanged?.(\n                    event.key == 'PageDown' ? 'nextPage' : 'previousPage'\n                );\n\n                event.preventDefault();\n                break;\n            case 'Home':\n            case 'End':\n                const hasCtrl = this.isMac ? event.metaKey : event.ctrlKey;\n                this.handler.onSelectionChanged?.(\n                    event.key == 'Home'\n                        ? hasCtrl\n                            ? 'first'\n                            : 'firstInRow'\n                        : hasCtrl\n                        ? 'last'\n                        : 'lastInRow'\n                );\n\n                event.preventDefault();\n                break;\n            case 'Escape':\n                helper.closePicker();\n                event.preventDefault();\n                break;\n\n            case 'Enter':\n            case 'Tab':\n                this.handler.onSelect?.();\n                event.preventDefault();\n                break;\n        }\n    }\n\n    private onSuggestingInput(helper: PickerHelperImpl) {\n        if (\n            !formatTextSegmentBeforeSelectionMarker(helper.editor, (_, segment, paragraph) => {\n                const newQueryString = getQueryString(\n                    this.triggerCharacter,\n                    paragraph,\n                    segment\n                ).replace(/[\\u0020\\u00A0]/g, ' ');\n                const oldQueryString = this.lastQueryString;\n\n                if (\n                    newQueryString &&\n                    ((newQueryString.length >= oldQueryString.length &&\n                        newQueryString.indexOf(oldQueryString) == 0) ||\n                        (newQueryString.length < oldQueryString.length &&\n                            oldQueryString.indexOf(newQueryString) == 0))\n                ) {\n                    this.lastQueryString = newQueryString;\n                    this.handler.onQueryStringChanged?.(newQueryString);\n                } else {\n                    helper.closePicker();\n                }\n\n                return false;\n            })\n        ) {\n            helper.closePicker();\n        }\n    }\n\n    private onInput(helper: PickerHelperImpl, event: InputEvent) {\n        if (event.inputType == 'insertText' && event.data == this.triggerCharacter) {\n            formatTextSegmentBeforeSelectionMarker(helper.editor, (_, segment) => {\n                if (segment.text.endsWith(this.triggerCharacter)) {\n                    const charBeforeTrigger = segment.text[segment.text.length - 2];\n\n                    if (\n                        !charBeforeTrigger ||\n                        !charBeforeTrigger.trim() ||\n                        isPunctuation(charBeforeTrigger)\n                    ) {\n                        const selection = helper.editor.getDOMSelection();\n                        const pos: DOMInsertPoint | null =\n                            selection?.type == 'range' && selection.range.collapsed\n                                ? {\n                                      node: selection.range.startContainer,\n                                      offset: selection.range.startOffset,\n                                  }\n                                : null;\n\n                        if (pos) {\n                            this.lastQueryString = this.triggerCharacter;\n                            helper.direction = this.handler.onTrigger(this.lastQueryString, pos);\n                        }\n                    }\n                }\n\n                return false;\n            });\n        }\n    }\n}\n","import { splitTextSegment } from 'roosterjs-content-model-api';\nimport type {\n    ContentModelText,\n    ShallowMutableContentModelParagraph,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function getQueryString(\n    triggerCharacter: string,\n    paragraph: ShallowMutableContentModelParagraph,\n    previousSegment: ContentModelText,\n    splittedSegmentResult?: ContentModelText[]\n): string {\n    let result = '';\n    let i = paragraph.segments.indexOf(previousSegment);\n\n    for (; i >= 0; i--) {\n        const segment = paragraph.segments[i];\n\n        if (segment.segmentType != 'Text') {\n            result = '';\n            break;\n        }\n\n        const index = segment.text.lastIndexOf(triggerCharacter);\n\n        if (index >= 0) {\n            result = segment.text.substring(index) + result;\n\n            splittedSegmentResult?.unshift(\n                index > 0\n                    ? splitTextSegment(segment, paragraph, index, segment.text.length)\n                    : segment\n            );\n\n            break;\n        } else {\n            result = segment.text + result;\n\n            splittedSegmentResult?.unshift(segment);\n        }\n    }\n\n    if (i < 0) {\n        result = '';\n    }\n\n    return result;\n}\n","import { getObjectKeys, isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { CreateElementData } from './CreateElementData';\n\n/**\n * @internal\n * Create DOM element from the given CreateElementData\n * @param elementData The CreateElementData or an index of a known CreateElementData used for creating this element\n * @param document The document to create the element from\n * @returns The root DOM element just created\n */\nexport function createElement(elementData: CreateElementData, document: Document): Element | null {\n    if (!elementData || !elementData.tag) {\n        return null;\n    }\n\n    const { tag, namespace, className, style, dataset, attributes, children } = elementData;\n    const result = namespace\n        ? document.createElementNS(namespace, tag)\n        : document.createElement(tag);\n\n    if (style) {\n        result.setAttribute('style', style);\n    }\n\n    if (className) {\n        result.className = className;\n    }\n\n    if (dataset && isNodeOfType(result, 'ELEMENT_NODE')) {\n        getObjectKeys(dataset).forEach(datasetName => {\n            result.dataset[datasetName] = dataset[datasetName];\n        });\n    }\n\n    if (attributes) {\n        getObjectKeys(attributes).forEach(attrName => {\n            result.setAttribute(attrName, attributes[attrName]);\n        });\n    }\n\n    if (children) {\n        children.forEach(child => {\n            if (typeof child === 'string') {\n                result.appendChild(document.createTextNode(child));\n            } else if (child) {\n                const childElement = createElement(child, document);\n                if (childElement) {\n                    result.appendChild(childElement);\n                }\n            }\n        });\n    }\n\n    return result;\n}\n","import type { Disposable } from '../Disposable';\nimport type { DragAndDropHandler } from './DragAndDropHandler';\n\n/**\n * @internal\n */\ninterface MouseEventMoves {\n    MOUSEDOWN: string;\n    MOUSEMOVE: string;\n    MOUSEUP: string;\n}\n\n/**\n * @internal\n */\ninterface MouseEventInfo extends MouseEventMoves {\n    getPageXY: (e: MouseEvent) => number[];\n}\n\n/**\n * @internal\n * Compatible mouse event names for different platform\n */\ninterface TouchEventInfo extends MouseEventMoves {\n    getPageXY: (e: TouchEvent) => number[];\n}\n\n/**\n * Generate event names and getXY function based on different platforms to be compatible with desktop and mobile browsers\n */\nconst MOUSE_EVENT_INFO_DESKTOP: MouseEventInfo = (() => {\n    return {\n        MOUSEDOWN: 'mousedown',\n        MOUSEMOVE: 'mousemove',\n        MOUSEUP: 'mouseup',\n        getPageXY: getMouseEventPageXY,\n    };\n})();\n\nconst MOUSE_EVENT_INFO_MOBILE: TouchEventInfo = (() => {\n    return {\n        MOUSEDOWN: 'touchstart',\n        MOUSEMOVE: 'touchmove',\n        MOUSEUP: 'touchend',\n        getPageXY: getTouchEventPageXY,\n    };\n})();\n\nfunction getMouseEventPageXY(e: MouseEvent): [number, number] {\n    return [e.pageX, e.pageY];\n}\n\nfunction getTouchEventPageXY(e: TouchEvent): [number, number] {\n    let pageX = 0;\n    let pageY = 0;\n    if (e.targetTouches && e.targetTouches.length > 0) {\n        const touch = e.targetTouches[0];\n        pageX = touch.pageX;\n        pageY = touch.pageY;\n    }\n    return [pageX, pageY];\n}\n\n/**\n * @internal\n * A helper class to help manage drag and drop to an HTML element\n */\nexport class DragAndDropHelper<TContext, TInitValue> implements Disposable {\n    private initX: number = 0;\n    private initY: number = 0;\n    private initValue: TInitValue | undefined = undefined;\n    private dndMouse: MouseEventInfo | TouchEventInfo;\n\n    /**\n     * Create a new instance of DragAndDropHelper class\n     * @param trigger The trigger element. When user start drag on this element,\n     * events will be fired to the handler object\n     * @param context Context object that will be passed to handler function when event is fired,\n     * so that the handler object knows which element it is triggered from.\n     * @param onSubmit A callback that will be invoked when event handler in handler object returns true\n     * @param handler The event handler object, see DragAndDropHandler interface for more information\n     * @param zoomScale The zoom scale of the editor\n     * @param forceMobile A boolean to force the use of touch controls for the helper\n     */\n    constructor(\n        private trigger: HTMLElement,\n        private context: TContext,\n        private onSubmit: (context: TContext, trigger: HTMLElement) => void,\n        private handler: DragAndDropHandler<TContext, TInitValue>,\n        private zoomScale: number,\n        forceMobile?: boolean\n    ) {\n        this.dndMouse = forceMobile ? MOUSE_EVENT_INFO_MOBILE : MOUSE_EVENT_INFO_DESKTOP;\n        trigger.addEventListener(this.dndMouse.MOUSEDOWN, this.onMouseDown);\n    }\n\n    /**\n     * Dispose this object, remove all event listeners that has been attached\n     */\n    dispose() {\n        this.trigger.removeEventListener(this.dndMouse.MOUSEDOWN, this.onMouseDown);\n        this.removeDocumentEvents();\n    }\n\n    public get mouseType(): string {\n        return this.dndMouse == MOUSE_EVENT_INFO_MOBILE ? 'touch' : 'mouse';\n    }\n\n    private addDocumentEvents() {\n        const doc = this.trigger.ownerDocument;\n        doc.addEventListener(this.dndMouse.MOUSEMOVE, this.onMouseMove, true /*useCapture*/);\n        doc.addEventListener(this.dndMouse.MOUSEUP, this.onMouseUp, true /*useCapture*/);\n    }\n\n    private removeDocumentEvents() {\n        const doc = this.trigger.ownerDocument;\n        doc.removeEventListener(this.dndMouse.MOUSEMOVE, this.onMouseMove, true /*useCapture*/);\n        doc.removeEventListener(this.dndMouse.MOUSEUP, this.onMouseUp, true /*useCapture*/);\n    }\n\n    private onMouseDown = (e: Event) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.addDocumentEvents();\n        [this.initX, this.initY] = this.dndMouse.getPageXY(e as MouseEvent & TouchEvent);\n        this.initValue = this.handler.onDragStart?.(this.context, e as MouseEvent);\n    };\n\n    private onMouseMove = (e: Event) => {\n        e.preventDefault();\n        const [pageX, pageY] = this.dndMouse.getPageXY(e as MouseEvent & TouchEvent);\n        const deltaX = (pageX - this.initX) / this.zoomScale;\n        const deltaY = (pageY - this.initY) / this.zoomScale;\n        if (\n            this.initValue &&\n            this.handler.onDragging?.(this.context, e as MouseEvent, this.initValue, deltaX, deltaY)\n        ) {\n            this.onSubmit?.(this.context, this.trigger);\n        }\n    };\n\n    private onMouseUp = (e: Event) => {\n        e.preventDefault();\n        this.removeDocumentEvents();\n        if (this.handler.onDragEnd?.(this.context, e as MouseEvent, this.initValue)) {\n            this.onSubmit?.(this.context, this.trigger);\n        }\n    };\n}\n","import { normalizeRect } from 'roosterjs-content-model-dom';\nimport type { Rect } from 'roosterjs-content-model-types';\n\n/**\n * Get the intersected Rect of elements provided\n *\n * @example\n * The result of the following Elements Rects would be:\n    {\n        top: Element2.top,\n        bottom: Element1.bottom,\n        left: Element2.left,\n        right: Element2.right\n    }\n    +-------------------------+\n    | Element 1               |\n    |   +-----------------+   |\n    |   | Element2        |   |\n    |   |                 |   |\n    |   |                 |   |\n    +-------------------------+\n        |                 |\n        +-----------------+\n * @internal\n * @param elements Elements to use.\n * @param additionalRects additional rects to use\n * @returns If the Rect is valid return the rect, if not, return null.\n */\nexport function getIntersectedRect(\n    elements: HTMLElement[],\n    additionalRects: Rect[] = []\n): Rect | null {\n    const rects = elements\n        .map(element => normalizeRect(element.getBoundingClientRect()))\n        .concat(additionalRects)\n        .filter(element => !!element) as Rect[];\n\n    const result: Rect = {\n        top: Math.max(...rects.map(r => r.top)),\n        bottom: Math.min(...rects.map(r => r.bottom)),\n        left: Math.max(...rects.map(r => r.left)),\n        right: Math.min(...rects.map(r => r.right)),\n    };\n\n    return result.top < result.bottom && result.left < result.right ? result : null;\n}\n","import { cacheGetEventData } from 'roosterjs-content-model-dom';\nimport type { ShortcutCommand, ShortcutKeyDefinition } from './ShortcutCommand';\nimport {\n    ShortcutBold,\n    ShortcutBullet,\n    ShortcutClearFormat,\n    ShortcutDecreaseFont,\n    ShortcutIncreaseFont,\n    ShortcutIndentList,\n    ShortcutItalic,\n    ShortcutNumbering,\n    ShortcutOutdentList,\n    ShortcutRedo,\n    ShortcutRedoAlt,\n    ShortcutRedoMacOS,\n    ShortcutUnderline,\n    ShortcutUndo,\n    ShortcutUndo2,\n} from './shortcuts';\nimport type {\n    EditorPlugin,\n    IEditor,\n    KeyDownEvent,\n    PluginEvent,\n} from 'roosterjs-content-model-types';\n\nconst defaultShortcuts: ShortcutCommand[] = [\n    ShortcutBold,\n    ShortcutItalic,\n    ShortcutUnderline,\n    ShortcutClearFormat,\n    ShortcutUndo,\n    ShortcutUndo2,\n    ShortcutRedo,\n    ShortcutRedoAlt,\n    ShortcutRedoMacOS,\n    ShortcutBullet,\n    ShortcutNumbering,\n    ShortcutIncreaseFont,\n    ShortcutDecreaseFont,\n    ShortcutIndentList,\n    ShortcutOutdentList,\n];\nconst CommandCacheKey = '__ShortcutCommandCache';\n\n/**\n * Shortcut plugin hook on the specified shortcut keys and trigger related format API\n */\nexport class ShortcutPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private isMac = false;\n\n    /**\n     * Create a new instance of ShortcutPlugin\n     * @param [shortcuts=defaultShortcuts] Allowed commands\n     */\n    constructor(private shortcuts: ShortcutCommand[] = defaultShortcuts) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'Shortcut';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.isMac = !!this.editor.getEnvironment().isMac;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * Handle an event exclusively means other plugin will not receive this event in\n     * onPluginEvent method.\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\n     * the final result depends on the order of the plugins are added into editor\n     * @param event The event to check:\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        return (\n            event.eventType == 'keyDown' &&\n            (event.rawEvent.ctrlKey || event.rawEvent.altKey || event.rawEvent.metaKey) &&\n            !!this.cacheGetCommand(event)\n        );\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor && event.eventType == 'keyDown') {\n            const command = this.cacheGetCommand(event);\n\n            if (command) {\n                command.onClick(this.editor);\n                event.rawEvent.preventDefault();\n            }\n        }\n    }\n\n    private cacheGetCommand(event: KeyDownEvent) {\n        return cacheGetEventData(event, CommandCacheKey, event => {\n            const editor = this.editor;\n            const { ctrlKey, metaKey } = event.rawEvent;\n            if (ctrlKey && metaKey) {\n                // We don't support both Ctrl and Meta key pressed at the same time.\n                return null;\n            }\n            return (\n                editor &&\n                this.shortcuts.filter(\n                    command =>\n                        this.matchOS(command.environment) &&\n                        this.matchShortcut(command.shortcutKey, event.rawEvent)\n                )[0]\n            );\n        });\n    }\n\n    private matchOS(environment?: 'all' | 'mac' | 'nonMac') {\n        switch (environment) {\n            case 'mac':\n                return this.isMac;\n\n            case 'nonMac':\n                return !this.isMac;\n\n            default:\n                return true;\n        }\n    }\n\n    private matchShortcut(shortcutKey: ShortcutKeyDefinition, event: KeyboardEvent) {\n        const { ctrlKey, altKey, shiftKey, which, metaKey } = event;\n        const ctrlOrMeta = this.isMac ? metaKey : ctrlKey;\n        const matchModifier =\n            (shortcutKey.modifierKey == 'ctrl' && ctrlOrMeta && !altKey) ||\n            (shortcutKey.modifierKey == 'alt' && altKey && !ctrlOrMeta);\n\n        return matchModifier && shiftKey == shortcutKey.shiftKey && shortcutKey.which == which;\n    }\n}\n","import { redo, undo } from 'roosterjs-content-model-core';\nimport { setShortcutIndentationCommand } from './utils/setShortcutIndentationCommand';\nimport {\n    changeFontSize,\n    clearFormat,\n    toggleBold,\n    toggleBullet,\n    toggleItalic,\n    toggleNumbering,\n    toggleUnderline,\n} from 'roosterjs-content-model-api';\nimport type { ShortcutCommand } from './ShortcutCommand';\n\nconst enum Keys {\n    BACKSPACE = 8,\n    SPACE = 32,\n    B = 66,\n    I = 73,\n    U = 85,\n    Y = 89,\n    Z = 90,\n    COMMA = 188,\n    PERIOD = 190,\n    FORWARD_SLASH = 191,\n    ArrowRight = 39,\n    ArrowLeft = 37,\n}\n\n/**\n * Shortcut command for Bold\n * Windows: Ctrl + B\n * MacOS: Meta + B\n */\nexport const ShortcutBold: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.B,\n    },\n    onClick: editor => toggleBold(editor),\n};\n\n/**\n * Shortcut command for Italic\n * Windows: Ctrl + I\n * MacOS: Meta + I\n */\nexport const ShortcutItalic: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.I,\n    },\n    onClick: editor => toggleItalic(editor),\n};\n\n/**\n * Shortcut command for Underline\n * Windows: Ctrl + U\n * MacOS: Meta + U\n */\nexport const ShortcutUnderline: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.U,\n    },\n    onClick: editor => toggleUnderline(editor),\n};\n\n/**\n * Shortcut command for Clear Format\n * Windows: Ctrl + Space\n * MacOS: Meta + Space, this shortcut is the same as the default global spotlight shortcut, so it is invalid if the user keeps spotlight‘s.\n */\nexport const ShortcutClearFormat: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.SPACE,\n    },\n    onClick: editor => clearFormat(editor),\n};\n\n/**\n * Shortcut command for Undo 1\n * Windows: Ctrl + Z\n * MacOS: Meta + Z\n */\nexport const ShortcutUndo: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.Z,\n    },\n    onClick: editor => undo(editor),\n};\n\n/**\n * Shortcut command for Undo 2\n * Windows: Alt + Backspace\n * MacOS: N/A\n */\nexport const ShortcutUndo2: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'alt',\n        shiftKey: false,\n        which: Keys.BACKSPACE,\n    },\n    onClick: editor => undo(editor),\n    environment: 'nonMac',\n};\n\n/**\n * Shortcut command for Redo 1\n * Windows: Ctrl + Y\n * MacOS: N/A\n */\nexport const ShortcutRedo: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.Y,\n    },\n    onClick: editor => redo(editor),\n    environment: 'nonMac',\n};\n\n/**\n * @deprecated\n * Shortcut command for Redo 2\n * Windows: N/A\n * MacOS: Meta + Shift + Z\n */\nexport const ShortcutRedoMacOS: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: true,\n        which: Keys.Z,\n    },\n    onClick: editor => redo(editor),\n    environment: 'mac',\n};\n\n/**\n * Shortcut command for Redo 3\n * Windows: Ctrl + Shift + Z\n * MacOS: Meta + Shift + Z\n */\nexport const ShortcutRedoAlt: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: true,\n        which: Keys.Z,\n    },\n    onClick: editor => redo(editor),\n};\n\n/**\n * Shortcut command for Bullet List\n * Windows: Ctrl + . (Period)\n * MacOS: Meta + . (Period)\n */\nexport const ShortcutBullet: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.PERIOD,\n    },\n    onClick: editor => toggleBullet(editor),\n};\n\n/**\n * Shortcut command for Numbering List\n * Windows: Ctrl + / (Forward slash)\n * MacOS: Meta + / (Forward slash)\n */\nexport const ShortcutNumbering: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: false,\n        which: Keys.FORWARD_SLASH,\n    },\n    onClick: editor => toggleNumbering(editor),\n};\n\n/**\n * Shortcut command for Increase Font\n * Windows: Ctrl + Shift + . (Period)\n * MacOS: Meta + Shift + . (Period)\n */\nexport const ShortcutIncreaseFont: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: true,\n        which: Keys.PERIOD,\n    },\n    onClick: editor => changeFontSize(editor, 'increase'),\n};\n\n/**\n * Shortcut command for Decrease Font\n * Windows: Ctrl + Shift + , (Comma)\n * MacOS: Meta + Shift + , (Comma)\n */\nexport const ShortcutDecreaseFont: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'ctrl',\n        shiftKey: true,\n        which: Keys.COMMA,\n    },\n    onClick: editor => changeFontSize(editor, 'decrease'),\n};\n\n/**\n * Shortcut command for Intent list\n * Windows: Alt + Shift + Arrow Right\n * MacOS: N/A\n */\nexport const ShortcutIndentList: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'alt',\n        shiftKey: true,\n        which: Keys.ArrowRight,\n    },\n    onClick: editor => {\n        setShortcutIndentationCommand(editor, 'indent');\n    },\n    environment: 'nonMac',\n};\n\n/**\n * Shortcut command for Outdent list\n * Windows: Alt + Shift + Arrow Left\n * MacOS: N/A\n */\nexport const ShortcutOutdentList: ShortcutCommand = {\n    shortcutKey: {\n        modifierKey: 'alt',\n        shiftKey: true,\n        which: Keys.ArrowLeft,\n    },\n    onClick: editor => {\n        setShortcutIndentationCommand(editor, 'outdent');\n    },\n    environment: 'nonMac',\n};\n","import { getFirstSelectedListItem } from 'roosterjs-content-model-dom';\nimport { setModelIndentation } from 'roosterjs-content-model-api';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setShortcutIndentationCommand(editor: IEditor, operation: 'indent' | 'outdent') {\n    editor.formatContentModel((model, context) => {\n        const listItem = getFirstSelectedListItem(model);\n\n        if (\n            listItem &&\n            listItem.blocks[0].blockType == 'Paragraph' &&\n            listItem.blocks[0].segments[0].segmentType == 'SelectionMarker'\n        ) {\n            setModelIndentation(model, operation, undefined /*length*/, context);\n            return true;\n        }\n        return false;\n    });\n}\n","import { isNodeOfType, normalizeRect } from 'roosterjs-content-model-dom';\nimport { TableEditor } from './editors/TableEditor';\nimport type { TableWithRoot } from './TableWithRoot';\nimport type { TableEditFeatureName } from './editors/features/TableEditFeatureName';\nimport type { OnTableEditorCreatedCallback } from './OnTableEditorCreatedCallback';\nimport type {\n    DOMHelper,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    Rect,\n} from 'roosterjs-content-model-types';\n\nconst TABLE_RESIZER_LENGTH = 12;\n\n/**\n * TableEdit plugin, provides the ability to resize a table by drag-and-drop\n */\nexport class TableEditPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private onMouseMoveDisposer: (() => void) | null = null;\n    private tableRectMap: (TableWithRoot & { rect: Rect })[] | null = null;\n    private tableEditor: TableEditor | null = null;\n\n    /**\n     * Construct a new instance of TableResize plugin\n     * @param anchorContainerSelector An optional selector string to specify the container to host the plugin.\n     * The container must not be affected by transform: scale(), otherwise the position calculation will be wrong.\n     * If not specified, the plugin will be inserted in document.body\n     * @param onTableEditorCreated An optional callback to customize the Table Editors elements when created.\n     * @param disableFeatures An optional array of TableEditFeatures to disable\n     * @param tableSelector A function to select the tables to be edited. By default, it selects all contentEditable tables.\n     */\n    constructor(\n        private anchorContainerSelector?: string,\n        private onTableEditorCreated?: OnTableEditorCreatedCallback,\n        private disableFeatures?: TableEditFeatureName[],\n        private tableSelector: (domHelper: DOMHelper) => TableWithRoot[] = defaultTableSelector\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'TableEdit';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.onMouseMoveDisposer = this.editor.attachDomEvent({\n            mousemove: { beforeDispatch: this.onMouseMove },\n        });\n        const scrollContainer = this.editor.getScrollContainer();\n        scrollContainer.addEventListener('mouseout', this.onMouseOut);\n    }\n\n    private onMouseOut = ({ relatedTarget, currentTarget }: MouseEvent) => {\n        const relatedTargetNode = relatedTarget as Node;\n        const currentTargetNode = currentTarget as Node;\n        if (\n            isNodeOfType(relatedTargetNode, 'ELEMENT_NODE') &&\n            isNodeOfType(currentTargetNode, 'ELEMENT_NODE') &&\n            this.tableEditor &&\n            !this.tableEditor.isOwnedElement(relatedTargetNode) &&\n            !currentTargetNode.contains(relatedTargetNode)\n        ) {\n            this.setTableEditor(null);\n        }\n    };\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        const scrollContainer = this.editor?.getScrollContainer();\n        scrollContainer?.removeEventListener('mouseout', this.onMouseOut);\n        this.onMouseMoveDisposer?.();\n        this.invalidateTableRects();\n        this.disposeTableEditor();\n        this.editor = null;\n        this.onMouseMoveDisposer = null;\n        this.onTableEditorCreated = undefined;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(e: PluginEvent) {\n        switch (e.eventType) {\n            case 'input':\n            case 'contentChanged':\n            case 'scroll':\n            case 'zoomChanged':\n                this.setTableEditor(null);\n                this.invalidateTableRects();\n                break;\n        }\n    }\n\n    private onMouseMove = (event: Event) => {\n        const e = event as MouseEvent;\n\n        if (e.buttons > 0 || !this.editor) {\n            return;\n        }\n\n        this.ensureTableRects();\n\n        const editorWindow = this.editor.getDocument().defaultView || window;\n        const x = e.pageX - editorWindow.scrollX;\n        const y = e.pageY - editorWindow.scrollY;\n        let currentTable: TableWithRoot | null = null;\n\n        //Find table in range of mouse\n        if (this.tableRectMap) {\n            for (let i = this.tableRectMap.length - 1; i >= 0; i--) {\n                const entry = this.tableRectMap[i];\n                const { rect } = entry;\n\n                if (\n                    x >= rect.left - TABLE_RESIZER_LENGTH &&\n                    x <= rect.right + TABLE_RESIZER_LENGTH &&\n                    y >= rect.top - TABLE_RESIZER_LENGTH &&\n                    y <= rect.bottom + TABLE_RESIZER_LENGTH\n                ) {\n                    currentTable = entry;\n                    break;\n                }\n            }\n        }\n\n        this.setTableEditor(currentTable, e);\n        this.tableEditor?.onMouseMove(x, y);\n    };\n\n    /**\n     * @internal Public only for unit test\n     * @param entry Table to use when setting the Editors\n     * @param event (Optional) Mouse event\n     */\n    public setTableEditor(entry: TableWithRoot | null, event?: MouseEvent) {\n        if (\n            this.tableEditor &&\n            !this.tableEditor.isEditing() &&\n            entry?.table != this.tableEditor.table\n        ) {\n            this.disposeTableEditor();\n        }\n\n        if (!this.tableEditor && entry && this.editor && entry.table.rows.length > 0) {\n            // anchorContainerSelector is used to specify the container to host the plugin, which can be outside of the editor's div\n            const container = this.anchorContainerSelector\n                ? this.editor.getDocument().querySelector(this.anchorContainerSelector)\n                : undefined;\n\n            this.tableEditor = new TableEditor(\n                this.editor,\n                entry.table,\n                entry.logicalRoot,\n                this.invalidateTableRects,\n                isNodeOfType(container, 'ELEMENT_NODE') ? container : undefined,\n                event?.currentTarget,\n                this.onTableEditorCreated,\n                this.disableFeatures\n            );\n        }\n    }\n\n    private invalidateTableRects = () => {\n        this.tableRectMap = null;\n    };\n\n    private disposeTableEditor() {\n        this.tableEditor?.dispose();\n        this.tableEditor = null;\n    }\n\n    private ensureTableRects() {\n        if (!this.tableRectMap && this.editor) {\n            this.tableRectMap = [];\n\n            const tables = this.tableSelector(this.editor.getDOMHelper());\n            tables.forEach(table => {\n                const rect = normalizeRect(table.table.getBoundingClientRect());\n\n                if (rect && this.tableRectMap) {\n                    this.tableRectMap.push({\n                        ...table,\n                        rect,\n                    });\n                }\n            });\n        }\n    }\n}\n\nfunction defaultTableSelector(domHelper: DOMHelper): TableWithRoot[] {\n    return domHelper\n        .queryElements('table')\n        .filter(table => table.isContentEditable)\n        .map(table => ({\n            table,\n            logicalRoot: null,\n        }));\n}\n","import { createCellResizer } from './features/CellResizer';\nimport { createTableInserter } from './features/TableInserter';\nimport { createTableMover } from './features/TableMover';\nimport { createTableResizer } from './features/TableResizer';\nimport { disposeTableEditFeature } from './features/TableEditFeature';\nimport { isNodeOfType, normalizeRect, parseTableCells } from 'roosterjs-content-model-dom';\nimport type { OnTableEditorCreatedCallback } from '../OnTableEditorCreatedCallback';\nimport type { TableEditFeature } from './features/TableEditFeature';\nimport type { IEditor, TableSelection } from 'roosterjs-content-model-types';\nimport type { TableEditFeatureName } from './features/TableEditFeatureName';\n\nconst INSERTER_HOVER_OFFSET = 6;\nconst enum TOP_OR_SIDE {\n    top = 0,\n    side = 1,\n}\n/**\n * @internal\n *\n * A table has 6 hot areas to be resized/edited (take LTR example):\n *\n *   [6]  [                ]\n *       +[      1         ]+--------------------+\n *       |[                ]|                    |\n *      [ ]               [ ]                    |\n *      [ ]               [ ]                    |\n *      [2]               [3]                    |\n *      [ ]               [ ]                    |\n *      [ ][       4       ]|                    |\n *       +------------------+--------------------+\n *       |                  |                    |\n *       |                  |                    |\n *       |                  |                    |\n *       +------------------+--------------------+\n *                                                [5]\n *\n * 1 - Hover area to show insert column button\n * 2 - Hover area to show insert row button\n * 3 - Hover area to show vertical resizing bar\n * 4 - Hover area to show horizontal resizing bar\n * 5 - Hover area to show whole table resize handle\n * 6 - Hover area to show whole table mover handle\n *\n * When set a different current table or change current TD, we need to update these areas\n */\nexport class TableEditor {\n    // 1, 2 - Insert a column or a row\n    private horizontalInserter: TableEditFeature | null = null;\n    private verticalInserter: TableEditFeature | null = null;\n\n    // 3, 4 - Resize a column or a row from a cell\n    private horizontalResizer: TableEditFeature | null = null;\n    private verticalResizer: TableEditFeature | null = null;\n\n    // 5 - Resize whole table\n    private tableResizer: TableEditFeature | null = null;\n\n    // 6 - Move as well as select whole table\n    private tableMover: TableEditFeature | null = null;\n\n    private isRTL: boolean;\n    private range: Range | null = null;\n    private isCurrentlyEditing: boolean;\n\n    constructor(\n        private editor: IEditor,\n        public readonly table: HTMLTableElement,\n        public readonly logicalRoot: HTMLDivElement | null,\n        private onChanged: () => void,\n        private anchorContainer?: HTMLElement,\n        private contentDiv?: EventTarget | null,\n        private onTableEditorCreated?: OnTableEditorCreatedCallback,\n        private disableFeatures?: TableEditFeatureName[]\n    ) {\n        this.isRTL = editor.getDocument().defaultView?.getComputedStyle(table).direction == 'rtl';\n        this.setEditorFeatures();\n        this.isCurrentlyEditing = false;\n    }\n\n    dispose() {\n        this.disposeTableResizer();\n        this.disposeCellResizers();\n        this.disposeTableInserter();\n        this.disposeTableMover();\n    }\n\n    isEditing(): boolean {\n        return this.isCurrentlyEditing;\n    }\n\n    isOwnedElement(node: Node) {\n        return [\n            this.tableResizer,\n            this.tableMover,\n            this.horizontalInserter,\n            this.verticalInserter,\n            this.horizontalResizer,\n            this.verticalResizer,\n        ]\n            .filter(feature => !!feature?.div)\n            .some(feature => feature?.div == node);\n    }\n\n    /**\n     * public only for testing purposes\n     */\n    public onMouseMove(x: number, y: number) {\n        // Get whole table rect\n        const tableRect = normalizeRect(this.table.getBoundingClientRect());\n\n        if (!tableRect) {\n            return;\n        }\n\n        // Determine if cursor is on top or side\n        const topOrSide =\n            y <= tableRect.top + INSERTER_HOVER_OFFSET\n                ? TOP_OR_SIDE.top\n                : this.isRTL\n                ? x >= tableRect.right - INSERTER_HOVER_OFFSET\n                    ? TOP_OR_SIDE.side\n                    : undefined\n                : x <= tableRect.left + INSERTER_HOVER_OFFSET\n                ? TOP_OR_SIDE.side\n                : undefined;\n        const topOrSideBinary = topOrSide ? 1 : 0;\n\n        // i is row index, j is column index\n        for (let i = 0; i < this.table.rows.length; i++) {\n            const tr = this.table.rows[i];\n            let j = 0;\n            for (; j < tr.cells.length; j++) {\n                const td = tr.cells[j];\n                const tdRect = normalizeRect(td.getBoundingClientRect());\n\n                if (!tdRect || !tableRect) {\n                    continue;\n                }\n\n                // Determine the cell the cursor is in range of\n                // Offset is only used for first row and column\n                const lessThanBottom = y <= tdRect.bottom;\n                const lessThanRight = this.isRTL\n                    ? x <= tdRect.right + INSERTER_HOVER_OFFSET * topOrSideBinary\n                    : x <= tdRect.right;\n                const moreThanLeft = this.isRTL\n                    ? x >= tdRect.left\n                    : x >= tdRect.left - INSERTER_HOVER_OFFSET * topOrSideBinary;\n\n                if (lessThanBottom && lessThanRight && moreThanLeft) {\n                    if (i === 0 && topOrSide == TOP_OR_SIDE.top) {\n                        const center = (tdRect.left + tdRect.right) / 2;\n                        const isOnRightHalf = this.isRTL ? x < center : x > center;\n                        !this.isFeatureDisabled('VerticalTableInserter') &&\n                            this.setInserterTd(\n                                isOnRightHalf ? td : tr.cells[j - 1],\n                                false /*isHorizontal*/\n                            );\n                    } else if (j === 0 && topOrSide == TOP_OR_SIDE.side) {\n                        const tdAbove = this.table.rows[i - 1]?.cells[0];\n                        const tdAboveRect = tdAbove\n                            ? normalizeRect(tdAbove.getBoundingClientRect())\n                            : null;\n\n                        const isTdNotAboveMerged = !tdAboveRect\n                            ? null\n                            : this.isRTL\n                            ? tdAboveRect.right === tdRect.right\n                            : tdAboveRect.left === tdRect.left;\n\n                        !this.isFeatureDisabled('HorizontalTableInserter') &&\n                            this.setInserterTd(\n                                y < (tdRect.top + tdRect.bottom) / 2 && isTdNotAboveMerged\n                                    ? tdAbove\n                                    : td,\n                                true /*isHorizontal*/\n                            );\n                    } else {\n                        this.setInserterTd(null);\n                    }\n\n                    !this.isFeatureDisabled('CellResizer') && this.setResizingTd(td);\n\n                    //Cell found\n                    break;\n                }\n            }\n\n            if (j < tr.cells.length) {\n                break;\n            }\n        }\n\n        // Create Mover and Resizer\n        this.setEditorFeatures();\n    }\n\n    private setEditorFeatures() {\n        const disableSelector = this.isFeatureDisabled('TableSelector');\n        const disableMovement = this.isFeatureDisabled('TableMover');\n        if (!this.tableMover && !(disableSelector && disableMovement)) {\n            this.tableMover = createTableMover(\n                this.table,\n                this.editor,\n                this.isRTL,\n                disableSelector ? () => {} : this.onSelect,\n                this.onStartTableMove,\n                this.onEndTableMove,\n                this.contentDiv,\n                this.anchorContainer,\n                this.onEditorCreated,\n                disableMovement\n            );\n        }\n\n        if (!this.tableResizer && !this.isFeatureDisabled('TableResizer')) {\n            this.tableResizer = createTableResizer(\n                this.table,\n                this.editor,\n                this.isRTL,\n                this.onStartTableResize,\n                this.onFinishEditing,\n                this.contentDiv,\n                this.anchorContainer,\n                this.onTableEditorCreated\n            );\n        }\n    }\n\n    private onEditorCreated = (featureType: TableEditFeatureName, element: HTMLElement) => {\n        const disposer = this.onTableEditorCreated?.(featureType, element);\n        const onMouseOut = element && this.getOnMouseOut(element);\n        if (onMouseOut) {\n            element.addEventListener('mouseout', onMouseOut);\n        }\n\n        return () => {\n            disposer?.();\n            if (onMouseOut) {\n                element.removeEventListener('mouseout', onMouseOut);\n            }\n        };\n    };\n\n    private setResizingTd(td: HTMLTableCellElement) {\n        if (this.horizontalResizer && this.horizontalResizer.node != td) {\n            this.disposeCellResizers();\n        }\n\n        if (!this.horizontalResizer && td) {\n            this.horizontalResizer = createCellResizer(\n                this.editor,\n                td,\n                this.table,\n                this.isRTL,\n                true /*isHorizontal*/,\n                this.onStartCellResize,\n                this.onFinishEditing,\n                this.anchorContainer\n            );\n            this.verticalResizer = createCellResizer(\n                this.editor,\n                td,\n                this.table,\n                this.isRTL,\n                false /*isHorizontal*/,\n                this.onStartCellResize,\n                this.onFinishEditing,\n                this.anchorContainer\n            );\n        }\n    }\n\n    /**\n     * create or remove TableInserter\n     * @param td td to attach to, set this to null to remove inserters (both horizontal and vertical)\n     */\n    private setInserterTd(td: HTMLTableCellElement | null, isHorizontal?: boolean) {\n        const inserter = isHorizontal ? this.horizontalInserter : this.verticalInserter;\n        if (td === null || (inserter && inserter.node != td)) {\n            this.disposeTableInserter();\n        }\n\n        if (!this.horizontalInserter && !this.verticalInserter && td) {\n            const newInserter = createTableInserter(\n                this.editor,\n                td,\n                this.table,\n                this.isRTL,\n                !!isHorizontal,\n                this.onBeforeEditTable,\n                this.onAfterInsert,\n                this.anchorContainer,\n                this.onEditorCreated\n            );\n            if (isHorizontal) {\n                this.horizontalInserter = newInserter;\n            } else {\n                this.verticalInserter = newInserter;\n            }\n        }\n    }\n\n    private disposeTableResizer() {\n        if (this.tableResizer) {\n            disposeTableEditFeature(this.tableResizer);\n            this.tableResizer = null;\n        }\n    }\n\n    private disposeTableInserter() {\n        if (this.horizontalInserter) {\n            disposeTableEditFeature(this.horizontalInserter);\n            this.horizontalInserter = null;\n        }\n        if (this.verticalInserter) {\n            disposeTableEditFeature(this.verticalInserter);\n            this.verticalInserter = null;\n        }\n    }\n\n    private disposeCellResizers() {\n        if (this.horizontalResizer) {\n            disposeTableEditFeature(this.horizontalResizer);\n            this.horizontalResizer = null;\n        }\n        if (this.verticalResizer) {\n            disposeTableEditFeature(this.verticalResizer);\n            this.verticalResizer = null;\n        }\n    }\n\n    private disposeTableMover() {\n        if (this.tableMover) {\n            disposeTableEditFeature(this.tableMover);\n            this.tableMover = null;\n        }\n    }\n\n    private onFinishEditing = (): false => {\n        this.editor.focus();\n\n        if (this.range) {\n            this.editor.setDOMSelection({ type: 'range', range: this.range, isReverted: false });\n            this.range = null;\n        }\n\n        this.editor.takeSnapshot(); // Pass in an empty callback to make sure ContentChangedEvent is triggered\n        this.onChanged();\n        this.isCurrentlyEditing = false;\n\n        return false;\n    };\n\n    private onStartTableResize = () => {\n        this.isCurrentlyEditing = true;\n        this.onStartResize();\n    };\n\n    private onStartCellResize = () => {\n        this.isCurrentlyEditing = true;\n        this.disposeTableResizer();\n        this.onStartResize();\n    };\n\n    private onStartTableMove = () => {\n        this.onBeforeEditTable();\n        this.isCurrentlyEditing = true;\n        this.disposeTableResizer();\n        this.disposeTableInserter();\n        this.disposeCellResizers();\n    };\n\n    private onStartResize() {\n        this.onBeforeEditTable();\n        this.isCurrentlyEditing = true;\n        const range = this.editor.getDOMSelection();\n\n        if (range && range.type == 'range') {\n            this.range = range.range;\n        }\n\n        this.editor.takeSnapshot();\n    }\n\n    private onEndTableMove = (disposeHandler: boolean) => {\n        if (disposeHandler) {\n            this.disposeTableMover();\n        }\n        return this.onFinishEditing();\n    };\n\n    private onBeforeEditTable = () => {\n        this.editor.setLogicalRoot(this.logicalRoot);\n    };\n\n    private onAfterInsert = () => {\n        this.disposeTableResizer();\n        this.onFinishEditing();\n    };\n\n    /**\n     * Public only for testing purposes\n     * @param table the table to select\n     */\n    public onSelect = (table: HTMLTableElement) => {\n        this.editor.focus();\n\n        if (table) {\n            const parsedTable = parseTableCells(table);\n            const selection: TableSelection = {\n                table: table,\n                firstRow: 0,\n                firstColumn: 0,\n                lastRow: parsedTable.length - 1,\n                lastColumn: (parsedTable[0]?.length ?? 0) - 1,\n                type: 'table',\n            };\n\n            this.editor.setDOMSelection(selection);\n        }\n    };\n\n    private getOnMouseOut = (feature: HTMLElement) => {\n        return (ev: MouseEvent) => {\n            if (\n                feature &&\n                ev.relatedTarget != feature &&\n                isNodeOfType(this.contentDiv as Node, 'ELEMENT_NODE') &&\n                isNodeOfType(ev.relatedTarget as Node, 'ELEMENT_NODE') &&\n                !(this.contentDiv == ev.relatedTarget) &&\n                !this.isEditing()\n            ) {\n                this.dispose();\n            }\n        };\n    };\n\n    private isFeatureDisabled(feature: TableEditFeatureName) {\n        return this.disableFeatures?.includes(feature);\n    }\n}\n","import { createElement } from '../../../pluginUtils/CreateElement/createElement';\nimport { DragAndDropHelper } from '../../../pluginUtils/DragAndDrop/DragAndDropHelper';\nimport { getCMTableFromTable } from '../utils/getTableFromContentModel';\nimport type { TableEditFeature } from './TableEditFeature';\nimport {\n    isElementOfType,\n    normalizeRect,\n    MIN_ALLOWED_TABLE_CELL_WIDTH,\n    mutateBlock,\n    MIN_ALLOWED_TABLE_CELL_HEIGHT,\n    parseValueWithUnit,\n} from 'roosterjs-content-model-dom';\nimport type { DragAndDropHandler } from '../../../pluginUtils/DragAndDrop/DragAndDropHandler';\nimport type { IEditor, ReadonlyContentModelTable } from 'roosterjs-content-model-types';\n\nconst CELL_RESIZER_WIDTH = 4;\n/**\n * @internal\n */\nexport const HORIZONTAL_RESIZER_ID = 'horizontalResizer';\n/**\n * @internal\n */\nexport const VERTICAL_RESIZER_ID = 'verticalResizer';\n\n/**\n * @internal\n */\nexport function createCellResizer(\n    editor: IEditor,\n    td: HTMLTableCellElement,\n    table: HTMLTableElement,\n    isRTL: boolean,\n    isHorizontal: boolean,\n    onStart: () => void,\n    onEnd: () => false,\n    anchorContainer?: HTMLElement\n): TableEditFeature | null {\n    const document = td.ownerDocument;\n    const createElementData = {\n        tag: 'div',\n        style: `position: fixed; cursor: ${isHorizontal ? 'row' : 'col'}-resize; user-select: none`,\n    };\n    const zoomScale = editor.getDOMHelper().calculateZoomScale();\n\n    const div = createElement(createElementData, document) as HTMLDivElement;\n\n    (anchorContainer || document.body).appendChild(div);\n\n    const context: CellResizerContext = {\n        editor,\n        td,\n        table,\n        isRTL,\n        zoomScale,\n        onStart,\n        originalWidth: parseValueWithUnit(table.style.width),\n    };\n    const setPosition = isHorizontal ? setHorizontalPosition : setVerticalPosition;\n    setPosition(context, div);\n\n    const handler: DragAndDropHandler<CellResizerContext, CellResizerInitValue> = {\n        onDragStart,\n        // Horizontal modifies row height, vertical modifies column width\n        onDragging: isHorizontal ? onDraggingHorizontal : onDraggingVertical,\n        onDragEnd: onEnd,\n    };\n\n    const featureHandler = new DragAndDropHelper<CellResizerContext, CellResizerInitValue>(\n        div,\n        context,\n        setPosition,\n        handler,\n        zoomScale,\n        editor.getEnvironment().isMobileOrTablet\n    );\n\n    return { node: td, div, featureHandler };\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport interface CellResizerContext {\n    editor: IEditor;\n    td: HTMLTableCellElement;\n    table: HTMLTableElement;\n    isRTL: boolean;\n    zoomScale: number;\n    originalWidth: number;\n    onStart: () => void;\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport interface CellResizerInitValue {\n    cmTable: ReadonlyContentModelTable | undefined;\n    anchorColumn: number | undefined;\n    anchorRow: number | undefined;\n    anchorRowHeight: number;\n    allWidths: number[];\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragStart(context: CellResizerContext, event: MouseEvent): CellResizerInitValue {\n    const { td, onStart } = context;\n    const rect = normalizeRect(td.getBoundingClientRect());\n\n    // Get cell coordinates\n    const columnIndex = td.cellIndex;\n    const row =\n        td.parentElement && isElementOfType(td.parentElement, 'tr') ? td.parentElement : undefined;\n    const rowIndex = row?.rowIndex;\n\n    if (rowIndex == undefined) {\n        return {\n            cmTable: undefined,\n            anchorColumn: undefined,\n            anchorRow: undefined,\n            anchorRowHeight: -1,\n            allWidths: [],\n        }; // Just a fallback\n    }\n\n    const { editor, table } = context;\n\n    // Get Table block in content model\n    const cmTable = getCMTableFromTable(editor, table);\n\n    if (rect && cmTable) {\n        onStart();\n\n        return {\n            cmTable,\n            anchorColumn: columnIndex,\n            anchorRow: rowIndex,\n            anchorRowHeight: cmTable.rows[rowIndex].height,\n            allWidths: [...cmTable.widths],\n        };\n    } else {\n        return {\n            cmTable,\n            anchorColumn: undefined,\n            anchorRow: undefined,\n            anchorRowHeight: -1,\n            allWidths: [],\n        }; // Just a fallback\n    }\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDraggingHorizontal(\n    context: CellResizerContext,\n    event: MouseEvent,\n    initValue: CellResizerInitValue,\n    deltaX: number,\n    deltaY: number\n) {\n    const { table } = context;\n    const { cmTable, anchorRow, anchorRowHeight } = initValue;\n\n    // Assign new widths and heights to the CM table\n    if (cmTable && anchorRow != undefined && cmTable.rows[anchorRow] != undefined) {\n        // Modify the CM Table size\n        mutateBlock(cmTable).rows[anchorRow].height = (anchorRowHeight ?? 0) + deltaY;\n\n        // Normalize the new height value\n        const newHeight = Math.max(cmTable.rows[anchorRow].height, MIN_ALLOWED_TABLE_CELL_HEIGHT);\n\n        // Writeback CM Table size changes to DOM Table\n        const tableRow = table.rows[anchorRow];\n        for (let col = 0; col < tableRow.cells.length; col++) {\n            const td = tableRow.cells[col];\n            td.style.height = newHeight + 'px';\n            td.style.boxSizing = 'border-box';\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDraggingVertical(\n    context: CellResizerContext,\n    event: MouseEvent,\n    initValue: CellResizerInitValue,\n    deltaX: number\n) {\n    const { table, isRTL } = context;\n    const { cmTable, anchorColumn, allWidths } = initValue;\n\n    // Assign new widths and heights to the CM table\n    if (cmTable && anchorColumn != undefined) {\n        const mutableTable = mutateBlock(cmTable);\n\n        // Modify the CM Table size\n        const lastColumn = anchorColumn == cmTable.widths.length - 1;\n        const change = deltaX * (isRTL ? -1 : 1);\n        // This is the last column\n        if (lastColumn) {\n            // Only the last column changes\n            // Normalize the new width value\n            const newWidth = Math.max(\n                allWidths[anchorColumn] + change,\n                MIN_ALLOWED_TABLE_CELL_WIDTH\n            );\n            mutableTable.widths[anchorColumn] = newWidth;\n        } else {\n            // Any other two columns\n            const anchorChange = allWidths[anchorColumn] + change;\n            const nextAnchorChange = allWidths[anchorColumn + 1] - change;\n            if (\n                anchorChange < MIN_ALLOWED_TABLE_CELL_WIDTH ||\n                nextAnchorChange < MIN_ALLOWED_TABLE_CELL_WIDTH\n            ) {\n                return false;\n            }\n            mutableTable.widths[anchorColumn] = anchorChange;\n            mutableTable.widths[anchorColumn + 1] = nextAnchorChange;\n        }\n\n        // Writeback CM Table size changes to DOM Table\n        for (let row = 0; row < table.rows.length; row++) {\n            const tableRow = table.rows[row];\n            for (let col = 0; col < tableRow.cells.length; col++) {\n                const td = tableRow.cells[col];\n\n                td.style.width = cmTable.widths[col] + 'px';\n                td.style.boxSizing = 'border-box';\n            }\n        }\n\n        if (context.originalWidth > 0) {\n            const newWidth = context.originalWidth + change + 'px';\n\n            mutableTable.format.width = newWidth;\n            table.style.width = newWidth;\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction setHorizontalPosition(context: CellResizerContext, trigger: HTMLElement) {\n    const { td } = context;\n    const rect = normalizeRect(td.getBoundingClientRect());\n    if (rect) {\n        trigger.id = HORIZONTAL_RESIZER_ID;\n        trigger.style.top = rect.bottom - CELL_RESIZER_WIDTH + 'px';\n        trigger.style.left = rect.left + 'px';\n        trigger.style.width = rect.right - rect.left + 'px';\n        trigger.style.height = CELL_RESIZER_WIDTH + 'px';\n    }\n}\n\nfunction setVerticalPosition(context: CellResizerContext, trigger: HTMLElement) {\n    const { td, isRTL } = context;\n    const rect = normalizeRect(td.getBoundingClientRect());\n    if (rect) {\n        trigger.id = VERTICAL_RESIZER_ID;\n        trigger.style.top = rect.top + 'px';\n        trigger.style.left = (isRTL ? rect.left : rect.right) - CELL_RESIZER_WIDTH + 1 + 'px';\n        trigger.style.width = CELL_RESIZER_WIDTH + 'px';\n        trigger.style.height = rect.bottom - rect.top + 'px';\n    }\n}\n","import type { Disposable } from '../../../pluginUtils/Disposable';\n\n/**\n * @internal\n */\nexport interface TableEditFeature {\n    node: Node;\n    div: HTMLDivElement | null;\n    featureHandler: Disposable | null;\n}\n\n/**\n * @internal\n */\nexport function disposeTableEditFeature(feature: TableEditFeature | null) {\n    if (feature) {\n        feature.featureHandler?.dispose();\n        feature.featureHandler = null;\n        feature.div?.parentNode?.removeChild(feature.div);\n        feature.div = null;\n    }\n}\n","import { createElement } from '../../../pluginUtils/CreateElement/createElement';\nimport { getIntersectedRect } from '../../../pluginUtils/Rect/getIntersectedRect';\nimport { isElementOfType, normalizeRect } from 'roosterjs-content-model-dom';\nimport type { TableEditFeature } from './TableEditFeature';\nimport type { OnTableEditorCreatedCallback } from '../../OnTableEditorCreatedCallback';\nimport {\n    formatTableWithContentModel,\n    insertTableColumn,\n    insertTableRow,\n} from 'roosterjs-content-model-api';\nimport type { CreateElementData } from '../../../pluginUtils/CreateElement/CreateElementData';\nimport type { Disposable } from '../../../pluginUtils/Disposable';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\nconst INSERTER_COLOR = '#4A4A4A';\nconst INSERTER_COLOR_DARK_MODE = 'white';\nconst INSERTER_SIDE_LENGTH = 12;\nconst INSERTER_BORDER_SIZE = 1;\n/**\n * @internal\n */\nexport const HORIZONTAL_INSERTER_ID = 'horizontalInserter';\n/**\n * @internal\n */\nexport const VERTICAL_INSERTER_ID = 'verticalInserter';\n\n/**\n * @internal\n */\nexport function createTableInserter(\n    editor: IEditor,\n    td: HTMLTableCellElement,\n    table: HTMLTableElement,\n    isRTL: boolean,\n    isHorizontal: boolean,\n    onBeforeInsert: () => void,\n    onAfterInserted: () => void,\n    anchorContainer?: HTMLElement,\n    onTableEditorCreated?: OnTableEditorCreatedCallback\n): TableEditFeature | null {\n    const tdRect = normalizeRect(td.getBoundingClientRect());\n    const viewPort = editor.getVisibleViewport();\n    const tableRect = table && viewPort ? getIntersectedRect([table], [viewPort]) : null;\n\n    // set inserter position\n    if (tdRect && tableRect) {\n        const document = td.ownerDocument;\n        const createElementData = getInsertElementData(\n            isHorizontal,\n            editor.isDarkMode(),\n            isRTL,\n            editor.getDOMHelper().getDomStyle('backgroundColor') || 'white'\n        );\n\n        const div = createElement(createElementData, document) as HTMLDivElement;\n\n        if (isHorizontal) {\n            // tableRect.left/right is used because the Inserter is always intended to be on the side\n            div.id = HORIZONTAL_INSERTER_ID;\n            div.style.left = `${\n                isRTL\n                    ? tableRect.right\n                    : tableRect.left - (INSERTER_SIDE_LENGTH - 1 + 2 * INSERTER_BORDER_SIZE)\n            }px`;\n            div.style.top = `${tdRect.bottom - 8}px`;\n            (div.firstChild as HTMLElement).style.width = `${tableRect.right - tableRect.left}px`;\n        } else {\n            div.id = VERTICAL_INSERTER_ID;\n            div.style.left = `${isRTL ? tdRect.left - 8 : tdRect.right - 8}px`;\n            // tableRect.top is used because the Inserter is always intended to be on top\n            div.style.top = `${\n                tableRect.top - (INSERTER_SIDE_LENGTH - 1 + 2 * INSERTER_BORDER_SIZE)\n            }px`;\n            (div.firstChild as HTMLElement).style.height = `${tableRect.bottom - tableRect.top}px`;\n        }\n\n        (anchorContainer || document.body).appendChild(div);\n\n        const handler = new TableInsertHandler(\n            div,\n            td,\n            table,\n            isHorizontal,\n            editor,\n            onBeforeInsert,\n            onAfterInserted,\n            onTableEditorCreated\n        );\n\n        return { div, featureHandler: handler, node: td };\n    }\n\n    return null;\n}\n\n/**\n * @internal\n * Exported for test only\n */\nexport class TableInsertHandler implements Disposable {\n    private disposer: undefined | (() => void);\n    constructor(\n        private div: HTMLDivElement,\n        private td: HTMLTableCellElement,\n        private table: HTMLTableElement,\n        private isHorizontal: boolean,\n        private editor: IEditor,\n        private onBeforeInsert: () => void,\n        private onAfterInsert: () => void,\n        onTableEditorCreated?: OnTableEditorCreatedCallback\n    ) {\n        this.div.addEventListener('click', this.insertTd);\n        this.disposer = onTableEditorCreated?.(\n            isHorizontal ? 'HorizontalTableInserter' : 'VerticalTableInserter',\n            div\n        );\n    }\n\n    dispose() {\n        this.div.removeEventListener('click', this.insertTd);\n        this.disposer?.();\n        this.disposer = undefined;\n    }\n\n    private insertTd = () => {\n        // Get cell coordinates\n        const columnIndex = this.td.cellIndex;\n        const row =\n            this.td.parentElement && isElementOfType(this.td.parentElement, 'tr')\n                ? this.td.parentElement\n                : undefined;\n        const rowIndex = row && row.rowIndex;\n\n        if (row?.cells == undefined || rowIndex == undefined) {\n            return;\n        }\n\n        this.onBeforeInsert();\n\n        // Insert row or column\n        formatTableWithContentModel(\n            this.editor,\n            'editTablePlugin',\n            tableModel => {\n                this.isHorizontal\n                    ? insertTableRow(tableModel, 'insertBelow')\n                    : insertTableColumn(tableModel, 'insertRight');\n            }, // Select cell to make insertion\n            {\n                type: 'table',\n                firstColumn: columnIndex,\n                firstRow: rowIndex,\n                lastColumn: columnIndex,\n                lastRow: rowIndex,\n                table: this.table,\n            }\n        );\n\n        this.onAfterInsert();\n    };\n}\n\nfunction getInsertElementData(\n    isHorizontal: boolean,\n    isDark: boolean,\n    isRTL: boolean,\n    backgroundColor: string\n): CreateElementData {\n    const inserterColor = isDark ? INSERTER_COLOR_DARK_MODE : INSERTER_COLOR;\n    const outerDivStyle = `position: fixed; width: ${INSERTER_SIDE_LENGTH}px; height: ${INSERTER_SIDE_LENGTH}px; font-size: 16px; color: black; line-height: 8px; vertical-align: middle; text-align: center; cursor: pointer; border: solid ${INSERTER_BORDER_SIZE}px ${inserterColor}; border-radius: 50%; background-color: ${backgroundColor}`;\n    const leftOrRight = isRTL ? 'right' : 'left';\n    const childBaseStyles = `position: absolute; box-sizing: border-box; background-color: ${backgroundColor};`;\n    const childInfo: CreateElementData = {\n        tag: 'div',\n        style:\n            childBaseStyles +\n            (isHorizontal\n                ? `${leftOrRight}: 12px; top: 5px; height: 3px; border-top: 1px solid ${inserterColor}; border-bottom: 1px solid ${inserterColor}; border-right: 1px solid ${inserterColor}; border-left: 0px;`\n                : `left: 5px; top: 12px; width: 3px; border-left: 1px solid ${inserterColor}; border-right: 1px solid ${inserterColor}; border-bottom: 1px solid ${inserterColor}; border-top: 0px;`),\n    };\n\n    return {\n        tag: 'div',\n        style: outerDivStyle,\n        children: [childInfo, '+'],\n    };\n}\n","import { createElement } from '../../../pluginUtils/CreateElement/createElement';\nimport { DragAndDropHelper } from '../../../pluginUtils/DragAndDrop/DragAndDropHelper';\nimport { formatInsertPointWithContentModel } from 'roosterjs-content-model-api';\nimport { getCMTableFromTable } from '../utils/getTableFromContentModel';\nimport type { TableEditFeature } from './TableEditFeature';\nimport type { OnTableEditorCreatedCallback } from '../../OnTableEditorCreatedCallback';\nimport type { DragAndDropHandler } from '../../../pluginUtils/DragAndDrop/DragAndDropHandler';\nimport {\n    cloneModel,\n    createContentModelDocument,\n    createSelectionMarker,\n    getFirstSelectedTable,\n    isNodeOfType,\n    mergeModel,\n    mutateBlock,\n    normalizeRect,\n    setParagraphNotImplicit,\n    setSelection,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DOMInsertPoint,\n    DOMSelection,\n    IEditor,\n    ReadonlyContentModelTable,\n    Rect,\n    ShallowMutableContentModelDocument,\n} from 'roosterjs-content-model-types';\n\nconst TABLE_MOVER_LENGTH = 12;\n/**\n * @internal\n */\nexport const TABLE_MOVER_ID = '_Table_Mover';\nconst TABLE_MOVER_STYLE_KEY = '_TableMoverCursorStyle';\n\n/**\n * @internal\n * Allows user to move table to another position\n * Contains the function to select whole table\n */\nexport function createTableMover(\n    table: HTMLTableElement,\n    editor: IEditor,\n    isRTL: boolean,\n    onFinishDragging: (table: HTMLTableElement) => void,\n    onStart: () => void,\n    onEnd: (disposeHandler: boolean) => void,\n    contentDiv?: EventTarget | null,\n    anchorContainer?: HTMLElement,\n    onTableEditorCreated?: OnTableEditorCreatedCallback,\n    disableMovement?: boolean\n): TableEditFeature | null {\n    const rect = normalizeRect(table.getBoundingClientRect());\n\n    if (!isTableTopVisible(editor, rect, contentDiv as Node)) {\n        return null;\n    }\n\n    const zoomScale = editor.getDOMHelper().calculateZoomScale();\n    const document = table.ownerDocument;\n    const createElementData = {\n        tag: 'div',\n        style: 'position: fixed; cursor: move; user-select: none; border: 1px solid #808080',\n    };\n\n    const div = createElement(createElementData, document) as HTMLDivElement;\n\n    div.id = TABLE_MOVER_ID;\n    div.style.width = `${TABLE_MOVER_LENGTH}px`;\n    div.style.height = `${TABLE_MOVER_LENGTH}px`;\n\n    (anchorContainer || document.body).appendChild(div);\n\n    const context: TableMoverContext = {\n        table,\n        zoomScale,\n        rect,\n        isRTL,\n        editor,\n        div,\n        onFinishDragging,\n        onStart,\n        onEnd,\n        disableMovement,\n    };\n\n    setDivPosition(context, div);\n\n    const featureHandler = new TableMoverFeature(\n        div,\n        context,\n        () => {},\n        disableMovement\n            ? { onDragEnd }\n            : {\n                  onDragStart,\n                  onDragging,\n                  onDragEnd,\n              },\n        context.zoomScale,\n        onTableEditorCreated,\n        editor.getEnvironment().isMobileOrTablet\n    );\n\n    return { node: table, div, featureHandler };\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport interface TableMoverContext {\n    table: HTMLTableElement;\n    zoomScale: number;\n    rect: Rect | null;\n    isRTL: boolean;\n    editor: IEditor;\n    div: HTMLElement;\n    onFinishDragging: (table: HTMLTableElement) => void;\n    onStart: () => void;\n    onEnd: (disposeHandler: boolean) => void;\n    disableMovement?: boolean;\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport interface TableMoverInitValue {\n    cmTable: ReadonlyContentModelTable | undefined;\n    initialSelection: DOMSelection | null;\n    tableRect: HTMLDivElement;\n}\n\nclass TableMoverFeature extends DragAndDropHelper<TableMoverContext, TableMoverInitValue> {\n    private disposer: undefined | (() => void);\n\n    constructor(\n        div: HTMLElement,\n        context: TableMoverContext,\n        onSubmit: (\n            context: TableMoverContext,\n            trigger: HTMLElement,\n            container?: HTMLElement\n        ) => void,\n        handler: DragAndDropHandler<TableMoverContext, TableMoverInitValue>,\n        zoomScale: number,\n        onTableEditorCreated?: OnTableEditorCreatedCallback,\n        forceMobile?: boolean | undefined\n    ) {\n        super(div, context, onSubmit, handler, zoomScale, forceMobile);\n        this.disposer = onTableEditorCreated?.('TableMover', div);\n    }\n\n    dispose(): void {\n        this.disposer?.();\n        this.disposer = undefined;\n        super.dispose();\n    }\n}\n\nfunction setDivPosition(context: TableMoverContext, trigger: HTMLElement) {\n    const { rect } = context;\n    if (rect) {\n        trigger.style.top = `${rect.top - TABLE_MOVER_LENGTH}px`;\n        trigger.style.left = `${rect.left - TABLE_MOVER_LENGTH - 2}px`;\n    }\n}\n\nfunction isTableTopVisible(editor: IEditor, rect: Rect | null, contentDiv?: Node | null): boolean {\n    const visibleViewport = editor.getVisibleViewport();\n    if (isNodeOfType(contentDiv, 'ELEMENT_NODE') && visibleViewport && rect) {\n        const containerRect = normalizeRect(contentDiv.getBoundingClientRect());\n\n        return !!containerRect && containerRect.top <= rect.top && visibleViewport.top <= rect.top;\n    }\n\n    return true;\n}\n\nfunction setTableMoverCursor(editor: IEditor, state: boolean, type?: 'move' | 'copy') {\n    editor?.setEditorStyle(TABLE_MOVER_STYLE_KEY, state ? 'cursor: ' + type ?? 'move' : null);\n}\n\n// Get insertion point from coordinate.\nfunction getNodePositionFromEvent(editor: IEditor, x: number, y: number): DOMInsertPoint | null {\n    const doc = editor.getDocument();\n    const domHelper = editor.getDOMHelper();\n\n    if (doc.caretRangeFromPoint) {\n        // Chrome, Edge, Safari, Opera\n        const range = doc.caretRangeFromPoint(x, y);\n        if (range && domHelper.isNodeInEditor(range.startContainer)) {\n            return { node: range.startContainer, offset: range.startOffset };\n        }\n    }\n\n    if ('caretPositionFromPoint' in doc) {\n        // Firefox\n        const pos = (doc as any).caretPositionFromPoint(x, y);\n        if (pos && domHelper.isNodeInEditor(pos.offsetNode)) {\n            return { node: pos.offsetNode, offset: pos.offset };\n        }\n    }\n\n    if (doc.elementFromPoint) {\n        // Fallback\n        const element = doc.elementFromPoint(x, y);\n        if (element && domHelper.isNodeInEditor(element)) {\n            return { node: element, offset: 0 };\n        }\n    }\n\n    return null;\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragStart(context: TableMoverContext): TableMoverInitValue {\n    context.onStart();\n\n    const { editor, table, div } = context;\n\n    setTableMoverCursor(editor, true, 'move');\n\n    // Create table outline rectangle\n    const trect = table.getBoundingClientRect();\n    const createElementData = {\n        tag: 'div',\n        style: 'position: fixed; user-select: none; border: 1px solid #808080',\n    };\n    const tableRect = createElement(createElementData, document) as HTMLDivElement;\n    tableRect.style.width = `${trect.width}px`;\n    tableRect.style.height = `${trect.height}px`;\n    tableRect.style.top = `${trect.top}px`;\n    tableRect.style.left = `${trect.left}px`;\n    div.parentNode?.appendChild(tableRect);\n\n    // Get drag start selection\n    const initialSelection = editor.getDOMSelection();\n\n    // Get Table block in content model\n    const cmTable = getCMTableFromTable(editor, table);\n\n    return {\n        cmTable,\n        initialSelection,\n        tableRect,\n    };\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragging(\n    context: TableMoverContext,\n    event: MouseEvent,\n    initValue: TableMoverInitValue\n) {\n    const { tableRect } = initValue;\n    const { editor } = context;\n\n    // Move table outline rectangle\n    tableRect.style.top = `${event.clientY + TABLE_MOVER_LENGTH}px`;\n    tableRect.style.left = `${event.clientX + TABLE_MOVER_LENGTH}px`;\n\n    const pos = getNodePositionFromEvent(editor, event.clientX, event.clientY);\n    if (pos) {\n        const range = editor.getDocument().createRange();\n        range.setStart(pos.node, pos.offset);\n        range.collapse(true);\n\n        editor.setDOMSelection({ type: 'range', range, isReverted: false });\n        return true;\n    }\n    return false;\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragEnd(\n    context: TableMoverContext,\n    event: MouseEvent,\n    initValue: TableMoverInitValue | undefined\n) {\n    const { editor, table, onFinishDragging: selectWholeTable, disableMovement } = context;\n    const element = event.target;\n\n    // Remove table outline rectangle\n    initValue?.tableRect.remove();\n\n    // Reset cursor\n    setTableMoverCursor(editor, false);\n\n    if (element == context.div) {\n        // Table mover was only clicked, select whole table and do not dismiss the handler element.\n        selectWholeTable(table);\n        context.onEnd(false /* disposeHandler */);\n        return true;\n    } else {\n        // Check if table was dragged on itself, element is not in editor, or movement is disabled\n        if (\n            table.contains(element as Node) ||\n            !editor.getDOMHelper().isNodeInEditor(element as Node) ||\n            disableMovement\n        ) {\n            editor.setDOMSelection(initValue?.initialSelection ?? null);\n            context.onEnd(true /* disposeHandler */);\n            return false;\n        }\n\n        let insertionSuccess: boolean = false;\n\n        // Get position to insert table\n        const insertPosition = getNodePositionFromEvent(editor, event.clientX, event.clientY);\n        if (insertPosition) {\n            // Move table to new position\n            formatInsertPointWithContentModel(\n                editor,\n                insertPosition,\n                (model, context, ip) => {\n                    // Remove old table\n                    const [oldTable, path] = getFirstSelectedTable(model);\n                    if (oldTable) {\n                        const index = path[0].blocks.indexOf(oldTable);\n                        mutateBlock(path[0]).blocks.splice(index, 1);\n                    }\n\n                    if (ip && initValue?.cmTable) {\n                        // Insert new table\n                        const doc: ShallowMutableContentModelDocument = createContentModelDocument();\n                        doc.blocks.push(oldTable ?? mutateBlock(initValue.cmTable));\n                        insertionSuccess = !!mergeModel(model, cloneModel(doc), context, {\n                            mergeFormat: 'none',\n                            insertPosition: ip,\n                        });\n\n                        if (insertionSuccess) {\n                            // After mergeModel, the new table should be selected\n                            const finalTable = getFirstSelectedTable(model)[0] ?? initValue.cmTable;\n                            if (finalTable) {\n                                // Add selection marker to the first cell of the table\n                                const firstCell = finalTable.rows[0].cells[0];\n                                const markerParagraph = firstCell?.blocks[0];\n\n                                if (markerParagraph?.blockType == 'Paragraph') {\n                                    const marker = createSelectionMarker(model.format);\n\n                                    mutateBlock(markerParagraph).segments.unshift(marker);\n                                    setParagraphNotImplicit(markerParagraph);\n                                    setSelection(model, marker);\n                                }\n                            }\n                        }\n                        return insertionSuccess;\n                    }\n                },\n                {\n                    // Select first cell of the old table\n                    selectionOverride: {\n                        type: 'table',\n                        firstColumn: 0,\n                        firstRow: 0,\n                        lastColumn: 0,\n                        lastRow: 0,\n                        table: table,\n                    },\n                    apiName: 'TableMover',\n                }\n            );\n        } else {\n            // No movement, restore initial selection\n            editor.setDOMSelection(initValue?.initialSelection ?? null);\n        }\n        context.onEnd(true /* disposeHandler */);\n        return insertionSuccess;\n    }\n}\n","import { createElement } from '../../../pluginUtils/CreateElement/createElement';\nimport { DragAndDropHelper } from '../../../pluginUtils/DragAndDrop/DragAndDropHelper';\nimport { getCMTableFromTable } from '../utils/getTableFromContentModel';\nimport {\n    MIN_ALLOWED_TABLE_CELL_HEIGHT,\n    isNodeOfType,\n    mutateBlock,\n    normalizeRect,\n} from 'roosterjs-content-model-dom';\nimport type { TableEditFeature } from './TableEditFeature';\nimport type { OnTableEditorCreatedCallback } from '../../OnTableEditorCreatedCallback';\nimport type { IEditor, ReadonlyContentModelTable, Rect } from 'roosterjs-content-model-types';\nimport type { DragAndDropHandler } from '../../../pluginUtils/DragAndDrop/DragAndDropHandler';\n\nconst TABLE_RESIZER_LENGTH = 12;\n/**\n * @internal\n */\nexport const TABLE_RESIZER_ID = '_Table_Resizer';\n\n/**\n * @internal\n */\nexport function createTableResizer(\n    table: HTMLTableElement,\n    editor: IEditor,\n    isRTL: boolean,\n    onStart: () => void,\n    onEnd: () => false,\n    contentDiv?: EventTarget | null,\n    anchorContainer?: HTMLElement,\n    onTableEditorCreated?: OnTableEditorCreatedCallback\n): TableEditFeature | null {\n    const rect = normalizeRect(table.getBoundingClientRect());\n\n    if (!isTableBottomVisible(editor, rect, contentDiv as Node)) {\n        return null;\n    }\n\n    const document = table.ownerDocument;\n    const zoomScale = editor.getDOMHelper().calculateZoomScale();\n    const createElementData = {\n        tag: 'div',\n        style: `position: fixed; cursor: ${\n            isRTL ? 'ne' : 'nw'\n        }-resize; user-select: none; border: 1px solid #808080`,\n    };\n\n    const div = createElement(createElementData, document) as HTMLDivElement;\n\n    div.id = TABLE_RESIZER_ID;\n    div.style.width = `${TABLE_RESIZER_LENGTH}px`;\n    div.style.height = `${TABLE_RESIZER_LENGTH}px`;\n\n    (anchorContainer || document.body).appendChild(div);\n\n    const context: TableResizerContext = {\n        isRTL,\n        table,\n        zoomScale,\n        onStart,\n        onEnd,\n        div,\n        editor,\n        contentDiv,\n    };\n\n    setDivPosition(context, div);\n\n    const featureHandler = new TableResizer(\n        div,\n        context,\n        hideResizer, // Resizer is hidden while dragging only\n        {\n            onDragStart,\n            onDragging,\n            onDragEnd,\n        },\n        zoomScale,\n        editor.getEnvironment().isMobileOrTablet,\n        onTableEditorCreated\n    );\n\n    return { node: table, div, featureHandler };\n}\n\nclass TableResizer extends DragAndDropHelper<TableResizerContext, TableResizerInitValue> {\n    private disposer: undefined | (() => void);\n\n    constructor(\n        trigger: HTMLElement,\n        context: TableResizerContext,\n        onSubmit: (context: TableResizerContext, trigger: HTMLElement) => void,\n        handler: DragAndDropHandler<TableResizerContext, TableResizerInitValue>,\n        zoomScale: number,\n        forceMobile?: boolean,\n        onTableEditorCreated?: OnTableEditorCreatedCallback\n    ) {\n        super(trigger, context, onSubmit, handler, zoomScale, forceMobile);\n        this.disposer = onTableEditorCreated?.('TableResizer', trigger);\n    }\n\n    dispose(): void {\n        this.disposer?.();\n        this.disposer = undefined;\n        super.dispose();\n    }\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport interface TableResizerContext {\n    table: HTMLTableElement;\n    isRTL: boolean;\n    zoomScale: number;\n    onStart: () => void;\n    onEnd: () => false;\n    div: HTMLDivElement;\n    editor: IEditor;\n    contentDiv?: EventTarget | null;\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport interface TableResizerInitValue {\n    originalRect: DOMRect;\n    originalHeights: number[];\n    originalWidths: number[];\n    cmTable: ReadonlyContentModelTable | undefined;\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragStart(\n    context: TableResizerContext,\n    event: MouseEvent\n): TableResizerInitValue {\n    context.onStart();\n\n    const { editor, table } = context;\n\n    // Get Table block in content model\n    const cmTable = getCMTableFromTable(editor, table);\n\n    // Save original widths and heights\n    const heights: number[] = [];\n    cmTable?.rows.forEach(row => {\n        heights.push(row.height);\n    });\n    const widths: number[] = [];\n    cmTable?.widths.forEach(width => {\n        widths.push(width);\n    });\n\n    return {\n        originalRect: table.getBoundingClientRect(),\n        cmTable,\n        originalHeights: heights ?? [],\n        originalWidths: widths ?? [],\n    };\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragging(\n    context: TableResizerContext,\n    event: MouseEvent,\n    initValue: TableResizerInitValue,\n    deltaX: number,\n    deltaY: number\n) {\n    const { isRTL, zoomScale, table } = context;\n    const { originalRect, originalHeights, originalWidths, cmTable } = initValue;\n\n    const ratioX = 1.0 + (deltaX / originalRect.width) * zoomScale * (isRTL ? -1 : 1);\n    const ratioY = 1.0 + (deltaY / originalRect.height) * zoomScale;\n    const shouldResizeX = Math.abs(ratioX - 1.0) > 1e-3;\n    const shouldResizeY = Math.abs(ratioY - 1.0) > 1e-3;\n\n    // If the width of some external table is fixed, we need to make it resizable\n    table.style.setProperty('width', null);\n    // If the height of some external table is fixed, we need to make it resizable\n    table.style.setProperty('height', null);\n\n    // Assign new widths and heights to the CM table\n    if (cmTable && cmTable.rows && (shouldResizeX || shouldResizeY)) {\n        const mutableTable = mutateBlock(cmTable);\n\n        // Modify the CM Table size\n        for (let i = 0; i < cmTable.rows.length; i++) {\n            for (let j = 0; j < cmTable.rows[i].cells.length; j++) {\n                const cell = cmTable.rows[i].cells[j];\n                if (cell) {\n                    if (shouldResizeX && i == 0) {\n                        mutableTable.widths[j] = (originalWidths[j] ?? 0) * ratioX;\n                    }\n                    if (shouldResizeY && j == 0) {\n                        mutableTable.rows[i].height = (originalHeights[i] ?? 0) * ratioY;\n                    }\n                }\n            }\n        }\n\n        // Writeback CM Table size changes to DOM Table\n        for (let row = 0; row < table.rows.length; row++) {\n            const tableRow = table.rows[row];\n\n            if (tableRow.cells.length == 0) {\n                // Skip empty row\n                continue;\n            }\n\n            // Normalize the new height value\n            const newHeight = Math.max(cmTable.rows[row].height, MIN_ALLOWED_TABLE_CELL_HEIGHT);\n\n            for (let col = 0; col < tableRow.cells.length; col++) {\n                const td = tableRow.cells[col];\n\n                // Normalize the new width value\n                const newWidth = Math.max(cmTable.widths[col], MIN_ALLOWED_TABLE_CELL_HEIGHT);\n\n                td.style.width = newWidth + 'px';\n                td.style.height = newHeight + 'px';\n                td.style.boxSizing = 'border-box';\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * @internal\n * Exported for testing\n */\nexport function onDragEnd(\n    context: TableResizerContext,\n    event: MouseEvent,\n    initValue: TableResizerInitValue | undefined\n) {\n    if (context.editor.isDisposed()) {\n        return false;\n    }\n    if (\n        isTableBottomVisible(\n            context.editor,\n            normalizeRect(context.table.getBoundingClientRect()),\n            context.contentDiv as Node\n        )\n    ) {\n        context.div.style.visibility = 'visible';\n        setDivPosition(context, context.div);\n    }\n    context.onEnd();\n    return false;\n}\n\nfunction setDivPosition(context: TableResizerContext, trigger: HTMLElement) {\n    const { table, isRTL } = context;\n    const rect = normalizeRect(table.getBoundingClientRect());\n\n    if (rect) {\n        trigger.style.top = `${rect.bottom}px`;\n        trigger.style.left = isRTL\n            ? `${rect.left - TABLE_RESIZER_LENGTH - 2}px`\n            : `${rect.right}px`;\n    }\n}\n\nfunction hideResizer(context: TableResizerContext, trigger: HTMLElement) {\n    trigger.style.visibility = 'hidden';\n}\n\nfunction isTableBottomVisible(\n    editor: IEditor,\n    rect: Rect | null,\n    contentDiv?: Node | null\n): boolean {\n    const visibleViewport = editor.getVisibleViewport();\n    if (isNodeOfType(contentDiv, 'ELEMENT_NODE') && visibleViewport && rect) {\n        const containerRect = normalizeRect(contentDiv.getBoundingClientRect());\n\n        return (\n            !!containerRect &&\n            containerRect.bottom >= rect.bottom &&\n            visibleViewport.bottom >= rect.bottom\n        );\n    }\n\n    return true;\n}\n","import { createContentModelDocument, createDomToModelContext } from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Get ContentModelTable from a table element if it is present in the content model\n */\nexport function getCMTableFromTable(editor: IEditor, table: HTMLTableElement) {\n    const model = createContentModelDocument();\n    const context = createDomToModelContext({\n        zoomScale: editor.getDOMHelper().calculateZoomScale(),\n        recalculateTableSize: true,\n    });\n\n    context.elementProcessors.element(model, table, context);\n\n    const firstBlock = model.blocks[0];\n\n    return firstBlock?.blockType == 'Table' ? firstBlock : undefined;\n}\n","import { ChangeSource, getObjectKeys } from 'roosterjs-content-model-dom';\nimport { isModelEmptyFast } from './isModelEmptyFast';\nimport type { WatermarkFormat } from './WatermarkFormat';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-content-model-types';\n\nconst WATERMARK_CONTENT_KEY = '_WatermarkContent';\nconst styleMap: Record<keyof WatermarkFormat, string> = {\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    textColor: 'color',\n};\n\n/**\n * A watermark plugin to manage watermark string for roosterjs\n */\nexport class WatermarkPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private format: WatermarkFormat;\n    private isShowing = false;\n    private darkTextColor: string | null = null;\n    private disposer: (() => void) | null = null;\n\n    /**\n     * Create an instance of Watermark plugin\n     * @param watermark The watermark string\n     */\n    constructor(protected watermark: string, format?: WatermarkFormat) {\n        this.format = format || {\n            fontSize: '14px',\n            textColor: '#AAAAAA',\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Watermark';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.attachDomEvent({\n            compositionstart: {\n                beforeDispatch: this.onCompositionStart,\n            },\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        const editor = this.editor;\n\n        if (!editor) {\n            return;\n        }\n\n        if (event.eventType == 'input' && event.rawEvent.inputType == 'insertText') {\n            // When input text, editor must not be empty, so we can do hide watermark now without checking content model\n            this.showHide(editor, false /*isEmpty*/);\n        } else if (\n            event.eventType == 'contentChanged' &&\n            (event.source == ChangeSource.SwitchToDarkMode ||\n                event.source == ChangeSource.SwitchToLightMode) &&\n            this.isShowing\n        ) {\n            // When the placeholder is shown and user switches the mode, we need to update watermark style\n            if (\n                event.source == ChangeSource.SwitchToDarkMode &&\n                !this.darkTextColor &&\n                this.format.textColor\n            ) {\n                // Get the dark color only once when dark mode is enabled for the first time\n                this.darkTextColor = editor\n                    .getColorManager()\n                    .getDarkColor(this.format.textColor, undefined, 'text');\n            }\n\n            this.applyWatermarkStyle(editor);\n        } else if (\n            event.eventType == 'editorReady' ||\n            event.eventType == 'contentChanged' ||\n            event.eventType == 'input' ||\n            event.eventType == 'beforeDispose' ||\n            event.eventType == 'compositionEnd'\n        ) {\n            this.update(editor);\n        }\n    }\n\n    private onCompositionStart = () => {\n        if (this.editor) {\n            this.showHide(this.editor, false /*isEmpty*/);\n        }\n    };\n\n    private update(editor: IEditor) {\n        editor.formatContentModel(model => {\n            const isEmpty = isModelEmptyFast(model);\n\n            this.showHide(editor, isEmpty);\n\n            return false;\n        });\n    }\n\n    private showHide(editor: IEditor, isEmpty: boolean) {\n        if (this.isShowing && !isEmpty) {\n            this.hide(editor);\n        } else if (!this.isShowing && isEmpty) {\n            this.show(editor);\n        }\n    }\n\n    protected show(editor: IEditor) {\n        this.applyWatermarkStyle(editor);\n        this.isShowing = true;\n    }\n\n    private applyWatermarkStyle(editor: IEditor) {\n        let rule = `position: absolute; pointer-events: none; margin-inline-start: 1px; content: \"${this.watermark}\";`;\n        const format = {\n            ...this.format,\n            textColor: editor.isDarkMode() ? this.darkTextColor : this.format.textColor,\n        };\n\n        getObjectKeys(styleMap).forEach(x => {\n            if (format[x]) {\n                rule += `${styleMap[x]}: ${format[x]}!important;`;\n            }\n        });\n\n        editor.setEditorStyle(WATERMARK_CONTENT_KEY, rule, 'before');\n    }\n\n    protected hide(editor: IEditor) {\n        editor.setEditorStyle(WATERMARK_CONTENT_KEY, null);\n        this.isShowing = false;\n    }\n}\n","import type { ReadonlyContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * A fast way to check if content model is empty\n */\nexport function isModelEmptyFast(model: ReadonlyContentModelBlockGroup): boolean {\n    const firstBlock = model.blocks[0];\n\n    if (model.blocks.length > 1) {\n        return false; // Multiple blocks, treat as not empty\n    } else if (!firstBlock) {\n        return true; // No block, it is empty\n    } else if (firstBlock.blockType != 'Paragraph') {\n        return false; // First block is not paragraph, treat as not empty\n    } else if (firstBlock.segments.length == 0) {\n        return true; // No segment, it is empty\n    } else if (\n        firstBlock.segments.some(\n            x =>\n                x.segmentType == 'Entity' ||\n                x.segmentType == 'Image' ||\n                x.segmentType == 'General' ||\n                (x.segmentType == 'Text' && x.text)\n        )\n    ) {\n        return false; // Has meaningful segments, it is not empty\n    } else if (\n        (firstBlock.format.marginRight && parseFloat(firstBlock.format.marginRight) > 0) ||\n        (firstBlock.format.marginLeft && parseFloat(firstBlock.format.marginLeft) > 0)\n    ) {\n        return false; // Has margin (indentation is changed), it is not empty\n    } else {\n        return firstBlock.segments.filter(x => x.segmentType == 'Br').length <= 1; // If there are more than one BR, it is not empty, otherwise it is empty\n    }\n}\n","import { Editor } from 'roosterjs-content-model-core';\r\nimport { EditPlugin, PastePlugin, ShortcutPlugin } from 'roosterjs-content-model-plugins';\r\nimport type {\r\n    ContentModelDocument,\r\n    EditorPlugin,\r\n    IEditor,\r\n    EditorOptions,\r\n} from 'roosterjs-content-model-types';\r\n\r\n/**\r\n * Create a new Editor instance using the given options\r\n * @param contentDiv The html div element needed for creating the editor\r\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\r\n * PastePlugin, EditPlugin, user don't need to add those.\r\n * @param initialModel The initial content model to show in editor. It can't be removed by undo, user need to manually remove it if needed.\r\n * @returns The Editor instance\r\n */\r\nexport function createEditor(\r\n    contentDiv: HTMLDivElement,\r\n    additionalPlugins?: EditorPlugin[],\r\n    initialModel?: ContentModelDocument\r\n): IEditor {\r\n    const plugins = [\r\n        new PastePlugin(),\r\n        new EditPlugin(),\r\n        new ShortcutPlugin(),\r\n        ...(additionalPlugins ?? []),\r\n    ];\r\n\r\n    const options: EditorOptions = {\r\n        plugins: plugins,\r\n        initialModel,\r\n        defaultSegmentFormat: {\r\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\r\n            fontSize: '11pt',\r\n            textColor: '#000000',\r\n        },\r\n    };\r\n    return new Editor(contentDiv, options);\r\n}\r\n","export { createEditor } from './createEditor';\r\nexport * from 'roosterjs-content-model-types';\r\nexport * from 'roosterjs-content-model-dom';\r\nexport * from 'roosterjs-content-model-core';\r\nexport * from 'roosterjs-content-model-api';\r\nexport * from 'roosterjs-content-model-plugins';\r\nexport * from 'roosterjs-color-utils';\r\nexport * from 'roosterjs-content-model-markdown';\r\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(91055);\n"],"names":["cssKeywords","reverseKeywords","key","hasOwnProperty","convert","module","exports","rgb","channels","labels","hsl","hsv","hwb","cmyk","xyz","lab","lch","hex","keyword","ansi16","ansi256","hcg","apple","gray","model","Error","length","Object","defineProperty","value","h","l","r","g","b","min","Math","max","delta","rdif","gdif","bdif","s","v","diff","diffc","c","k","reversed","currentClosestKeyword","x","y","currentClosestDistance","Infinity","distance","pow","z","t1","t2","t3","val","i","smin","lmin","hi","floor","f","p","q","t","sl","vmin","n","wh","bl","ratio","m","y2","x2","z2","a","atan2","PI","sqrt","hr","cos","sin","args","arguments","round","ansi","color","mult","rem","string","toString","toUpperCase","substring","match","colorString","split","map","char","join","integer","parseInt","hue","chroma","mg","pure","w","conversions","route","keys","forEach","fromModel","routes","toModel","fn","wrappedFn","Array","prototype","slice","call","result","len","conversion","wrapRounded","raw","wrapRaw","link","from","to","wrapConversion","graph","path","parent","cur","unshift","models","buildGraph","queue","current","pop","adjacents","adjacent","node","deriveBFS","colorNames","swizzle","reverseNames","name","cs","get","clamp","num","hexDouble","str","toLowerCase","hexAlpha","i2","parseFloat","alpha","isNaN","rgba","percent","hsla","hwba","_slice","skippedModels","hashedModelKeys","sort","limiters","Color","obj","this","valpha","newArr","zeroArray","splice","indexOf","hashedKeys","JSON","stringify","push","limit","freeze","getset","channel","modifier","isArray","maxfn","arr","toJSON","places","self","concat","percentString","array","object","unitArray","unitObject","Number","toFixed","roundTo","roundToPlace","red","green","blue","saturationl","lightness","saturationv","white","wblack","cyan","magenta","yellow","black","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","isDark","isLight","negate","lighten","darken","saturate","desaturate","whiten","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","undefined","w1","w2","newAlpha","Function","getOwnPropertyDescriptor","constructor","isArrayish","results","arg","wrap","default","baseLValue","computedColor","colorLab","newLValue","insertTable","formatTable","setTableCellShade","editTable","applyTableBorderFormat","toggleBullet","toggleNumbering","toggleBold","toggleItalic","toggleUnderline","toggleStrikethrough","toggleSubscript","toggleSuperscript","setBackgroundColor","setFontName","setFontSize","setTextColor","changeFontSize","applySegmentFormat","changeCapitalization","splitTextSegment","insertImage","setListStyle","setListStartNumber","setIndentation","setAlignment","setDirection","setHeadingLevel","toggleBlockQuote","setSpacing","setImageBorder","setImageBoxShadow","changeImage","getFormatState","clearFormat","insertLink","removeLink","adjustLinkSelection","setImageAltText","adjustImageSelection","setParagraphMargin","toggleCode","insertEntity","insertTableRow","insertTableColumn","clearSelectedCells","createEditorContextForEntity","formatTableWithContentModel","formatImageWithContentModel","formatParagraphWithContentModel","formatSegmentWithContentModel","formatTextSegmentBeforeSelectionMarker","formatInsertPointWithContentModel","setListType","setModelListStyle","setModelListStartNumber","findListItemsInSameThread","setModelIndentation","matchLink","promoteLink","getListAnnounceData","queryContentModelBlocks","ResultMap","left","ltr","rtl","center","right","justify","TableAlignMap","alignment","splitSelectedParagraphByBr","paragraphOrListItemOrTable","getOperationalBlocks","readonlyBlock","block","mutateBlock","newAlignment","format","direction","blockType","alignTable","blockGroupType","blocks","textAlign","internalSetDirection","marginLeft","paddingLeft","setProperty","marginRight","paddingRight","rows","row","cells","cell","updateTableCellMetadata","metadata","borderOverride","storeBorderLeft","borderLeft","borderRight","applyTableFormat","isBlockGroupOfType","readonlyItem","item","levels","isSelected","listItem","some","segments","segment","calculateMarginValue","isIndent","isRtl","originalValue","parseValueWithUnit","newValue","ceil","indentation","context","paragraphOrListItem","modifiedBlocks","thread","firstItem","isMultilevelSelection","threadIdx","previousItem","nextItem","levelLength","lastLevel","newLevel","createListLevel","listType","dataset","updateListMetadata","applyListStyleFromLevel","startNumberOverride","announceData","currentBlock","currentParent","index","shallowColonParagraph","para","createParagraph","segmentFormat","decorator","selections","getSelectedSegmentsAndParagraphs","segmentType","currentParagraph","hasVisibleSegment","newParagraphs","isQuote","tagName","formatLtr","formatRtl","paragraphOfQuote","every","blockAndParent","unwrapBlock","createFormatContainer","target","areSameFormats","canMergeQuote","wrapBlockStep1","wrapBlockStep2","clearContainerFormat","containerPathIndex","getClosestAncestorBlockGroupIndex","container","containerIndex","blockIndex","newContainer","clearListFormat","clearBlockFormat","blocksToClear","segmentsToClear","tablesToClear","pendingStructureChange","iterateSelections","tableContext","mutableSegments","mutateSegments","formatHolder","colIndex","rowIndex","isWholeTableSelected","mutableCell","isHeader","useBorderBox","find","clearTableCellFormat","includeListFormatHolder","marker","filter","isOnlySelectionMarkerSelected","adjustWordSelection","isWholeBlockSelected","defaultSegmentFormat","textColor","code","clearSegmentsFormat","table","borderCollapse","updateTableMetadata","createTablesFormat","isExpectedBlockType","type","isBlockType","group","findFirstOnly","shouldExpandEntity","elements","editorContext","createDomToModelContext","domToContentModel","wrapper","nodeStack","selectionRootNode","getSelectionRootNode","selection","root","startNode","contains","isNodeOfType","parentNode","createNodeStack","stackChild","getRegularSelectionOffsets","nodeStartOffset","nodeEndOffset","child","firstChild","nextSibling","getChildIndex","handleRegularSelection","processChildNode","defaultElementProcessors","step1Result","readonlyParent","readonlyBlockToWrap","creator","canMerge","blockToWrap","readonlyPrevBlock","prevBlock","createAndAdd","setParagraphNotImplicit","addBlock","readonlyNextBlock","nextBlock","entityModel","position","isBlock","focusAfterEntity","insertPointOverride","blockParent","insertPoint","assign","paragraph","previousSegment","deleteResult","deleteSelection","normalizeContentModel","getInsertPoint","pathIndex","directChild","childIndex","blocksToInsert","nextParagraph","createBr","createSelectionMarker","setSelection","image","border","borderRadius","width","style","extractedBorder","extractBorderValues","borderColor","borderWidth","borderStyle","borderFormat","borderTop","borderBottom","COMMON_REGEX","TELEPHONE_REGEX","MAILTO_REGEX","text","autoLinkOptions","autoLink","autoMailto","autoTel","linkMatch","normalizedUrl","telMatch","toLocaleLowerCase","matchTel","mailtoMatch","matchMailTo","httpExcludeRegEx","labelRegEx","domainPortWithUrlRegEx","domainPortRegEx","linkMatchRules","http","RegExp","except","normalizeUrl","url","test","https","mailto","notes","file","unc","ftp","news","telnet","gopher","wais","getObjectKeys","schema","rule","matches","scheme","originalUrl","trim","linkUrl","getLinkUrl","linkSegment","trimLeft","trimRight","href","underline","findListItems","pushNullIfNecessary","last","areListTypesCompatible","listItems","currentIndex","compareToIndex","currentLevels","compareToLevels","currentLevel","hasStartNumberOverride","currentItem","items","isOrderedList","filterListItems","displayForDummyItem","listNumber","getListNumber","getListMetadata","listStyle","getAutoListStyleType","listStyleType","defaultStrings","formatStrings","getOrderedListNumberStr","shouldIgnoreBlock","removeMargins","paragraphOrListItems","alreadyInExpectedType","existingListItems","itemIndex","copyFormat","ListFormats","marginBottom","newListItem","createListItem","marginTop","fontFamily","fontSize","mutableBlock","ListFormatsToMove","ListFormatsToKeep","levelIndex","getFirstSelectedListItem","firstMatcher","siblingMatcher","first","paragraphs","getSelectedParagraphs","changed","findIndex","shouldSplitTrailingSpace","isTrailingSpace","readonlyTextSegment","mutateSegment","textSegment","trailingSpace","newText","createText","trailingSpaceLink","trailingSpaceSegment","_","__","lastTextSegment","findDelimiter","moveRightward","word","offset","isPunctuation","isSpace","found","newSegmentLeft","newSegmentRight","markerBlock","tempSegments","markerSelectionIndex","currentSegment","firstColumn","addSegment","operation","TextAlignValueMap","alignCellLeft","alignCellCenter","alignCellRight","VerticalAlignValueMap","alignCellTop","alignCellMiddle","alignCellBottom","alignTableCellInternal","callback","sel","getSelectedCells","firstRow","lastRow","lastColumn","verticalAlign","vAlignOverride","firstCol","lastCol","noSpanAbove","spanAbove","noSpanLeft","spanLeft","noDifferentBelowSpan","spanCount","getBelowSpanCount","noDifferentRightSpan","col","getRightSpanCount","j","columns","createTable","createTableCell","cellInNextCol","widths","collapseTableSelection","cellInNextCell","createEmptyParagraph","newPara","br","firstCell","shift","insertLeft","newCell","insertAbove","sourceRow","height","canMergeCells","mergingColIndex","newSelectedCol","mergingRowIndex","newSelectedRow","newWidth","belowRow","belowCell","newHeight","newRow","editor","focus","formatContentModel","setModelAlignment","apiName","setModelDirection","HeaderFontSizes","h1","h2","h3","h4","h5","h6","headingLevel","tag","fontWeight","newPendingFormat","createParagraphDecorator","spacing","lineHeight","DefaultQuoteFormatLtr","DefaultQuoteFormatRtl","BuildInQuoteFormat","quoteFormat","quoteFormatRtl","fullQuoteFormatLtr","fullQuoteFormatRtl","toggleModelBlockQuote","options","contentNode","wrapperDisplay","skipUndoSnapshot","initialEntityState","getDocument","createElement","display","appendChild","createEntity","takeSnapshot","formatOptions","changeSource","ChangeSource","InsertEntity","getChangeData","id","isReadonly","insertEntityModel","newEntities","entityState","parseEntityFormat","entityType","state","needtoRun","triedTimes","clearModelFormat","conflictSolution","pendingFormat","getPendingFormat","manager","getSnapshotsManager","canUndo","hasNewContent","canMove","canRedo","isDarkMode","retrieveModelFormatState","getDOMHelper","processorOverride","reducedModelChildProcessor","tryGetFromCache","adjustSegmentSelection","ref","getDOMSelection","readFile","dataUrl","isDisposed","originalSrc","getImageMetadata","src","previousSrc","alt","triggerEvent","newSrc","insertImageWithSrc","createImage","backgroundColor","doc","createContentModelDocument","mergeModel","mergeFormat","imageFileOrSrc","altText","applyImageBorderFormat","boxShadow","margin","getSelectedSegments","firstSegment","URI_REGEX","FTP_REGEX","anchorTitle","displayText","checkXss","prefix","search","applyLinkPrefix","originalText","createLink","addLink","adjustTrailingSpaceSelection","CreateLink","onNodeCreated","modelElement","isChanged","newFormat","italic","strikethrough","superOrSubScriptSequence","capitalization","language","toLocaleUpperCase","wordArray","charAt","regex","replace","FONT_SIZES","change","fontSizes","sizeInPt","newSize","pt","changeBase","getNewFontSize","setFontSizeInternal","changeFontSizeInternal","lastParagraph","lastSegmentIndex","fontName","start","end","middleSegment","newSegments","isTurningOn","isBold","DefaultCode","addCode","applyBorderFormat","positions","pos","tableModel","getFirstSelectedTable","perimeter","Top","Bottom","Left","Right","operations","allBorders","leftBorder","rightBorder","topBorder","bottomBorder","singleCol","singleRow","modifyPerimeter","tableMeta","getTableMetadata","setFirstColumnFormatBorders","getEnvironment","isSafari","range","collapsed","collapse","setDOMSelection","isReverted","fixUpSafariSelection","alignTableCellHorizontally","alignTableCellVertically","deleteTableColumn","deleteTableRow","deleteTable","mergeTableRow","mergeTableCells","mergeTableColumn","splitTableCellHorizontally","splitTableCellVertically","keepCellShade","insertPosition","createTableStructure","normalizeTable","firstBlock","hasSelectionInBlockGroup","setTableCellBackgroundColor","entity","domHelper","defaultFormat","darkColorHandler","getColorManager","addDelimiterForEntity","allowCacheElement","domIndexer","zoomScale","calculateZoomScale","experimentalFeatures","defaultView","getComputedStyle","isRootRtl","getShadowChildProcessor","bundle","contextWithPath","shouldShiftPath","offsets","getShadowSelectionOffsets","handleElementShadowSelection","addSelectionMarker","isInSelection","input","textWithSelection","getShadowTextProcessor","textNode","txt","nodeValue","shadow","handleTextSelection","subtract","originalOffset","addTextSegment","buildSelectionMarker","blockFormat","currentContainer","setStyleCallback","toggleStyleCallback","segmentHasStyleCallback","includingFormatHolder","afterFormatCallback","segmentAndParagraphs","isCollapsedSelection","formatsAndSegments","modelsFromEntities","entityFormat","formattableRoots","entityOperationEventData","element","domToModelOptions","expandEntitySelections","isTurningOff","mergeTextSegments","modelToDomContext","createModelToDomContext","modelToDomOptions","contentModelToDom","writeBackEntities","selectionOverride","readonlyTableModel","hasSelectionInBlock","ensureFocusableParagraphForTable","hasMetadata","recalculateTableSize","selectedSegmentsAndParagraphs","rewrite","markerIndex","styles","toArray","querySelectorAll","styleNode","selectorText","sheet","ruleIndex","cssRules","CSSRule","STYLE_RULE","selectors","cssText","removeChild","selector","setAttribute","getAttribute","DefaultSanitizingOption","formatParserOverride","additionalFormatParsers","additionalAllowedTags","additionalDisallowedTags","styleSanitizers","attributeSanitizers","document","defaultOption","additionalSanitizingOption","sanitizingOption","getRootComputedStyleForContext","pasteTextProcessor","createPasteEntityProcessor","createPasteGeneralProcessor","pasteDisplayFormatParser","whiteSpace","pasteWhiteSpaceFormatParser","containerSizeFormatParser","pasteBlockEntityParser","html","trustedHTMLHandler","createDOMCreator","htmlToDOM","body","createDomToModelContextForSanitizing","retrieveCssRules","convertInlineCss","parseFormat","formatParsers","segmentOnBlock","createEmptyModel","AllowedTags","DisallowedTags","VARIABLE_REGEX","VARIABLE_PREFIX","AllowedAttributes","DefaultStyleValue","overflow","padding","float","orphans","widows","createSanitizedElement","attributes","attribute","sanitizer","processStyles","pairs","pair","valueIndex","isCssVariable","exec","processCssVariable","sanitizedValue","startsWith","sanitizeElement","allowedTags","disallowedTags","sanitizedElement","ownerDocument","newChild","cloneNode","mode","optionsOrCallbacks","getTextContent","getContentModelCopy","contentModelToText","div","clonedRoot","innerHTML","styleTag","nonWordCharacterRegex","extractHtmlIndexes","startIndex","htmlLowercase","styleIndex","nextChar","styleEndIndex","removeCommentsFromHtml","endId","startId","clipboardData","pasteType","textContent","imageDataUri","fragment","createDocumentFragment","img","maxWidth","moveChildNodes","line","lines","includes","initialOffset","tIndex","lineBefore","lineAfter","tabCount","fill","transformTabCharacters","createTextNode","htmlFromClipboard","event","eventType","htmlBefore","htmlAfter","htmlAttributes","domToModelOption","containsBlockElements","CloneOption","includeCachedElement","cloneModelForPaste","cloneModel","shouldMergeTable","pasteModel","eventResult","isFirstPaste","customizedMerge","modelBeforePaste","clonedModel","domToModelContext","domToModelSettings","customized","selectedSegment","getSegmentTextFormat","getSegmentFormatForPaste","mergeOption","mergeTable","addParagraphAfterMergedContent","EmptySegmentFormat","getLastSegmentFormat","Paste","scrollCaretIntoView","createDOMFromHtml","domCreator","pasteTypeOrGetter","getDOMCreator","isBypassed","rawHtml","cleanHtmlComments","retrieveHtmlInfo","sourceFragment","createPasteFragment","generatePasteOptionFromPlugins","globalCssRules","mergePasteContent","START_FRAGMENT","END_FRAGMENT","retrieveMetadata","querySelector","attr","meta","content","checkBlockElements","el","isBlockElement","endIndex","lastIndexOf","retrieveHtmlStrings","htmlFirstLevelChildTags","topLevelTags","retrieveTopLevelTags","snapshot","move","restoreSnapshot","addUndoSnapshot","core","canUndoByBackspace","entityStates","lifecycle","physicalRoot","logicalRoot","undo","shadowEditFragment","createSnapshotSelection","entityWrapper","findClosestEntityWrapper","api","logicalRootPath","getPath","snapshotsManager","addSnapshot","normalizeTableTree","isDOMChanged","isElementOfType","tbody","insertBefore","colgroups","thead","colgroup","startContainer","startOffset","endContainer","endOffset","newRange","createRange","setStart","setEnd","imageId","tableId","rootNode","previousSibling","childNodes","isPreviousText","announce","ariaLiveMode","announcerStringGetter","textToAnnounce","sub","formatString","announceContainer","createAriaLiveElement","ariaLive","attachDomEvent","eventMap","disposers","pluginEventType","beforeDispatch","eventName","onEvent","rawEvent","addEventListener","removeEventListener","coreApiMap","createContentModel","createEditorContext","setContentModel","setLogicalRoot","restoreUndoSnapshot","switchShadowEdit","getVisibleViewport","setEditorStyle","option","cache","textMutationObserver","flushMutations","cachedModel","saveIndex","settings","environment","builtIn","createDomToModelContextWithConfig","calculated","updateCache","paragraphMap","isRightToLeft","rootComputedStyle","documentElement","rootFontSize","hasFocus","handlePendingFormat","pendingParagraphFormat","newPendingParagraphFormat","paragraphFormat","getChangedEntities","autoDetectChangedEntities","deletedEntities","entry","formatter","scroll","newImages","paragraphIndexer","clearModelCache","isNested","shouldAddSnapshot","shouldMarkNewContent","getClientWidth","handleImages","ignoreSelection","eventData","contentModel","source","Format","data","formatApiName","changedEntities","autoCompleteInsertPoint","cachedSelection","rect","getDOMInsertPointRect","visibleRect","scrollContainer","domEvent","bottom","scrollTop","top","getSelection","rangeCount","getRangeAt","commonAncestorContainer","focusNode","focusOffset","getNewSelection","additionalRects","rects","normalizeRect","getBoundingClientRect","getIntersectedRect","updateKnownColor","transformColor","tryGetEntityElement","entityMap","isEntityElement","getEntityWrapperForReuse","isBlockEntityContainer","parentElement","tryGetEntityFromContainer","entityId","canPersist","refNode","currentNode","next","originalEntityElement","isEntityDelimiter","clearIndex","reuseCachedElement","getAllEntityWrappers","markerNode","replaceChild","restoredLogicalRoot","getPositionFromPath","snapshotSelection","domSelection","startPos","endPos","getSafeIdSelector","newContent","isRestoring","restoreSnapshotHTML","restoreSnapshotLogicalRoot","restoreSnapshotSelection","restoreSnapshotColors","SetContent","isInitializing","modelToDomSettings","createModelToDomContextWithConfig","onFixUpModel","rewriteFromModel","currentRange","areSameRanges","removeAllRanges","setBaseAndExtent","addRange","parsedTable","coordinate","below","DOM_SELECTION_CSS_KEY","HIDE_SELECTION_CSS_KEY","TRANSPARENT_SELECTION_CSS_RULE","SELECTION_SELECTOR","setRangeSelection","selectNode","addRangeToSelection","skipSelectionChangedEvent","existingSelection","areSameSelections","skipReselectOnFocus","toggleCaret","imageSelectionColor","imageSelectionBorderColorDark","imageSelectionBorderColor","ensureUniqueId","parseTableCells","lastCell","findTableCellElement","findLastedCoInMergedCell","tableSelector","tableSelectors","cont","indexes","tdCount","midElement","ind","middleElSelector","currentRow","cellIndex","handleTableSelected","tableSelectionColor","tableCellSelectionBackgroundColorDark","tableCellSelectionBackgroundColor","nodeToSelect","firstElementChild","newSelection","isHiding","idPrefix","cssRule","subSelectors","maxRuleLength","styleElement","styleElements","head","roosterjsStyleKey","deleteRule","rootSelector","maxLen","stringBuilder","subSelector","buildSelectors","insertRule","contentEditable","editorCore","isOn","allowedEventsInShadowEdit","pluginEvent","broadcast","plugins","plugin","onPluginEvent","willHandleEventExclusively","handledExclusively","contentDiv","onMutation","mutation","reconcileChildList","addedNodes","removedNodes","invalidateCache","updateCachedModel","reconcileElementId","onNativeSelectionChange","disableCache","DomIndexerImpl","createTextMutationObserver","enableParagraphMap","createParagraphMap","getName","initialize","startObserving","dispose","stopObserving","getState","isInShadowEdit","clear","forceUpdate","newRangeEx","reconcileSelection","CachePlugin","nextId","ParagraphMapImpl","prefixNum","assignMarkerToModel","getParagraphMarker","paragraphWithMarker","_marker","generateId","applyMarkerToDom","setParagraphMarker","getParagraphFromMarker","markerParagraph","_reset","_getMap","areSame","o1","o2","sel1","sel2","areSameTableSelections","range1","TableSelectionKeys","RangeKeys","r1","r2","isIndexedSegment","__roosterjsContentModel","getIndexedSegmentItem","getIndexedTableItem","unindex","persistCache","keepSelectionMarkerWhenEnteringTextNode","onSegment","segmentNode","onParagraph","paragraphElement","previousText","onTable","tableElement","onBlockEntity","onBlockEntityDelimiter","onMergeText","targetText","sourceText","internalClearIndex","oldSelection","selectionMarker","isCollapsed","reconcileTextSelection","selectionMarkerToKeepWhenEnteringTextNode","indexedImage","indexedTable","hasRevertedRangeSelection","reconcileNodeSelection","marker1","marker2","canHandle","segIndex","addedNode","reconcileAddedNode","removedNode","reconcileRemovedNode","pendingTextNode","indexedImg","isIndexedDelimiter","reconcileDelimiterSelection","insertMarker","lastChild","isAfter","segmentItem","formatSegment","selectable","textSegments","middle","newLast","firstIndex","lastIndex","cachedElement","delimiter","isBefore","existingSegment","getLastLeaf","indexNode","getFirstLeaf","removingSegment","copiedFormat","onMutationInternal","mutations","firstTarget","lastTextChangeNode","reconcileText","ignoredNodes","Set","includedNodes","has","findClosestBlockEntityContainer","add","isNodeInEditor","attributeName","observer","MutationObserver","createDOMHelper","observe","subtree","childList","characterData","disconnect","ignoreMutations","takeRecords","TextMutationObserverImpl","disposer","onContextMenuEvent","e","mouseEvent","button","getFocusedNode","contextMenuProviders","provider","getContextMenuItems","isContextMenuProvider","contextmenu","ContextMenuPlugin","customCopyCutEnabled","onPaste","isClipboardEvent","dataTransfer","shouldPreventDefaultPaste","preventDefault","extractClipboardItems","allowedCustomPasteType","then","paste","defaultPasteType","tempDiv","copy","onCutCopy","cut","isExperimentalFeatureEnabled","isCut","adjustImageSelectionOnSafari","pruneUnselectedModel","preprocessTable","adjustSelectionForCopyCut","getTempDiv","selectionForCopy","elementToSelect","childElementCount","domSelectionToRange","setData","requestAnimationFrame","cleanUpAndRestoreSelection","deleteEmptyList","Cut","userSelect","tableCtxt","isAndroid","isNormalFile","kind","isText","isContentEditable","removeAttribute","onCreateCopyEntityNode","CopyPastePlugin","Range","setStartBefore","setEndAfter","isEmptyBlock","listItemIndex","previousBlock","pruneUnselectedModelInternal","isImplicit","inheritSegmentFormatToChildren","unwrap","isSelectionAfterElement","filteredRows","newCells","createCachePlugin","createFormatPlugin","copyPaste","createCopyPastePlugin","createDOMEventPlugin","createLifecyclePlugin","createEntityPlugin","createSelectionPlugin","contextMenu","createContextMenuPlugin","createUndoPlugin","EventTypeMap","keydown","keyup","keypress","onDragStart","dragEvent","onDrop","Drop","onScroll","keyboardEventHandler","isCharacterValue","isCursorMovingKey","stopPropagation","isComposing","isInIME","inputEventHandler","onMouseDown","mouseUpEventListerAdded","onMouseUp","mouseDownX","pageX","mouseDownY","pageY","removeMouseUpEventListener","isClicking","onCompositionStart","onCompositionEnd","eventHandlers","mousedown","compositionstart","compositionend","dragstart","drop","DOMEventPlugin","ENTITY_ID_REGEX","handleMouseUpEvent","handleContentChangedEvent","handleDelimiterKeyDownEvent","handleCompositionEndEvent","handleExtractContentWithDomEvent","modifiedEntities","isFakeEntity","className","generateEntityClassNames","shouldPersist","mapEntry","isDeleted","handleDelimiterContentChangedEvent","findAllEntities","baseId","substr","newId","EntityPlugin","shiftKey","anchorNode","movingBefore","allSel","isShrinking","pairedDelimiter","entitySegment","paraIndex","entityBlock","previousElementSibling","nextElementSibling","findPairedDelimiter","originalRange","cloneRange","setEndBefore","setStartAfter","getNewRange","DelimiterBefore","DelimiterAfter","DelimiterSelector","ZeroWidthSpace","preventTypeInDelimiter","entitySibling","classList","removeInvalidDelimiters","_path","_tableContext","_segments","nodes","sibling","checkEntity","remove","normalize","cn","deleteContents","removeDelimiterAttr","getFocusedElement","existingTextInDelimiter","normalizePos","textToCheck","closest","hasChildNodes","helper","queryElements","addDelimiters","addDelimitersIfNeeded","triggerEntityEventOnEnter","altKey","ctrlKey","metaKey","adjustSelectionAroundEntity","focusedNode","blockEntityContainer","isEnter","handleKeyDownInBlockDelimiter","handleEnterInlineEntity","handleInputOnDelimiter","readonlySelectionBlock","selectionBlockParent","selectionBlock","segmentsAfterMarker","selectionBlockIndex","entities","DefaultStyleKeyMap","lastCheckedNode","normalizeFontFamily","defaultFormatKeys","normalizeSegmentFormat","checkAndApplyPendingFormat","isAndroidIME","clearPendingFormat","size","shouldApplyDefaultFormat","applyDefaultFormat","canApplyPendingFormat","applyPendingFormat","posContainer","FormatPlugin","getNewPendingFormat","markerFormat","blockCount","isSubFormatIncluded","containerFormat","subFormat","subStr","mutableParagraph","ContentEditableAttributeName","initializer","adjustColor","doNotAdjustEditorColor","adjustContainerColor","inDarkMode","addedBlockElements","removedBlockElements","SwitchToDarkMode","SwitchToLightMode","setColor","LifecyclePlugin","Up","Down","DEFAULT_SELECTION_BORDER_COLOR","DEFAULT_TABLE_CELL_SELECTION_BACKGROUND_COLOR","logicalRootDisposer","isMac","scrollTopCache","onMouseMove","tableSelection","hasTableSelection","lastCo","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","tableStart","newTableSelection","parseTableSelection","findCoordinate","updated","updateTableSelection","detachMouseEvent","getContainedTargetImage","previousSelection","onFocus","getScrollContainer","onBlur","sc","onSelectionChange","isSingleImageInSelection","getDarkColor","env","blur","onKeyDown","getClickingImage","detail","mouseDisposer","mousemove","win","isModifierKey","selectBeforeOrAfterElement","defaultPrevented","handleSelectionInTable","getTabKey","firstCo","updateTableSelectionFromKeyboard","tableSel","tabMove","oldCo","reverse","step","setRangeSelectionInTable","originalTd","td","nodeOffset","selectAll","cellStart","cellEnd","posStart","posEnd","rowChange","colChange","after","setSelectionInNextSiblingElement","selectNodeContents","tdStart","findClosestElementAncestor","SelectionPlugin","isSelection","endNode","anchorOffset","getProps","HTML_VOID_ELEMENTS","nextNode","snapshots","hasNewContentValue","totalSize","autoCompleteIndex","maxSize","newIndex","onChanged","isAutoCompleteSnapshot","currentSnapshot","isSameSnapshot","clearRedo","getSnapshotLength","removeCount","removedSize","canUndoAutoComplete","SnapshotsManagerImpl","Backspace","Delete","Enter","createSnapshotsManager","lastKeyPress","onKeyPress","clearRedoForInput","onContentChanged","onBeforeKeyboardEditing","evt","isCtrlOrMetaPressed","Keyboard","UndoPlugin","cloneOptionCallback","colorHandler","createEditorCore","initialModel","getCore","disposeErrorHandler","reset","setDarkModeState","startShadowEdit","stopShadowEdit","getTrustedHTMLHandler","featureName","Editor","excludeRoot","originalWidth","visualWidth","offsetWidth","setDomAttribute","getDomAttribute","getDomStyle","startFrom","startElement","closestElement","activeElement","clientWidth","getClonedRoot","getContainerFormat","window","fontStyle","letterSpacing","textDecoration","DOMHelperImpl","knownColors","generateColorKey","colorPair","darkModeColor","removeProperty","defaultGenerateColorKey","DarkColorHandlerImpl","createEditorEnvironment","navigator","userAgent","appVersion","createDomToModelSettings","createModelToDomSettings","isMobileOrTablet","getIsMobileOrTablet","getDarkColorFallback","corePlugins","createEditorCorePlugins","coreApiOverride","originalApi","createDarkColorHandler","isDOMCreator","createTrustedHTMLHandler","getPluginState","defaultDomToModelOptions","createDomToModelConfig","metadataAppliers","listItemMetadataApplier","listLevel","listLevelMetadataApplier","defaultModelToDomOptions","createModelToDomConfig","createModelFromHtml","exportContent","redo","OrderedMapPlaceholderRegex","getListStyleValue","numberStr","template","OrderedListStyleMap","UnorderedListStyleMap","shouldApplyToItem","metadataDefinition","ListMetadataDefinition","applierFunction","depth","listFormat","threadItemCounts","listStyleTypeFormat","BlockEntityClass","OneHundredPercent","InlineBlock","DefaultStyleSanitizers","attrSanitizers","removeDisplayFlex","processor","span","isWhiteSpacePreserved","defaultStyle","defaultFormatParsers","clip","clipPath","handler","defaultTrustHtmlHandler","DOMParser","parseFromString","trustedHTMLHandlerToDOMCreator","defaultContentModelFormatMap","blockquote","pre","th","blockElement","defaultHTMLStyleMap","address","article","aside","dd","dl","dt","em","fieldset","figcaption","figure","footer","form","header","li","main","nav","ol","paddingInlineStart","section","strike","strong","sup","boxSizing","u","ul","BulletListType","Min","Disc","Dash","Square","ShortArrow","LongArrow","UnfilledArrow","Hyphen","DoubleLongArrow","Circle","BoxShadow","Xrhombus","CheckMark","Max","AutoLink","ImageResize","ListChain","AutoFormat","NumberingListType","Decimal","DecimalDash","DecimalParenthesis","DecimalDoubleParenthesis","LowerAlpha","LowerAlphaParenthesis","LowerAlphaDoubleParenthesis","LowerAlphaDash","UpperAlpha","UpperAlphaParenthesis","UpperAlphaDoubleParenthesis","UpperAlphaDash","LowerRoman","LowerRomanParenthesis","LowerRomanDoubleParenthesis","LowerRomanDash","UpperRoman","UpperRomanParenthesis","UpperRomanDoubleParenthesis","UpperRomanDash","TableBorderFormat","Default","ListWithSideBorders","NoHeaderBorders","NoSideBorders","FirstColumnHeaderExternal","EspecialType1","EspecialType2","EspecialType3","Clear","config","blockDecorator","elementProcessors","defaultProcessorMap","buildFormatParsers","overrides","additionalParsersArray","combinedOverrides","defaultFormatKeysPerCategory","reduce","formatKey","parsers","linkProcessor","knownElementProcessor","brProcessor","codeProcessor","del","font","fontProcessor","imageProcessor","headingProcessor","hrProcessor","listItemProcessor","listProcessor","pProcessor","formatContainerProcessor","tableProcessor","generalProcessor","textProcessor","textWithSelectionProcessor","elementProcessor","entityProcessor","childProcessor","delimiterProcessor","SegmentDecoratorTags","isSegmentDecorator","ContextStyles","stackFormat","tryGetProcessorForEntity","tryGetProcessorForDelimiter","isBlockEntity","FontSizes","intSize","getDefaultStyle","formatContainer","zeroFontSize","shouldFallbackToParagraph","generalBlockProcessor","createGeneralBlock","isSelectedBefore","general","generalSegmentProcessor","createGeneralSegment","addDecorators","blockProcessor","divider","createDivider","imageFormat","title","isSelectedAsImageSelection","FormatContainerTriggerStyles","FormatContainerTriggerAttributes","ByPassFormatContainerTags","bgcolor","getPropertyValue","hasAttribute","shouldUseFormatContainer","segmentUnderLink","emptyText","listParent","listItemElement","listItemThread","currentBlocks","lastItem","listLevelThread","originalListParent","calcSizes","lastPos","selectionRoot","shouldRecalculateTableSize","tableBorder","columnPositions","hasColGroup","colFormat","tableColumn","processColGroup","rowPositions","tr","tableRow","parentTag","sourceCol","targetCol","hasSelectionBeforeCell","colEnd","colSpan","rowEnd","rowSpan","needCalcWidth","needCalcHeight","segmentOnTableCell","cellFormat","tableCell","hasTd","spannedRow","hasSelectionAfterCell","heights","internalTextProcessor","ensureParagraph","segmentCount","parser","txtStartOffset","txtEndOffset","subText","f1","f2","keys1","keys2","lastPara","formatFromParagraph","BLOCK_DISPLAY_STYLES","SkippedStylesForBlockOnSegmentOnSegment","SkippedStylesForTable","stackFormatInternal","processType","textIndent","isTextIndentApplied","linkFormat","codeFormat","decoratorFormat","stackLinkInternal","stackCodeInternal","ENTITY_INFO_NAME","ENTITY_INFO_SELECTOR","ENTITY_TYPE_PREFIX","ENTITY_ID_PREFIX","ENTITY_READONLY_PREFIX","DELIMITER_BEFORE","DELIMITER_AFTER","BLOCK_ENTITY_CONTAINER","BLOCK_ENTITY_CONTAINER_SELECTOR","isDelimiter","insertDelimiter","isEntity","parseEntityClassName","matchBefore","matchAfter","delimiterAfter","delimiterBefore","applyFormat","formatAppliers","getter","eventDataCache","CursorMovingKeys","isCtrlKey","isAltKey","isMetaKey","ContentHandlers","customValues","linkPreview","parse","types","files","pasteNativeEvent","Promise","all","resolve","getAsFile","textType","getAllowedCustomType","getAsString","StartsWithUnsupportedCharacter","hiddenProperty","__roosterjsHiddenProperty","nodeWithHiddenProperty","getHiddenProperty","setHiddenProperty","UndeletableLinkKey","undeletable","genericRoleElements","expectedType","nodeType","WHITESPACE_PRE_VALUES","keepExistingChildren","newElement","clientRect","FileReader","onload","onerror","readAsDataURL","tryGetRectFromPos","getClientRects","normalizeInsertPoint","SPACES_REGEX","charCodeAt","isForward","BorderStyles","BorderSizeRegex","combinedBorder","boldStyle","process","family","existingQuotedFontsRegex","iterateElements","transformer","includeSelf","isHTMLElement","htmlElement","ELEMENT_NODE","toDarkMode","getColor","backColor","trs","collection","wrapperTag","directionFormatHandler","dir","apply","displayFormatHandler","htmlAlignFormatHandler","htmlAlign","calcAlign","lineHeightFormatHandler","MarginKeys","marginFormatHandler","implicitFormat","PaddingKeys","AlternativeKeyLtr","AlternativeKeyRtl","paddingFormatHandler","alterativeKey","defaultValue","textAlignFormatHandler","flexDirection","alignSelf","textIndentFormatHandler","whiteSpaceFormatHandler","shouldSetValue","ariaFormatHandler","ariaDescribedBy","backgroundColorFormatHandler","borderBoxFormatHandler","BorderKeys","BorderWidthKeys","BorderRadiusKeys","AllKeys","borderFormatHandler","defaultWidth","boxShadowFormatHandler","datasetFormatHandler","floatFormatHandler","idFormatHandler","PercentageRegex","tryParseSize","attrName","attrValue","sizeFormatHandler","maxHeight","minWidth","minHeight","verticalAlignFormatHandler","wordBreakFormatHandler","wordBreak","defaultFormatHandlerMap","aria","bold","boldFormatHandler","borderBox","fontFamilyFormatHandler","fontSizeFormatHandler","entityFormatHandler","imageState","imageStateFormatHandler","italicFormatHandler","letterSpacingFormatHandler","linkFormatHandler","listItemThreadFormatHandler","listLevelThreadFormatHandler","listStyleFormatHandler","strikeFormatHandler","superOrSubScript","superOrSubScriptFormatHandler","tableLayout","tableLayoutFormatHandler","tableSpacing","tableSpacingFormatHandler","textColorFormatHandler","textColorOnTableCell","textColorOnTableCellFormatHandler","undeletableLink","undeletableLinkFormatHandler","underlineFormatHandler","styleBasedSegmentFormats","elementBasedSegmentFormats","sharedBlockFormats","sharedContainerFormats","styleBasedSegment","elementBasedSegment","tableCellBorder","defaultFormatAppliers","isLiUnderOl","defaultStyles","startNumber","listStylePosition","blockFontWeight","wrapAllChildNodes","isSuperOrSubScript","contextFont","knownFontSize","KnownFontSizes","isRemUnit","endsWith","existingFontSize","normalizeFontSize","small","medium","large","getImageState","setImageState","rel","anchorId","relationship","anchorClass","implicitColor","isLinkUndeletable","setLinkUndeletable","BorderCollapsed","BorderSeparate","borderSeparate","borderSpacing","DeprecatedColors","HEX3_REGEX","HEX6_REGEX","RGB_REGEX","RGBA_REGEX","parseColor","isBackground","darkColor","rgbSearch","rgbCurrent","lightModeColor","findLightColorFromDarkColor","existingKey","fallbackColor","colorType","lightColor","COLOR_VAR_PREFIX","initial","align","MarginValueRegex","getFontSize","currentSizeOrElement","styleInPt","ptToPx","currentSizePxOrElement","resultUnit","px","numStr","unit","normalValue","existingValue","updateMetadata","getMetadata","createTableRow","normalizeParagraph","isGeneralSegment","isEmpty","normalizeSingleSegment","ParagraphFormats","combineBorderValue","normalizeText","cacheGetEventData","hasSelectionInSegment","deleteSegment","deleteBlock","MIN_ALLOWED_TABLE_CELL_WIDTH","MIN_ALLOWED_TABLE_CELL_HEIGHT","getListStyleTypeFromString","runEditSteps","updateImageMetadata","getTableCellMetadata","targetFormat","sourceFormat","formatKeys","deleteOriginalFormat","newSegment","lastSegment","textModel","hasSpacesOnly","lastBlock","SPACE_TEXT_REGEX","isBlockEmpty","isBlockGroupEmpty","isSegmentEmpty","treatAnchorAsNotEmpty","isBlockGroup","isSegment","code1","code2","link1","link2","seg1","seg2","lastText","mutablePara","mutableSegment","secondLast","noMarkerSegments","seg","normalizeParagraphStyle","normalizeAllSegments","prev","mutableMarker","removeEmptyLinks","removeEmptySegments","formatsToMoveUp","firstFormat","internalMoveUpSegmentFormat","moveUpSegmentFormat","SPACE","NONE_BREAK_SPACE","LEADING_SPACE_REGEX","TRAILING_SPACE_REGEX","resetNormalizeSegmentContext","ignoreLeadingSpaces","ignoreTrailingSpaces","lastInlineSegment","normalizeSegment","normalizeTextSegments","normalizeLastTextSegment","modelHandlers","groupToUnwrap","formatsToKeep","rowCount","spanLeftOrColSpan","spanAboveOrRowSpan","DEFAULT_FORMAT","topBorderColor","bottomBorderColor","verticalBorderColor","hasHeaderRow","hasFirstColumn","hasBandedRows","hasBandedColumns","bgColorEven","bgColorOdd","headerRowColor","tableBorderFormat","mutableTable","effectiveMetadata","metaOverrides","removeCellShade","bgColorOverrides","vAlignOverrides","borderOverrides","bgColorOverride","updateOverrides","readonlyCell","transparentBorderMatrix","BorderFormatters","alwaysUseTransparent","getBorderStyleFromColor","formatCells","setBorderColor","setHeaderRowFormat","cloneModelWithFormat","cloneModelWithDataset","cloneBlockBase","cloneBlockGroupBase","handleCachedElement","cloneFormatContainer","cloneGeneralBlock","cloneSelectionMarker","cloneListLevel","cloneListItem","cloneDivider","cloneEntity","newParagraph","cloneSegmentBase","cloneGeneralSegment","cloneSegment","cloneParagraph","cloneTableCell","cloneTableRow","cloneTable","cloneBlock","newModel","blockToDelete","replacement","DeleteSelectionIteratingOptions","contentUnderSelectedTableCell","contentUnderSelectedGeneralElement","createInsertPoint","formatContext","undeletableSegments","readonlySegments","insertMarkerIndex","lastTableContext","removeSegment","insertIndex","readonlyParagraph","readonlySegmentToDelete","segmentToDelete","preserveWhiteSpace","isBackward","normalizePreviousSegment","deleteSingleChar","additionalSteps","deleteExpandedSelection","steps","mutableLastParagraph","mutableInsertingParagraph","mergeParagraphAfterDelete","deleteLength","deleteState","blockGroupTypes","stopTypes","bullet","includingBIU","textFormat","removeUndefinedValues","HeadingTags","KeysOfSegmentFormat","mergeParagraph","markerPosition","mergeToCurrentParagraph","splitParagraph","segmentIndex","sourceKeys","mergeTables","newTable","readonlyTable","leftCell","aboveCell","oldCell","newMarker","insertBlock","mergeList","newList","newParaFormat","applyDefaultFormatOption","mergeBlockFormat","mergeSegmentFormat","getSegmentFormatInLinkFormat","getFormatWithoutSegmentFormat","getSemanticFormat","getHyperlinkTextColor","mergeLinkFormat","resultFormat","getTableCellWidth","tryMoveBlocks","targetCell","sourceCell","mergeValue","isFirst","parseFn","formatState","firstTableContext","isFirstImage","isFirstSegment","modelFormat","retrieveStructureFormat","isMultilineSelection","validHeadingLevel","retrieveParagraphFormat","currentFormat","mergedFormat","superOrSubscript","retrieveSegmentFormat","canUnlink","canAddImageAltText","imageEditingMetadata","retrieveImageFormat","canMergeTableCell","tableFormat","isInTable","tableHasHeader","retrieveTableFormat","px2Pt","isValidDeleteSelectionContext","White","Black","shouldRemoveColor","cellBackgroundColor","calculateLightness","colorValues","isColorOverride","applyToSegments","setAdaptiveCellColor","removeAdaptiveCellColor","DefaultOrderedListStyles","DefaultUnorderedListStyles","OrderedListStyleRevertMap","UnorderedListStyleRevertMap","disc","circle","square","existingStyleType","orderedStyleType","unorderedStyleType","RomanValues","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","convertDecimalsToAlpha","decimal","isLowerCase","String","fromCharCode","convertDecimalsToRoman","romanValue","timesRomanCharAppear","repeat","styleType","isOptional","minValue","maxValue","allowNull","itemDef","minLength","maxLength","propertyDef","NumberDefinition","createNumberDefinition","BooleanDefinition","createBooleanDefinition","ImageMetadataFormatDefinition","createObjectDefinition","widthPx","heightPx","leftPercent","rightPercent","topPercent","bottomPercent","angleRad","createStringDefinition","naturalHeight","naturalWidth","flippedHorizontal","flippedVertical","list","EditingInfoDatasetName","definition","metadataString","validate","TableCellMetadataFormatDefinition","NullStringDefinition","TableFormatDefinition","def","n1","n2","abs","includingEntity","mutate","collectSelections","deepFirst","findSequence","removeUnmeaningfulSelections","groupIndex","checkFirstParagraph","allSegments","resultPath","hasSelection","internalIterateSelections","treatAllAsSelect","hasSelectedSegment","hasUnselectedSegment","newPath","handleGeneralContent","handleGeneralElement","setSelectionToBlockGroup","handleSelection","needToSetSelection","setIsSelected","blocksToDelete","findCell","wasInSelection","currentCell","setSelectionToTable","segmentsToDelete","internalSetSelectionToSegment","setSelectionToSegment","setSelectionToBlock","mutableGroup","additionAction","calcPosition","blockGroupChildren","startPosition","endPosition","imageSelection","extractSelectionRange","regularSelection","defaultContentModelHandlers","modelHandlerOverride","buildFormatAppliers","formatApplierOverride","additionalFormatAppliers","defaultModelHandlers","additionalAppliersArray","appliers","handleBlock","handleBlockGroupChildren","handleBr","handleEntityBlock","handleEntitySegment","generalBlock","handleGeneralBlock","generalSegment","handleGeneralSegment","handleDivider","handleImage","handleList","handleListItem","handleParagraph","handleFormatContainer","handleSegment","segmentDecorator","handleSegmentDecorator","handleTable","handleText","handlers","childBlock","segmentNodes","handleSegmentCommon","BlockEntityContainer","getSegmentFormat","isCursorAroundEntity","isContained","elementToReuse","before","PreChildFormat","imageModel","widthNum","heightNum","layer","stackLevel","itemLevel","editingInfo","applyMetadata","children","isGenericRoleElement","needParagraphWrapper","formatOnWrapper","handleSegments","optimize","codeNode","tableNode","applier","OptimizeTags","hasSameAttributes","element1","element2","attr1","attr2","updateSelection","mark","nextText","lastTextOriginalLength","removeUnnecessarySpan","mergeNode","originalLength","normalizeTextNode","newNode","containerNode","tagNameOrFormat","defaultCallbacks","onDivider","onEntityBlock","onEntitySegment","onGeneralSegment","onImage","onText","onBlockGroup","contentModelToTextArray","textArray","callbacks","separator","headingLevels","MarkdownHeadings","convertMarkdownToContentModel","convertContentModelToMarkdown","splitParagraphSegments","formattedSegment","createImageSegment","applyLink","adjustHeading","formattedSegments","applyTextFormatting","SPLIT_PATTERN","createFormattedSegment","texts","splitSegments","splitLinesPattern","pattern","markdownProcessor","MarkdownBlockGroupType","unordered_list","ordered_list","patternName","createListFromMarkdown","createBlockQuoteFromMarkdown","QuoteFormat","createParagraphFromMarkdown","quote","isDummy","isDummyListItem","itemText","createLevels","listModel","headingType","getHeadingDecorator","applySegmentFormatting","createTableModel","markdown","tableDivider","contents","getCellAlignment","addTableRow","tableLines","MarkdownPattern","heading","horizontal_line","space","MarkdownBlockType","addMarkdownBlockToModel","markdownContext","isMarkdownTable","createTableFromMarkdown","lastQuote","lastList","blockGroup","createBlockGroupFromMarkdown","markdownText","matched","convertMarkdownText","markdownToBeRemoved","linkRegex","isValidUrl","URL","newLine","modelProcessor","DEFAULT_NEW_LINE","newLinePattern","listCounter","newLines","paragraphContext","markdownString","createMarkdownParagraph","createMarkdownBlockGroup","createMarkdownTable","ignoreLineBreaks","createMarkdownBlock","isSubList","dummyFormat","subListItemCount","listItemCount","createMarkdownListItem","createMarkdownBlockQuote","addTableDivider","headerRow","lineBreak","DefaultOptions","autoBullet","autoNumbering","autoUnlink","autoHyphen","autoFraction","autoOrdinals","removeListMargins","autoHorizontalLine","enabled","transformFunction","_model","createAnchor","tabFeatures","_previousSegment","keyboardListTrigger","features","transformHyphen","transformFraction","transformOrdinals","enterFeatures","checkAndInsertHorizontalLine","handleEditorInputEvent","handleKeyDownEvent","handleKeyboardEvents","_markerFormat","featureApplied","feature","inputType","handledByEditFeature","unlink","AutoFormatPlugin","anchor","HorizontalLineTriggerCharacters","commonStyles","HorizontalLineStyles","Map","insertHorizontalLineIntoModel","triggerChar","allText","acc","triggerCharacter","shouldFormat","textIndex","textLength","links","promotedSegment","_paragraph","letter","listIndex","indexNumber","convertAlphaToDecimals","shouldSearchForBullet","shouldSearchForNumbering","listMarkerSegment","listMarker","bulletType","bulletListType","getPreviousListLevel","previousList","hasSpaceBetween","previousIndex","getPreviousListIndex","previousListStyle","getPreviousListStyle","numberingType","getNumberingListStyle","getIndex","isNewList","previousListItem","listBlockIndex","NumberingTypes","Character","characters","lowerRomanTypes","upperRomanTypes","numberingTriggers","lowerRomanNumbers","upperRomanNumbers","numberingListTypes","DecimalsTypes","LowerAlphaTypes","UpperAlphaTypes","LowerRomanTypes","UpperRomanTypes","textBeforeCursor","previousListIndex","trigger","isDoubleParenthesis","isContinuosList","canAppendList","isValidNumbering","numbering","separatorCharacter","identifyNumberingType","identifyNumberingListType","getListTypeStyle","triggerList","setAnnounceData","FRACTIONS","fraction","getOrdinal","ORDINALS","getNumericValue","checkFullText","number","shouldAddSuperScript","numberSegment","numericValue","ordinal","isMenuShowing","onDismiss","dismiss","allowDefaultMenu","initContainer","render","ContextMenuPluginBase","customReplacements","triggerKeys","stringToReplace","replacementString","replacementHandler","CustomReplacePlugin","handleTabKey","handleExpandedSelectionOnDelete","shouldHandleNextInputEvent","selectionAfterDelete","handleNormalEnter","createNormalEnterChecker","getHandleNormalEnter","shouldHandleEnterKey","beforeinput","handleBeforeInputEvent","hasCtrlOrMetaKey","keyboardDelete","keyboardTab","keyCode","keyboardEnter","keyboardInput","InputEvent","handled","KeyboardEvent","which","EditPlugin","deleteAllSegmentBefore","getDeleteCollapsedSelection","segmentsWithoutBr","fixupBr","shouldOutdentParagraph","lastInPath","getRoot","getLeafSiblingBlock","siblingSegment","forwardDeleteCollapsedSelection","backwardDeleteCollapsedSelection","deleteEmptyQuote","quoteBlockIndex","isEmptyQuote","isEmptyParagraph","insertNewLine","quoteIndex","mutableParent","newQuote","deleteList","DeleteWordState","getDeleteWordSelection","deleteNext","iterator","forward","punctuation","iterateSegments","curr","done","forwardDeleteWordSelection","backwardDeleteWordSelection","handleAutoLink","segBefore","handleEnterOnList","readonlyListItem","isEmptyListItem","createNewListItem","nextBlockIndex","currentPara","createNewListLevel","remainingBlockCount","counter","handleEnterOnParagraph","handleExpandedSelection","canDeleteBefore","canDeleteAfter","shouldDeleteWithContentModel","deleteAllSegmentBeforeStep","shouldDeleteAllSegmentsBefore","deleteWordSelection","shouldDeleteWord","deleteCollapsedSelection","deleteQuote","getDeleteSteps","handleKeyboardEventResult","insertZWS","shouldInputWithContentModel","handleTabOnTableCell","handleTabOnParagraph","handleTabOnList","handleTab","handleTabOnTable","selectedParagraph","findSelectedParagraph","isMarkerAtStartOfBlock","tabSpaces","selectedSegments","tabText","firstSelectedSegment","spaceText","isNext","fixupHiddenProperties","HiddenPropertyPlugin","undeletableLinkChecker","checker","anchors","checkUndeletable","defaultToolTipCallback","tooltip","onLinkClick","currentLink","onMouse","runWithHyperlink","mouseover","mouseout","matchedLink","open","HyperlinkPlugin","getCropHTML","overlayHTML","ImageEditElementClass","CropOverlay","containerHTML","CropContainer","XS_CROP","YS_CROP","leftOrRight","topOrBottom","rotation","ROTATION","CropHandle","CROP_HANDLE_SIZE","CROP_HANDLE_WIDTH","bgColor","getCropHandleHTMLInternal","getCropHTMLInternal","cropper","crop","basePercentage","deltaValue","fullValue","currentPercentage","Cropper","editInfo","onDragging","base","dx","dy","rotateCoordinate","widthPercent","heightPercent","fullWidth","fullHeight","newLeft","newRight","newTop","newBottom","preserveRatio","disableRotate","disableSideResize","onSelectState","DRAG_ID","IMAGE_EDIT_CLASS","IMAGE_EDIT_CLASS_CARET","IMAGE_EDIT_FORMAT_EVENT","shadowSpan","selectedImage","imageEditInfo","imageHTMLOptions","dndHelpers","clonedImage","lastSrc","wasImageResized","isCropMode","resizers","rotators","croppers","isEditing","applyFormatWithContentModel","ev","isImageSelection","dragend","cleanInfo","mouseDownHandler","mouseUpHandler","keyDownHandler","contentChangedHandler","removeImageEditing","shouldSelectImage","onDropHandler","imageDragged","findEditingImage","imageDropped","draggedIndex","removeImageWrapper","setContentHandler","formatEventHandler","isApiOperation","editingImageModel","editingImage","getSelectedImage","previousSelectedImage","EDITING_MARKER","applyChange","normalizeImageSelection","updateImageEditInfo","startCropMode","startRotateAndResize","startEditing","apiOperation","getSelectedImageMetadata","getHTMLImageOptions","createImageWrapper","imageClone","checkIfImageWasResized","isMobileOrTable","getDropAndDragHelpers","ResizeHandle","Resizer","updateWrapper","RotateHandle","Rotator","updateRotateHandleState","viewport","smallImage","isASmallImage","rotator","rotatorHandle","updateRotateHandle","isOperationAllowed","canRegenerateImage","cropImage","editImage","flipImage","rotateImage","ImageEditPlugin","onShowResizeHandle","cornerElements","Xs","Ys","elementData","getResizeHandleHTML","getCornerResizeHTML","sideElements","getSideResizeHTML","handle","createHandleStyle","deltaX","deltaY","horizontalOnly","verticalOnly","shouldPreserveRatio","handles","isSmall","isSideHandle","getRotateIconHTML","namespace","ROTATE_ICON_MARGIN","d","transform","stroke","htmlOptions","rotateHandleBackColor","handleLeft","ROTATE_SIZE","RotateCenter","ROTATE_HANDLE_TOP","ROTATE_GAP","ROTATE_WIDTH","DEFAULT_ROTATE_HANDLE_HEIGHT","newX","newY","angleInRad","minRotateDeg","angleInDeg","DEG_PER_RAD","editorRect","rotateCenter","rotateHandle","isSmallImage","rotateCenterRect","wrapperRect","ROTATOR_HEIGHT","RESIZE_HANDLE_MARGIN","adjustedDistance","MAX_SAFE_INTEGER","angle","rotateGap","rotateTop","RESIZE_HANDLE_SIZE","sw","nw","ne","se","MIN_HEIGHT_WIDTH","RESIZE_IMAGE","contentModelImage","wasResizedOrCropped","imageEditing","initEditInfo","checkEditInfoState","generateDataURL","generatedImageSize","getGeneratedImageSize","targetWidth","targetHeight","canvas","getContext","drawImage","getImageData","ROTATE_KEYS","CROP_KEYS","ROTATE_CROP_KEYS","ALL_KEYS","areSameNumber","compareTo","cloneImage","createImageRotator","createImageResizer","createImageCropper","createWrapper","imageSpan","createShadowSpan","shadowRoot","attachShadow","imageBox","createBorder","resizer","resizeBorder","actualWidth","actualHeight","imageAndParagraph","nHeight","nWidth","clientHeight","imageWidth","imageHeight","devicePixelRatio","scale","translate","toDataURL","beforeCrop","originalHeight","visibleWidth","visibleHeight","elementClass","useTouch","getEditElements","DragAndDropHelper","LIGHT_MODE_BGCOLOR","DARK_MODE_BGCOLOR","getPx","isFixedNumberValue","numberValue","hypotenuse","flippedHorizontally","flippedVertically","markerBefore","markerAfter","mutatedParagraph","DirectionRad","DirectionOrder","cursor","radIndex","idx","handleRadIndexCalculator","originalDirection","originalIndex","rotatedIndex","rotateHandles","newImageMetadata","contentModelMetadata","getInitialEditInfo","imageMetadata","modelImage","generateImageSize","marginHorizontal","marginVertical","cropLeftPx","cropRightPx","cropTopPx","cropBottomPx","setWrapperSizeDimensions","isRTL","setFlipped","cropContainer","cropOverlays","cropHandles","setSize","updateHandleCursor","doubleCheckResize","resizeHandles","resizeHandle","updateSideHandlesVisibility","TableEditPlugin","PastePlugin","DefaultSanitizers","ShortcutBold","ShortcutItalic","ShortcutUnderline","ShortcutClearFormat","ShortcutUndo","ShortcutUndo2","ShortcutRedo","ShortcutRedoAlt","ShortcutRedoMacOS","ShortcutBullet","ShortcutNumbering","ShortcutIncreaseFont","ShortcutDecreaseFont","ShortcutIndentList","ShortcutOutdentList","ShortcutPlugin","WatermarkPlugin","isModelEmptyFast","MarkdownPlugin","PickerPlugin","shouldBold","shouldItalic","shouldStrikethrough","shouldCode","lastKeyTyped","disableAllFeatures","handleBackspaceEvent","setFormat","character","textBeforeMarker","lastCharIndex","firstCharIndex","formattedText","divParagraphSanitizer","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","TABLE_SELECTOR","DEFAULT_BORDER_STYLE","validateExcelFragment","excelHandler","trMatch","tableMatch","setupExcelTableHandlers","allowExcelNoBorderTable","isNativeEvent","addParser","setProcessor","replaceChildren","domToModelForSanitizing","pasteSource","getPasteSource","processPastedContentFromWordDesktop","processPastedContentWacComponents","processPastedContentFromExcel","PastePropertyNames","GOOGLE_SHEET_NODE_NAME","processPastedContentFromPowerPoint","processPastedContentFromOneNote","parseLink","deprecatedBorderColorParser","tableBorderParser","pasteButtonProcessor","blockElementParser","setEventSanitizers","chainSanitizerCallback","ElementBorderKeys","styleSet","CssStyleKey","MsoSpecialFormatRegex","clearListItemStyles","removeNegativeTextIndentParser","bulletElement","msoSpecialFormat","bulletTypeHtml","startNumberOverrideOrBullet","unorderedBulletType","UnorderedBullets","innerText","orderedBulletType","getPptListStart","extractPowerPointListInfo","setupListFormat","listMetadata","processAsListItem","WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES","BULLET_LIST_STYLE","NUMBER_LIST_STYLE","IMAGE_BORDER","IMAGE_CONTAINER","OUTLINE_ELEMENT","PARAGRAPH","LIST_CONTAINER_ELEMENT_CLASS_NAME","COMMENT_HIGHLIGHT_CLASS","COMMENT_HIGHLIGHT_CLICKED_CLASS","TEMP_ELEMENTS_CLASSES","REMOVE_MARGIN_ELEMENTS","WAC_IDENTIFY_SELECTOR","LIST_ELEMENT_TAGS","LIST_ELEMENT_SELECTOR","wacSubSuperParser","wacElementProcessor","elementTag","shouldClearListContext","wacLiElementProcessor","currentListLevels","lastblock","ctx","extractWordListMetadata","updateStartOverride","newLevels","wacListItemParser","wacListLevelParser","wacCommentParser","wacContainerParser","FORMATING_REGEX","STYLE_TAG","metadataMap","htmlContent","styleContent","extractStyleTagsFromHtml","indexAt","indexCurlyEnd","indexCurlyStart","metadataName","dataName","record","formatedKey","formatedValue","set","PERCENTAGE_REGEX","getStyleMetadata","wordDesktopElementProcessor","adjustPercentileLineHeight","listLevelParser","wordTableParser","metadataKey","getStyles","processWordList","processWordComments","parsedLineHeight","_context","MSO_COMMENT_ANCHOR_HREF_REGEX","MSO_LIST","MSO_LIST_IGNORE","TEMPLATE_VALUE_REGEX","wordListPaddingParser","wordKnownLevels","wordListStyle","lNumber","wordLevel","wordList","templateFinal","templateType","templateValue","getBulletFromMetadata","listFormatMetadata","isBulletElement","getBulletElement","getLastNotEmptyBlock","NaN","knownLevel","setStartNumber","A","ensureOneNoteListContext","cmContext","oneNoteListContext","processOrderedList","processUnorderedList","processListItem","typeOfList","removeStartNumberOverride","dColor","SUPPORTED_PROTOCOLS","INVALID_LINKS_REGEX","protocol","PROG_ID_NAME","EXCEL_DESKTOP_ATTRIBUTE_NAME","documentContainWacElements","props","getSourceFunctions","isWordDesktopDocument","isExcelDesktopDocument","isExcelOnlineDocument","isPowerPointDesktopDocument","isGoogleSheetDocument","shouldConvertToSingleImage","isExcelNotNativeEvent","isOneNoteDesktopDocument","shouldConvertSingleImage","param","func","WORD_ATTRIBUTE_NAME","WORD_ATTRIBUTE_VALUE","processTextNodesRecursively","TEXT_NODE","newCallback","finalCb","og","removeMargin","listDepth","additionalParsers","beforeProcessingChildren","nonListElementParser","keyInput","replaceQueryString","potentialSegments","getQueryString","closePicker","onClosePicker","PickerHelperImpl","lastQueryString","onInitialize","onDispose","onSuggestingInput","onSuggestingKeyDown","onInput","isIncrement","onSelectionChanged","hasCtrl","onSelect","newQueryString","oldQueryString","onQueryStringChanged","charBeforeTrigger","onTrigger","splittedSegmentResult","createElementNS","datasetName","childElement","MOUSE_EVENT_INFO_DESKTOP","MOUSEDOWN","MOUSEMOVE","MOUSEUP","getPageXY","MOUSE_EVENT_INFO_MOBILE","targetTouches","touch","onSubmit","forceMobile","initX","initY","initValue","addDocumentEvents","dndMouse","removeDocumentEvents","onDragEnd","defaultShortcuts","shortcuts","cacheGetCommand","command","onClick","matchOS","matchShortcut","shortcutKey","ctrlOrMeta","modifierKey","Keys","setShortcutIndentationCommand","anchorContainerSelector","onTableEditorCreated","disableFeatures","onMouseMoveDisposer","tableRectMap","tableEditor","onMouseOut","relatedTargetNode","currentTargetNode","isOwnedElement","setTableEditor","buttons","ensureTableRects","editorWindow","scrollX","scrollY","currentTable","invalidateTableRects","disposeTableEditor","TableEditor","currentTarget","defaultTableSelector","TOP_OR_SIDE","anchorContainer","horizontalInserter","verticalInserter","horizontalResizer","verticalResizer","tableResizer","tableMover","onEditorCreated","featureType","getOnMouseOut","onFinishEditing","isCurrentlyEditing","onStartTableResize","onStartResize","onStartCellResize","disposeTableResizer","onStartTableMove","onBeforeEditTable","disposeTableInserter","disposeCellResizers","onEndTableMove","disposeHandler","disposeTableMover","onAfterInsert","relatedTarget","setEditorFeatures","tableRect","topOrSide","topOrSideBinary","tdRect","lessThanBottom","lessThanRight","moreThanLeft","isOnRightHalf","isFeatureDisabled","setInserterTd","tdAbove","tdAboveRect","isTdNotAboveMerged","setResizingTd","disableSelector","disableMovement","createTableMover","createTableResizer","createCellResizer","isHorizontal","inserter","newInserter","createTableInserter","disposeTableEditFeature","onStart","columnIndex","cmTable","anchorColumn","anchorRow","anchorRowHeight","allWidths","getCMTableFromTable","onDraggingHorizontal","onDraggingVertical","anchorChange","nextAnchorChange","setHorizontalPosition","HORIZONTAL_RESIZER_ID","CELL_RESIZER_WIDTH","setVerticalPosition","VERTICAL_RESIZER_ID","onEnd","createElementData","setPosition","featureHandler","HORIZONTAL_INSERTER_ID","VERTICAL_INSERTER_ID","onBeforeInsert","onAfterInserted","viewPort","inserterColor","getInsertElementData","TableInsertHandler","insertTd","TABLE_MOVER_LENGTH","TABLE_MOVER_ID","TABLE_MOVER_STYLE_KEY","onFinishDragging","visibleViewport","containerRect","isTableTopVisible","setDivPosition","TableMoverFeature","setTableMoverCursor","getNodePositionFromEvent","caretRangeFromPoint","caretPositionFromPoint","offsetNode","elementFromPoint","trect","initialSelection","clientY","clientX","selectWholeTable","ip","oldTable","finalTable","TABLE_RESIZER_LENGTH","TABLE_RESIZER_ID","isTableBottomVisible","TableResizer","hideResizer","originalRect","originalHeights","originalWidths","ratioX","ratioY","shouldResizeX","shouldResizeY","visibility","WATERMARK_CONTENT_KEY","styleMap","watermark","isShowing","darkTextColor","showHide","update","applyWatermarkStyle","hide","show","additionalPlugins","createEditor","extendStatics","setPrototypeOf","__proto__","__extends","TypeError","create","__assign","__rest","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","desc","Reflect","decorate","__param","paramIndex","__esDecorate","ctor","descriptorIn","contextIn","initializers","extraInitializers","accept","descriptor","access","addInitializer","init","__runInitializers","thisArg","useValue","__propKey","__setFunctionName","description","configurable","__metadata","metadataValue","__awaiter","_arguments","P","generator","reject","fulfilled","rejected","__generator","label","sent","trys","ops","verb","Symbol","op","__createBinding","o","k2","__esModule","writable","enumerable","__exportStar","__values","__read","ar","error","__spread","__spreadArrays","il","jl","__spreadArray","pack","__await","__asyncGenerator","asyncIterator","resume","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","__setModuleDefault","__importStar","mod","__importDefault","__classPrivateFieldGet","receiver","__classPrivateFieldSet","__classPrivateFieldIn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","prop","toStringTag","__webpack_exports__"],"sourceRoot":""}