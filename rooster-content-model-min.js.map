{"version":3,"file":"rooster-content-model-min.js","mappings":"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B,OAC7DmwB,EAASJ,EAAoBl6B,EAAYm6B,EAAkB/vB,KAC3DvG,EAAQ7D,EAAWgD,cAAc4F,cAEvC/E,EAAMkU,SAASsiB,EAAStoC,KAAMsoC,EAAStwC,QACvC8Z,EAAM02B,OAAOD,EAAOvoC,KAAMuoC,EAAOvwC,QAEjCqwC,EAAe,CACX/pC,KAAM,QACNwT,MAAK,GAET,MACJ,IAAK,QACD,IAAM/jB,EAAQkgB,EAAWs4B,cACrB,IAAM6B,EAAkBxwB,SAGxB7pB,IACAs6C,EAAe,CACX/pC,KAAM,QACNvQ,MAAOA,EACP6K,YAAawvC,EAAkBxvC,YAC/BgB,SAAUwuC,EAAkBxuC,SAC5BE,WAAYsuC,EAAkBtuC,WAC9BD,QAASuuC,EAAkBvuC,UAGnC,MACJ,IAAK,QACD,IAAM3F,EAAQ+Z,EAAWs4B,cACrB,IAAM6B,EAAkB3F,SAGxBvuC,IACAm0C,EAAe,CACX/pC,KAAM,QACNpK,MAAOA,IAOvBm0C,GACAz6B,EAAKI,IAAI4D,gBAAgBhE,EAAMy6B,EAEvC,C,qLC5DA,cAKa,EAAAhS,YAAqC,CAC9C,IACA,OACA,UACA,OACA,UACA,QACA,IACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,SACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,MACA,KACA,KACA,KACA,WACA,aACA,SACA,OACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,MACA,OACA,OACA,WACA,QACA,MACA,KACA,WACA,SACA,SACA,IACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,UACA,SACA,QACA,OACA,SACA,SACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QACA,OACA,KACA,KACA,IACA,KACA,MACA,MACA,OAMS,EAAAG,eAAwC,CACjD,SACA,QACA,OACA,WACA,QACA,QACA,WACA,SACA,OACA,OACA,WACA,SACA,QACA,SACA,OACA,SACA,QACA,WACA,QACA,QACA,SAGJ,IAAMzL,EAAiB,iDACjB0d,EAAkB,OAElBC,EAAoB,CACtB,SACA,QACA,MACA,UACA,OACA,QACA,QACA,OACA,UACA,cACA,SACA,WACA,UACA,MACA,UACA,WACA,WACA,OACA,UACA,SACA,SACA,OACA,OACA,WACA,QACA,OACA,QACA,OACA,OACA,MACA,MACA,YACA,QACA,MACA,WACA,OACA,UACA,UACA,cACA,WACA,MACA,WACA,WACA,OACA,UACA,QACA,WACA,QACA,OACA,QACA,OACA,aACA,MACA,UACA,SACA,QACA,OACA,QACA,WACA,SACA,QACA,YACA,OACA,SACA,SACA,QACA,QACA,OACA,WAGEC,EAAgD,CAClD,mBAAoB,cACpB,sBAAuB,eACvB,sBAAuB,OACvB,sBAAuB,MACvB,sBAAuB,IACvB,sBAAuB,UACvB,qBAAsB,OACtB,sBAAuB,OACvB,qBAAsB,IACtB,oBAAqB,eACrB,oBAAqB,OACrB,oBAAqB,MACrB,qBAAsB,eACtB,qBAAsB,OACtB,qBAAsB,MACtB,mBAAoB,eACpB,mBAAoB,OACpB,mBAAoB,MACpB,gBAAiB,cACjB,gBAAiB,OACjB,gBAAiB,MACjBjrB,SAAU,UACV,4BAA6B,MAC7B,YAAa,aACb,cAAe,MACf,eAAgB,MAChBkrB,QAAS,MACT,cAAe,MACf,eAAgB,MAChB,gBAAiB,MACjB,iBAAkB,MAClBz0C,OAAQ,MACR,aAAc,MACd,cAAe,MACf,eAAgB,MAChB,gBAAiB,MACjB,iBAAkB,WAClB00C,MAAO,OACP,aAAc,SACd,yBAA0B,SAC1B,oBAAqB,SACrB,cAAe,MACf,iBAAkB,SAClBC,QAAS,IACT,aAAc,QACd,cAAe,MACf,iBAAkB,OAClBC,OAAQ,IACR,eAAgB,MAChB,cAAe,UA2CnB,SAAgB/R,EACZp0B,EACAjF,EACAs5B,EACA+R,GAIA,IAFA,IAAMh4B,EAAUpO,EAAIhE,cAAcjB,GAEzBlQ,EAAI,EAAGA,EAAIwpC,EAAWjvC,OAAQyF,IAAK,CACxC,IAAMw7C,EA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","sources":["webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/block/setModelAlignment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/block/setModelDirection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/block/setModelIndentation.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/block/toggleModelBlockQuote.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/common/clearModelFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/common/retrieveModelFormatState.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/common/wrapBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/entity/insertEntityModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/image/applyImageBorderFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/list/findListItemsInSameThread.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/list/setListType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/selection/adjustSegmentSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/selection/adjustTrailingSpaceSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/selection/adjustWordSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/selection/collapseTableSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/alignTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/alignTableCell.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/canMergeCells.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/createTableStructure.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/deleteTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/deleteTableColumn.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/deleteTableRow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/ensureFocusableParagraphForTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/insertTableColumn.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/insertTableRow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/mergeTableCells.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/mergeTableColumn.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/mergeTableRow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/splitTableCellHorizontally.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/modelApi/table/splitTableCellVertically.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/setAlignment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/setDirection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/setHeadingLevel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/setIndentation.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/setParagraphMargin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/setSpacing.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/block/toggleBlockQuote.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/entity/insertEntity.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/format/clearFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/format/getFormatState.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/image/adjustImageSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/image/changeImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/image/insertImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/image/setImageAltText.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/image/setImageBorder.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/image/setImageBoxShadow.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/link/adjustLinkSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/link/insertLink.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/link/removeLink.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/list/setListStartNumber.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/list/setListStyle.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/list/toggleBullet.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/list/toggleNumbering.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/applySegmentFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/changeCapitalization.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/changeFontSize.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/setBackgroundColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/setFontName.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/setFontSize.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/setTextColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleBold.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleCode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleItalic.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleStrikethrough.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleSubscript.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleSuperscript.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/segment/toggleUnderline.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/table/applyTableBorderFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/table/editTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/table/formatTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/table/insertTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/table/setTableCellShade.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/utils/formatImageWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/utils/formatParagraphWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-api/lib/publicApi/utils/formatSegmentWithContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/constants/BulletListType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/constants/ChangeSource.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/constants/NumberingListType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/constants/TableBorderFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/addUndoSnapshot.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/attachDomEvent.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/createContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/createEditorContext.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/focus.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/formatContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/getDOMSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/getVisibleViewport.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/hasFocus.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/paste.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/restoreUndoSnapshot.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/setContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/setDOMSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/switchShadowEdit.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/coreApi/triggerEvent.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/ContentModelCachePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/ContentModelCopyPastePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/ContentModelFormatPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/DOMEventPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/EntityPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/LifecyclePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/SelectionPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/UndoPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/createStandaloneEditorCorePlugins.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/addRangeToSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/applyDefaultFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/applyPendingFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/areSameSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/contentModelDomIndexer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/deleteEmptyList.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/corePlugin/utils/findAllEntities.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/editor/DarkColorHandlerImpl.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/editor/SnapshotsManagerImpl.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/editor/createStandaloneEditorCore.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/editor/createStandaloneEditorDefaultSettings.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/editor/standaloneCoreApiMap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/metadata/definitionCreators.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/metadata/updateImageMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/metadata/updateListMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/metadata/updateTableCellMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/metadata/updateTableMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/modelApi/edit/deleteExpandedSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/modelApi/edit/deleteSingleChar.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/override/pasteDisplayFormatParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/override/pasteEntityProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/override/pasteGeneralProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/override/tablePreProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/color/transformColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/domUtils/borderValues.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/domUtils/eventUtils.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/domUtils/getSegmentTextFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/domUtils/readFile.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/domUtils/stringUtil.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/domUtils/tableCellUtils.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/model/cloneModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/model/createModelFromHtml.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/model/getClosestAncestorBlockGroupIndex.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/model/isBlockGroupOfType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/model/isBold.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/model/mergeModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/collectSelections.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/deleteBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/deleteSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/deleteSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/getSelectionRootNode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/hasSelectionInBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/hasSelectionInBlockGroup.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/hasSelectionInSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/iterateSelections.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/selection/setSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/table/applyTableFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/table/getSelectedCells.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/table/normalizeTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/table/setTableCellBackgroundColor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/undo/redo.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/publicApi/undo/undo.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/createSnapshotSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/extractClipboardItems.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/paste/convertInlineCss.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/paste/createPasteFragment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/paste/generatePasteOptionFromPlugins.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/paste/mergePasteContent.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/paste/retrieveHtmlInfo.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/restoreSnapshotColors.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/restoreSnapshotHTML.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/restoreSnapshotSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-core/lib/utils/sanitizeElement.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/config/defaultContentModelFormatMap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/config/defaultHTMLStyleMap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/context/createDomToModelContext.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/context/defaultProcessors.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/domToContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/blockProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/brProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/childProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/codeProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/delimiterProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/elementProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/entityProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/fontProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/formatContainerProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/generalProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/headingProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/hrProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/imageProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/knownElementProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/linkProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/listItemProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/listProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/pProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/tableProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/processors/textProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/addSelectionMarker.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/areSameFormats.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/getBoundingClientRect.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/getDefaultStyle.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/getRegularSelectionOffsets.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/isBlockElement.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/parseFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domToModel/utils/stackFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/entityUtils.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/getObjectKeys.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/isElementOfType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/isNodeOfType.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/metadata/updateMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/metadata/validate.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/moveChildNodes.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/reuseCachedElement.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/toArray.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/unwrap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/domUtils/wrap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/directionFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/displayFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/htmlAlignFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/lineHeightFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/marginFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/paddingFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/textAlignFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/block/whiteSpaceFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/backgroundColorFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/borderBoxFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/borderFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/boxShadowFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/datasetFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/floatFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/idFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/sizeFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/verticalAlignFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/common/wordBreakFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/defaultFormatHandlers.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/entity/entityFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listItemThreadFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listLevelThreadFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/list/listStyleFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/boldFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/fontFamilyFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/fontSizeFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/italicFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/letterSpacingFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/linkFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/strikeFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/superOrSubScriptFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/textColorFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/segment/underlineFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/table/tableLayoutFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/table/tableSpacingFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/table/textColorOnTableCellFormatHandler.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/color.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/dir.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/parseValueWithUnit.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/formatHandlers/utils/shouldSetValue.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/block/setParagraphNotImplicit.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/addBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/addDecorators.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/addSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/ensureParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/hasSpacesOnly.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/isEmpty.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/isGeneralSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/isWhiteSpacePreserved.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/normalizeContentModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/normalizeParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/normalizeSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/common/unwrapBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createBr.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createContentModelDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createDivider.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createEntity.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createFormatContainer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createGeneralBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createGeneralSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createListItem.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createListLevel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createParagraphDecorator.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createSelectionMarker.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createTableCell.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelApi/creators/createText.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/contentModelToDom.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/context/createModelToDomContext.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/context/defaultContentModelHandlers.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBlockGroupChildren.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleBr.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleDivider.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleEntity.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleFormatContainer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleGeneralModel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleList.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleListItem.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleParagraph.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleSegment.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleSegmentDecorator.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleTable.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/handlers/handleText.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/optimizers/mergeNode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/optimizers/optimize.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/optimizers/removeUnnecessarySpan.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/applyFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/applyMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/handleSegmentCommon.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-dom/lib/modelToDom/utils/stackFormat.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/coreApi/coreApiMap.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/coreApi/ensureTypeInContainer.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/coreApi/getContent.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/coreApi/getStyleBasedFormatState.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/coreApi/insertNode.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/coreApi/setContent.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/corePlugins/EditPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/corePlugins/EventTypeTranslatePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/corePlugins/NormalizeTablePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/corePlugins/createCorePlugins.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/ContentModelEditor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/createEditorCore.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/isContentModelEditor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/utils/buildRangeEx.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/utils/getPendableFormatState.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/editor/utils/selectionConverter.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-editor/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/ContentModelEditPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteAllSegmentBefore.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteCollapsedSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/deleteSteps/deleteWordSelection.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/handleKeyboardEventCommon.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/keyboardDelete.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/keyboardInput.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/edit/utils/getLeafSiblingBlock.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/entityDelimiter/EntityDelimiterPlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/index.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/ContentModelPastePlugin.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/Excel/processPastedContentFromExcel.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/PowerPoint/processPastedContentFromPowerPoint.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/WacComponents/constants.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/WacComponents/processPastedContentWacComponents.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/WordDesktop/getStyleMetadata.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/WordDesktop/processPastedContentFromWordDesktop.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/WordDesktop/processWordComments.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/WordDesktop/processWordLists.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/documentContainWacElements.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/getPasteSource.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isExcelDesktopDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isExcelOnlineDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isGoogleSheetDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isPowerPointDesktopDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/isWordDesktopDocument.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/pasteSourceValidations/shouldConvertToSingleImage.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/utils/addParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/utils/deprecatedColorParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/utils/getStyles.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/utils/linkParser.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model-plugins/lib/paste/utils/setProcessor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model/lib/createContentModelEditor.ts","webpack://roosterjsContentModel/./packages-content-model/roosterjs-content-model/lib/index.ts","webpack://roosterjsContentModel/external var \"roosterjs\"","webpack://roosterjsContentModel/./node_modules/tslib/tslib.es6.mjs","webpack://roosterjsContentModel/webpack/bootstrap","webpack://roosterjsContentModel/webpack/runtime/define property getters","webpack://roosterjsContentModel/webpack/runtime/hasOwnProperty shorthand","webpack://roosterjsContentModel/webpack/runtime/make namespace object","webpack://roosterjsContentModel/webpack/startup"],"sourcesContent":["export { default as insertTable } from './publicApi/table/insertTable';\nexport { default as formatTable } from './publicApi/table/formatTable';\nexport { default as setTableCellShade } from './publicApi/table/setTableCellShade';\nexport { default as editTable } from './publicApi/table/editTable';\nexport { default as applyTableBorderFormat } from './publicApi/table/applyTableBorderFormat';\nexport { default as toggleBullet } from './publicApi/list/toggleBullet';\nexport { default as toggleNumbering } from './publicApi/list/toggleNumbering';\nexport { default as toggleBold } from './publicApi/segment/toggleBold';\nexport { default as toggleItalic } from './publicApi/segment/toggleItalic';\nexport { default as toggleUnderline } from './publicApi/segment/toggleUnderline';\nexport { default as toggleStrikethrough } from './publicApi/segment/toggleStrikethrough';\nexport { default as toggleSubscript } from './publicApi/segment/toggleSubscript';\nexport { default as toggleSuperscript } from './publicApi/segment/toggleSuperscript';\nexport { default as setBackgroundColor } from './publicApi/segment/setBackgroundColor';\nexport { default as setFontName } from './publicApi/segment/setFontName';\nexport { default as setFontSize } from './publicApi/segment/setFontSize';\nexport { default as setTextColor } from './publicApi/segment/setTextColor';\nexport { default as changeFontSize } from './publicApi/segment/changeFontSize';\nexport { default as applySegmentFormat } from './publicApi/segment/applySegmentFormat';\nexport { default as changeCapitalization } from './publicApi/segment/changeCapitalization';\nexport { default as insertImage } from './publicApi/image/insertImage';\nexport { default as setListStyle } from './publicApi/list/setListStyle';\nexport { default as setListStartNumber } from './publicApi/list/setListStartNumber';\nexport { default as setIndentation } from './publicApi/block/setIndentation';\nexport { default as setAlignment } from './publicApi/block/setAlignment';\nexport { default as setDirection } from './publicApi/block/setDirection';\nexport { default as setHeadingLevel } from './publicApi/block/setHeadingLevel';\nexport { default as toggleBlockQuote } from './publicApi/block/toggleBlockQuote';\nexport { default as setSpacing } from './publicApi/block/setSpacing';\nexport { default as setImageBorder } from './publicApi/image/setImageBorder';\nexport { default as setImageBoxShadow } from './publicApi/image/setImageBoxShadow';\nexport { default as changeImage } from './publicApi/image/changeImage';\nexport { default as getFormatState } from './publicApi/format/getFormatState';\nexport { default as clearFormat } from './publicApi/format/clearFormat';\nexport { default as insertLink } from './publicApi/link/insertLink';\nexport { default as removeLink } from './publicApi/link/removeLink';\nexport { default as adjustLinkSelection } from './publicApi/link/adjustLinkSelection';\nexport { default as setImageAltText } from './publicApi/image/setImageAltText';\nexport { default as adjustImageSelection } from './publicApi/image/adjustImageSelection';\nexport { default as setParagraphMargin } from './publicApi/block/setParagraphMargin';\nexport { default as toggleCode } from './publicApi/segment/toggleCode';\nexport { default as insertEntity } from './publicApi/entity/insertEntity';\n","import { alignTable } from '../table/alignTable';\nimport { getOperationalBlocks } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelDocument,\n    ContentModelListItem,\n    TableAlignOperation,\n} from 'roosterjs-content-model-types';\n\nconst ResultMap: Record<\n    'left' | 'center' | 'right',\n    Record<'ltr' | 'rtl', 'start' | 'center' | 'end'>\n> = {\n    left: {\n        ltr: 'start',\n        rtl: 'end',\n    },\n    center: {\n        ltr: 'center',\n        rtl: 'center',\n    },\n    right: {\n        ltr: 'end',\n        rtl: 'start',\n    },\n};\n\nconst TableAlignMap: Record<\n    'left' | 'center' | 'right',\n    Record<'ltr' | 'rtl', TableAlignOperation>\n> = {\n    left: {\n        ltr: 'alignLeft',\n        rtl: 'alignRight',\n    },\n    center: {\n        ltr: 'alignCenter',\n        rtl: 'alignCenter',\n    },\n    right: {\n        ltr: 'alignRight',\n        rtl: 'alignLeft',\n    },\n};\n\n/**\n * @internal\n */\nexport function setModelAlignment(\n    model: ContentModelDocument,\n    alignment: 'left' | 'center' | 'right'\n) {\n    const paragraphOrListItemOrTable = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n\n    paragraphOrListItemOrTable.forEach(({ block }) => {\n        const newAligment = ResultMap[alignment][block.format.direction == 'rtl' ? 'rtl' : 'ltr'];\n        if (block.blockType === 'Table') {\n            alignTable(\n                block,\n                TableAlignMap[alignment][block.format.direction == 'rtl' ? 'rtl' : 'ltr']\n            );\n        } else if (block) {\n            const { format } = block;\n            format.textAlign = newAligment;\n        }\n    });\n\n    return paragraphOrListItemOrTable.length > 0;\n}\n","import { findListItemsInSameThread } from '../list/findListItemsInSameThread';\nimport { getOperationalBlocks, isBlockGroupOfType } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelDocument,\n    ContentModelListItem,\n    MarginFormat,\n    PaddingFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setModelDirection(model: ContentModelDocument, direction: 'ltr' | 'rtl') {\n    const paragraphOrListItemOrTable = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n\n    paragraphOrListItemOrTable.forEach(({ block }) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const items = findListItemsInSameThread(model, block);\n\n            items.forEach(item => {\n                item.levels.forEach(level => {\n                    level.format.direction = direction;\n                });\n\n                item.blocks.forEach(block => internalSetDirection(block.format, direction));\n            });\n        } else if (block) {\n            internalSetDirection(block.format, direction);\n        }\n    });\n\n    return paragraphOrListItemOrTable.length > 0;\n}\n\nfunction internalSetDirection(format: ContentModelBlockFormat, direction: 'ltr' | 'rtl') {\n    const wasRtl = format.direction == 'rtl';\n    const isRtl = direction == 'rtl';\n\n    if (wasRtl != isRtl) {\n        format.direction = direction;\n\n        // Adjust margin when change direction\n        // TODO: make margin and padding direction-aware, like what we did for textAlign. So no need to adjust them here\n        // TODO: Do we also need to handle border here?\n        const marginLeft = format.marginLeft;\n        const paddingLeft = format.paddingLeft;\n\n        setProperty(format, 'marginLeft', format.marginRight);\n        setProperty(format, 'marginRight', marginLeft);\n        setProperty(format, 'paddingLeft', format.paddingRight);\n        setProperty(format, 'paddingRight', paddingLeft);\n    }\n}\n\nfunction setProperty(\n    format: MarginFormat & PaddingFormat,\n    key: keyof (MarginFormat & PaddingFormat),\n    value: string | undefined\n) {\n    if (value) {\n        format[key] = value;\n    } else {\n        delete format[key];\n    }\n}\n","import { createListLevel, parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport { getOperationalBlocks, isBlockGroupOfType } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelListLevel,\n} from 'roosterjs-content-model-types';\n\nconst IndentStepInPixel = 40;\n\n/**\n * @internal\n */\nexport function setModelIndentation(\n    model: ContentModelDocument,\n    indentation: 'indent' | 'outdent',\n    length: number = IndentStepInPixel\n) {\n    const paragraphOrListItem = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        ['TableCell']\n    );\n    const isIndent = indentation == 'indent';\n\n    paragraphOrListItem.forEach(({ block }) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            if (isIndent) {\n                const lastLevel = block.levels[block.levels.length - 1];\n                const newLevel: ContentModelListLevel = createListLevel(\n                    lastLevel?.listType || 'UL',\n                    lastLevel?.format\n                );\n\n                // New level is totally new, no need to have these attributes for now\n                delete newLevel.format.startNumberOverride;\n\n                block.levels.push(newLevel);\n            } else {\n                block.levels.pop();\n            }\n        } else if (block) {\n            const { format } = block;\n            const { marginLeft, marginRight, direction } = format;\n            const isRtl = direction == 'rtl';\n            const originalValue = parseValueWithUnit(isRtl ? marginRight : marginLeft);\n            let newValue = (isIndent ? Math.ceil : Math.floor)(originalValue / length) * length;\n\n            if (newValue == originalValue) {\n                newValue = Math.max(newValue + length * (isIndent ? 1 : -1), 0);\n            }\n\n            if (isRtl) {\n                format.marginRight = newValue + 'px';\n            } else {\n                format.marginLeft = newValue + 'px';\n            }\n        }\n    });\n\n    return paragraphOrListItem.length > 0;\n}\n","import { areSameFormats, createFormatContainer, unwrapBlock } from 'roosterjs-content-model-dom';\nimport { getOperationalBlocks, isBlockGroupOfType } from 'roosterjs-content-model-core';\nimport { wrapBlockStep1, wrapBlockStep2 } from '../common/wrapBlock';\nimport type { OperationalBlocks } from 'roosterjs-content-model-core';\nimport type { WrapBlockStep1Result } from '../common/wrapBlock';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function toggleModelBlockQuote(\n    model: ContentModelDocument,\n    format: ContentModelFormatContainerFormat\n): boolean {\n    const paragraphOfQuote = getOperationalBlocks<\n        ContentModelFormatContainer | ContentModelListItem\n    >(model, ['FormatContainer', 'ListItem'], ['TableCell'], true /*deepFirst*/);\n\n    if (areAllBlockQuotes(paragraphOfQuote)) {\n        // All selections are already in quote, we need to unquote them\n        paragraphOfQuote.forEach(({ block, parent }) => {\n            unwrapBlock(parent, block);\n        });\n    } else {\n        const step1Results: WrapBlockStep1Result<ContentModelFormatContainer>[] = [];\n        const creator = () => createFormatContainer('blockquote', format);\n        const canMerge = (\n            target: ContentModelBlock,\n            current?: ContentModelFormatContainer\n        ): target is ContentModelFormatContainer =>\n            canMergeQuote(target, current?.format || format);\n\n        paragraphOfQuote.forEach(({ block, parent }) => {\n            if (isQuote(block)) {\n                // Already in quote, no op\n            } else {\n                wrapBlockStep1(step1Results, parent, block, creator, canMerge);\n            }\n        });\n\n        wrapBlockStep2(step1Results, canMerge);\n    }\n\n    return paragraphOfQuote.length > 0;\n}\n\nfunction canMergeQuote(\n    target: ContentModelBlock,\n    format: ContentModelFormatContainerFormat\n): target is ContentModelFormatContainer {\n    return isQuote(target) && areSameFormats(format, target.format);\n}\n\nfunction isQuote(block: ContentModelBlock): block is ContentModelFormatContainer {\n    return (\n        isBlockGroupOfType<ContentModelFormatContainer>(block, 'FormatContainer') &&\n        block.tagName == 'blockquote'\n    );\n}\n\nfunction areAllBlockQuotes(\n    blockAndParents: OperationalBlocks<ContentModelFormatContainer | ContentModelListItem>[]\n): blockAndParents is { block: ContentModelFormatContainer; parent: ContentModelBlockGroup }[] {\n    return blockAndParents.every(blockAndParent => isQuote(blockAndParent.block));\n}\n","import { adjustWordSelection } from '../selection/adjustWordSelection';\nimport { createFormatContainer } from 'roosterjs-content-model-dom';\nimport {\n    iterateSelections,\n    applyTableFormat,\n    getClosestAncestorBlockGroupIndex,\n    updateTableCellMetadata,\n    updateTableMetadata,\n} from 'roosterjs-content-model-core';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelListItem,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    Selectable,\n    TableSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function clearModelFormat(\n    model: ContentModelDocument,\n    blocksToClear: [ContentModelBlockGroup[], ContentModelBlock][],\n    segmentsToClear: ContentModelSegment[],\n    tablesToClear: [ContentModelTable, boolean][]\n) {\n    iterateSelections(\n        model,\n        (path, tableContext, block, segments) => {\n            if (segments) {\n                segmentsToClear.push(...segments);\n            }\n\n            if (block) {\n                blocksToClear.push([path, block]);\n            } else if (tableContext) {\n                clearTableCellFormat(tableContext, tablesToClear);\n            }\n        },\n        {\n            // When there is a default format to apply, we know how to handle segment format under list.\n            // So no need to clear format of list number.\n            // Otherwise, we will clear all format of selected text. And since they are under LI tag, we\n            // also need to clear the format of LI (format holder) so that the format is really cleared\n            includeListFormatHolder: model.format ? 'never' : 'anySegment',\n        }\n    );\n\n    const marker = segmentsToClear[0];\n\n    // 2. If selection is collapsed, add selection to whole word to clear if any\n    if (\n        blocksToClear.length == 1 &&\n        isOnlySelectionMarkerSelected(blocksToClear[0][1]) &&\n        blocksToClear.length == 1\n    ) {\n        segmentsToClear.splice(0, segmentsToClear.length, ...adjustWordSelection(model, marker));\n        clearListFormat(blocksToClear[0][0]);\n    } else if (blocksToClear.length > 1 || blocksToClear.some(x => isWholeBlockSelected(x[1]))) {\n        // 2. If a full block or multiple blocks are selected, clear block format\n        for (let i = blocksToClear.length - 1; i >= 0; i--) {\n            const [path, block] = blocksToClear[i];\n\n            clearBlockFormat(path, block);\n            clearListFormat(path);\n            clearContainerFormat(path, block);\n        }\n    }\n\n    // 3. Finally clear format for segments\n    clearSegmentsFormat(segmentsToClear, model.format);\n\n    // 4. Clear format for table if any\n    createTablesFormat(tablesToClear);\n}\n\nfunction createTablesFormat(tablesToClear: [ContentModelTable, boolean][]) {\n    tablesToClear.forEach(x => {\n        const [table, isWholeTableSelected] = x;\n        if (isWholeTableSelected) {\n            table.format = {\n                useBorderBox: table.format.useBorderBox,\n                borderCollapse: table.format.borderCollapse,\n            };\n            updateTableMetadata(table, () => null);\n        }\n\n        applyTableFormat(table, undefined /*newFormat*/, true);\n    });\n}\n\nfunction clearSegmentsFormat(\n    segmentsToClear: ContentModelSegment[],\n    defaultSegmentFormat: ContentModelSegmentFormat | undefined\n) {\n    segmentsToClear.forEach(x => {\n        x.format = { ...(defaultSegmentFormat || {}) };\n\n        if (x.link) {\n            delete x.link.format.textColor;\n        }\n\n        delete x.code;\n    });\n}\n\nfunction clearTableCellFormat(\n    tableContext: TableSelectionContext | undefined,\n    tablesToClear: [ContentModelTable, boolean][]\n) {\n    if (tableContext) {\n        const { table, colIndex, rowIndex, isWholeTableSelected } = tableContext;\n        const cell = table.rows[rowIndex].cells[colIndex];\n\n        if (cell.isSelected) {\n            updateTableCellMetadata(cell, () => null);\n            cell.isHeader = false;\n            cell.format = {\n                useBorderBox: cell.format.useBorderBox,\n            };\n        }\n\n        if (!tablesToClear.find(x => x[0] == table)) {\n            tablesToClear.push([table, isWholeTableSelected]);\n        }\n    }\n}\n\nfunction clearContainerFormat(path: ContentModelBlockGroup[], block: ContentModelBlock) {\n    const containerPathIndex = getClosestAncestorBlockGroupIndex(\n        path,\n        ['FormatContainer'],\n        ['TableCell']\n    );\n\n    if (containerPathIndex >= 0 && containerPathIndex < path.length - 1) {\n        const container = path[containerPathIndex] as ContentModelFormatContainer;\n        const containerIndex = path[containerPathIndex + 1].blocks.indexOf(container);\n        const blockIndex = container.blocks.indexOf(block);\n\n        if (blockIndex >= 0 && containerIndex >= 0) {\n            const newContainer = createFormatContainer(container.tagName, container.format);\n\n            container.blocks.splice(blockIndex, 1);\n            newContainer.blocks = container.blocks.splice(blockIndex);\n\n            path[containerPathIndex + 1].blocks.splice(containerIndex + 1, 0, block, newContainer);\n        }\n    }\n}\n\nfunction clearListFormat(path: ContentModelBlockGroup[]) {\n    const listItem = path[getClosestAncestorBlockGroupIndex(path, ['ListItem'], ['TableCell'])] as\n        | ContentModelListItem\n        | undefined;\n\n    if (listItem) {\n        listItem.levels = [];\n    }\n}\n\nfunction clearBlockFormat(path: ContentModelBlockGroup[], block: ContentModelBlock) {\n    if (block.blockType == 'Divider') {\n        const index = path[0].blocks.indexOf(block);\n\n        if (index >= 0) {\n            path[0].blocks.splice(index, 1);\n        }\n    } else if (block.blockType == 'Paragraph') {\n        block.format = {};\n        delete block.decorator;\n    }\n}\n\nfunction isOnlySelectionMarkerSelected(block: ContentModelBlock) {\n    const segments = block.blockType == 'Paragraph' ? block.segments.filter(x => x.isSelected) : [];\n\n    return segments.length == 1 && segments[0].segmentType == 'SelectionMarker';\n}\n\nfunction isWholeBlockSelected(block: ContentModelBlock) {\n    return (\n        (block as Selectable).isSelected ||\n        (block.blockType == 'Paragraph' && block.segments.every(x => x.isSelected))\n    );\n}\n","import {\n    extractBorderValues,\n    getClosestAncestorBlockGroupIndex,\n    isBold,\n    iterateSelections,\n    updateTableMetadata,\n} from 'roosterjs-content-model-core';\nimport type {\n    ContentModelFormatState,\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelFormatContainer,\n    ContentModelImage,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    TableSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function retrieveModelFormatState(\n    model: ContentModelDocument,\n    pendingFormat: ContentModelSegmentFormat | null,\n    formatState: ContentModelFormatState\n) {\n    let firstTableContext: TableSelectionContext | undefined;\n    let firstBlock: ContentModelBlock | undefined;\n    let isFirst = true;\n    let isFirstImage = true;\n    let isFirstSegment = true;\n\n    iterateSelections(\n        model,\n        (path, tableContext, block, segments) => {\n            // Structure formats\n            retrieveStructureFormat(formatState, path, isFirst);\n\n            // Multiple line format\n            if (block) {\n                if (firstBlock) {\n                    formatState.isMultilineSelection = true;\n                } else {\n                    firstBlock = block;\n                }\n            }\n\n            if (block?.blockType == 'Paragraph') {\n                // Paragraph formats\n                retrieveParagraphFormat(formatState, block, isFirst);\n\n                // Segment formats\n                segments?.forEach(segment => {\n                    if (isFirstSegment || segment.segmentType != 'SelectionMarker') {\n                        const modelFormat = Object.assign({}, model.format);\n                        delete modelFormat?.italic;\n                        delete modelFormat?.underline;\n                        delete modelFormat?.fontWeight;\n\n                        retrieveSegmentFormat(\n                            formatState,\n                            isFirst,\n                            Object.assign(\n                                {},\n                                modelFormat,\n                                block.format,\n                                block.decorator?.format,\n                                segment.format,\n                                segment.code?.format,\n                                segment.link?.format,\n                                pendingFormat\n                            )\n                        );\n\n                        mergeValue(formatState, 'isCodeInline', !!segment?.code, isFirst);\n                    }\n\n                    // We only care the format of selection marker when it is the first selected segment. This is because when selection marker\n                    // is after some other selected segments, it mostly like appears at the beginning of a seconde line when the whole first line\n                    // is selected (e.g. triple-click on a line) then the second selection marker doesn't contain a correct format, so we need to\n                    // ignore it\n                    isFirstSegment = false;\n\n                    formatState.canUnlink = formatState.canUnlink || !!segment.link;\n                    formatState.canAddImageAltText =\n                        formatState.canAddImageAltText ||\n                        segments.some(segment => segment.segmentType == 'Image');\n\n                    isFirst = false;\n\n                    if (segment.segmentType === 'Image') {\n                        if (isFirstImage) {\n                            retrieveImageFormat(segment, formatState);\n                            isFirstImage = false;\n                        } else {\n                            formatState.imageFormat = undefined;\n                        }\n                    }\n                });\n\n                isFirst = false;\n            }\n\n            if (tableContext) {\n                if (firstTableContext) {\n                    const { table, colIndex, rowIndex } = firstTableContext;\n\n                    // Merge table format\n                    if (\n                        tableContext.table == table &&\n                        (tableContext.colIndex != colIndex || tableContext.rowIndex != rowIndex)\n                    ) {\n                        formatState.canMergeTableCell = true;\n                        formatState.isMultilineSelection = true;\n                    }\n                } else {\n                    // Table formats\n                    retrieveTableFormat(tableContext, formatState);\n                    firstTableContext = tableContext;\n                }\n            }\n\n            // TODO: Support Code block in format state for Content Model\n        },\n        {\n            includeListFormatHolder: 'never',\n        }\n    );\n\n    if (formatState.fontSize) {\n        formatState.fontSize = px2Pt(formatState.fontSize);\n    }\n}\n\nfunction retrieveSegmentFormat(\n    result: ContentModelFormatState,\n    isFirst: boolean,\n    mergedFormat: ContentModelSegmentFormat\n) {\n    const superOrSubscript = mergedFormat.superOrSubScriptSequence?.split(' ')?.pop();\n\n    mergeValue(result, 'isBold', isBold(mergedFormat.fontWeight), isFirst);\n    mergeValue(result, 'isItalic', mergedFormat.italic, isFirst);\n    mergeValue(result, 'isUnderline', mergedFormat.underline, isFirst);\n    mergeValue(result, 'isStrikeThrough', mergedFormat.strikethrough, isFirst);\n    mergeValue(result, 'isSuperscript', superOrSubscript == 'super', isFirst);\n    mergeValue(result, 'isSubscript', superOrSubscript == 'sub', isFirst);\n    mergeValue(result, 'letterSpacing', mergedFormat.letterSpacing, isFirst);\n\n    mergeValue(result, 'fontName', mergedFormat.fontFamily, isFirst);\n    mergeValue(result, 'fontSize', mergedFormat.fontSize, isFirst);\n    mergeValue(result, 'backgroundColor', mergedFormat.backgroundColor, isFirst);\n    mergeValue(result, 'textColor', mergedFormat.textColor, isFirst);\n    mergeValue(result, 'fontWeight', mergedFormat.fontWeight, isFirst);\n\n    //TODO: handle block owning segments with different line-heights\n    mergeValue(result, 'lineHeight', mergedFormat.lineHeight, isFirst);\n}\n\nfunction retrieveParagraphFormat(\n    result: ContentModelFormatState,\n    paragraph: ContentModelParagraph,\n    isFirst: boolean\n) {\n    const headingLevel = parseInt((paragraph.decorator?.tagName || '').substring(1));\n    const validHeadingLevel = headingLevel >= 1 && headingLevel <= 6 ? headingLevel : undefined;\n\n    mergeValue(result, 'marginBottom', paragraph.format.marginBottom, isFirst);\n    mergeValue(result, 'marginTop', paragraph.format.marginTop, isFirst);\n    mergeValue(result, 'headingLevel', validHeadingLevel, isFirst);\n    mergeValue(result, 'textAlign', paragraph.format.textAlign, isFirst);\n    mergeValue(result, 'direction', paragraph.format.direction, isFirst);\n}\n\nfunction retrieveStructureFormat(\n    result: ContentModelFormatState,\n    path: ContentModelBlockGroup[],\n    isFirst: boolean\n) {\n    const listItemIndex = getClosestAncestorBlockGroupIndex(path, ['ListItem'], []);\n    const containerIndex = getClosestAncestorBlockGroupIndex(path, ['FormatContainer'], []);\n\n    if (listItemIndex >= 0) {\n        const listItem = path[listItemIndex] as ContentModelListItem;\n        const listType = listItem?.levels[listItem.levels.length - 1]?.listType;\n\n        mergeValue(result, 'isBullet', listType == 'UL', isFirst);\n        mergeValue(result, 'isNumbering', listType == 'OL', isFirst);\n    }\n\n    mergeValue(\n        result,\n        'isBlockQuote',\n        containerIndex >= 0 &&\n            (path[containerIndex] as ContentModelFormatContainer)?.tagName == 'blockquote',\n        isFirst\n    );\n}\n\nfunction retrieveTableFormat(tableContext: TableSelectionContext, result: ContentModelFormatState) {\n    const tableFormat = updateTableMetadata(tableContext.table);\n\n    result.isInTable = true;\n    result.tableHasHeader = tableContext.table.rows.some(row =>\n        row.cells.some(cell => cell.isHeader)\n    );\n\n    if (tableFormat) {\n        result.tableFormat = tableFormat;\n    }\n}\n\nfunction retrieveImageFormat(image: ContentModelImage, result: ContentModelFormatState) {\n    const { format } = image;\n    const borderKey = 'borderTop';\n    const extractedBorder = extractBorderValues(format[borderKey]);\n    const borderColor = extractedBorder.color;\n    const borderWidth = extractedBorder.width;\n    const borderStyle = extractedBorder.style;\n    result.imageFormat = {\n        borderColor,\n        borderWidth,\n        borderStyle,\n        boxShadow: format.boxShadow,\n        borderRadius: format.borderRadius,\n    };\n}\n\nfunction mergeValue<K extends keyof ContentModelFormatState>(\n    format: ContentModelFormatState,\n    key: K,\n    newValue: ContentModelFormatState[K] | undefined,\n    isFirst: boolean\n) {\n    if (isFirst) {\n        if (newValue !== undefined) {\n            format[key] = newValue;\n        }\n    } else if (newValue !== format[key]) {\n        delete format[key];\n    }\n}\n\nfunction px2Pt(px: string) {\n    if (px && px.indexOf('px') == px.length - 2) {\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\n        // So add 0.05 to fix it\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\n    }\n    return px;\n}\n","import { addBlock, setParagraphNotImplicit } from 'roosterjs-content-model-dom';\nimport type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface WrapBlockStep1Result<T extends ContentModelBlockGroup & ContentModelBlock> {\n    parent: ContentModelBlockGroup;\n    wrapper: T;\n}\n\n/**\n * @internal\n */\nexport function wrapBlockStep1<T extends ContentModelBlockGroup & ContentModelBlock>(\n    step1Result: WrapBlockStep1Result<T>[],\n    parent: ContentModelBlockGroup | null,\n    blockToWrap: ContentModelBlock,\n    creator: () => T,\n    canMerge: (target: ContentModelBlock) => target is T\n) {\n    const index = parent?.blocks.indexOf(blockToWrap) ?? -1;\n\n    if (parent && index >= 0) {\n        parent.blocks.splice(index, 1);\n\n        const prevBlock = parent.blocks[index - 1];\n        const wrapper = canMerge(prevBlock) ? prevBlock : createAndAdd(parent, index, creator);\n\n        setParagraphNotImplicit(blockToWrap);\n        addBlock(wrapper, blockToWrap);\n\n        // Use reverse order, so that we can merge from last to first to avoid modifying unmerged quotes\n        step1Result.unshift({ parent, wrapper });\n    }\n}\n\n/**\n * @internal\n */\nexport function wrapBlockStep2<T extends ContentModelBlockGroup & ContentModelBlock>(\n    step1Result: WrapBlockStep1Result<T>[],\n    canMerge: (target: ContentModelBlock, current: T) => target is T\n) {\n    step1Result.forEach(({ parent, wrapper }) => {\n        const index = parent.blocks.indexOf(wrapper);\n        const nextBlock = parent.blocks[index + 1];\n\n        if (index >= 0 && canMerge(nextBlock, wrapper)) {\n            wrapper.blocks.forEach(setParagraphNotImplicit);\n            wrapper.blocks.push(...nextBlock.blocks);\n            parent.blocks.splice(index + 1, 1);\n        }\n    });\n}\n\nfunction createAndAdd<T extends ContentModelBlockGroup & ContentModelBlock>(\n    parent: ContentModelBlockGroup,\n    index: number,\n    creator: () => T\n): T {\n    const block = creator();\n\n    parent.blocks.splice(index, 0, block);\n    return block;\n}\n","import {\n    deleteSelection,\n    getClosestAncestorBlockGroupIndex,\n    setSelection,\n} from 'roosterjs-content-model-core';\nimport {\n    createBr,\n    createParagraph,\n    createSelectionMarker,\n    normalizeContentModel,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelParagraph,\n    DeleteSelectionResult,\n    FormatWithContentModelContext,\n    InsertEntityPosition,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function insertEntityModel(\n    model: ContentModelDocument,\n    entityModel: ContentModelEntity,\n    position: InsertEntityPosition,\n    isBlock: boolean,\n    focusAfterEntity?: boolean,\n    context?: FormatWithContentModelContext\n) {\n    let blockParent: ContentModelBlockGroup | undefined;\n    let blockIndex = -1;\n    let deleteResult: DeleteSelectionResult;\n\n    if (position == 'begin' || position == 'end') {\n        blockParent = model;\n        blockIndex = position == 'begin' ? 0 : model.blocks.length;\n    } else if ((deleteResult = deleteSelection(model, [], context)).insertPoint) {\n        const { marker, paragraph, path } = deleteResult.insertPoint;\n\n        if (deleteResult.deleteResult == 'range') {\n            normalizeContentModel(model);\n        }\n\n        if (!isBlock) {\n            const index = paragraph.segments.indexOf(marker);\n\n            if (index >= 0) {\n                paragraph.segments.splice(focusAfterEntity ? index : index + 1, 0, entityModel);\n            }\n        } else {\n            const pathIndex =\n                position == 'root'\n                    ? getClosestAncestorBlockGroupIndex(path, ['TableCell', 'Document'])\n                    : 0;\n            blockParent = path[pathIndex];\n            const child = path[pathIndex - 1];\n            const directChild: ContentModelBlock =\n                child?.blockGroupType == 'FormatContainer' ||\n                child?.blockGroupType == 'General' ||\n                child?.blockGroupType == 'ListItem'\n                    ? child\n                    : paragraph;\n            const childIndex = blockParent.blocks.indexOf(directChild);\n            blockIndex = childIndex >= 0 ? childIndex + 1 : -1;\n        }\n    }\n\n    if (blockIndex >= 0 && blockParent) {\n        const blocksToInsert: ContentModelBlock[] = [];\n        let nextParagraph: ContentModelParagraph | undefined;\n\n        if (isBlock) {\n            const nextBlock = blockParent.blocks[blockIndex];\n\n            blocksToInsert.push(entityModel);\n\n            if (nextBlock?.blockType == 'Paragraph') {\n                nextParagraph = nextBlock;\n            } else if (!nextBlock || nextBlock.blockType == 'Entity' || focusAfterEntity) {\n                nextParagraph = createParagraph(false /*isImplicit*/, {}, model.format);\n                nextParagraph.segments.push(createBr(model.format));\n                blocksToInsert.push(nextParagraph);\n            }\n        } else {\n            nextParagraph = createParagraph(\n                false /*isImplicit*/,\n                undefined /*format*/,\n                model.format\n            );\n\n            nextParagraph.segments.push(entityModel);\n            blocksToInsert.push(nextParagraph);\n        }\n\n        blockParent.blocks.splice(blockIndex, 0, ...blocksToInsert);\n\n        if (focusAfterEntity && nextParagraph) {\n            const marker = createSelectionMarker(nextParagraph.segments[0]?.format || model.format);\n            const segments = nextParagraph.segments;\n\n            isBlock ? segments.unshift(marker) : segments.push(marker);\n            setSelection(model, marker, marker);\n        }\n    }\n}\n","import { extractBorderValues } from 'roosterjs-content-model-core';\nimport { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport type { Border, ContentModelImage } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport default function applyImageBorderFormat(\n    image: ContentModelImage,\n    border: Border | null,\n    borderRadius?: string\n) {\n    if (border) {\n        const format = image.format;\n        const { width, style, color } = border;\n        const borderKey = 'borderTop';\n        const extractedBorder = extractBorderValues(format[borderKey]);\n        const borderColor = extractedBorder.color;\n        const borderWidth = extractedBorder.width;\n        const borderStyle = extractedBorder.style;\n        let borderFormat = '';\n\n        if (width) {\n            borderFormat = parseValueWithUnit(width) + 'px';\n        } else if (borderWidth) {\n            borderFormat = borderWidth;\n        } else {\n            borderFormat = '1px';\n        }\n\n        if (style) {\n            borderFormat = `${borderFormat} ${style}`;\n        } else if (borderStyle) {\n            borderFormat = `${borderFormat} ${borderStyle}`;\n        } else {\n            borderFormat = `${borderFormat} solid`;\n        }\n\n        if (color) {\n            borderFormat = `${borderFormat} ${color}`;\n        } else if (borderColor) {\n            borderFormat = `${borderFormat} ${borderColor}`;\n        }\n        image.format.borderLeft = borderFormat;\n        image.format.borderTop = borderFormat;\n        image.format.borderBottom = borderFormat;\n        image.format.borderRight = borderFormat;\n    } else {\n        delete image.format.borderLeft;\n        delete image.format.borderTop;\n        delete image.format.borderBottom;\n        delete image.format.borderRight;\n    }\n\n    if (borderRadius) {\n        image.format.borderRadius = borderRadius;\n    }\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function findListItemsInSameThread(\n    model: ContentModelDocument,\n    currentItem: ContentModelListItem\n): ContentModelListItem[] {\n    const items: (ContentModelListItem | null)[] = [];\n\n    findListItems(model, items);\n\n    return filterListItems(items, currentItem);\n}\n\nfunction findListItems(group: ContentModelBlockGroup, result: (ContentModelListItem | null)[]) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem') {\n                    result.push(block);\n                } else {\n                    pushNullIfNecessary(result);\n                    findListItems(block, result);\n                    pushNullIfNecessary(result);\n                }\n                break;\n\n            case 'Paragraph':\n                pushNullIfNecessary(result);\n\n                block.segments.forEach(segment => {\n                    if (segment.segmentType == 'General') {\n                        findListItems(segment, result);\n                    }\n                });\n\n                pushNullIfNecessary(result);\n                break;\n\n            case 'Table':\n                pushNullIfNecessary(result);\n\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        findListItems(cell, result);\n                    })\n                );\n                pushNullIfNecessary(result);\n\n                break;\n        }\n    });\n}\n\nfunction pushNullIfNecessary(result: (ContentModelListItem | null)[]) {\n    const last = result[result.length - 1];\n\n    if (!last || last !== null) {\n        result.push(null);\n    }\n}\n\nfunction filterListItems(\n    items: (ContentModelListItem | null)[],\n    currentItem: ContentModelListItem\n) {\n    const result: ContentModelListItem[] = [];\n    const currentIndex = items.indexOf(currentItem);\n    const levelLength = currentItem.levels.length;\n    const isOrderedList = currentItem.levels[levelLength - 1]?.listType == 'OL';\n\n    if (currentIndex >= 0) {\n        for (let i = currentIndex; i >= 0; i--) {\n            const item = items[i];\n\n            if (!item) {\n                if (isOrderedList) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            const startNumberOverride = hasStartNumberOverride(item, levelLength);\n\n            if (areListTypesCompatible(items, currentIndex, i)) {\n                result.unshift(item);\n\n                if (isOrderedList && startNumberOverride) {\n                    break;\n                }\n            } else if (!isOrderedList || startNumberOverride) {\n                break;\n            }\n        }\n\n        for (let i = currentIndex + 1; i < items.length; i++) {\n            const item = items[i];\n\n            if (!item) {\n                if (isOrderedList) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            const startNumberOverride = hasStartNumberOverride(item, levelLength);\n\n            if (areListTypesCompatible(items, currentIndex, i) && !startNumberOverride) {\n                result.push(item);\n            } else if (!isOrderedList || startNumberOverride) {\n                break;\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction areListTypesCompatible(\n    listItems: (ContentModelListItem | null)[],\n    currentIndex: number,\n    compareToIndex: number\n): boolean {\n    const currentLevels = listItems[currentIndex]!.levels;\n    const compareToLevels = listItems[compareToIndex]!.levels;\n\n    return (\n        currentLevels.length <= compareToLevels.length &&\n        currentLevels.every(\n            (currentLevel, i) => currentLevel.listType == compareToLevels[i].listType\n        )\n    );\n}\n\nfunction hasStartNumberOverride(item: ContentModelListItem, levelLength: number): boolean {\n    return item.levels\n        .slice(0, levelLength)\n        .some(level => level.format.startNumberOverride !== undefined);\n}\n","import { getOperationalBlocks, isBlockGroupOfType } from 'roosterjs-content-model-core';\nimport {\n    createListItem,\n    createListLevel,\n    normalizeContentModel,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelDocument,\n    ContentModelListItem,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setListType(model: ContentModelDocument, listType: 'OL' | 'UL') {\n    const paragraphOrListItems = getOperationalBlocks<ContentModelListItem>(\n        model,\n        ['ListItem'],\n        [] // Set stop types to be empty so we can find list items even cross the boundary of table, then we can always operation on the list item if any\n    );\n    const alreadyInExpectedType = paragraphOrListItems.every(({ block }) =>\n        isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')\n            ? block.levels[block.levels.length - 1]?.listType == listType\n            : shouldIgnoreBlock(block)\n    );\n    let existingListItems: ContentModelListItem[] = [];\n    let hasIgnoredParagraphBefore = false;\n\n    paragraphOrListItems.forEach(({ block, parent }, itemIndex) => {\n        if (isBlockGroupOfType<ContentModelListItem>(block, 'ListItem')) {\n            const level = block.levels.pop();\n\n            if (!alreadyInExpectedType && level) {\n                level.listType = listType;\n                block.levels.push(level);\n            } else if (block.blocks.length == 1) {\n                setParagraphNotImplicit(block.blocks[0]);\n            }\n\n            if (alreadyInExpectedType) {\n                //if the list item has margins or textAlign, we need to apply them to the block to preserve the indention and alignment\n                block.blocks.forEach(x => {\n                    if (block.format.marginLeft) {\n                        x.format.marginLeft = block.format.marginLeft;\n                    }\n\n                    if (block.format.marginRight) {\n                        x.format.marginRight = block.format.marginRight;\n                    }\n\n                    if (block.format.textAlign) {\n                        x.format.textAlign = block.format.textAlign;\n                    }\n                });\n            }\n        } else {\n            const index = parent.blocks.indexOf(block);\n\n            if (index >= 0) {\n                if (paragraphOrListItems.length == 1 || !shouldIgnoreBlock(block)) {\n                    const prevBlock = parent.blocks[index - 1];\n                    const segmentFormat =\n                        (block.blockType == 'Paragraph' && block.segments[0]?.format) || {};\n                    const newListItem = createListItem(\n                        [\n                            createListLevel(listType, {\n                                startNumberOverride:\n                                    itemIndex > 0 ||\n                                    (prevBlock?.blockType == 'BlockGroup' &&\n                                        prevBlock.blockGroupType == 'ListItem' &&\n                                        prevBlock.levels[0]?.listType == 'OL')\n                                        ? undefined\n                                        : 1,\n                                direction: block.format.direction,\n                                textAlign: block.format.textAlign,\n                                marginTop: hasIgnoredParagraphBefore ? '0' : undefined,\n                                marginBlockEnd: '0px',\n                                marginBlockStart: '0px',\n                            }),\n                        ],\n                        // For list bullet, we only want to carry over these formats from segments:\n                        {\n                            fontFamily: segmentFormat.fontFamily,\n                            fontSize: segmentFormat.fontSize,\n                            textColor: segmentFormat.textColor,\n                        }\n                    );\n\n                    // Since there is only one paragraph under the list item, no need to keep its paragraph element (DIV).\n                    // TODO: Do we need to keep the CSS styles applied to original DIV?\n                    if (block.blockType == 'Paragraph') {\n                        block.isImplicit = true;\n                    }\n\n                    newListItem.blocks.push(block);\n\n                    if (block.format.marginRight) {\n                        newListItem.format.marginRight = block.format.marginRight;\n                        block.format.marginRight = undefined;\n                    }\n                    if (block.format.marginLeft) {\n                        newListItem.format.marginLeft = block.format.marginLeft;\n                        block.format.marginLeft = undefined;\n                    }\n\n                    if (block.format.textAlign) {\n                        newListItem.format.textAlign = block.format.textAlign;\n                    }\n\n                    parent.blocks.splice(index, 1, newListItem);\n                    existingListItems.push(newListItem);\n                } else {\n                    hasIgnoredParagraphBefore = true;\n\n                    existingListItems.forEach(x => (x.levels[0].format.marginBottom = '0'));\n                    existingListItems = [];\n                }\n            }\n        }\n    });\n\n    normalizeContentModel(model);\n\n    return paragraphOrListItems.length > 0;\n}\n\nfunction shouldIgnoreBlock(block: ContentModelBlock) {\n    switch (block.blockType) {\n        case 'Table':\n            return false;\n        case 'Paragraph':\n            return block.segments.every(\n                x => x.segmentType == 'Br' || x.segmentType == 'SelectionMarker'\n            );\n        default:\n            return true;\n    }\n}\n","import { getSelectedParagraphs, setSelection } from 'roosterjs-content-model-core';\nimport type { ContentModelDocument, ContentModelSegment } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustSegmentSelection(\n    model: ContentModelDocument,\n    firstMatcher: (target: ContentModelSegment) => boolean,\n    siblingMatcher: (target: ContentModelSegment, ref: ContentModelSegment) => boolean\n): boolean {\n    const paragraphs = getSelectedParagraphs(model);\n    let first: ContentModelSegment | undefined;\n    let last: ContentModelSegment | undefined;\n    let changed = false;\n\n    paragraphs.forEach(p => {\n        const index = first ? 0 : p.segments.findIndex(x => firstMatcher(x));\n        const segments = p.segments;\n\n        if (!first) {\n            first = segments[index];\n\n            for (let i = index; i > 0; i--) {\n                if (siblingMatcher(segments[i - 1], first)) {\n                    first = segments[i - 1];\n                    changed = changed || !segments[i - 1].isSelected;\n                } else {\n                    changed = changed || !!segments[i - 1].isSelected;\n                    break;\n                }\n            }\n        }\n\n        if (first) {\n            for (let i = index; i < p.segments.length; i++) {\n                if (i == index || siblingMatcher(segments[i], last || segments[index])) {\n                    last = segments[i];\n                    changed = changed || !segments[i].isSelected;\n                } else {\n                    changed = changed || !!segments[i].isSelected;\n                    break;\n                }\n            }\n        }\n    });\n\n    if (first && last) {\n        setSelection(model, first, last);\n    }\n\n    return changed;\n}\n","import { createText } from 'roosterjs-content-model-dom';\nimport { iterateSelections } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * If a format cannot be applied to be applied to a trailing space, split the trailing space into a separate segment\n * @internal\n */\nexport function adjustTrailingSpaceSelection(model: ContentModelDocument) {\n    iterateSelections(model, (_, __, block, segments) => {\n        if (block?.blockType === 'Paragraph' && segments && segments.length > 0) {\n            if (\n                segments.length === 1 &&\n                segments[0].segmentType === 'Text' &&\n                shouldSplitTrailingSpace(segments[0])\n            ) {\n                splitTextSegment(block, segments[0]);\n            } else {\n                const lastTextSegment =\n                    segments[segments.length - 1].segmentType === 'SelectionMarker'\n                        ? segments[segments.length - 2]\n                        : segments[segments.length - 1];\n                if (\n                    lastTextSegment &&\n                    lastTextSegment.segmentType === 'Text' &&\n                    shouldSplitTrailingSpace(lastTextSegment)\n                ) {\n                    splitTextSegment(block, lastTextSegment);\n                }\n            }\n        }\n\n        return false;\n    });\n}\n\nfunction shouldSplitTrailingSpace(segment: ContentModelText) {\n    return segment.isSelected && hasTrailingSpace(segment.text) && !isTrailingSpace(segment.text);\n}\n\nfunction hasTrailingSpace(text: string) {\n    return text.trimRight() !== text;\n}\n\nfunction isTrailingSpace(text: string) {\n    return text.trimRight().length == 0;\n}\n\nfunction splitTextSegment(block: ContentModelParagraph, textSegment: Readonly<ContentModelText>) {\n    const text = textSegment.text.trimRight();\n    const trailingSpace = textSegment.text.substring(text.length);\n    const newText = createText(text, textSegment.format, textSegment.link, textSegment.code);\n    newText.isSelected = true;\n    const trailingSpaceLink = textSegment.link\n        ? {\n              ...textSegment.link,\n              format: {\n                  ...textSegment.link?.format,\n                  underline: false, // Remove underline for trailing space link\n              },\n          }\n        : undefined;\n    const trailingSpaceSegment = createText(\n        trailingSpace,\n        undefined,\n        trailingSpaceLink,\n        textSegment.code\n    );\n    trailingSpaceSegment.isSelected = true;\n    const index = block.segments.indexOf(textSegment);\n    block.segments.splice(index, 1, newText, trailingSpaceSegment);\n}\n","import { createText } from 'roosterjs-content-model-dom';\nimport { isPunctuation, isSpace, iterateSelections } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function adjustWordSelection(\n    model: ContentModelDocument,\n    marker: ContentModelSegment\n): ContentModelSegment[] {\n    let markerBlock: ContentModelParagraph | undefined;\n\n    iterateSelections(model, (_, __, block, segments) => {\n        //Find the block with the selection marker\n        if (block?.blockType == 'Paragraph' && segments?.length == 1 && segments[0] == marker) {\n            markerBlock = block;\n        }\n        return true;\n    });\n\n    const tempSegments = markerBlock ? [...markerBlock.segments] : undefined;\n\n    if (tempSegments && markerBlock) {\n        const segments: ContentModelSegment[] = [];\n        let markerSelectionIndex = tempSegments.indexOf(marker);\n        for (let i = markerSelectionIndex - 1; i >= 0; i--) {\n            const currentSegment = tempSegments[i];\n            if (currentSegment.segmentType == 'Text') {\n                const found = findDelimiter(currentSegment, false /*moveRightward*/);\n                if (found > -1) {\n                    if (found == currentSegment.text.length) {\n                        break;\n                    }\n\n                    splitTextSegment(tempSegments, currentSegment, i, found);\n\n                    segments.push(tempSegments[i + 1]);\n\n                    break;\n                } else {\n                    segments.push(tempSegments[i]);\n                }\n            } else {\n                break;\n            }\n        }\n\n        markerSelectionIndex = tempSegments.indexOf(marker);\n        segments.push(marker);\n\n        // Marker is at start of word\n        if (segments.length <= 1) {\n            return segments;\n        }\n\n        for (let i = markerSelectionIndex + 1; i < tempSegments.length; i++) {\n            const currentSegment = tempSegments[i];\n            if (currentSegment.segmentType == 'Text') {\n                const found = findDelimiter(currentSegment, true /*moveRightward*/);\n                if (found > -1) {\n                    if (found == 0) {\n                        break;\n                    }\n                    splitTextSegment(tempSegments, currentSegment, i, found);\n                    segments.push(tempSegments[i]);\n                    break;\n                } else {\n                    segments.push(tempSegments[i]);\n                }\n            } else {\n                break;\n            }\n        }\n\n        // Marker is at end of word\n        if (segments[segments.length - 1] == marker) {\n            return [marker];\n        }\n\n        markerBlock.segments = tempSegments;\n        return segments;\n    } else {\n        return [marker];\n    }\n}\n\n/*\n// These are unicode characters mostly from the Category Space Separator (Zs)\nhttps://unicode.org/Public/UNIDATA/Scripts.txt\n\n\\u2000 = EN QUAD\n\\u2009 = THIN SPACE\n\\u200a = HAIR SPACE\n​\\u200b = ZERO WIDTH SPACE\n​\\u202f = NARROW NO-BREAK SPACE\n\\u205f​ = MEDIUM MATHEMATICAL SPACE\n\\u3000 = IDEOGRAPHIC SPACE\n*/\nfunction findDelimiter(segment: ContentModelText, moveRightward: boolean): number {\n    const word = segment.text;\n    let offset = -1;\n    if (moveRightward) {\n        for (let i = 0; i < word.length; i++) {\n            const char = word[i];\n\n            if (isPunctuation(char) || isSpace(char)) {\n                offset = i;\n                break;\n            }\n        }\n    } else {\n        for (let i = word.length - 1; i >= 0; i--) {\n            const char = word[i];\n\n            if (isPunctuation(char) || isSpace(char)) {\n                offset = i + 1;\n                break;\n            }\n        }\n    }\n    return offset;\n}\n\nfunction splitTextSegment(\n    segments: ContentModelSegment[],\n    textSegment: Readonly<ContentModelText>,\n    index: number,\n    found: number\n) {\n    const text = textSegment.text;\n    const newSegmentLeft = createText(\n        text.substring(0, found),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n    const newSegmentRight = createText(\n        text.substring(found, text.length),\n        textSegment.format,\n        textSegment.link,\n        textSegment.code\n    );\n    segments.splice(index, 1, newSegmentLeft, newSegmentRight);\n}\n","import { addSegment, createSelectionMarker } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelTableRow,\n    TableSelectionCoordinates,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function collapseTableSelection(\n    rows: ContentModelTableRow[],\n    selection: TableSelectionCoordinates\n) {\n    const { firstColumn, firstRow } = selection;\n    const cell = rows[firstRow]?.cells[firstColumn];\n    if (cell) {\n        addSegment(cell, createSelectionMarker());\n    }\n}\n","import type { ContentModelTable, TableAlignOperation } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function alignTable(table: ContentModelTable, operation: TableAlignOperation) {\n    table.format.marginLeft = operation == 'alignLeft' ? '' : 'auto';\n    table.format.marginRight = operation == 'alignRight' ? '' : 'auto';\n\n    delete table.cachedElement;\n}\n","import { getSelectedCells, updateTableCellMetadata } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelTable,\n    ContentModelTableCell,\n    TableCellHorizontalAlignOperation,\n    TableCellVerticalAlignOperation,\n} from 'roosterjs-content-model-types';\n\nconst TextAlignValueMap: Partial<Record<\n    TableCellHorizontalAlignOperation,\n    'start' | 'center' | 'end'\n>> = {\n    alignCellLeft: 'start',\n    alignCellCenter: 'center',\n    alignCellRight: 'end',\n};\n\nconst VerticalAlignValueMap: Partial<Record<\n    TableCellVerticalAlignOperation,\n    'top' | 'middle' | 'bottom'\n>> = {\n    alignCellTop: 'top',\n    alignCellMiddle: 'middle',\n    alignCellBottom: 'bottom',\n};\n\n/**\n * @internal\n */\nexport function alignTableCellHorizontally(\n    table: ContentModelTable,\n    operation: TableCellHorizontalAlignOperation\n) {\n    alignTableCellInternal(table, cell => {\n        cell.format.textAlign = TextAlignValueMap[operation];\n    });\n}\n\n/**\n * @internal\n */\nexport function alignTableCellVertically(\n    table: ContentModelTable,\n    operation: TableCellVerticalAlignOperation\n) {\n    alignTableCellInternal(table, cell => {\n        cell.format.verticalAlign = VerticalAlignValueMap[operation];\n\n        updateTableCellMetadata(cell, metadata => {\n            metadata = metadata || {};\n            metadata.vAlignOverride = true;\n            return metadata;\n        });\n    });\n}\n\nfunction alignTableCellInternal(\n    table: ContentModelTable,\n    callback: (cell: ContentModelTableCell) => void\n) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n                const cell = table.rows[rowIndex]?.cells[colIndex];\n                const format = cell?.format;\n\n                if (format) {\n                    delete cell.cachedElement;\n\n                    callback(cell);\n\n                    cell.blocks.forEach(block => {\n                        if (block.blockType === 'Paragraph') {\n                            delete block.format.textAlign;\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n","import type { ContentModelTableRow } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function canMergeCells(\n    rows: ContentModelTableRow[],\n    firstRow: number,\n    firstCol: number,\n    lastRow: number,\n    lastCol: number\n): boolean {\n    const noSpanAbove =\n        firstCol == lastCol ||\n        rows[firstRow].cells.every(\n            (cell, colIndex) => colIndex < firstCol || colIndex > lastCol || !cell.spanAbove\n        );\n    const noSpanLeft =\n        firstRow == lastRow ||\n        rows.every(\n            (row, rowIndex) =>\n                rowIndex < firstRow || rowIndex > lastRow || !row.cells[firstCol].spanLeft\n        );\n\n    const noDifferentBelowSpan = rows[lastRow].cells\n        .map((_, colIndex) =>\n            colIndex >= firstCol && colIndex <= lastCol\n                ? getBelowSpanCount(rows, lastRow, colIndex)\n                : -1\n        )\n        .every((x, _, a) => x < 0 || x == a[firstCol]);\n    const noDifferentRightSpan = rows\n        .map((_, rowIndex) =>\n            rowIndex >= firstRow && rowIndex <= lastRow\n                ? getRightSpanCount(rows, rowIndex, lastCol)\n                : -1\n        )\n        .every((x, _, a) => x < 0 || x == a[firstRow]);\n\n    return noSpanAbove && noSpanLeft && noDifferentBelowSpan && noDifferentRightSpan;\n}\n\nfunction getBelowSpanCount(rows: ContentModelTableRow[], rowIndex: number, colIndex: number) {\n    let spanCount = 0;\n\n    for (let row = rowIndex + 1; row < rows.length; row++) {\n        if (rows[row]?.cells[colIndex]?.spanAbove) {\n            spanCount++;\n        } else {\n            break;\n        }\n    }\n\n    return spanCount;\n}\n\nfunction getRightSpanCount(rows: ContentModelTableRow[], rowIndex: number, colIndex: number) {\n    let spanCount = 0;\n\n    for (let col = colIndex + 1; col < rows[rowIndex]?.cells.length; col++) {\n        if (rows[rowIndex]?.cells[col]?.spanLeft) {\n            spanCount++;\n        } else {\n            break;\n        }\n    }\n\n    return spanCount;\n}\n","import { addBlock, createTable, createTableCell } from 'roosterjs-content-model-dom';\nimport type { ContentModelBlockGroup, ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createTableStructure(\n    parent: ContentModelBlockGroup,\n    columns: number,\n    rows: number\n): ContentModelTable {\n    const table = createTable(rows);\n\n    addBlock(parent, table);\n\n    table.rows.forEach(row => {\n        for (let i = 0; i < columns; i++) {\n            const cell = createTableCell();\n\n            row.cells.push(cell);\n        }\n    });\n\n    return table;\n}\n","import type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTable(table: ContentModelTable) {\n    table.rows = [];\n    delete table.cachedElement;\n}\n","import { collapseTableSelection } from '../selection/collapseTableSelection';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTableColumn(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = 0; rowIndex < table.rows.length; rowIndex++) {\n            const cellInNextCol = table.rows[rowIndex].cells[sel.lastColumn + 1];\n\n            if (cellInNextCol) {\n                cellInNextCol.spanLeft =\n                    cellInNextCol.spanLeft && table.rows[rowIndex].cells[sel.firstColumn].spanLeft;\n            }\n\n            table.rows[rowIndex].cells.splice(\n                sel.firstColumn,\n                sel.lastColumn - sel.firstColumn + 1\n            );\n        }\n\n        table.widths.splice(sel.firstColumn, sel.lastColumn - sel.firstColumn + 1);\n        collapseTableSelection(table.rows, sel);\n    }\n}\n","import { collapseTableSelection } from '../selection/collapseTableSelection';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function deleteTableRow(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        table.rows[sel.firstRow].cells.forEach((cell, colIndex) => {\n            const cellInNextRow = table.rows[sel.lastRow + 1]?.cells[colIndex];\n\n            if (cellInNextRow) {\n                cellInNextRow.spanAbove = cellInNextRow.spanAbove && cell.spanAbove;\n            }\n        });\n\n        table.rows.splice(sel.firstRow, sel.lastRow - sel.firstRow + 1);\n\n        collapseTableSelection(table.rows, sel);\n    }\n}\n","import { createBr, createParagraph } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * After edit table, it maybe in a abnormal state, e.g. selected table cell is removed, or all rows are removed causes no place to put cursor.\n * We need to make sure table is in normal state, and there is a place to put cursor.\n * @returns a new paragraph that can but put focus in, or undefined if not needed\n */\nexport function ensureFocusableParagraphForTable(\n    model: ContentModelDocument,\n    path: ContentModelBlockGroup[],\n    table: ContentModelTable\n): ContentModelParagraph | undefined {\n    let paragraph: ContentModelParagraph | undefined;\n    const firstCell = table.rows.filter(row => row.cells.length > 0)[0]?.cells[0];\n\n    if (firstCell) {\n        // When there is a valid cell to put focus, use it\n        paragraph = firstCell.blocks.filter(\n            (block): block is ContentModelParagraph => block.blockType == 'Paragraph'\n        )[0];\n\n        if (!paragraph) {\n            // If there is not a paragraph under this cell, create one\n            paragraph = createEmptyParagraph(model);\n            firstCell.blocks.push(paragraph);\n        }\n    } else {\n        // No table cell at all, which means the whole table is deleted. So we need to remove it from content model.\n        let block: ContentModelBlock = table;\n        let parent: ContentModelBlockGroup | undefined;\n        paragraph = createEmptyParagraph(model);\n\n        // If the table is the only block of its parent and parent is a FormatContainer, remove the parent as well.\n        // We need to do this in a loop in case there are multiple layer of FormatContainer that match this case\n        while ((parent = path.shift())) {\n            const index = parent.blocks.indexOf(block) ?? -1;\n\n            if (parent && index >= 0) {\n                parent.blocks.splice(index, 1, paragraph);\n            }\n\n            if (\n                parent.blockGroupType == 'FormatContainer' &&\n                parent.blocks.length == 1 &&\n                parent.blocks[0] == paragraph\n            ) {\n                // If the new paragraph is the only child of parent format container, unwrap parent as well\n                block = parent;\n            } else {\n                // Otherwise, just stop here and keep processing the new paragraph\n                break;\n            }\n        }\n    }\n\n    return paragraph;\n}\n\nfunction createEmptyParagraph(model: ContentModelDocument) {\n    const newPara = createParagraph(false /*isImplicit*/, undefined /*blockFormat*/, model.format);\n    const br = createBr(model.format);\n\n    newPara.segments.push(br);\n\n    return newPara;\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelTable,\n    TableHorizontalInsertOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function insertTableColumn(\n    table: ContentModelTable,\n    operation: TableHorizontalInsertOperation\n) {\n    const sel = getSelectedCells(table);\n    const insertLeft = operation == 'insertLeft';\n\n    if (sel) {\n        for (let i = sel?.firstColumn; i <= sel.lastColumn; i++) {\n            table.rows.forEach(row => {\n                const cell = row.cells[insertLeft ? sel.firstColumn : sel.lastColumn];\n\n                row.cells.splice(\n                    insertLeft ? sel.firstColumn : sel.lastColumn + 1,\n                    0,\n                    createTableCell(\n                        cell.spanLeft,\n                        cell.spanAbove,\n                        cell.isHeader,\n                        cell.format,\n                        cell.dataset\n                    )\n                );\n            });\n            table.widths.splice(\n                insertLeft ? sel.firstColumn : sel.lastColumn + 1,\n                0,\n                table.widths[insertLeft ? sel.firstColumn : sel.lastColumn]\n            );\n        }\n    }\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelTable,\n    TableVerticalInsertOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function insertTableRow(table: ContentModelTable, operation: TableVerticalInsertOperation) {\n    const sel = getSelectedCells(table);\n    const insertAbove = operation == 'insertAbove';\n\n    if (sel) {\n        for (let i = sel.firstRow; i <= sel.lastRow; i++) {\n            const sourceRow = table.rows[insertAbove ? sel.firstRow : sel.lastRow];\n\n            table.rows.splice(insertAbove ? sel.firstRow : sel.lastRow + 1, 0, {\n                format: { ...sourceRow.format },\n                cells: sourceRow.cells.map(cell =>\n                    createTableCell(\n                        cell.spanLeft,\n                        cell.spanAbove,\n                        cell.isHeader,\n                        cell.format,\n                        cell.dataset\n                    )\n                ),\n                height: sourceRow.height,\n            });\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableCells(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (\n        sel &&\n        canMergeCells(table.rows, sel.firstRow, sel.firstColumn, sel.lastRow, sel.lastColumn)\n    ) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n                const cell = table.rows[rowIndex].cells[colIndex];\n\n                if (cell) {\n                    cell.spanLeft = colIndex > sel.firstColumn;\n                    cell.spanAbove = rowIndex > sel.firstRow;\n\n                    delete cell.cachedElement;\n                }\n            }\n\n            delete table.rows[rowIndex].cachedElement;\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelTable,\n    TableHorizontalMergeOperation,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableColumn(\n    table: ContentModelTable,\n    operation: TableHorizontalMergeOperation\n) {\n    const sel = getSelectedCells(table);\n    const mergeLeft = operation == 'mergeLeft';\n\n    if (sel) {\n        const mergingColIndex = mergeLeft ? sel.firstColumn : sel.lastColumn + 1;\n\n        if (mergingColIndex > 0 && mergingColIndex < table.rows[0].cells.length) {\n            for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n                const cell = table.rows[rowIndex]?.cells[mergingColIndex];\n\n                if (\n                    cell &&\n                    canMergeCells(\n                        table.rows,\n                        rowIndex,\n                        mergingColIndex - 1,\n                        rowIndex,\n                        mergingColIndex\n                    )\n                ) {\n                    cell.spanLeft = true;\n\n                    let newSelectedCol = mergingColIndex;\n\n                    while (table.rows[rowIndex]?.cells[newSelectedCol]?.spanLeft) {\n                        delete table.rows[rowIndex].cells[newSelectedCol].cachedElement;\n                        newSelectedCol--;\n                    }\n\n                    if (table.rows[rowIndex]?.cells[newSelectedCol]) {\n                        table.rows[rowIndex].cells[newSelectedCol].isSelected = true;\n\n                        delete table.rows[rowIndex].cells[newSelectedCol].cachedElement;\n                    }\n\n                    delete cell.cachedElement;\n                }\n\n                delete table.rows[rowIndex].cachedElement;\n            }\n        }\n    }\n}\n","import { canMergeCells } from './canMergeCells';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type { ContentModelTable, TableVerticalMergeOperation } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function mergeTableRow(table: ContentModelTable, operation: TableVerticalMergeOperation) {\n    const sel = getSelectedCells(table);\n    const mergeAbove = operation == 'mergeAbove';\n\n    if (sel) {\n        const mergingRowIndex = mergeAbove ? sel.firstRow : sel.lastRow + 1;\n\n        if (mergingRowIndex > 0 && mergingRowIndex < table.rows.length) {\n            for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n                const cell = table.rows[mergingRowIndex].cells[colIndex];\n\n                if (\n                    cell &&\n                    canMergeCells(\n                        table.rows,\n                        mergingRowIndex - 1,\n                        colIndex,\n                        mergingRowIndex,\n                        colIndex\n                    )\n                ) {\n                    cell.spanAbove = true;\n\n                    let newSelectedRow = mergingRowIndex;\n\n                    while (table.rows[newSelectedRow]?.cells[colIndex]?.spanAbove) {\n                        delete table.rows[newSelectedRow].cells[colIndex].cachedElement;\n                        delete table.rows[newSelectedRow].cachedElement;\n                        newSelectedRow--;\n                    }\n\n                    if (table.rows[newSelectedRow]?.cells[colIndex]) {\n                        table.rows[newSelectedRow].cells[colIndex].isSelected = true;\n\n                        delete table.rows[newSelectedRow].cells[colIndex].cachedElement;\n                        delete table.rows[newSelectedRow].cachedElement;\n                    }\n\n                    delete cell.cachedElement;\n                }\n            }\n        }\n    }\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type { ContentModelTable } from 'roosterjs-content-model-types';\n\nconst MIN_WIDTH = 30;\n\n/**\n * @internal\n */\nexport function splitTableCellHorizontally(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let colIndex = sel.lastColumn; colIndex >= sel.firstColumn; colIndex--) {\n            if (\n                table.rows.every(\n                    (row, rowIndex) =>\n                        rowIndex < sel.firstRow ||\n                        rowIndex > sel.lastRow ||\n                        row.cells[colIndex + 1]?.spanLeft\n                )\n            ) {\n                table.rows.forEach((row, rowIndex) => {\n                    delete row.cells[colIndex].cachedElement;\n\n                    if (rowIndex >= sel.firstRow && rowIndex <= sel.lastRow) {\n                        row.cells[colIndex + 1].spanLeft = false;\n                        delete row.cells[colIndex + 1].cachedElement;\n                    }\n                });\n            } else {\n                table.rows.forEach((row, rowIndex) => {\n                    const cell = row.cells[colIndex];\n                    if (cell) {\n                        const newCell = createTableCell(\n                            cell.spanLeft,\n                            cell.spanAbove,\n                            cell.isHeader,\n                            cell.format\n                        );\n\n                        newCell.dataset = { ...cell.dataset };\n\n                        if (rowIndex < sel.firstRow || rowIndex > sel.lastRow) {\n                            newCell.spanLeft = true;\n                        } else {\n                            newCell.isSelected = cell.isSelected;\n                        }\n                        row.cells.splice(colIndex + 1, 0, newCell);\n\n                        delete row.cells[colIndex].cachedElement;\n                    }\n                });\n\n                const newWidth = Math.max(table.widths[colIndex] / 2, MIN_WIDTH);\n\n                table.widths.splice(colIndex, 1, newWidth, newWidth);\n            }\n        }\n    }\n}\n","import { createTableCell } from 'roosterjs-content-model-dom';\nimport { getSelectedCells } from 'roosterjs-content-model-core';\nimport type { ContentModelTable, ContentModelTableRow } from 'roosterjs-content-model-types';\n\nconst MIN_HEIGHT = 22;\n\n/**\n * @internal\n */\nexport function splitTableCellVertically(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n\n    if (sel) {\n        for (let rowIndex = sel.lastRow; rowIndex >= sel.firstRow; rowIndex--) {\n            const row = table.rows[rowIndex];\n            const belowRow = table.rows[rowIndex + 1];\n\n            row.cells.forEach(cell => {\n                delete cell.cachedElement;\n            });\n\n            delete row.cachedElement;\n\n            if (\n                belowRow?.cells.every(\n                    (belowCell, colIndex) =>\n                        colIndex < sel.firstColumn ||\n                        colIndex > sel.lastColumn ||\n                        belowCell.spanAbove\n                )\n            ) {\n                belowRow.cells.forEach((belowCell, colIndex) => {\n                    if (colIndex >= sel.firstColumn && colIndex <= sel.lastColumn) {\n                        belowCell.spanAbove = false;\n                        delete belowCell.cachedElement;\n                    }\n                });\n\n                delete belowRow.cachedElement;\n            } else {\n                const newHeight = Math.max((row.height /= 2), MIN_HEIGHT);\n                const newRow: ContentModelTableRow = {\n                    format: { ...row.format },\n                    height: newHeight,\n                    cells: row.cells.map((cell, colIndex) => {\n                        const newCell = createTableCell(\n                            cell.spanLeft,\n                            cell.spanAbove,\n                            cell.isHeader,\n                            cell.format\n                        );\n\n                        newCell.dataset = { ...cell.dataset };\n\n                        if (colIndex < sel.firstColumn || colIndex > sel.lastColumn) {\n                            newCell.spanAbove = true;\n                        } else {\n                            newCell.isSelected = cell.isSelected;\n                        }\n\n                        return newCell;\n                    }),\n                };\n\n                row.height = newHeight;\n                table.rows.splice(rowIndex + 1, 0, newRow);\n            }\n        }\n    }\n}\n","import { setModelAlignment } from '../../modelApi/block/setModelAlignment';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set text alignment of selected paragraphs\n * @param editor The editor to set alignment\n * @param alignment Alignment value: left, center or right\n */\nexport default function setAlignment(\n    editor: IStandaloneEditor,\n    alignment: 'left' | 'center' | 'right'\n) {\n    editor.focus();\n\n    editor.formatContentModel(model => setModelAlignment(model, alignment), {\n        apiName: 'setAlignment',\n    });\n}\n","import { setModelDirection } from '../../modelApi/block/setModelDirection';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set text direction of selected paragraphs (Left to right or Right to left)\n * @param editor The editor to set alignment\n * @param direction Direction value: ltr (Left to right) or rtl (Right to left)\n */\nexport default function setDirection(editor: IStandaloneEditor, direction: 'ltr' | 'rtl') {\n    editor.focus();\n\n    editor.formatContentModel(model => setModelDirection(model, direction), {\n        apiName: 'setDirection',\n    });\n}\n","import { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type {\n    ContentModelParagraphDecorator,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\n\ntype HeadingLevelTags = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nconst HeaderFontSizes: Record<HeadingLevelTags, string> = {\n    h1: '2em',\n    h2: '1.5em',\n    h3: '1.17em',\n    h4: '1em',\n    h5: '0.83em',\n    h6: '0.67em',\n};\n\n/**\n * Set heading level of selected paragraphs\n * @param editor The editor to set heading level to\n * @param headingLevel Level of heading, from 1 to 6. Set to 0 means set it back to a regular paragraph\n */\nexport default function setHeadingLevel(\n    editor: IStandaloneEditor,\n    headingLevel: 0 | 1 | 2 | 3 | 4 | 5 | 6\n) {\n    editor.focus();\n\n    formatParagraphWithContentModel(editor, 'setHeadingLevel', para => {\n        const tagName =\n            headingLevel > 0\n                ? (('h' + headingLevel) as HeadingLevelTags | null)\n                : getExistingHeadingTag(para.decorator);\n\n        if (headingLevel > 0) {\n            para.decorator = {\n                tagName: tagName!,\n                format: tagName\n                    ? {\n                          fontWeight: 'bold',\n                          fontSize: HeaderFontSizes[tagName],\n                      }\n                    : {},\n            };\n\n            // Remove existing formats since tags have default font size and weight\n            para.segments.forEach(segment => {\n                delete segment.format.fontSize;\n                delete segment.format.fontWeight;\n            });\n        } else if (tagName) {\n            delete para.decorator;\n        }\n    });\n}\n\nfunction getExistingHeadingTag(\n    decorator?: ContentModelParagraphDecorator\n): HeadingLevelTags | null {\n    const tag = decorator?.tagName || '';\n    const level = parseInt(tag.substring(1));\n\n    return level >= 1 && level <= 6 ? (tag as HeadingLevelTags) : null;\n}\n","import { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { setModelIndentation } from '../../modelApi/block/setModelIndentation';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Indent or outdent to selected paragraphs\n * @param editor The editor to operate on\n * @param indentation Whether indent or outdent\n * @param length The length of pixel to indent/outdent @default 40\n */\nexport default function setIndentation(\n    editor: IStandaloneEditor,\n    indentation: 'indent' | 'outdent',\n    length?: number\n) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            const result = setModelIndentation(model, indentation, length);\n\n            if (result) {\n                normalizeContentModel(model);\n            }\n\n            context.newPendingFormat = 'preserve';\n\n            return result;\n        },\n        {\n            apiName: 'setIndentation',\n        }\n    );\n}\n","import { createParagraphDecorator } from 'roosterjs-content-model-dom';\nimport { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggles the current block(s) margin properties.\n * null deletes any existing value, undefined is ignored\n * @param editor The editor to operate on\n * @param marginTop value for top margin\n * @param marginBottom value for bottom margin\n */\nexport default function setParagraphMargin(\n    editor: IStandaloneEditor,\n    marginTop?: string | null,\n    marginBottom?: string | null\n) {\n    editor.focus();\n\n    formatParagraphWithContentModel(editor, 'setParagraphMargin', para => {\n        if (!para.decorator) {\n            para.decorator = createParagraphDecorator('p');\n        }\n\n        if (marginTop) {\n            para.format.marginTop = marginTop;\n        } else if (marginTop === null) {\n            delete para.format.marginTop;\n        }\n\n        if (marginBottom) {\n            para.format.marginBottom = marginBottom;\n        } else if (marginBottom === null) {\n            delete para.format.marginBottom;\n        }\n    });\n}\n","import { formatParagraphWithContentModel } from '../utils/formatParagraphWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Sets current selected block(s) line-height property and wipes such property from child segments\n * @param editor The editor to operate on\n * @param spacing Unitless/px value to set line height\n */\nexport default function setSpacing(editor: IStandaloneEditor, spacing: number | string) {\n    editor.focus();\n\n    formatParagraphWithContentModel(editor, 'setSpacing', paragraph => {\n        paragraph.format.lineHeight = spacing.toString();\n        paragraph.segments.forEach(segment => {\n            if (segment.format.lineHeight) {\n                delete segment.format.lineHeight;\n            }\n        });\n    });\n}\n","import { toggleModelBlockQuote } from '../../modelApi/block/toggleModelBlockQuote';\nimport type {\n    ContentModelFormatContainerFormat,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\n\nconst DefaultQuoteFormat: ContentModelFormatContainerFormat = {\n    borderLeft: '3px solid rgb(200, 200, 200)', // TODO: Support RTL\n    textColor: 'rgb(102, 102, 102)',\n};\nconst BuildInQuoteFormat: ContentModelFormatContainerFormat = {\n    marginTop: '1em',\n    marginBottom: '1em',\n    marginLeft: '40px',\n    marginRight: '40px',\n    paddingLeft: '10px',\n};\n\n/**\n * Toggle BLOCKQUOTE state of selected paragraphs.\n * If any selected paragraph is not under a BLOCKQUOTE, wrap them into a BLOCKQUOTE.\n * Otherwise, unwrap all related BLOCKQUOTEs.\n * @param editor The editor object to toggle BLOCKQUOTE onto\n * @param quoteFormat @optional Block format for the new quote object\n */\nexport default function toggleBlockQuote(\n    editor: IStandaloneEditor,\n    quoteFormat: ContentModelFormatContainerFormat = DefaultQuoteFormat\n) {\n    const fullQuoteFormat = {\n        ...BuildInQuoteFormat,\n        ...quoteFormat,\n    };\n\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            context.newPendingFormat = 'preserve';\n\n            return toggleModelBlockQuote(model, fullQuoteFormat);\n        },\n        {\n            apiName: 'toggleBlockQuote',\n        }\n    );\n}\n","import { ChangeSource } from 'roosterjs-content-model-core';\nimport { createEntity, normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { insertEntityModel } from '../../modelApi/entity/insertEntityModel';\nimport type {\n    ContentModelEntity,\n    DOMSelection,\n    InsertEntityPosition,\n    InsertEntityOptions,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\nimport type { Entity } from 'roosterjs-editor-types';\n\nconst BlockEntityTag = 'div';\nconst InlineEntityTag = 'span';\n\n/**\n * Insert an entity into editor\n * @param editor The Content Model editor\n * @param type Type of entity\n * @param isBlock True to insert a block entity, false to insert an inline entity\n * @param position Position of the entity to insert. It can be\n * Value of InsertEntityPosition: see InsertEntityPosition\n * selectionRangeEx: Use this range instead of current focus position to insert. After insert, focus will be moved to\n * the beginning of this range (when focusAfterEntity is not set to true) or after the new entity (when focusAfterEntity is set to true)\n * @param options Move options to insert. See InsertEntityOptions\n */\nexport default function insertEntity(\n    editor: IStandaloneEditor,\n    type: string,\n    isBlock: boolean,\n    position: 'focus' | 'begin' | 'end' | DOMSelection,\n    options?: InsertEntityOptions\n): ContentModelEntity | null;\n\n/**\n * Insert a block entity into editor\n * @param editor The Content Model editor\n * @param type Type of entity\n * @param isBlock Must be true for a block entity\n * @param position Position of the entity to insert. It can be\n * Value of InsertEntityPosition: see InsertEntityPosition\n * selectionRangeEx: Use this range instead of current focus position to insert. After insert, focus will be moved to\n * the beginning of this range (when focusAfterEntity is not set to true) or after the new entity (when focusAfterEntity is set to true)\n * @param options Move options to insert. See InsertEntityOptions\n */\nexport default function insertEntity(\n    editor: IStandaloneEditor,\n    type: string,\n    isBlock: true,\n    position: InsertEntityPosition | DOMSelection,\n    options?: InsertEntityOptions\n): ContentModelEntity | null;\n\nexport default function insertEntity(\n    editor: IStandaloneEditor,\n    type: string,\n    isBlock: boolean,\n    position?: InsertEntityPosition | DOMSelection,\n    options?: InsertEntityOptions\n): ContentModelEntity | null {\n    const { contentNode, focusAfterEntity, wrapperDisplay, skipUndoSnapshot } = options || {};\n    const wrapper = editor.getDocument().createElement(isBlock ? BlockEntityTag : InlineEntityTag);\n    const display = wrapperDisplay ?? (isBlock ? undefined : 'inline-block');\n\n    wrapper.style.setProperty('display', display || null);\n\n    if (contentNode) {\n        wrapper.appendChild(contentNode);\n    }\n\n    const entityModel = createEntity(wrapper, true /*isReadonly*/, undefined /*format*/, type);\n\n    editor.formatContentModel(\n        (model, context) => {\n            insertEntityModel(\n                model,\n                entityModel,\n                typeof position == 'string' ? position : 'focus',\n                isBlock,\n                focusAfterEntity,\n                context\n            );\n\n            normalizeContentModel(model);\n\n            context.skipUndoSnapshot = skipUndoSnapshot;\n            context.newEntities.push(entityModel);\n\n            return true;\n        },\n        {\n            selectionOverride: typeof position === 'object' ? position : undefined,\n            changeSource: ChangeSource.InsertEntity,\n            getChangeData: () => {\n                // TODO: Remove this entity when we have standalone editor\n                const entity: Entity = {\n                    wrapper,\n                    type,\n                    id: '',\n                    isReadonly: true,\n                };\n\n                return entity;\n            },\n            apiName: 'insertEntity',\n        }\n    );\n\n    return entityModel;\n}\n","import { clearModelFormat } from '../../modelApi/common/clearModelFormat';\nimport { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type {\n    IStandaloneEditor,\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n    ContentModelTable,\n} from 'roosterjs-content-model-types';\n\n/**\n * Clear format of selection\n * @param editor The editor to clear format from\n */\nexport default function clearFormat(editor: IStandaloneEditor) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const blocksToClear: [ContentModelBlockGroup[], ContentModelBlock][] = [];\n            const segmentsToClear: ContentModelSegment[] = [];\n            const tablesToClear: [ContentModelTable, boolean][] = [];\n\n            clearModelFormat(model, blocksToClear, segmentsToClear, tablesToClear);\n\n            normalizeContentModel(model);\n\n            return (\n                blocksToClear.length > 0 || segmentsToClear.length > 0 || tablesToClear.length > 0\n            );\n        },\n        {\n            apiName: 'clearFormat',\n        }\n    );\n}\n","import { getSelectionRootNode } from 'roosterjs-content-model-core';\nimport { retrieveModelFormatState } from '../../modelApi/common/retrieveModelFormatState';\nimport type {\n    IStandaloneEditor,\n    ContentModelBlockGroup,\n    ContentModelFormatState,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\nimport {\n    getRegularSelectionOffsets,\n    handleRegularSelection,\n    isNodeOfType,\n    processChildNode,\n} from 'roosterjs-content-model-dom';\n\n/**\n * Get current format state\n * @param editor The editor to get format from\n */\nexport default function getFormatState(editor: IStandaloneEditor): ContentModelFormatState {\n    const pendingFormat = editor.getPendingFormat();\n    const model = editor.createContentModel({\n        processorOverride: {\n            child: reducedModelChildProcessor,\n        },\n    });\n    const manager = editor.getSnapshotsManager();\n    const result: ContentModelFormatState = {\n        canUndo: manager.hasNewContent || manager.canMove(-1),\n        canRedo: manager.canMove(1),\n        isDarkMode: editor.isDarkMode(),\n        zoomScale: editor.getZoomScale(),\n    };\n\n    retrieveModelFormatState(model, pendingFormat, result);\n\n    return result;\n}\n\n/**\n * @internal\n */\ninterface FormatStateContext extends DomToModelContext {\n    /**\n     * An optional stack of parent elements to process. When provided, the child nodes of current parent element will be ignored,\n     * but use the top element in this stack instead in childProcessor.\n     */\n    nodeStack?: Node[];\n}\n\n/**\n * @internal\n * Export for test only\n * In order to get format, we can still use the regular child processor. However, to improve performance, we don't need to create\n * content model for the whole doc, instead we only need to traverse the tree path that can arrive current selected node.\n * This \"reduced\" child processor will first create a node stack that stores DOM node from root to current common ancestor node of selection,\n * then use this stack as a faked DOM tree to create a reduced content model which we can use to retrieve format state\n */\nexport function reducedModelChildProcessor(\n    group: ContentModelBlockGroup,\n    parent: ParentNode,\n    context: FormatStateContext\n) {\n    if (!context.nodeStack) {\n        const selectionRootNode = getSelectionRootNode(context.selection);\n        context.nodeStack = selectionRootNode ? createNodeStack(parent, selectionRootNode) : [];\n    }\n\n    const stackChild = context.nodeStack.pop();\n\n    if (stackChild) {\n        const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, parent);\n\n        // If selection is not on this node, skip getting node index to save some time since we don't need it here\n        const index =\n            nodeStartOffset >= 0 || nodeEndOffset >= 0 ? getChildIndex(parent, stackChild) : -1;\n\n        if (index >= 0) {\n            handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n        }\n\n        processChildNode(group, stackChild, context);\n\n        if (index >= 0) {\n            handleRegularSelection(index + 1, context, group, nodeStartOffset, nodeEndOffset);\n        }\n    } else {\n        // No child node from node stack, that means we have reached the deepest node of selection.\n        // Now we can use default child processor to perform full sub tree scanning for content model,\n        // So that all selected node will be included.\n        context.defaultElementProcessors.child(group, parent, context);\n    }\n}\n\nfunction createNodeStack(root: Node, startNode: Node): Node[] {\n    const result: Node[] = [];\n    let node: Node | null = startNode;\n\n    while (node && root != node && root.contains(node)) {\n        if (isNodeOfType(node, 'ELEMENT_NODE') && node.tagName == 'TABLE') {\n            // For table, we can't do a reduced model creation since we need to handle their cells and indexes,\n            // so clean up whatever we already have, and just put table into the stack\n            result.splice(0, result.length, node);\n        } else {\n            result.push(node);\n        }\n\n        node = node.parentNode;\n    }\n\n    return result;\n}\n\nfunction getChildIndex(parent: ParentNode, stackChild: Node) {\n    let index = 0;\n    let child = parent.firstChild;\n\n    while (child && child != stackChild) {\n        index++;\n        child = child.nextSibling;\n    }\n    return index;\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport type { ContentModelImage, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Adjust selection to make sure select an image if any\n * @return Content Model Image object if an image is select, or null\n */\nexport default function adjustImageSelection(editor: IStandaloneEditor): ContentModelImage | null {\n    let image: ContentModelImage | null = null;\n\n    editor.formatContentModel(\n        model =>\n            adjustSegmentSelection(\n                model,\n                target => {\n                    if (target.isSelected && target.segmentType == 'Image') {\n                        image = target;\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n                (target, ref) => target == ref\n            ),\n        {\n            apiName: 'adjustImageSelection',\n        }\n    );\n\n    return image;\n}\n","import formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport { readFile, updateImageMetadata } from 'roosterjs-content-model-core';\nimport type { ContentModelImage, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Change the selected image src\n * @param editor The editor instance\n * @param file The image file\n */\nexport default function changeImage(editor: IStandaloneEditor, file: File) {\n    editor.focus();\n\n    const selection = editor.getDOMSelection();\n    readFile(file, dataUrl => {\n        if (dataUrl && !editor.isDisposed() && selection?.type === 'image') {\n            formatImageWithContentModel(editor, 'changeImage', (image: ContentModelImage) => {\n                const originalSrc = updateImageMetadata(image)?.src ?? '';\n                const previousSrc = image.src;\n\n                image.src = dataUrl;\n                image.dataset = {};\n                image.format.width = '';\n                image.format.height = '';\n                image.alt = '';\n\n                editor.triggerPluginEvent(PluginEventType.EditImage, {\n                    image: selection.image,\n                    previousSrc,\n                    newSrc: dataUrl,\n                    originalSrc,\n                });\n            });\n        }\n    });\n}\n","import { addSegment, createContentModelDocument, createImage } from 'roosterjs-content-model-dom';\nimport { mergeModel, readFile } from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Insert an image into current selected position\n * @param editor The editor to operate on\n * @param file Image Blob file or source string\n */\nexport default function insertImage(editor: IStandaloneEditor, imageFileOrSrc: File | string) {\n    editor.focus();\n\n    if (typeof imageFileOrSrc == 'string') {\n        insertImageWithSrc(editor, imageFileOrSrc);\n    } else {\n        readFile(imageFileOrSrc, dataUrl => {\n            if (dataUrl && !editor.isDisposed()) {\n                insertImageWithSrc(editor, dataUrl);\n            }\n        });\n    }\n}\n\nfunction insertImageWithSrc(editor: IStandaloneEditor, src: string) {\n    editor.formatContentModel(\n        (model, context) => {\n            const image = createImage(src, { backgroundColor: '' });\n            const doc = createContentModelDocument();\n\n            addSegment(doc, image);\n            mergeModel(model, doc, context, {\n                mergeFormat: 'mergeAll',\n            });\n\n            return true;\n        },\n        {\n            apiName: 'insertImage',\n        }\n    );\n}\n","import formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport type { ContentModelImage, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set image alt text for all selected images at selection. If no images is contained\n * in selection, do nothing.\n * @param editor The editor instance\n * @param altText The image alt text\n */\nexport default function setImageAltText(editor: IStandaloneEditor, altText: string) {\n    editor.focus();\n\n    formatImageWithContentModel(editor, 'setImageAltText', (image: ContentModelImage) => {\n        image.alt = altText;\n    });\n}\n","import applyImageBorderFormat from '../../modelApi/image/applyImageBorderFormat';\nimport formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport type { Border, ContentModelImage, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set image border style for all selected images at selection.\n * @param editor The editor instance\n * @param border the border format object. Ex: { color: 'red', width: '10px', style: 'solid'}, if one of the value in object is undefined\n * its value will not be changed. Passing null instead of an object will remove the border\n * @param borderRadius the border radius value, if undefined, the border radius will keep the actual value\n */\nexport default function setImageBorder(\n    editor: IStandaloneEditor,\n    border: Border | null,\n    borderRadius?: string\n) {\n    editor.focus();\n\n    formatImageWithContentModel(editor, 'setImageBorder', (image: ContentModelImage) => {\n        applyImageBorderFormat(image, border, borderRadius);\n    });\n}\n","import formatImageWithContentModel from '../utils/formatImageWithContentModel';\nimport type { ContentModelImage, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set image box shadow for all selected images at selection.\n * @param editor The editor instance\n * @param boxShadow The image box boxShadow\n * @param margin The image margin for all sides (eg. \"4px\"), null to remove margin\n */\nexport default function setImageBoxShadow(\n    editor: IStandaloneEditor,\n    boxShadow: string,\n    margin?: string | null\n) {\n    editor.focus();\n\n    formatImageWithContentModel(editor, 'setImageBoxShadow', (image: ContentModelImage) => {\n        image.format.boxShadow = boxShadow;\n        if (margin) {\n            image.format.marginBottom = margin;\n            image.format.marginLeft = margin;\n            image.format.marginRight = margin;\n            image.format.marginTop = margin;\n        } else if (margin === null) {\n            delete image.format.marginBottom;\n            delete image.format.marginLeft;\n            delete image.format.marginRight;\n            delete image.format.marginTop;\n        }\n    });\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { adjustWordSelection } from '../../modelApi/selection/adjustWordSelection';\nimport { getSelectedSegments, setSelection } from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Adjust selection to make sure select a hyperlink if any, or a word if original selection is collapsed\n * @return A combination of existing link display text and url if any. If there is no existing link, return selected text and null\n */\nexport default function adjustLinkSelection(editor: IStandaloneEditor): [string, string | null] {\n    let text = '';\n    let url: string | null = null;\n\n    editor.formatContentModel(\n        model => {\n            let changed = adjustSegmentSelection(\n                model,\n                target => !!target.isSelected && !!target.link,\n                (target, ref) => !!target.link && target.link.format.href == ref.link!.format.href\n            );\n            let segments = getSelectedSegments(model, false /*includingFormatHolder*/);\n            const firstSegment = segments[0];\n\n            if (segments.length == 1 && firstSegment.segmentType == 'SelectionMarker') {\n                segments = adjustWordSelection(model, firstSegment);\n\n                if (segments.length > 1) {\n                    changed = true;\n                    setSelection(model, segments[0], segments[segments.length - 1]);\n                }\n            }\n\n            text = segments.map(x => (x.segmentType == 'Text' ? x.text : '')).join('');\n            url = segments[0]?.link?.format.href || null;\n\n            return changed;\n        },\n        {\n            apiName: 'adjustLinkSelection',\n        }\n    );\n\n    return [text, url];\n}\n","import { adjustTrailingSpaceSelection } from '../../modelApi/selection/adjustTrailingSpaceSelection';\nimport { ChangeSource, getSelectedSegments, mergeModel } from 'roosterjs-content-model-core';\nimport { HtmlSanitizer, matchLink } from 'roosterjs-editor-dom';\nimport type { ContentModelLink, IStandaloneEditor } from 'roosterjs-content-model-types';\nimport {\n    addLink,\n    addSegment,\n    createContentModelDocument,\n    createText,\n} from 'roosterjs-content-model-dom';\n\n// Regex matching Uri scheme\nconst URI_REGEX = /^[a-zA-Z]+:/i;\n// Regex matching begin of email address\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\nconst FTP_REGEX = /^ftp\\./i;\n\n/**\n * Insert a hyperlink at cursor.\n * When there is a selection, hyperlink will be applied to the selection,\n * otherwise a hyperlink will be inserted to the cursor position.\n * @param editor Editor object\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\n * When protocol is not specified, a best matched protocol will be predicted.\n * @param anchorTitle Optional alt text of the link, will be shown when hover on the link\n * @param displayText Optional display text for the link.\n * @param target Optional display target for the link (\"_blank\"|\"_self\"|\"_parent\"|\"_top\"|\"{framename}\")\n * If specified, the display text of link will be replaced with this text.\n * If not specified and there wasn't a link, the link url will be used as display text.\n */\nexport default function insertLink(\n    editor: IStandaloneEditor,\n    link: string,\n    anchorTitle?: string,\n    displayText?: string,\n    target?: string\n) {\n    editor.focus();\n\n    const url = (checkXss(link) || '').trim();\n    if (url) {\n        const linkData = matchLink(url);\n        const linkUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\n        const links: ContentModelLink[] = [];\n        let anchorNode: Node | undefined;\n\n        editor.formatContentModel(\n            (model, context) => {\n                const segments = getSelectedSegments(model, false /*includingFormatHolder*/);\n                const originalText = segments\n                    .map(x => (x.segmentType == 'Text' ? x.text : ''))\n                    .join('');\n                const text = displayText || originalText || '';\n\n                if (\n                    segments.some(x => x.segmentType != 'SelectionMarker') &&\n                    originalText == text\n                ) {\n                    segments.forEach(x => {\n                        const link = createLink(\n                            linkUrl,\n                            anchorTitle,\n                            target,\n                            x.segmentType == 'Text'\n                        );\n                        addLink(x, link);\n                        if (x.link) {\n                            links.push(x.link);\n                        }\n                    });\n                } else if (\n                    segments.every(x => x.segmentType == 'SelectionMarker') ||\n                    (!!text && text != originalText)\n                ) {\n                    const segment = createText(text || (linkData ? linkData.originalUrl : url), {\n                        ...segments[0]?.format,\n                        ...editor.getPendingFormat(),\n                    });\n                    const doc = createContentModelDocument();\n                    const link = createLink(linkUrl, anchorTitle, target);\n\n                    addLink(segment, link);\n                    addSegment(doc, segment);\n\n                    if (segment.link) {\n                        links.push(segment.link);\n                    }\n\n                    mergeModel(model, doc, context, {\n                        mergeFormat: 'mergeAll',\n                    });\n                }\n\n                adjustTrailingSpaceSelection(model);\n                return segments.length > 0;\n            },\n            {\n                changeSource: ChangeSource.CreateLink,\n                onNodeCreated: (modelElement, node) => {\n                    if (!anchorNode && links.indexOf(modelElement as ContentModelLink) >= 0) {\n                        anchorNode = node;\n                    }\n                },\n                getChangeData: () => anchorNode,\n                apiName: 'insertLink',\n            }\n        );\n    }\n}\n\nconst createLink = (\n    url: string,\n    anchorTitle?: string,\n    target?: string,\n    underline: boolean = true\n): ContentModelLink => {\n    return {\n        dataset: {},\n        format: {\n            href: url,\n            anchorTitle,\n            target,\n            underline: underline,\n        },\n    };\n};\n\n// TODO: This is copied from original code. We may need to integrate this logic into matchLink() later.\nfunction applyLinkPrefix(url: string): string {\n    if (!url) {\n        return url;\n    }\n\n    // Add link prefix per rule:\n    // (a) if the url always starts with a URI scheme, leave it as it is\n    // (b) if the url is an email address, xxx@... add mailto: prefix\n    // (c) if the url starts with ftp., add ftp:// prefix\n    // (d) rest, add http:// prefix\n    let prefix = '';\n    if (url.search(URI_REGEX) < 0) {\n        if (url.search(MAILTO_REGEX) == 0) {\n            prefix = 'mailto:';\n        } else if (url.search(FTP_REGEX) == 0) {\n            prefix = 'ftp://';\n        } else {\n            // fallback to http://\n            prefix = 'http://';\n        }\n    }\n\n    return prefix + url;\n}\n\n// TODO: This is copied from original code. However, ContentModel should be able to filter out malicious\n// attributes later, so no need to use HtmlSanitizer here\nfunction checkXss(link: string): string {\n    const sanitizer = new HtmlSanitizer();\n    const a = document.createElement('a');\n\n    a.href = link || '';\n\n    sanitizer.sanitize(a);\n    // We use getAttribute because some browsers will try to make the href property a valid link.\n    // This has unintended side effects when the link lacks a protocol.\n    return a.getAttribute('href') || '';\n}\n","import { adjustSegmentSelection } from '../../modelApi/selection/adjustSegmentSelection';\nimport { getSelectedSegments } from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Remove link at selection. If no links at selection, do nothing.\n * If selection contains multiple links, all of the link styles will be removed.\n * If only part of a link is selected, the whole link style will be removed.\n * @param editor The editor instance\n */\nexport default function removeLink(editor: IStandaloneEditor) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            adjustSegmentSelection(\n                model,\n                target => !!target.isSelected && !!target.link,\n                (target, ref) =>\n                    target.isSelected || // Expand the selection to any link that is involved. So we can remove multiple links together\n                    (!!target.link && target.link.format.href == ref.link!.format.href)\n            );\n\n            const segments = getSelectedSegments(model, false /*includingFormatHolder*/);\n            let isChanged = false;\n\n            segments.forEach(segment => {\n                if (segment.link) {\n                    isChanged = true;\n\n                    delete segment.link;\n                }\n            });\n\n            return isChanged;\n        },\n        {\n            apiName: 'removeLink',\n        }\n    );\n}\n","import { getFirstSelectedListItem } from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set start number of a list item\n * @param editor The editor to operate on\n * @param value The number to set to, must be equal or greater than 1\n */\nexport default function setListStartNumber(editor: IStandaloneEditor, value: number) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const listItem = getFirstSelectedListItem(model);\n            const level = listItem?.levels[listItem?.levels.length - 1];\n\n            if (level) {\n                level.format.startNumberOverride = value;\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'setListStartNumber',\n        }\n    );\n}\n","import { findListItemsInSameThread } from '../../modelApi/list/findListItemsInSameThread';\nimport { getFirstSelectedListItem, updateListMetadata } from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor, ListMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Set style of list items with in same thread of current item\n * @param editor The editor to operate on\n * @param style The target list item style to set\n */\nexport default function setListStyle(editor: IStandaloneEditor, style: ListMetadataFormat) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const listItem = getFirstSelectedListItem(model);\n\n            if (listItem) {\n                const listItems = findListItemsInSameThread(model, listItem);\n                const levelIndex = listItem.levels.length - 1;\n\n                listItems.forEach(listItem => {\n                    const level = listItem.levels[levelIndex];\n\n                    if (level) {\n                        updateListMetadata(level, metadata => Object.assign({}, metadata, style));\n                    }\n                });\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'setListStyle',\n        }\n    );\n}\n","import { setListType } from '../../modelApi/list/setListType';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle bullet list type\n * - When there are some blocks not in bullet list, set all blocks to the given type\n * - When all blocks are already in bullet list, turn off / outdent there list type\n * @param editor The editor to operate on\n */\nexport default function toggleBullet(editor: IStandaloneEditor) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            context.newPendingFormat = 'preserve';\n\n            return setListType(model, 'UL');\n        },\n        {\n            apiName: 'toggleBullet',\n        }\n    );\n}\n","import { setListType } from '../../modelApi/list/setListType';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle numbering list type\n * - When there are some blocks not in numbering list, set all blocks to the given type\n * - When all blocks are already in numbering list, turn off / outdent there list type\n * @param editor The editor to operate on\n */\nexport default function toggleNumbering(editor: IStandaloneEditor) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            context.newPendingFormat = 'preserve';\n\n            return setListType(model, 'OL');\n        },\n        {\n            apiName: 'toggleNumbering',\n        }\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { ContentModelSegmentFormat, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Bulk apply segment format to all selected content. This is usually used for format painter.\n * @param editor The editor to operate on\n * @param newFormat The segment format to apply\n */\nexport default function applySegmentFormat(\n    editor: IStandaloneEditor,\n    newFormat: ContentModelSegmentFormat\n) {\n    formatSegmentWithContentModel(\n        editor,\n        'applySegmentFormat',\n        format => {\n            format.backgroundColor = newFormat.backgroundColor;\n            format.fontFamily = newFormat.fontFamily;\n            format.fontSize = newFormat.fontSize;\n            format.fontWeight = newFormat.fontWeight;\n            format.italic = newFormat.italic;\n            format.strikethrough = newFormat.strikethrough;\n            format.superOrSubScriptSequence = newFormat.superOrSubScriptSequence;\n            format.textColor = newFormat.textColor;\n            format.underline = newFormat.underline;\n        },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Change the capitalization of text in the selection\n * @param editor The editor instance\n * @param capitalization The case option\n * @param language Optional parameter for language string that should comply to \"IETF BCP 47 Tags for\n * Identifying Languages\". For example: 'en' or 'en-US' for English, 'tr' for Turkish.\n * Default is the host environment’s current locale.\n */\nexport default function changeCapitalization(\n    editor: IStandaloneEditor,\n    capitalization: 'sentence' | 'lowerCase' | 'upperCase' | 'capitalize',\n    language?: string\n) {\n    editor.focus();\n\n    formatSegmentWithContentModel(editor, 'changeCapitalization', (_, __, segment) => {\n        if (segment?.segmentType == 'Text') {\n            switch (capitalization) {\n                case 'lowerCase':\n                    segment.text = segment.text.toLocaleLowerCase(language);\n                    break;\n\n                case 'upperCase':\n                    segment.text = segment.text.toLocaleUpperCase(language);\n                    break;\n\n                case 'capitalize':\n                    const wordArray = segment.text.toLocaleLowerCase(language).split(' ');\n\n                    for (let i = 0; i < wordArray.length; i++) {\n                        wordArray[i] =\n                            wordArray[i].charAt(0).toLocaleUpperCase(language) +\n                            wordArray[i].slice(1);\n                    }\n\n                    segment.text = wordArray.join(' ');\n                    break;\n\n                case 'sentence':\n                    // TODO: Add rules on punctuation for internationalization - TASK 104769\n                    const punctuationMarks = '[\\\\.\\\\!\\\\?]';\n                    // Find a match of a word character either:\n                    // - At the beginning of a string with or without preceding whitespace, for\n                    // example: '  hello world' and 'hello world' strings would both match 'h'.\n                    // - Or preceded by a punctuation mark and at least one whitespace, for\n                    // example 'yes. hello world' would match 'y' and 'h'.\n                    const regex = new RegExp('^\\\\s*\\\\w|' + punctuationMarks + '\\\\s+\\\\w', 'g');\n\n                    segment.text = segment.text\n                        .toLocaleLowerCase(language)\n                        .replace(regex, match => match.toLocaleUpperCase(language));\n                    break;\n            }\n        }\n    });\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport { setFontSizeInternal } from './setFontSize';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\n */\nconst FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\nconst MIN_FONT_SIZE = 1;\nconst MAX_FONT_SIZE = 1000;\n\n/**\n * Increase or decrease font size in selection\n * @param editor The editor instance\n * @param change Whether increase or decrease font size\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\n */\nexport default function changeFontSize(editor: IStandaloneEditor, change: 'increase' | 'decrease') {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'changeFontSize',\n        (format, _, __, paragraph) => changeFontSizeInternal(change, format, paragraph),\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n\nfunction changeFontSizeInternal(\n    change: 'increase' | 'decrease',\n    format: ContentModelSegmentFormat,\n    paragraph: ContentModelParagraph | null\n) {\n    if (format.fontSize) {\n        const sizeInPt = parseValueWithUnit(format.fontSize, undefined /*element*/, 'pt');\n\n        if (sizeInPt > 0) {\n            const newSize = getNewFontSize(sizeInPt, change == 'increase' ? 1 : -1, FONT_SIZES);\n\n            setFontSizeInternal(newSize + 'pt', format, paragraph);\n        }\n    }\n}\n\nfunction getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\n    const last = fontSizes[fontSizes.length - 1];\n    if (pt <= fontSizes[0]) {\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\n    } else if (pt > last || (pt == last && changeBase == 1)) {\n        pt = pt / 10;\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\n    } else if (changeBase == 1) {\n        for (let i = 0; i < fontSizes.length; i++) {\n            if (pt < fontSizes[i]) {\n                pt = fontSizes[i];\n                break;\n            }\n        }\n    } else {\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\n            if (pt > fontSizes[i]) {\n                pt = fontSizes[i];\n                break;\n            }\n        }\n    }\n    return pt;\n}\n","import { createSelectionMarker } from 'roosterjs-content-model-dom';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { setSelection } from 'roosterjs-content-model-core';\nimport type { ContentModelParagraph, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set background color\n * @param editor The editor to operate on\n * @param backgroundColor The color to set. Pass null to remove existing color.\n */\nexport default function setBackgroundColor(\n    editor: IStandaloneEditor,\n    backgroundColor: string | null\n) {\n    editor.focus();\n\n    let lastParagraph: ContentModelParagraph | null = null;\n    let lastSegmentIndex: number = -1;\n\n    formatSegmentWithContentModel(\n        editor,\n        'setBackgroundColor',\n        (format, _, segment, paragraph) => {\n            if (backgroundColor === null) {\n                delete format.backgroundColor;\n            } else {\n                format.backgroundColor = backgroundColor;\n            }\n\n            if (segment && paragraph && segment.segmentType != 'SelectionMarker') {\n                lastParagraph = paragraph;\n                lastSegmentIndex = lastParagraph.segments.indexOf(segment);\n            }\n        },\n        undefined /*segmentHasStyleCallback*/,\n        undefined /*includingFormatHolder*/,\n        model => {\n            if (lastParagraph && lastSegmentIndex >= 0) {\n                const marker = createSelectionMarker(\n                    lastParagraph.segments[lastSegmentIndex]?.format\n                );\n\n                lastParagraph.segments.splice(lastSegmentIndex + 1, 0, marker);\n                setSelection(model, marker, marker);\n            }\n        }\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set font name\n * @param editor The editor to operate on\n * @param fontName The font name to set\n */\nexport default function setFontName(editor: IStandaloneEditor, fontName: string) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'setFontName',\n        (format, _, segment) => {\n            format.fontFamily = fontName;\n\n            if (segment?.code) {\n                segment.code.format.fontFamily = fontName;\n            }\n        },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Set font size\n * @param editor The editor to operate on\n * @param fontSize The font size to set\n */\nexport default function setFontSize(editor: IStandaloneEditor, fontSize: string) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'setFontSize',\n        (format, _, __, paragraph) => setFontSizeInternal(fontSize, format, paragraph),\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n\n/**\n * @internal\n * Internal set font function shared by setFontSize and changeFontSize\n */\nexport function setFontSizeInternal(\n    fontSize: string,\n    format: ContentModelSegmentFormat,\n    paragraph: ContentModelParagraph | null\n) {\n    format.fontSize = fontSize;\n\n    // Since we have set font size to segment, it can be smaller than the one in paragraph format, so delete font size from paragraph\n    if (paragraph?.segmentFormat?.fontSize) {\n        const size = paragraph.segmentFormat.fontSize;\n\n        paragraph.segments.forEach(segment => {\n            if (!segment.format.fontSize) {\n                segment.format.fontSize = size;\n            }\n        });\n\n        delete paragraph.segmentFormat.fontSize;\n    }\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set text color\n * @param editor The editor to operate on\n * @param textColor The text color to set. Pass null to remove existing color.\n */\nexport default function setTextColor(editor: IStandaloneEditor, textColor: string | null) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'setTextColor',\n        textColor === null\n            ? (format, _, segment) => {\n                  delete format.textColor;\n\n                  if (segment?.link) {\n                      delete segment.link.format.textColor;\n                  }\n              }\n            : (format, _, segment) => {\n                  format.textColor = textColor;\n\n                  if (segment?.link) {\n                      segment.link.format.textColor = textColor;\n                  }\n              },\n        undefined /* segmentHasStyleCallback*/,\n        true /*includingFormatHandler*/\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport { isBold } from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle bold style\n * @param editor The editor to operate on\n */\nexport default function toggleBold(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleBold',\n        (format, isTurningOn) => {\n            format.fontWeight = isTurningOn ? 'bold' : 'normal';\n        },\n        (format, _, paragraph) =>\n            isBold(\n                typeof format.fontWeight == 'undefined'\n                    ? paragraph?.decorator?.format.fontWeight\n                    : format.fontWeight\n            )\n    );\n}\n","import { addCode } from 'roosterjs-content-model-dom';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { ContentModelCode, IStandaloneEditor } from 'roosterjs-content-model-types';\n\nconst DefaultCode: ContentModelCode = {\n    format: {\n        fontFamily: 'monospace',\n    },\n};\n\n/**\n * Toggle italic style\n * @param editor The editor to operate on\n */\nexport default function toggleCode(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleCode',\n        (_, isTurningOn, segment) => {\n            if (segment) {\n                if (isTurningOn) {\n                    addCode(segment, DefaultCode);\n                } else {\n                    delete segment.code;\n                }\n            }\n        },\n        (_, segment) => !!segment?.code\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle italic style\n * @param editor The editor to operate on\n */\nexport default function toggleItalic(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleItalic',\n        (format, isTurningOn) => {\n            format.italic = !!isTurningOn;\n        },\n        format => !!format.italic\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle strikethrough style\n * @param editor The editor to operate on\n */\nexport default function toggleStrikethrough(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleStrikethrough',\n        (format, isTurningOn) => {\n            format.strikethrough = !!isTurningOn;\n        },\n        format => !!format.strikethrough\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle subscript style\n * @param editor The editor to operate on\n */\nexport default function toggleSubscript(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleSubscript',\n        (format, isTurningOn) => {\n            format.superOrSubScriptSequence = isTurningOn ? 'sub' : '';\n        },\n        format => format.superOrSubScriptSequence?.split(' ').pop() == 'sub'\n    );\n}\n","import { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle superscript style\n * @param editor The editor to operate on\n */\nexport default function toggleSuperscript(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleSuperscript',\n        (format, isTurningOn) => {\n            format.superOrSubScriptSequence = isTurningOn ? 'super' : '';\n        },\n        format => format.superOrSubScriptSequence?.split(' ').pop() == 'super'\n    );\n}\n","import { adjustTrailingSpaceSelection } from '../../modelApi/selection/adjustTrailingSpaceSelection';\nimport { formatSegmentWithContentModel } from '../utils/formatSegmentWithContentModel';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Toggle underline style\n * @param editor The editor to operate on\n */\nexport default function toggleUnderline(editor: IStandaloneEditor) {\n    editor.focus();\n\n    formatSegmentWithContentModel(\n        editor,\n        'toggleUnderline',\n        (format, isTurningOn, segment) => {\n            format.underline = !!isTurningOn;\n\n            if (segment?.link) {\n                segment.link.format.underline = !!isTurningOn;\n            }\n        },\n        (format, segment) => !!format.underline || !!segment?.link?.format?.underline,\n        false /*includingFormatHolder*/,\n        adjustTrailingSpaceSelection\n    );\n}\n","import { parseValueWithUnit } from 'roosterjs-content-model-dom';\nimport {\n    extractBorderValues,\n    getFirstSelectedTable,\n    getSelectedCells,\n    updateTableCellMetadata,\n} from 'roosterjs-content-model-core';\nimport type {\n    IStandaloneEditor,\n    Border,\n    ContentModelTable,\n    ContentModelTableCell,\n    BorderOperations,\n    TableSelectionCoordinates,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Border positions\n */\ntype BorderPositions = 'borderTop' | 'borderBottom' | 'borderLeft' | 'borderRight';\n\n/**\n * @internal\n * Perimeter of the table selection\n * Used to determine where to apply border to the cells adjacent to the selection.\n */\ntype Perimeter = {\n    Top: boolean;\n    Bottom: boolean;\n    Left: boolean;\n    Right: boolean;\n};\n\n/**\n * Operations to apply border\n * @param editor The editor instance\n * @param border The border to apply\n * @param operation The operation to apply\n */\nexport default function applyTableBorderFormat(\n    editor: IStandaloneEditor,\n    border: Border,\n    operation: BorderOperations\n) {\n    editor.formatContentModel(\n        model => {\n            const [tableModel] = getFirstSelectedTable(model);\n\n            if (tableModel) {\n                const sel = getSelectedCells(tableModel);\n                const perimeter: Perimeter = {\n                    Top: false,\n                    Bottom: false,\n                    Left: false,\n                    Right: false,\n                };\n\n                // Create border format with table format as backup\n                let borderFormat = '';\n                const format = tableModel.format;\n                const { width, style, color } = border;\n                const extractedBorder = extractBorderValues(format.borderTop);\n                const borderColor = extractedBorder.color;\n                const borderWidth = extractedBorder.width;\n                const borderStyle = extractedBorder.style;\n\n                if (width) {\n                    borderFormat = parseValueWithUnit(width) + 'px';\n                } else if (borderWidth) {\n                    borderFormat = borderWidth;\n                } else {\n                    borderFormat = '1px';\n                }\n\n                if (style) {\n                    borderFormat = `${borderFormat} ${style}`;\n                } else if (borderStyle) {\n                    borderFormat = `${borderFormat} ${borderStyle}`;\n                } else {\n                    borderFormat = `${borderFormat} solid`;\n                }\n\n                if (color) {\n                    borderFormat = `${borderFormat} ${color}`;\n                } else if (borderColor) {\n                    borderFormat = `${borderFormat} ${borderColor}`;\n                }\n\n                if (sel) {\n                    const operations: BorderOperations[] = [operation];\n                    while (operations.length) {\n                        switch (operations.pop()) {\n                            case 'noBorders':\n                                // Do All borders but with empty border format\n                                borderFormat = '';\n                                operations.push('allBorders');\n                                break;\n                            case 'allBorders':\n                                const allBorders: BorderPositions[] = [\n                                    'borderTop',\n                                    'borderBottom',\n                                    'borderLeft',\n                                    'borderRight',\n                                ];\n                                for (\n                                    let rowIndex = sel.firstRow;\n                                    rowIndex <= sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    for (\n                                        let colIndex = sel.firstColumn;\n                                        colIndex <= sel.lastColumn;\n                                        colIndex++\n                                    ) {\n                                        const cell = tableModel.rows[rowIndex].cells[colIndex];\n                                        // Format cells - All borders\n                                        applyBorderFormat(cell, borderFormat, allBorders);\n                                    }\n                                }\n\n                                // Format perimeter\n                                perimeter.Top = true;\n                                perimeter.Bottom = true;\n                                perimeter.Left = true;\n                                perimeter.Right = true;\n                                break;\n                            case 'leftBorders':\n                                const leftBorder: BorderPositions[] = ['borderLeft'];\n                                for (\n                                    let rowIndex = sel.firstRow;\n                                    rowIndex <= sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell = tableModel.rows[rowIndex].cells[sel.firstColumn];\n                                    // Format cells - Left border\n                                    applyBorderFormat(cell, borderFormat, leftBorder);\n                                }\n\n                                // Format perimeter\n                                perimeter.Left = true;\n                                break;\n                            case 'rightBorders':\n                                const rightBorder: BorderPositions[] = ['borderRight'];\n                                for (\n                                    let rowIndex = sel.firstRow;\n                                    rowIndex <= sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell = tableModel.rows[rowIndex].cells[sel.lastColumn];\n                                    // Format cells - Right border\n                                    applyBorderFormat(cell, borderFormat, rightBorder);\n                                }\n\n                                // Format perimeter\n                                perimeter.Right = true;\n                                break;\n                            case 'topBorders':\n                                const topBorder: BorderPositions[] = ['borderTop'];\n                                for (\n                                    let colIndex = sel.firstColumn;\n                                    colIndex <= sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.firstRow].cells[colIndex];\n                                    // Format cells - Top border\n                                    applyBorderFormat(cell, borderFormat, topBorder);\n                                }\n\n                                // Format perimeter\n                                perimeter.Top = true;\n                                break;\n                            case 'bottomBorders':\n                                const bottomBorder: BorderPositions[] = ['borderBottom'];\n                                for (\n                                    let colIndex = sel.firstColumn;\n                                    colIndex <= sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.lastRow].cells[colIndex];\n                                    // Format cells - Bottom border\n                                    applyBorderFormat(cell, borderFormat, bottomBorder);\n                                }\n\n                                // Format perimeter\n                                perimeter.Bottom = true;\n                                break;\n                            case 'insideBorders':\n                                // Format cells - Inside borders\n                                const singleCol = sel.lastColumn == sel.firstColumn;\n                                const singleRow = sel.lastRow == sel.firstRow;\n                                // Single cell selection\n                                if (singleCol && singleRow) {\n                                    break;\n                                }\n                                // Single column selection\n                                if (singleCol) {\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.firstRow].cells[sel.firstColumn],\n                                        borderFormat,\n                                        ['borderBottom']\n                                    );\n                                    for (\n                                        let rowIndex = sel.firstRow + 1;\n                                        rowIndex <= sel.lastRow - 1;\n                                        rowIndex++\n                                    ) {\n                                        const cell =\n                                            tableModel.rows[rowIndex].cells[sel.firstColumn];\n                                        applyBorderFormat(cell, borderFormat, [\n                                            'borderTop',\n                                            'borderBottom',\n                                        ]);\n                                    }\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.lastRow].cells[sel.firstColumn],\n                                        borderFormat,\n                                        ['borderTop']\n                                    );\n                                    break;\n                                }\n                                // Single row selection\n                                if (singleRow) {\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.firstRow].cells[sel.firstColumn],\n                                        borderFormat,\n                                        ['borderRight']\n                                    );\n                                    for (\n                                        let colIndex = sel.firstColumn + 1;\n                                        colIndex <= sel.lastColumn - 1;\n                                        colIndex++\n                                    ) {\n                                        const cell = tableModel.rows[sel.firstRow].cells[colIndex];\n                                        applyBorderFormat(cell, borderFormat, [\n                                            'borderLeft',\n                                            'borderRight',\n                                        ]);\n                                    }\n                                    applyBorderFormat(\n                                        tableModel.rows[sel.firstRow].cells[sel.lastColumn],\n                                        borderFormat,\n                                        ['borderLeft']\n                                    );\n                                    break;\n                                }\n\n                                // For multiple rows and columns selections\n                                // Top left cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.firstRow].cells[sel.firstColumn],\n                                    borderFormat,\n                                    ['borderBottom', 'borderRight']\n                                );\n                                // Top right cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.firstRow].cells[sel.lastColumn],\n                                    borderFormat,\n                                    ['borderBottom', 'borderLeft']\n                                );\n                                // Bottom left cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.lastRow].cells[sel.firstColumn],\n                                    borderFormat,\n                                    ['borderTop', 'borderRight']\n                                );\n                                // Bottom right cell\n                                applyBorderFormat(\n                                    tableModel.rows[sel.lastRow].cells[sel.lastColumn],\n                                    borderFormat,\n                                    ['borderTop', 'borderLeft']\n                                );\n                                // First row\n                                for (\n                                    let colIndex = sel.firstColumn + 1;\n                                    colIndex < sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.firstRow].cells[colIndex];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderBottom',\n                                        'borderLeft',\n                                        'borderRight',\n                                    ]);\n                                }\n                                // Last row\n                                for (\n                                    let colIndex = sel.firstColumn + 1;\n                                    colIndex < sel.lastColumn;\n                                    colIndex++\n                                ) {\n                                    const cell = tableModel.rows[sel.lastRow].cells[colIndex];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderTop',\n                                        'borderLeft',\n                                        'borderRight',\n                                    ]);\n                                }\n                                // First column\n                                for (\n                                    let rowIndex = sel.firstRow + 1;\n                                    rowIndex < sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell = tableModel.rows[rowIndex].cells[sel.firstColumn];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderTop',\n                                        'borderBottom',\n                                        'borderRight',\n                                    ]);\n                                }\n                                // Last column\n                                for (\n                                    let rowIndex = sel.firstRow + 1;\n                                    rowIndex < sel.lastRow;\n                                    rowIndex++\n                                ) {\n                                    const cell = tableModel.rows[rowIndex].cells[sel.lastColumn];\n                                    applyBorderFormat(cell, borderFormat, [\n                                        'borderTop',\n                                        'borderBottom',\n                                        'borderLeft',\n                                    ]);\n                                }\n                                // Inner cells\n                                sel.firstColumn++;\n                                sel.firstRow++;\n                                sel.lastColumn--;\n                                sel.lastRow--;\n                                operations.push('allBorders');\n                                break;\n                            case 'outsideBorders':\n                                // Format cells - Outside borders\n                                operations.push('topBorders');\n                                operations.push('bottomBorders');\n                                operations.push('leftBorders');\n                                operations.push('rightBorders');\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n\n                    //Format perimeter if necessary or possible\n                    modifyPerimeter(tableModel, sel, borderFormat, perimeter);\n                }\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'tableBorder',\n        }\n    );\n}\n\n/**\n * @internal\n * Apply border format to a cell\n * @param cell The cell to apply border format\n * @param borderFormat The border format to apply\n * @param positions The positions to apply\n */\nfunction applyBorderFormat(\n    cell: ContentModelTableCell,\n    borderFormat: string,\n    positions: BorderPositions[]\n) {\n    positions.forEach(pos => {\n        cell.format[pos] = borderFormat;\n    });\n\n    updateTableCellMetadata(cell, metadata => {\n        metadata = metadata || {};\n        metadata.borderOverride = true;\n        return metadata;\n    });\n\n    // Cell was modified, so delete cached element\n    delete cell.cachedElement;\n}\n\n/**\n * @internal\n * Modify the perimeter of the table selection\n * @param tableModel The table model\n * @param sel The table selection\n * @param borderFormat The border format to apply\n * If borderFormat is empty, the border will be removed\n * @param perimeter Where in the perimeter to apply\n */\nfunction modifyPerimeter(\n    tableModel: ContentModelTable,\n    sel: TableSelectionCoordinates,\n    borderFormat: string,\n    perimeter: Perimeter\n) {\n    // Top of selection\n    if (perimeter.Top && sel.firstRow - 1 >= 0) {\n        for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n            const cell = tableModel.rows[sel.firstRow - 1].cells[colIndex];\n            applyBorderFormat(cell, borderFormat, ['borderBottom']);\n        }\n    }\n    // Bottom of selection\n    if (perimeter.Bottom && sel.lastRow + 1 < tableModel.rows.length) {\n        for (let colIndex = sel.firstColumn; colIndex <= sel.lastColumn; colIndex++) {\n            const cell = tableModel.rows[sel.lastRow + 1].cells[colIndex];\n            applyBorderFormat(cell, borderFormat, ['borderTop']);\n        }\n    }\n    // Left of selection\n    if (perimeter.Left && sel.firstColumn - 1 >= 0) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            const cell = tableModel.rows[rowIndex].cells[sel.firstColumn - 1];\n            applyBorderFormat(cell, borderFormat, ['borderRight']);\n        }\n    }\n    // Right of selection\n    if (perimeter.Right && sel.lastColumn + 1 < tableModel.rows[0].cells.length) {\n        for (let rowIndex = sel.firstRow; rowIndex <= sel.lastRow; rowIndex++) {\n            const cell = tableModel.rows[rowIndex].cells[sel.lastColumn + 1];\n            applyBorderFormat(cell, borderFormat, ['borderLeft']);\n        }\n    }\n}\n","import { alignTable } from '../../modelApi/table/alignTable';\nimport { deleteTable } from '../../modelApi/table/deleteTable';\nimport { deleteTableColumn } from '../../modelApi/table/deleteTableColumn';\nimport { deleteTableRow } from '../../modelApi/table/deleteTableRow';\nimport { ensureFocusableParagraphForTable } from '../../modelApi/table/ensureFocusableParagraphForTable';\nimport { insertTableColumn } from '../../modelApi/table/insertTableColumn';\nimport { insertTableRow } from '../../modelApi/table/insertTableRow';\nimport { mergeTableCells } from '../../modelApi/table/mergeTableCells';\nimport { mergeTableColumn } from '../../modelApi/table/mergeTableColumn';\nimport { mergeTableRow } from '../../modelApi/table/mergeTableRow';\nimport { splitTableCellHorizontally } from '../../modelApi/table/splitTableCellHorizontally';\nimport { splitTableCellVertically } from '../../modelApi/table/splitTableCellVertically';\n\nimport {\n    hasSelectionInBlock,\n    applyTableFormat,\n    getFirstSelectedTable,\n    normalizeTable,\n    setSelection,\n} from 'roosterjs-content-model-core';\nimport type { TableOperation, IStandaloneEditor } from 'roosterjs-content-model-types';\nimport {\n    alignTableCellHorizontally,\n    alignTableCellVertically,\n} from '../../modelApi/table/alignTableCell';\nimport {\n    createSelectionMarker,\n    hasMetadata,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\n\n/**\n * Format current focused table with the given format\n * @param editor The editor instance\n * @param operation The table operation to apply\n */\nexport default function editTable(editor: IStandaloneEditor, operation: TableOperation) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const [tableModel, path] = getFirstSelectedTable(model);\n\n            if (tableModel) {\n                switch (operation) {\n                    case 'alignCellLeft':\n                    case 'alignCellCenter':\n                    case 'alignCellRight':\n                        alignTableCellHorizontally(tableModel, operation);\n                        break;\n                    case 'alignCellTop':\n                    case 'alignCellMiddle':\n                    case 'alignCellBottom':\n                        alignTableCellVertically(tableModel, operation);\n                        break;\n                    case 'alignCenter':\n                    case 'alignLeft':\n                    case 'alignRight':\n                        alignTable(tableModel, operation);\n                        break;\n\n                    case 'deleteColumn':\n                        deleteTableColumn(tableModel);\n                        break;\n\n                    case 'deleteRow':\n                        deleteTableRow(tableModel);\n                        break;\n\n                    case 'deleteTable':\n                        deleteTable(tableModel);\n                        break;\n\n                    case 'insertAbove':\n                    case 'insertBelow':\n                        insertTableRow(tableModel, operation);\n                        break;\n\n                    case 'insertLeft':\n                    case 'insertRight':\n                        insertTableColumn(tableModel, operation);\n                        break;\n\n                    case 'mergeAbove':\n                    case 'mergeBelow':\n                        mergeTableRow(tableModel, operation);\n                        break;\n\n                    case 'mergeCells':\n                        mergeTableCells(tableModel);\n                        break;\n\n                    case 'mergeLeft':\n                    case 'mergeRight':\n                        mergeTableColumn(tableModel, operation);\n                        break;\n\n                    case 'splitHorizontally':\n                        splitTableCellHorizontally(tableModel);\n                        break;\n\n                    case 'splitVertically':\n                        splitTableCellVertically(tableModel);\n                        break;\n                }\n\n                if (!hasSelectionInBlock(tableModel)) {\n                    const paragraph = ensureFocusableParagraphForTable(model, path, tableModel);\n\n                    if (paragraph) {\n                        const marker = createSelectionMarker(model.format);\n\n                        paragraph.segments.unshift(marker);\n                        setParagraphNotImplicit(paragraph);\n                        setSelection(model, marker);\n                    }\n                }\n\n                normalizeTable(tableModel, model.format);\n\n                if (hasMetadata(tableModel)) {\n                    applyTableFormat(tableModel, undefined /*newFormat*/, true /*keepCellShade*/);\n                }\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'editTable',\n        }\n    );\n}\n","import {\n    applyTableFormat,\n    getFirstSelectedTable,\n    updateTableCellMetadata,\n} from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor, TableMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Format current focused table with the given format\n * @param editor The editor instance\n * @param format The table format to apply\n * @param keepCellShade Whether keep existing shade color when apply format if there is a manually set shade color\n */\nexport default function formatTable(\n    editor: IStandaloneEditor,\n    format: TableMetadataFormat,\n    keepCellShade?: boolean\n) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const [tableModel] = getFirstSelectedTable(model);\n\n            if (tableModel) {\n                // Wipe border metadata\n                tableModel.rows.forEach(row => {\n                    row.cells.forEach(cell => {\n                        updateTableCellMetadata(cell, metadata => {\n                            if (metadata) {\n                                delete metadata.borderOverride;\n                            }\n                            return metadata;\n                        });\n                    });\n                });\n                applyTableFormat(tableModel, format, keepCellShade);\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'formatTable',\n        }\n    );\n}\n","import { createContentModelDocument, createSelectionMarker } from 'roosterjs-content-model-dom';\nimport { createTableStructure } from '../../modelApi/table/createTableStructure';\nimport {\n    applyTableFormat,\n    deleteSelection,\n    mergeModel,\n    normalizeTable,\n    setSelection,\n} from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor, TableMetadataFormat } from 'roosterjs-content-model-types';\n\n/**\n * Insert table into editor at current selection\n * @param editor The editor instance\n * @param columns Number of columns in table, it also controls the default table cell width:\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\n * @param rows Number of rows in table\n * @param format (Optional) The table format. If not passed, the default format will be applied:\n * background color: #FFF; border color: #ABABAB\n */\nexport default function insertTable(\n    editor: IStandaloneEditor,\n    columns: number,\n    rows: number,\n    format?: Partial<TableMetadataFormat>\n) {\n    editor.focus();\n\n    editor.formatContentModel(\n        (model, context) => {\n            const insertPosition = deleteSelection(model, [], context).insertPoint;\n\n            if (insertPosition) {\n                const doc = createContentModelDocument();\n                const table = createTableStructure(doc, columns, rows);\n\n                normalizeTable(table, editor.getPendingFormat() || insertPosition.marker.format);\n                // Assign default vertical align\n                format = format || { verticalAlign: 'top' };\n                applyTableFormat(table, format);\n                mergeModel(model, doc, context, {\n                    insertPosition,\n                    mergeFormat: 'mergeAll',\n                });\n\n                const firstBlock = table.rows[0]?.cells[0]?.blocks[0];\n\n                if (firstBlock?.blockType == 'Paragraph') {\n                    const marker = createSelectionMarker(firstBlock.segments[0]?.format);\n                    firstBlock.segments.unshift(marker);\n                    setSelection(model, marker);\n                }\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'insertTable',\n        }\n    );\n}\n","import {\n    hasSelectionInBlockGroup,\n    getFirstSelectedTable,\n    normalizeTable,\n    setTableCellBackgroundColor,\n} from 'roosterjs-content-model-core';\nimport type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Set table cell shade color\n * @param editor The editor instance\n * @param color The color to set. Pass null to remove existing shade color\n */\nexport default function setTableCellShade(editor: IStandaloneEditor, color: string | null) {\n    editor.focus();\n\n    editor.formatContentModel(\n        model => {\n            const [table] = getFirstSelectedTable(model);\n\n            if (table) {\n                normalizeTable(table);\n\n                table.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        if (hasSelectionInBlockGroup(cell)) {\n                            setTableCellBackgroundColor(cell, color, true /*isColorOverride*/);\n                        }\n                    })\n                );\n\n                return true;\n            } else {\n                return false;\n            }\n        },\n        {\n            apiName: 'setTableCellShade',\n        }\n    );\n}\n","import { formatSegmentWithContentModel } from './formatSegmentWithContentModel';\nimport type { ContentModelImage, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport default function formatImageWithContentModel(\n    editor: IStandaloneEditor,\n    apiName: string,\n    callback: (segment: ContentModelImage) => void\n) {\n    formatSegmentWithContentModel(\n        editor,\n        apiName,\n        (_, __, segment) => {\n            if (segment?.segmentType == 'Image') {\n                callback(segment);\n            }\n        },\n        undefined /** segmentHasStyleCallback **/,\n        undefined /** includingFormatHolder */\n    );\n}\n","import { getSelectedParagraphs } from 'roosterjs-content-model-core';\nimport type { ContentModelParagraph, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function formatParagraphWithContentModel(\n    editor: IStandaloneEditor,\n    apiName: string,\n    setStyleCallback: (paragraph: ContentModelParagraph) => void\n) {\n    editor.formatContentModel(\n        (model, context) => {\n            const paragraphs = getSelectedParagraphs(model);\n\n            paragraphs.forEach(setStyleCallback);\n            context.newPendingFormat = 'preserve';\n\n            return paragraphs.length > 0;\n        },\n        {\n            apiName,\n        }\n    );\n}\n","import { adjustWordSelection } from '../../modelApi/selection/adjustWordSelection';\nimport { getSelectedSegmentsAndParagraphs } from 'roosterjs-content-model-core';\nimport type {\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\n/**\n * @internal\n */\nexport function formatSegmentWithContentModel(\n    editor: IStandaloneEditor,\n    apiName: string,\n    toggleStyleCallback: (\n        format: ContentModelSegmentFormat,\n        isTuringOn: boolean,\n        segment: ContentModelSegment | null,\n        paragraph: ContentModelParagraph | null\n    ) => void,\n    segmentHasStyleCallback?: (\n        format: ContentModelSegmentFormat,\n        segment: ContentModelSegment | null,\n        paragraph: ContentModelParagraph | null\n    ) => boolean,\n    includingFormatHolder?: boolean,\n    afterFormatCallback?: (model: ContentModelDocument) => void\n) {\n    editor.formatContentModel(\n        (model, context) => {\n            let segmentAndParagraphs = getSelectedSegmentsAndParagraphs(\n                model,\n                !!includingFormatHolder\n            );\n            const pendingFormat = editor.getPendingFormat();\n            let isCollapsedSelection =\n                segmentAndParagraphs.length == 1 &&\n                segmentAndParagraphs[0][0].segmentType == 'SelectionMarker';\n\n            if (isCollapsedSelection) {\n                const para = segmentAndParagraphs[0][1];\n\n                segmentAndParagraphs = adjustWordSelection(\n                    model,\n                    segmentAndParagraphs[0][0]\n                ).map(x => [x, para]);\n\n                if (segmentAndParagraphs.length > 1) {\n                    isCollapsedSelection = false;\n                }\n            }\n\n            const formatsAndSegments: [\n                ContentModelSegmentFormat,\n                ContentModelSegment | null,\n                ContentModelParagraph | null\n            ][] = pendingFormat\n                ? [[pendingFormat, null, null]]\n                : segmentAndParagraphs.map(item => [item[0].format, item[0], item[1]]);\n\n            const isTurningOff = segmentHasStyleCallback\n                ? formatsAndSegments.every(([format, segment, paragraph]) =>\n                      segmentHasStyleCallback(format, segment, paragraph)\n                  )\n                : false;\n\n            formatsAndSegments.forEach(([format, segment, paragraph]) =>\n                toggleStyleCallback(format, !isTurningOff, segment, paragraph)\n            );\n\n            afterFormatCallback?.(model);\n\n            if (!pendingFormat && isCollapsedSelection) {\n                context.newPendingFormat = segmentAndParagraphs[0][0].format;\n            }\n\n            if (isCollapsedSelection) {\n                editor.focus();\n                return false;\n            } else {\n                return formatsAndSegments.length > 0;\n            }\n        },\n        {\n            apiName,\n        }\n    );\n}\n","/**\n *  Enum used to control the different types of bullet list\n */\nexport const BulletListType = {\n    /**\n     * Minimum value of the enum\n     */\n    Min: 1,\n    /**\n     * Bullet triggered by *\n     */\n    Disc: 1,\n    /**\n     * Bullet triggered by -\n     */\n    Dash: 2,\n    /**\n     * Bullet triggered by --\n     */\n    Square: 3,\n    /**\n     * Bullet triggered by >\n     */\n    ShortArrow: 4,\n    /**\n     * Bullet triggered by ->\n     */\n    LongArrow: 5,\n    /**\n     * Bullet triggered by =>\n     */\n    UnfilledArrow: 6,\n    /**\n     * Bullet triggered by —\n     */\n    Hyphen: 7,\n    /**\n     * Bullet triggered by -->\n     */\n    DoubleLongArrow: 8,\n    /**\n     * Bullet type circle\n     */\n    Circle: 9,\n    /**\n     * Maximum value of the enum\n     */\n    Max: 9,\n};\n","/**\n * Possible change sources. Here are the predefined sources.\n * It can also be other string if the change source can't fall into these sources.\n */\nexport const ChangeSource = {\n    /**\n     * Content changed by auto link\n     */\n    AutoLink: 'AutoLink',\n    /**\n     * Content changed by create link\n     */\n    CreateLink: 'CreateLink',\n    /**\n     * Content changed by format\n     */\n    Format: 'Format',\n    /**\n     * Content changed by image resize\n     */\n    ImageResize: 'ImageResize',\n    /**\n     * Content changed by paste\n     */\n    Paste: 'Paste',\n    /**\n     * Content changed by setContent API\n     */\n    SetContent: 'SetContent',\n    /**\n     * Content changed by cut operation\n     */\n    Cut: 'Cut',\n    /**\n     * Content changed by drag & drop operation\n     */\n    Drop: 'Drop',\n    /**\n     * Insert a new entity into editor\n     */\n    InsertEntity: 'InsertEntity',\n    /**\n     * Editor is switched to dark mode, content color is changed\n     */\n    SwitchToDarkMode: 'SwitchToDarkMode',\n    /**\n     * Editor is switched to light mode, content color is changed\n     */\n    SwitchToLightMode: 'SwitchToLightMode',\n    /**\n     * List chain reorganized numbers of lists\n     */\n    ListChain: 'ListChain',\n    /**\n     * Keyboard event, used by Content Model.\n     * Data of this event will be the key code number\n     */\n    Keyboard: 'Keyboard',\n};\n","/**\n *  Enum used to control the different types of numbering list\n */\nexport const NumberingListType = {\n    /**\n     * Minimum value of the enum\n     */\n    Min: 1,\n    /**\n     * Numbering triggered by 1.\n     */\n    Decimal: 1,\n    /**\n     * Numbering triggered by 1-\n     */\n    DecimalDash: 2,\n    /**\n     * Numbering triggered by 1)\n     */\n    DecimalParenthesis: 3,\n    /**\n     * Numbering triggered by (1)\n     */\n    DecimalDoubleParenthesis: 4,\n    /**\n     * Numbering triggered by a.\n     */\n    LowerAlpha: 5,\n    /**\n     * Numbering triggered by a)\n     */\n    LowerAlphaParenthesis: 6,\n    /**\n     * Numbering triggered by (a)\n     */\n    LowerAlphaDoubleParenthesis: 7,\n    /**\n     * Numbering triggered by a-\n     */\n    LowerAlphaDash: 8,\n    /**\n     * Numbering triggered by A.\n     */\n    UpperAlpha: 9,\n    /**\n     * Numbering triggered by A)\n     */\n    UpperAlphaParenthesis: 10,\n    /**\n     * Numbering triggered by (A)\n     */\n    UpperAlphaDoubleParenthesis: 11,\n    /**\n     * Numbering triggered by A-\n     */\n    UpperAlphaDash: 12,\n    /**\n     * Numbering triggered by i.\n     */\n    LowerRoman: 13,\n    /**\n     * Numbering triggered by i)\n     */\n    LowerRomanParenthesis: 14,\n    /**\n     * Numbering triggered by (i)\n     */\n    LowerRomanDoubleParenthesis: 15,\n    /**\n     * Numbering triggered by i-\n     */\n    LowerRomanDash: 16,\n    /**\n     * Numbering triggered by I.\n     */\n    UpperRoman: 17,\n    /**\n     * Numbering triggered by I)\n     */\n    UpperRomanParenthesis: 18,\n    /**\n     * Numbering triggered by (I)\n     */\n    UpperRomanDoubleParenthesis: 19,\n    /**\n     * Numbering triggered by I-\n     */\n    UpperRomanDash: 20,\n    /**\n     * Maximum value of the enum\n     */\n    Max: 20,\n};\n","/**\n * Table format border\n */\nexport const TableBorderFormat = {\n    /**\n     * Minimum value\n     */\n    Min: 0,\n\n    /**\n     * All border of the table are displayed\n     *  __ __ __\n     * |__|__|__|\n     * |__|__|__|\n     * |__|__|__|\n     */\n    Default: 0,\n\n    /**\n     * Middle vertical border are not displayed\n     *  __ __ __\n     * |__ __ __|\n     * |__ __ __|\n     * |__ __ __|\n     */\n    ListWithSideBorders: 1,\n\n    /**\n     * All borders except header rows borders are displayed\n     *  __ __ __\n     *  __|__|__\n     *  __|__|__\n     */\n    NoHeaderBorders: 2,\n\n    /**\n     * The left and right border of the table are not displayed\n     *  __ __ __\n     *  __|__|__\n     *  __|__|__\n     *  __|__|__\n     */\n    NoSideBorders: 3,\n\n    /**\n     * Only the borders that divides the header row, first column and externals are displayed\n     *  __ __ __\n     * |__ __ __|\n     * |  |     |\n     * |__|__ __|\n     */\n    FirstColumnHeaderExternal: 4,\n\n    /**\n     * The header row has no vertical border, except for the first one\n     * The first column has no horizontal border, except for the first one\n     *  __ __ __\n     * |__ __ __\n     * |  |__|__|\n     * |  |__|__|\n     */\n    EspecialType1: 5,\n\n    /**\n     * The header row has no vertical border, except for the first one\n     * The only horizontal border of the table is the top and bottom of header row\n     *  __ __ __\n     * |__ __ __\n     * |  |     |\n     * |  |     |\n     */\n    EspecialType2: 6,\n\n    /**\n     * The only borders are the bottom of header row and the right border of first column\n     *  __ __ __\n     *    |\n     *    |\n     */\n    EspecialType3: 7,\n\n    /**\n     * No border\n     */\n    Clear: 8,\n\n    /**\n     * Maximum value\n     */\n    Max: 8,\n};\n","import { createSnapshotSelection } from '../utils/createSnapshotSelection';\nimport type { AddUndoSnapshot, Snapshot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Add an undo snapshot to current undo snapshot stack\n * @param core The StandaloneEditorCore object\n * @param canUndoByBackspace True if this action can be undone when user press Backspace key (aka Auto Complete).\n * @param entityStates @optional Entity states related to this snapshot.\n * Each entity state will cause an EntityOperation event with operation = EntityOperation.UpdateEntityState\n * when undo/redo to this snapshot\n */\nexport const addUndoSnapshot: AddUndoSnapshot = (core, canUndoByBackspace, entityStates) => {\n    const { lifecycle, api, contentDiv, darkColorHandler, undo } = core;\n\n    if (!lifecycle.shadowEditFragment) {\n        const selection = api.getDOMSelection(core);\n        const snapshot: Snapshot = {\n            html: contentDiv.innerHTML,\n            knownColors: darkColorHandler.getKnownColorsCopy(),\n            entityStates,\n            isDarkMode: !!lifecycle.isDarkMode,\n            selection: createSnapshotSelection(contentDiv, selection),\n        };\n\n        undo.snapshotsManager.addSnapshot(snapshot, !!canUndoByBackspace);\n        undo.snapshotsManager.hasNewContent = false;\n    }\n};\n","import { getObjectKeys } from 'roosterjs-content-model-dom';\nimport type { AttachDomEvent } from 'roosterjs-content-model-types';\nimport type { PluginDomEvent } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Attach a DOM event to the editor content DIV\n * @param core The StandaloneEditorCore object\n * @param eventName The DOM event name\n * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\n * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\n */\nexport const attachDomEvent: AttachDomEvent = (core, eventMap) => {\n    const disposers = getObjectKeys(eventMap || {}).map(key => {\n        const { pluginEventType, beforeDispatch } = eventMap[key];\n        const eventName = key as keyof HTMLElementEventMap;\n        const onEvent = (event: HTMLElementEventMap[typeof eventName]) => {\n            if (beforeDispatch) {\n                beforeDispatch(event);\n            }\n\n            if (pluginEventType != null) {\n                core.api.triggerEvent(\n                    core,\n                    <PluginDomEvent>{\n                        eventType: pluginEventType,\n                        rawEvent: event,\n                    },\n                    false /*broadcast*/\n                );\n            }\n        };\n\n        core.contentDiv.addEventListener(eventName, onEvent);\n\n        return () => {\n            core.contentDiv.removeEventListener(eventName, onEvent);\n        };\n    });\n\n    return () => disposers.forEach(disposers => disposers());\n};\n","import { cloneModel } from '../publicApi/model/cloneModel';\nimport {\n    createDomToModelContext,\n    createDomToModelContextWithConfig,\n    domToContentModel,\n} from 'roosterjs-content-model-dom';\nimport type {\n    DOMSelection,\n    DomToModelOption,\n    CreateContentModel,\n    StandaloneEditorCore,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create Content Model from DOM tree in this editor\n * @param core The editor core object\n * @param option The option to customize the behavior of DOM to Content Model conversion\n * @param selectionOverride When passed, use this selection range instead of current selection in editor\n */\nexport const createContentModel: CreateContentModel = (core, option, selectionOverride) => {\n    let cachedModel = selectionOverride ? null : core.cache.cachedModel;\n\n    if (cachedModel && core.lifecycle.shadowEditFragment) {\n        // When in shadow edit, use a cloned model so we won't pollute the cached one\n        cachedModel = cloneModel(cachedModel, { includeCachedElement: true });\n    }\n\n    if (cachedModel) {\n        return cachedModel;\n    } else {\n        const selection = selectionOverride || core.api.getDOMSelection(core) || undefined;\n        const model = internalCreateContentModel(core, selection, option);\n\n        if (!option && !selectionOverride) {\n            core.cache.cachedModel = model;\n            core.cache.cachedSelection = selection;\n        }\n\n        return model;\n    }\n};\n\nfunction internalCreateContentModel(\n    core: StandaloneEditorCore,\n    selection?: DOMSelection,\n    option?: DomToModelOption\n) {\n    const editorContext = core.api.createEditorContext(core);\n    const domToModelContext = option\n        ? createDomToModelContext(\n              editorContext,\n              core.domToModelSettings.builtIn,\n              core.domToModelSettings.customized,\n              option\n          )\n        : createDomToModelContextWithConfig(core.domToModelSettings.calculated, editorContext);\n\n    return domToContentModel(core.contentDiv, domToModelContext, selection);\n}\n","import type { EditorContext, CreateEditorContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create a EditorContext object used by ContentModel API\n */\nexport const createEditorContext: CreateEditorContext = core => {\n    const { lifecycle, format, darkColorHandler, contentDiv, cache } = core;\n\n    const context: EditorContext = {\n        isDarkMode: lifecycle.isDarkMode,\n        defaultFormat: format.defaultFormat,\n        darkColorHandler: darkColorHandler,\n        addDelimiterForEntity: true,\n        allowCacheElement: true,\n        domIndexer: cache.domIndexer,\n    };\n\n    checkRootRtl(contentDiv, context);\n    checkZoomScale(contentDiv, context);\n\n    return context;\n};\n\nfunction checkZoomScale(element: HTMLElement, context: EditorContext) {\n    const originalWidth = element?.getBoundingClientRect()?.width || 0;\n    const visualWidth = element.offsetWidth;\n\n    if (visualWidth > 0 && originalWidth > 0) {\n        context.zoomScale = Math.round((originalWidth / visualWidth) * 100) / 100;\n    }\n}\n\nfunction checkRootRtl(element: HTMLElement, context: EditorContext) {\n    const style = element?.ownerDocument.defaultView?.getComputedStyle(element);\n\n    if (style?.direction == 'rtl') {\n        context.isRootRtl = true;\n    }\n}\n","import type { Focus } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Focus to editor. If there is a cached selection range, use it as current selection\n * @param core The StandaloneEditorCore object\n */\nexport const focus: Focus = core => {\n    if (!core.lifecycle.shadowEditFragment) {\n        const { api, selection } = core;\n\n        if (!api.hasFocus(core) && selection.selection?.type == 'range') {\n            api.setDOMSelection(core, selection.selection, true /*skipSelectionChangedEvent*/);\n        }\n\n        // fallback, in case editor still have no focus\n        if (!core.api.hasFocus(core)) {\n            core.contentDiv.focus();\n        }\n    }\n};\n","import { ChangeSource } from '../constants/ChangeSource';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    ChangedEntity,\n    ContentModelContentChangedEvent,\n    DOMSelection,\n    FormatContentModel,\n    FormatWithContentModelContext,\n    StandaloneEditorCore,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * The general API to do format change with Content Model\n * It will grab a Content Model for current editor content, and invoke a callback function\n * to do format change. Then according to the return value, write back the modified content model into editor.\n * If there is cached model, it will be used and updated.\n * @param core The StandaloneEditorCore object\n * @param formatter Formatter function, see ContentModelFormatter\n * @param options More options, see FormatWithContentModelOptions\n */\nexport const formatContentModel: FormatContentModel = (core, formatter, options) => {\n    const { apiName, onNodeCreated, getChangeData, changeSource, rawEvent, selectionOverride } =\n        options || {};\n\n    const model = core.api.createContentModel(core, undefined /*option*/, selectionOverride);\n    const context: FormatWithContentModelContext = {\n        newEntities: [],\n        deletedEntities: [],\n        rawEvent,\n        newImages: [],\n    };\n\n    const hasFocus = core.api.hasFocus(core);\n\n    const changed = formatter(model, context);\n    const { skipUndoSnapshot, clearModelCache, entityStates, canUndoByBackspace } = context;\n\n    if (changed) {\n        const isNested = core.undo.isNested;\n        const shouldAddSnapshot = !skipUndoSnapshot && !isNested;\n        let selection: DOMSelection | undefined;\n\n        if (shouldAddSnapshot) {\n            core.undo.isNested = true;\n\n            if (core.undo.snapshotsManager.hasNewContent || entityStates) {\n                core.api.addUndoSnapshot(core, !!canUndoByBackspace);\n            }\n        }\n\n        try {\n            handleImages(core, context);\n\n            selection =\n                core.api.setContentModel(\n                    core,\n                    model,\n                    hasFocus ? undefined : { ignoreSelection: true }, // If editor did not have focus before format, do not set focus after format\n                    onNodeCreated\n                ) ?? undefined;\n\n            handlePendingFormat(core, context, selection);\n\n            if (shouldAddSnapshot) {\n                core.api.addUndoSnapshot(core, !!canUndoByBackspace, entityStates);\n            }\n        } finally {\n            if (!isNested) {\n                core.undo.isNested = false;\n            }\n        }\n\n        const eventData: ContentModelContentChangedEvent = {\n            eventType: PluginEventType.ContentChanged,\n            contentModel: clearModelCache ? undefined : model,\n            selection: clearModelCache ? undefined : selection,\n            source: changeSource || ChangeSource.Format,\n            data: getChangeData?.(),\n            additionalData: {\n                formatApiName: apiName,\n            },\n            changedEntities: getChangedEntities(context, rawEvent),\n        };\n\n        core.api.triggerEvent(core, eventData, true /*broadcast*/);\n\n        if (canUndoByBackspace && selection?.type == 'range') {\n            core.undo.snapshotsManager.hasNewContent = false;\n            core.undo.posContainer = selection.range.startContainer;\n            core.undo.posOffset = selection.range.startOffset;\n        }\n    } else {\n        if (clearModelCache) {\n            core.cache.cachedModel = undefined;\n            core.cache.cachedSelection = undefined;\n        }\n\n        handlePendingFormat(core, context, core.api.getDOMSelection(core));\n    }\n};\n\nfunction handleImages(core: StandaloneEditorCore, context: FormatWithContentModelContext) {\n    if (context.newImages.length > 0) {\n        const viewport = core.api.getVisibleViewport(core);\n\n        if (viewport) {\n            const { left, right } = viewport;\n            const minMaxImageSize = 10;\n            const maxWidth = Math.max(right - left, minMaxImageSize);\n            context.newImages.forEach(image => {\n                image.format.maxWidth = `${maxWidth}px`;\n            });\n        }\n    }\n}\n\nfunction handlePendingFormat(\n    core: StandaloneEditorCore,\n    context: FormatWithContentModelContext,\n    selection?: DOMSelection | null\n) {\n    const pendingFormat =\n        context.newPendingFormat == 'preserve'\n            ? core.format.pendingFormat?.format\n            : context.newPendingFormat;\n\n    if (pendingFormat && selection?.type == 'range' && selection.range.collapsed) {\n        core.format.pendingFormat = {\n            format: { ...pendingFormat },\n            posContainer: selection.range.startContainer,\n            posOffset: selection.range.startOffset,\n        };\n    }\n}\n\nfunction getChangedEntities(\n    context: FormatWithContentModelContext,\n    rawEvent?: Event\n): ChangedEntity[] {\n    return context.newEntities\n        .map(\n            (entity): ChangedEntity => ({\n                entity,\n                operation: 'newEntity',\n                rawEvent,\n            })\n        )\n        .concat(\n            context.deletedEntities.map(entry => ({\n                entity: entry.entity,\n                operation: entry.operation,\n                rawEvent,\n            }))\n        );\n}\n","import type {\n    DOMSelection,\n    GetDOMSelection,\n    StandaloneEditorCore,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const getDOMSelection: GetDOMSelection = core => {\n    return core.lifecycle.shadowEditFragment\n        ? null\n        : core.selection.selection ?? getNewSelection(core);\n};\n\nfunction getNewSelection(core: StandaloneEditorCore): DOMSelection | null {\n    const selection = core.contentDiv.ownerDocument.defaultView?.getSelection();\n    const range = selection && selection.rangeCount > 0 ? selection.getRangeAt(0) : null;\n\n    return range && core.contentDiv.contains(range.commonAncestorContainer)\n        ? {\n              type: 'range',\n              range: range,\n          }\n        : null;\n}\n","import type { Rect } from 'roosterjs-editor-types';\nimport type { GetVisibleViewport } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Retrieves the rect of the visible viewport of the editor.\n * @param core The StandaloneEditorCore object\n */\nexport const getVisibleViewport: GetVisibleViewport = core => {\n    const scrollContainer = core.domEvent.scrollContainer;\n\n    return getIntersectedRect(\n        scrollContainer == core.contentDiv ? [scrollContainer] : [scrollContainer, core.contentDiv]\n    );\n};\n\n/**\n * Get the intersected Rect of elements provided\n *\n * @example\n * The result of the following Elements Rects would be:\n    {\n        top: Element2.top,\n        bottom: Element1.bottom,\n        left: Element2.left,\n        right: Element2.right\n    }\n    +-------------------------+\n    | Element 1               |\n    |   +-----------------+   |\n    |   | Element2        |   |\n    |   |                 |   |\n    |   |                 |   |\n    +-------------------------+\n        |                 |\n        +-----------------+\n\n * @param elements Elements to use.\n * @param additionalRects additional rects to use\n * @returns If the Rect is valid return the rect, if not, return null.\n */\nfunction getIntersectedRect(elements: HTMLElement[], additionalRects: Rect[] = []): Rect | null {\n    const rects = elements\n        .map(element => normalizeRect(element.getBoundingClientRect()))\n        .concat(additionalRects)\n        .filter((rect: Rect | null): rect is Rect => !!rect);\n\n    const result: Rect = {\n        top: Math.max(...rects.map(r => r.top)),\n        bottom: Math.min(...rects.map(r => r.bottom)),\n        left: Math.max(...rects.map(r => r.left)),\n        right: Math.min(...rects.map(r => r.right)),\n    };\n\n    return result.top < result.bottom && result.left < result.right ? result : null;\n}\n\nfunction normalizeRect(clientRect: DOMRect): Rect | null {\n    const { left, right, top, bottom } =\n        clientRect || <DOMRect>{ left: 0, right: 0, top: 0, bottom: 0 };\n    return left === 0 && right === 0 && top === 0 && bottom === 0\n        ? null\n        : {\n              left: Math.round(left),\n              right: Math.round(right),\n              top: Math.round(top),\n              bottom: Math.round(bottom),\n          };\n}\n","import type { HasFocus } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Check if the editor has focus now\n * @param core The StandaloneEditorCore object\n * @returns True if the editor has focus, otherwise false\n */\nexport const hasFocus: HasFocus = core => {\n    const activeElement = core.contentDiv.ownerDocument.activeElement;\n    return !!(activeElement && core.contentDiv.contains(activeElement));\n};\n","import { ChangeSource } from '../constants/ChangeSource';\nimport { cloneModel } from '../publicApi/model/cloneModel';\nimport { convertInlineCss } from '../utils/paste/convertInlineCss';\nimport { createPasteFragment } from '../utils/paste/createPasteFragment';\nimport { generatePasteOptionFromPlugins } from '../utils/paste/generatePasteOptionFromPlugins';\nimport { mergePasteContent } from '../utils/paste/mergePasteContent';\nimport { retrieveHtmlInfo } from '../utils/paste/retrieveHtmlInfo';\nimport type { CloneModelOptions } from '../publicApi/model/cloneModel';\nimport type {\n    PasteType,\n    ClipboardData,\n    Paste,\n    StandaloneEditorCore,\n} from 'roosterjs-content-model-types';\nimport type { TrustedHTMLHandler } from 'roosterjs-editor-types';\n\nconst CloneOption: CloneModelOptions = {\n    includeCachedElement: (node, type) => (type == 'cache' ? undefined : node),\n};\n\n/**\n * @internal\n * Paste into editor using a clipboardData object\n * @param core The StandaloneEditorCore object.\n * @param clipboardData Clipboard data retrieved from clipboard\n * @param pasteType Type of content to paste. @default normal\n */\nexport const paste: Paste = (\n    core: StandaloneEditorCore,\n    clipboardData: ClipboardData,\n    pasteType: PasteType = 'normal'\n) => {\n    core.api.focus(core);\n\n    if (clipboardData.modelBeforePaste) {\n        core.api.setContentModel(core, cloneModel(clipboardData.modelBeforePaste, CloneOption));\n    } else {\n        clipboardData.modelBeforePaste = cloneModel(core.api.createContentModel(core), CloneOption);\n    }\n\n    core.api.formatContentModel(\n        core,\n        (model, context) => {\n            // 1. Prepare variables\n            const doc = createDOMFromHtml(clipboardData.rawHtml, core.trustedHTMLHandler);\n\n            // 2. Handle HTML from clipboard\n            const htmlFromClipboard = retrieveHtmlInfo(doc, clipboardData);\n\n            // 3. Create target fragment\n            const sourceFragment = createPasteFragment(\n                core.contentDiv.ownerDocument,\n                clipboardData,\n                pasteType,\n                (clipboardData.rawHtml == clipboardData.html\n                    ? doc\n                    : createDOMFromHtml(clipboardData.html, core.trustedHTMLHandler)\n                )?.body\n            );\n\n            // 4. Trigger BeforePaste event to allow plugins modify the fragment\n            const eventResult = generatePasteOptionFromPlugins(\n                core,\n                clipboardData,\n                sourceFragment,\n                htmlFromClipboard,\n                pasteType\n            );\n\n            // 5. Convert global CSS to inline CSS\n            convertInlineCss(eventResult.fragment, htmlFromClipboard.globalCssRules);\n\n            // 6. Merge pasted content into main Content Model\n            mergePasteContent(model, context, eventResult, core.domToModelSettings.customized);\n\n            return true;\n        },\n        {\n            changeSource: ChangeSource.Paste,\n            getChangeData: () => clipboardData,\n            apiName: 'paste',\n        }\n    );\n};\n\nfunction createDOMFromHtml(\n    html: string | null | undefined,\n    trustedHTMLHandler: TrustedHTMLHandler\n): Document | null {\n    return html ? new DOMParser().parseFromString(trustedHTMLHandler(html), 'text/html') : null;\n}\n","import { ChangeSource } from '../constants/ChangeSource';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport { restoreSnapshotColors } from '../utils/restoreSnapshotColors';\nimport { restoreSnapshotHTML } from '../utils/restoreSnapshotHTML';\nimport { restoreSnapshotSelection } from '../utils/restoreSnapshotSelection';\nimport type {\n    ContentModelContentChangedEvent,\n    RestoreUndoSnapshot,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Restore an undo snapshot into editor\n * @param core The editor core object\n * @param step Steps to move, can be 0, positive or negative\n */\nexport const restoreUndoSnapshot: RestoreUndoSnapshot = (core, snapshot) => {\n    core.api.triggerEvent(\n        core,\n        {\n            eventType: PluginEventType.BeforeSetContent,\n            newContent: snapshot.html,\n        },\n        true /*broadcast*/\n    );\n\n    try {\n        core.undo.isRestoring = true;\n\n        restoreSnapshotHTML(core, snapshot);\n        restoreSnapshotSelection(core, snapshot);\n        restoreSnapshotColors(core, snapshot);\n\n        const event: ContentModelContentChangedEvent = {\n            eventType: PluginEventType.ContentChanged,\n            entityStates: snapshot.entityStates,\n            source: ChangeSource.SetContent,\n        };\n\n        core.api.triggerEvent(core, event, false /*broadcast*/);\n    } finally {\n        core.undo.isRestoring = false;\n    }\n};\n","import {\n    contentModelToDom,\n    createModelToDomContext,\n    createModelToDomContextWithConfig,\n} from 'roosterjs-content-model-dom';\nimport type { SetContentModel } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Set content with content model\n * @param core The editor core object\n * @param model The content model to set\n * @param option Additional options to customize the behavior of Content Model to DOM conversion\n */\nexport const setContentModel: SetContentModel = (core, model, option, onNodeCreated) => {\n    const editorContext = core.api.createEditorContext(core);\n    const modelToDomContext = option\n        ? createModelToDomContext(\n              editorContext,\n              core.modelToDomSettings.builtIn,\n              core.modelToDomSettings.customized,\n              option\n          )\n        : createModelToDomContextWithConfig(core.modelToDomSettings.calculated, editorContext);\n\n    const selection = contentModelToDom(\n        core.contentDiv.ownerDocument,\n        core.contentDiv,\n        model,\n        modelToDomContext,\n        onNodeCreated\n    );\n\n    if (!core.lifecycle.shadowEditFragment) {\n        core.cache.cachedSelection = selection || undefined;\n\n        if (!option?.ignoreSelection && selection) {\n            core.api.setDOMSelection(core, selection);\n        } else if (!selection || selection.type !== 'range') {\n            core.selection.selection = selection;\n        }\n\n        core.cache.cachedModel = model;\n    }\n\n    return selection;\n};\n","import { addRangeToSelection } from '../corePlugin/utils/addRangeToSelection';\nimport { isNodeOfType, toArray } from 'roosterjs-content-model-dom';\nimport { parseTableCells } from '../publicApi/domUtils/tableCellUtils';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    ContentModelSelectionChangedEvent,\n    SetDOMSelection,\n    TableSelection,\n} from 'roosterjs-content-model-types';\n\nconst IMAGE_ID = 'image';\nconst TABLE_ID = 'table';\nconst CONTENT_DIV_ID = 'contentDiv';\nconst DEFAULT_SELECTION_BORDER_COLOR = '#DB626C';\nconst TABLE_CSS_RULE = '{background-color: rgb(198,198,198) !important;}';\nconst CARET_CSS_RULE = '{caret-color: transparent}';\nconst MAX_RULE_SELECTOR_LENGTH = 9000;\n\n/**\n * @internal\n */\nexport const setDOMSelection: SetDOMSelection = (core, selection, skipSelectionChangedEvent) => {\n    // We are applying a new selection, so we don't need to apply cached selection in DOMEventPlugin.\n    // Set skipReselectOnFocus to skip this behavior\n    const skipReselectOnFocus = core.selection.skipReselectOnFocus;\n\n    const doc = core.contentDiv.ownerDocument;\n    const sheet = core.selection.selectionStyleNode?.sheet;\n\n    core.selection.skipReselectOnFocus = true;\n\n    try {\n        let selectionRules: string[] | undefined;\n        const rootSelector = '#' + addUniqueId(core.contentDiv, CONTENT_DIV_ID);\n\n        switch (selection?.type) {\n            case 'image':\n                const image = selection.image;\n\n                selectionRules = buildImageCSS(\n                    rootSelector,\n                    addUniqueId(image, IMAGE_ID),\n                    core.selection.imageSelectionBorderColor\n                );\n                core.selection.selection = selection;\n\n                setRangeSelection(doc, image);\n                break;\n            case 'table':\n                const { table, firstColumn, firstRow } = selection;\n\n                selectionRules = buildTableCss(\n                    rootSelector,\n                    addUniqueId(table, TABLE_ID),\n                    selection\n                );\n                core.selection.selection = selection;\n\n                setRangeSelection(doc, table.rows[firstRow]?.cells[firstColumn]);\n                break;\n            case 'range':\n                addRangeToSelection(doc, selection.range);\n\n                core.selection.selection = core.api.hasFocus(core) ? null : selection;\n                break;\n\n            default:\n                core.selection.selection = null;\n                break;\n        }\n\n        if (sheet) {\n            for (let i = sheet.cssRules.length - 1; i >= 0; i--) {\n                sheet.deleteRule(i);\n            }\n\n            if (selectionRules) {\n                for (let i = 0; i < selectionRules.length; i++) {\n                    sheet.insertRule(selectionRules[i]);\n                }\n            }\n        }\n    } finally {\n        core.selection.skipReselectOnFocus = skipReselectOnFocus;\n    }\n\n    if (!skipSelectionChangedEvent) {\n        const eventData: ContentModelSelectionChangedEvent = {\n            eventType: PluginEventType.SelectionChanged,\n            newSelection: selection,\n            selectionRangeEx: null,\n        };\n\n        core.api.triggerEvent(core, eventData, true /*broadcast*/);\n    }\n};\n\nfunction buildImageCSS(editorSelector: string, imageId: string, borderColor?: string): string[] {\n    const color = borderColor || DEFAULT_SELECTION_BORDER_COLOR;\n\n    return [\n        `${editorSelector} #${imageId} {outline-style:auto!important;outline-color:${color}!important;}`,\n        `${editorSelector} ${CARET_CSS_RULE}`,\n    ];\n}\n\nfunction buildTableCss(\n    editorSelector: string,\n    tableId: string,\n    selection: TableSelection\n): string[] {\n    const { firstColumn, firstRow, lastColumn, lastRow } = selection;\n    const cells = parseTableCells(selection.table);\n    const isAllTableSelected =\n        firstRow == 0 &&\n        firstColumn == 0 &&\n        lastRow == cells.length - 1 &&\n        lastColumn == (cells[lastRow]?.length ?? 0) - 1;\n    const rootSelector = editorSelector + ' #' + tableId;\n    const selectors = isAllTableSelected\n        ? [rootSelector, `${rootSelector} *`]\n        : handleTableSelected(rootSelector, selection, cells);\n\n    const cssRules: string[] = [`${editorSelector} ${CARET_CSS_RULE}`];\n    let currentRules: string = '';\n\n    for (let i = 0; i < selectors.length; i++) {\n        currentRules += (currentRules.length > 0 ? ',' : '') + selectors[i] || '';\n\n        if (\n            currentRules.length + (selectors[0]?.length || 0) > MAX_RULE_SELECTOR_LENGTH ||\n            i == selectors.length - 1\n        ) {\n            cssRules.push(currentRules + ' ' + TABLE_CSS_RULE);\n            currentRules = '';\n        }\n    }\n\n    return cssRules;\n}\n\nfunction handleTableSelected(\n    rootSelector: string,\n    selection: TableSelection,\n    cells: (HTMLTableCellElement | null)[][]\n) {\n    const { firstRow, firstColumn, lastRow, lastColumn, table } = selection;\n    const selectors: string[] = [];\n\n    // Get whether table has thead, tbody or tfoot, then Set the start and end of each of the table children,\n    // so we can build the selector according the element between the table and the row.\n    let cont = 0;\n    const indexes = toArray(table.childNodes)\n        .filter(\n            (node): node is HTMLTableSectionElement =>\n                ['THEAD', 'TBODY', 'TFOOT'].indexOf(\n                    isNodeOfType(node, 'ELEMENT_NODE') ? node.tagName : ''\n                ) > -1\n        )\n        .map(node => {\n            const result = {\n                el: node.tagName,\n                start: cont,\n                end: node.childNodes.length + cont,\n            };\n\n            cont = result.end;\n            return result;\n        });\n\n    cells.forEach((row, rowIndex) => {\n        let tdCount = 0;\n\n        //Get current TBODY/THEAD/TFOOT\n        const midElement = indexes.filter(ind => ind.start <= rowIndex && ind.end > rowIndex)[0];\n        const middleElSelector = midElement ? '>' + midElement.el + '>' : '>';\n        const currentRow =\n            midElement && rowIndex + 1 >= midElement.start\n                ? rowIndex + 1 - midElement.start\n                : rowIndex + 1;\n\n        for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n            const cell = row[cellIndex];\n\n            if (cell) {\n                tdCount++;\n\n                if (\n                    rowIndex >= firstRow &&\n                    rowIndex <= lastRow &&\n                    cellIndex >= firstColumn &&\n                    cellIndex <= lastColumn\n                ) {\n                    const selector = `${rootSelector}${middleElSelector} tr:nth-child(${currentRow})>${cell.tagName}:nth-child(${tdCount})`;\n\n                    selectors.push(selector, selector + ' *');\n                }\n            }\n        }\n    });\n\n    return selectors;\n}\n\nfunction setRangeSelection(doc: Document, element: HTMLElement | undefined) {\n    if (element) {\n        const range = doc.createRange();\n\n        range.selectNode(element);\n        range.collapse();\n\n        addRangeToSelection(doc, range);\n    }\n}\n\nfunction addUniqueId(element: HTMLElement, idPrefix: string): string {\n    idPrefix = element.id || idPrefix;\n\n    const doc = element.ownerDocument;\n    let i = 0;\n\n    while (!element.id || doc.querySelectorAll('#' + element.id).length > 1) {\n        element.id = idPrefix + '_' + i++;\n    }\n\n    return element.id;\n}\n","import { iterateSelections } from '../publicApi/selection/iterateSelections';\nimport { moveChildNodes } from 'roosterjs-content-model-dom';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { SwitchShadowEdit } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Switch the Shadow Edit mode of editor On/Off\n * @param editorCore The StandaloneEditorCore object\n * @param isOn True to switch On, False to switch Off\n */\nexport const switchShadowEdit: SwitchShadowEdit = (editorCore, isOn): void => {\n    // TODO: Use strong-typed editor core object\n    const core = editorCore;\n\n    if (isOn != !!core.lifecycle.shadowEditFragment) {\n        if (isOn) {\n            const model = !core.cache.cachedModel ? core.api.createContentModel(core) : null;\n\n            // Fake object, not used in Content Model Editor, just to satisfy original editor code\n            // TODO: we can remove them once we have standalone Content Model Editor\n            const fragment = core.contentDiv.ownerDocument.createDocumentFragment();\n            const clonedRoot = core.contentDiv.cloneNode(true /*deep*/);\n\n            moveChildNodes(fragment, clonedRoot);\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: PluginEventType.EnteredShadowEdit,\n                    fragment,\n                    selectionPath: null,\n                },\n                false /*broadcast*/\n            );\n\n            // This need to be done after EnteredShadowEdit event is triggered since EnteredShadowEdit event will cause a SelectionChanged event\n            // if current selection is table selection or image selection\n            if (!core.cache.cachedModel && model) {\n                core.cache.cachedModel = model;\n            }\n\n            core.lifecycle.shadowEditFragment = fragment;\n        } else {\n            core.lifecycle.shadowEditFragment = null;\n\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: PluginEventType.LeavingShadowEdit,\n                },\n                false /*broadcast*/\n            );\n\n            if (core.cache.cachedModel) {\n                // Force clear cached element from selected block\n                iterateSelections(core.cache.cachedModel, () => {});\n\n                core.api.setContentModel(core, core.cache.cachedModel, {\n                    ignoreSelection: true, // Do not set focus and selection when quit shadow edit, focus may remain in UI control (picker, ...)\n                });\n            }\n        }\n    }\n};\n","import { PluginEventType } from 'roosterjs-editor-types';\nimport type { TriggerEvent } from 'roosterjs-content-model-types';\nimport type { EditorPlugin, PluginEvent } from 'roosterjs-editor-types';\n\nconst allowedEventsInShadowEdit: PluginEventType[] = [\n    PluginEventType.EditorReady,\n    PluginEventType.BeforeDispose,\n    PluginEventType.ExtractContentWithDom,\n    PluginEventType.ZoomChanged,\n];\n\n/**\n * @internal\n * Trigger a plugin event\n * @param core The StandaloneEditorCore object\n * @param pluginEvent The event object to trigger\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\n */\nexport const triggerEvent: TriggerEvent = (core, pluginEvent, broadcast) => {\n    if (\n        (!core.lifecycle.shadowEditFragment ||\n            allowedEventsInShadowEdit.indexOf(pluginEvent.eventType as PluginEventType) >= 0) &&\n        (broadcast || !core.plugins.some(plugin => handledExclusively(pluginEvent, plugin)))\n    ) {\n        core.plugins.forEach(plugin => {\n            if (plugin.onPluginEvent) {\n                plugin.onPluginEvent(pluginEvent);\n            }\n        });\n    }\n};\n\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\n    if (plugin.onPluginEvent && plugin.willHandleEventExclusively?.(event)) {\n        plugin.onPluginEvent(event);\n        return true;\n    }\n\n    return false;\n}\n","import { areSameSelection } from './utils/areSameSelection';\nimport { contentModelDomIndexer } from './utils/contentModelDomIndexer';\nimport { isCharacterValue } from '../publicApi/domUtils/eventUtils';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    ContentModelCachePluginState,\n    ContentModelContentChangedEvent,\n    IStandaloneEditor,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\nimport type {\n    IEditor,\n    PluginEvent,\n    PluginKeyDownEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\n/**\n * ContentModel cache plugin manages cached Content Model, and refresh the cache when necessary\n */\nclass ContentModelCachePlugin implements PluginWithState<ContentModelCachePluginState> {\n    private editor: (IEditor & IStandaloneEditor) | null = null;\n    private state: ContentModelCachePluginState;\n\n    /**\n     * Construct a new instance of ContentModelEditPlugin class\n     * @param option The editor option\n     */\n    constructor(option: StandaloneEditorOptions) {\n        this.state = {\n            domIndexer: option.cacheModel ? contentModelDomIndexer : undefined,\n        };\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelCache';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IEditor & IStandaloneEditor;\n        this.editor.getDocument().addEventListener('selectionchange', this.onNativeSelectionChange);\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        if (this.editor) {\n            this.editor\n                .getDocument()\n                .removeEventListener('selectionchange', this.onNativeSelectionChange);\n            this.editor = null;\n        }\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState(): ContentModelCachePluginState {\n        return this.state;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case PluginEventType.KeyDown:\n                if (this.shouldClearCache(event)) {\n                    this.invalidateCache();\n                }\n                break;\n\n            case PluginEventType.Input:\n                {\n                    this.updateCachedModel(this.editor, true /*forceUpdate*/);\n                }\n                break;\n\n            case PluginEventType.SelectionChanged:\n                this.updateCachedModel(this.editor);\n                break;\n\n            case PluginEventType.ContentChanged:\n                {\n                    const { contentModel, selection } = event as ContentModelContentChangedEvent;\n\n                    if (contentModel && this.state.domIndexer) {\n                        this.state.cachedModel = contentModel;\n                        this.state.cachedSelection = selection;\n                    } else {\n                        this.invalidateCache();\n                    }\n                }\n\n                break;\n        }\n    }\n\n    private onNativeSelectionChange = () => {\n        if (this.editor?.hasFocus()) {\n            this.updateCachedModel(this.editor);\n        }\n    };\n\n    private invalidateCache() {\n        if (!this.editor?.isInShadowEdit()) {\n            this.state.cachedModel = undefined;\n            this.state.cachedSelection = undefined;\n        }\n    }\n\n    private updateCachedModel(editor: IStandaloneEditor, forceUpdate?: boolean) {\n        const cachedSelection = this.state.cachedSelection;\n        this.state.cachedSelection = undefined; // Clear it to force getDOMSelection() retrieve the latest selection range\n\n        const newRangeEx = editor.getDOMSelection() || undefined;\n        const model = this.state.cachedModel;\n        const isSelectionChanged =\n            forceUpdate ||\n            !cachedSelection ||\n            !newRangeEx ||\n            !areSameSelection(newRangeEx, cachedSelection);\n\n        if (isSelectionChanged) {\n            if (\n                !model ||\n                !newRangeEx ||\n                !this.state.domIndexer?.reconcileSelection(model, newRangeEx, cachedSelection)\n            ) {\n                this.invalidateCache();\n            } else {\n                this.state.cachedSelection = newRangeEx;\n            }\n        } else {\n            this.state.cachedSelection = cachedSelection;\n        }\n    }\n\n    private shouldClearCache(event: PluginKeyDownEvent) {\n        const { rawEvent, handledByEditFeature } = event;\n\n        // In these cases we can't update the model, so clear cache:\n        // 1. It is already handled by Content Edit Features\n        if (handledByEditFeature) {\n            return true;\n        }\n\n        // 2. Default behavior is prevented, which means other plugins has handled the event\n        if (rawEvent.defaultPrevented) {\n            return true;\n        }\n\n        // 3. ENTER key is pressed. ENTER key will create new paragraph, so need to update cache to reflect this change\n        // TODO: Handle ENTER key to better reuse content model\n\n        if (rawEvent.key == 'Enter') {\n            return true;\n        }\n\n        // 4. Current selection is image or table or expanded range selection, and is inputting some text\n        if (\n            (this.state.cachedSelection?.type != 'range' ||\n                !this.state.cachedSelection.range.collapsed) &&\n            isCharacterValue(rawEvent)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of ContentModelCachePlugin class.\n * @param option The editor option\n */\nexport function createContentModelCachePlugin(\n    option: StandaloneEditorOptions\n): PluginWithState<ContentModelCachePluginState> {\n    return new ContentModelCachePlugin(option);\n}\n","import { addRangeToSelection } from './utils/addRangeToSelection';\nimport { ChangeSource } from '../constants/ChangeSource';\nimport { cloneModel } from '../publicApi/model/cloneModel';\nimport { deleteEmptyList } from './utils/deleteEmptyList';\nimport { deleteSelection } from '../publicApi/selection/deleteSelection';\nimport { extractClipboardItems } from '../utils/extractClipboardItems';\nimport { getSelectedCells } from '../publicApi/table/getSelectedCells';\nimport { iterateSelections } from '../publicApi/selection/iterateSelections';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport { transformColor } from '../publicApi/color/transformColor';\nimport {\n    contentModelToDom,\n    createModelToDomContext,\n    isElementOfType,\n    isNodeOfType,\n    moveChildNodes,\n    normalizeContentModel,\n    toArray,\n    wrap,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ClipboardData,\n    CopyPastePluginState,\n    ContentModelTable,\n    DOMSelection,\n    IStandaloneEditor,\n    OnNodeCreated,\n    StandaloneEditorOptions,\n    ContentModelDocument,\n    ContentModelParagraph,\n    TableSelectionContext,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\nimport type { IEditor, PluginWithState } from 'roosterjs-editor-types';\n\n/**\n * Copy and paste plugin for handling onCopy and onPaste event\n */\nclass ContentModelCopyPastePlugin implements PluginWithState<CopyPastePluginState> {\n    private editor: (IStandaloneEditor & IEditor) | null = null;\n    private disposer: (() => void) | null = null;\n    private state: CopyPastePluginState;\n\n    /**\n     * Construct a new instance of CopyPastePlugin\n     * @param option The editor option\n     */\n    constructor(option: StandaloneEditorOptions) {\n        this.state = {\n            allowedCustomPasteType: option.allowedCustomPasteType || [],\n            tempDiv: null,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'ContentModelCopyPaste';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor as IStandaloneEditor & IEditor;\n        this.disposer = this.editor.attachDomEvent({\n            paste: {\n                beforeDispatch: e => this.onPaste(e),\n            },\n            copy: {\n                beforeDispatch: e => this.onCutCopy(e, false /*isCut*/),\n            },\n            cut: {\n                beforeDispatch: e => this.onCutCopy(e, true /*isCut*/),\n            },\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        if (this.state.tempDiv) {\n            this.state.tempDiv.parentNode?.removeChild(this.state.tempDiv);\n            this.state.tempDiv = null;\n        }\n\n        if (this.disposer) {\n            this.disposer();\n        }\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onCutCopy(event: Event, isCut: boolean) {\n        if (!this.editor) {\n            return;\n        }\n\n        const doc = this.editor.getDocument();\n        const selection = this.editor.getDOMSelection();\n\n        if (selection && (selection.type != 'range' || !selection.range.collapsed)) {\n            const model = this.editor.createContentModel(undefined /* option */, selection);\n            const cacheProcessor = this.editor.isDarkMode() ? this.processEntityColor : false;\n\n            const pasteModel = cloneModel(model, {\n                includeCachedElement: cacheProcessor,\n            });\n\n            if (selection.type === 'table') {\n                iterateSelections(pasteModel, (_, tableContext) => {\n                    if (tableContext?.table) {\n                        preprocessTable(tableContext.table);\n\n                        return true;\n                    }\n                    return false;\n                });\n            } else if (selection.type === 'range') {\n                adjustSelectionForCopyCut(pasteModel);\n            }\n\n            const tempDiv = this.getTempDiv(this.editor.getDocument());\n            const selectionForCopy = contentModelToDom(\n                tempDiv.ownerDocument,\n                tempDiv,\n                pasteModel,\n                createModelToDomContext(),\n                onNodeCreated\n            );\n\n            let newRange: Range | null = selectionForCopy\n                ? domSelectionToRange(doc, selectionForCopy)\n                : null;\n\n            if (newRange) {\n                newRange = this.editor.triggerPluginEvent(PluginEventType.BeforeCutCopy, {\n                    clonedRoot: tempDiv,\n                    range: newRange,\n                    rawEvent: event as ClipboardEvent,\n                    isCut,\n                }).range;\n\n                if (newRange) {\n                    addRangeToSelection(doc, newRange);\n                }\n\n                this.editor.runAsync(e => {\n                    const editor = e as IStandaloneEditor & IEditor;\n\n                    cleanUpAndRestoreSelection(tempDiv);\n                    editor.focus();\n                    editor.setDOMSelection(selection);\n\n                    if (isCut) {\n                        editor.formatContentModel(\n                            (model, context) => {\n                                if (\n                                    deleteSelection(model, [deleteEmptyList], context)\n                                        .deleteResult == 'range'\n                                ) {\n                                    normalizeContentModel(model);\n                                }\n\n                                return true;\n                            },\n                            {\n                                apiName: 'cut',\n                                changeSource: ChangeSource.Cut,\n                            }\n                        );\n                    }\n                });\n            } else {\n                cleanUpAndRestoreSelection(tempDiv);\n            }\n        }\n    }\n\n    private onPaste = (event: Event) => {\n        if (this.editor && isClipboardEvent(event)) {\n            const editor = this.editor;\n\n            const dataTransfer = event.clipboardData;\n\n            if (dataTransfer?.items) {\n                event.preventDefault();\n                extractClipboardItems(\n                    toArray(dataTransfer.items),\n                    this.state.allowedCustomPasteType\n                ).then((clipboardData: ClipboardData) => {\n                    if (!editor.isDisposed()) {\n                        editor.paste(clipboardData);\n                    }\n                });\n            }\n        }\n    };\n\n    private getTempDiv(doc: Document) {\n        if (!this.state.tempDiv) {\n            const tempDiv = doc.createElement('div');\n\n            tempDiv.style.width = '600px';\n            tempDiv.style.height = '1px';\n            tempDiv.style.overflow = 'hidden';\n            tempDiv.style.position = 'fixed';\n            tempDiv.style.top = '0';\n            tempDiv.style.left = '0';\n            tempDiv.style.userSelect = 'text';\n            tempDiv.contentEditable = 'true';\n\n            doc.body.appendChild(tempDiv);\n\n            this.state.tempDiv = tempDiv;\n        }\n\n        const div = this.state.tempDiv;\n\n        div.style.backgroundColor = 'white';\n        div.style.color = 'black';\n        div.childNodes.forEach(node => div.removeChild(node));\n\n        div.style.display = '';\n        div.focus();\n\n        return div;\n    }\n\n    private processEntityColor = (\n        node: HTMLElement,\n        type: 'general' | 'entity' | 'cache'\n    ): HTMLElement | undefined => {\n        if (type == 'cache' || !this.editor) {\n            return undefined;\n        }\n\n        const result = node.cloneNode(true /*deep*/) as HTMLElement;\n        const colorHandler = this.editor.getDarkColorHandler();\n\n        transformColor(result, true /*includeSelf*/, 'darkToLight', colorHandler);\n\n        result.style.color = result.style.color || 'inherit';\n        result.style.backgroundColor = result.style.backgroundColor || 'inherit';\n\n        return result;\n    };\n}\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport function adjustSelectionForCopyCut(pasteModel: ContentModelDocument) {\n    let selectionMarker: ContentModelSegment | undefined;\n    let firstBlock: ContentModelParagraph | undefined;\n    let tableContext: TableSelectionContext | undefined;\n\n    iterateSelections(pasteModel, (_, tableCtxt, block, segments) => {\n        if (selectionMarker) {\n            if (tableCtxt != tableContext && firstBlock?.segments.includes(selectionMarker)) {\n                firstBlock.segments.splice(firstBlock.segments.indexOf(selectionMarker), 1);\n            }\n            return true;\n        }\n\n        const marker = segments?.find(segment => segment.segmentType == 'SelectionMarker');\n        if (!selectionMarker && marker) {\n            tableContext = tableCtxt;\n            firstBlock = block?.blockType == 'Paragraph' ? block : undefined;\n            selectionMarker = marker;\n        }\n\n        return false;\n    });\n}\n\nfunction cleanUpAndRestoreSelection(tempDiv: HTMLDivElement) {\n    tempDiv.style.backgroundColor = '';\n    tempDiv.style.color = '';\n    tempDiv.style.display = 'none';\n    moveChildNodes(tempDiv);\n}\n\nfunction isClipboardEvent(event: Event): event is ClipboardEvent {\n    return !!(event as ClipboardEvent).clipboardData;\n}\n\nfunction domSelectionToRange(doc: Document, selection: DOMSelection): Range | null {\n    let newRange: Range | null = null;\n\n    if (selection.type === 'table') {\n        const table = selection.table;\n        const elementToSelect =\n            table.parentElement?.childElementCount == 1 ? table.parentElement : table;\n\n        newRange = doc.createRange();\n        newRange.selectNode(elementToSelect);\n    } else if (selection.type === 'image') {\n        newRange = doc.createRange();\n        newRange.selectNode(selection.image);\n    } else {\n        newRange = selection.range;\n    }\n\n    return newRange;\n}\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport const onNodeCreated: OnNodeCreated = (_, node): void => {\n    if (isNodeOfType(node, 'ELEMENT_NODE') && isElementOfType(node, 'table')) {\n        wrap(node.ownerDocument, node, 'div');\n    }\n    if (isNodeOfType(node, 'ELEMENT_NODE') && !node.isContentEditable) {\n        node.removeAttribute('contenteditable');\n    }\n};\n\n/**\n * @internal\n * Exported only for unit testing\n */\nexport function preprocessTable(table: ContentModelTable) {\n    const sel = getSelectedCells(table);\n    table.rows = table.rows\n        .map(row => {\n            return {\n                ...row,\n                cells: row.cells.filter(cell => cell.isSelected),\n            };\n        })\n        .filter(row => row.cells.length > 0);\n\n    delete table.format.width;\n\n    table.widths = sel\n        ? table.widths.filter((_, index) => index >= sel?.firstColumn && index <= sel?.lastColumn)\n        : [];\n}\n\n/**\n * @internal\n * Create a new instance of ContentModelCopyPastePlugin\n * @param option The editor option\n */\nexport function createContentModelCopyPastePlugin(\n    option: StandaloneEditorOptions\n): PluginWithState<CopyPastePluginState> {\n    return new ContentModelCopyPastePlugin(option);\n}\n","import { applyDefaultFormat } from './utils/applyDefaultFormat';\nimport { applyPendingFormat } from './utils/applyPendingFormat';\nimport { getObjectKeys } from 'roosterjs-content-model-dom';\nimport { isCharacterValue, isCursorMovingKey } from '../publicApi/domUtils/eventUtils';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { IEditor, PluginEvent, PluginWithState } from 'roosterjs-editor-types';\nimport type {\n    ContentModelFormatPluginState,\n    IStandaloneEditor,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\n\n// During IME input, KeyDown event will have \"Process\" as key\nconst ProcessKey = 'Process';\n\n/**\n * ContentModelFormat plugins helps editor to do formatting on top of content model.\n * This includes:\n * 1. Handle pending format changes when selection is collapsed\n */\nclass ContentModelFormatPlugin implements PluginWithState<ContentModelFormatPluginState> {\n    private editor: (IStandaloneEditor & IEditor) | null = null;\n    private hasDefaultFormat = false;\n    private state: ContentModelFormatPluginState;\n\n    /**\n     * Construct a new instance of ContentModelEditPlugin class\n     * @param option The editor option\n     */\n    constructor(option: StandaloneEditorOptions) {\n        this.state = {\n            defaultFormat: { ...option.defaultSegmentFormat },\n            pendingFormat: null,\n        };\n    }\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelFormat';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IStandaloneEditor & IEditor;\n        this.hasDefaultFormat =\n            getObjectKeys(this.state.defaultFormat).filter(\n                x => typeof this.state.defaultFormat[x] !== 'undefined'\n            ).length > 0;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState(): ContentModelFormatPluginState {\n        return this.state;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case PluginEventType.Input:\n                const env = this.editor.getEnvironment();\n\n                // In Safari, isComposing will be undefined but isInIME() works\n                // For Android, we can skip checking isComposing since this property is not always reliable in all IME,\n                // and we have tested without this check it can still work correctly\n                if (env.isAndroid || (!event.rawEvent.isComposing && !this.editor.isInIME())) {\n                    this.checkAndApplyPendingFormat(event.rawEvent.data);\n                }\n\n                break;\n\n            case PluginEventType.CompositionEnd:\n                this.checkAndApplyPendingFormat(event.rawEvent.data);\n                break;\n\n            case PluginEventType.KeyDown:\n                if (isCursorMovingKey(event.rawEvent)) {\n                    this.clearPendingFormat();\n                } else if (\n                    this.hasDefaultFormat &&\n                    (isCharacterValue(event.rawEvent) || event.rawEvent.key == ProcessKey)\n                ) {\n                    applyDefaultFormat(this.editor, this.state.defaultFormat);\n                }\n\n                break;\n\n            case PluginEventType.MouseUp:\n            case PluginEventType.ContentChanged:\n                if (!this.canApplyPendingFormat()) {\n                    this.clearPendingFormat();\n                }\n                break;\n        }\n    }\n\n    private checkAndApplyPendingFormat(data: string | null) {\n        if (this.editor && data && this.state.pendingFormat) {\n            applyPendingFormat(this.editor, data, this.state.pendingFormat.format);\n            this.clearPendingFormat();\n        }\n    }\n\n    private clearPendingFormat() {\n        this.state.pendingFormat = null;\n    }\n\n    /**\n     * @internal\n     * Check if this editor can apply pending format\n     * @param editor The editor to get format from\n     */\n    private canApplyPendingFormat(): boolean {\n        let result = false;\n\n        if (this.state.pendingFormat && this.editor) {\n            const selection = this.editor.getDOMSelection();\n            const range =\n                selection?.type == 'range' && selection.range.collapsed ? selection.range : null;\n            const { posContainer, posOffset } = this.state.pendingFormat;\n\n            if (range && range.startContainer == posContainer && range.startOffset == posOffset) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of ContentModelFormatPlugin.\n * @param option The editor option\n */\nexport function createContentModelFormatPlugin(\n    option: StandaloneEditorOptions\n): PluginWithState<ContentModelFormatPluginState> {\n    return new ContentModelFormatPlugin(option);\n}\n","import { ChangeSource } from '../constants/ChangeSource';\nimport { isCharacterValue, isCursorMovingKey } from '../publicApi/domUtils/eventUtils';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    DOMEventPluginState,\n    IStandaloneEditor,\n    DOMEventRecord,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\nimport type {\n    ContextMenuProvider,\n    EditorPlugin,\n    IEditor,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\n/**\n * DOMEventPlugin handles customized DOM events, including:\n * 1. Keyboard event\n * 2. Mouse event\n * 3. IME state\n * 4. Drop event\n * 5. Focus and blur event\n * 6. Input event\n * 7. Scroll event\n * It contains special handling for Safari since Safari cannot get correct selection when onBlur event is triggered in editor.\n */\nclass DOMEventPlugin implements PluginWithState<DOMEventPluginState> {\n    private editor: (IStandaloneEditor & IEditor) | null = null;\n    private disposer: (() => void) | null = null;\n    private state: DOMEventPluginState;\n\n    /**\n     * Construct a new instance of DOMEventPlugin\n     * @param options The editor options\n     * @param contentDiv The editor content DIV\n     */\n    constructor(options: StandaloneEditorOptions, contentDiv: HTMLDivElement) {\n        this.state = {\n            isInIME: false,\n            scrollContainer: options.scrollContainer || contentDiv,\n            contextMenuProviders:\n                options.plugins?.filter<ContextMenuProvider<any>>(isContextMenuProvider) || [],\n            mouseDownX: null,\n            mouseDownY: null,\n            mouseUpEventListerAdded: false,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'DOMEvent';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor as IStandaloneEditor & IEditor;\n\n        const document = this.editor.getDocument();\n        const eventHandlers: Partial<\n            { [P in keyof HTMLElementEventMap]: DOMEventRecord<HTMLElementEventMap[P]> }\n        > = {\n            // 1. Keyboard event\n            keypress: this.getEventHandler(PluginEventType.KeyPress),\n            keydown: this.getEventHandler(PluginEventType.KeyDown),\n            keyup: this.getEventHandler(PluginEventType.KeyUp),\n\n            // 2. Mouse event\n            mousedown: { beforeDispatch: this.onMouseDown },\n            contextmenu: { beforeDispatch: this.onContextMenuEvent },\n\n            // 3. IME state management\n            compositionstart: { beforeDispatch: this.onCompositionStart },\n            compositionend: { beforeDispatch: this.onCompositionEnd },\n\n            // 4. Drag and Drop event\n            dragstart: { beforeDispatch: this.onDragStart },\n            drop: { beforeDispatch: this.onDrop },\n\n            // 5. Input event\n            input: this.getEventHandler(PluginEventType.Input),\n        };\n\n        this.disposer = this.editor.attachDomEvent(<Record<string, DOMEventRecord>>eventHandlers);\n\n        // 7. Scroll event\n        this.state.scrollContainer.addEventListener('scroll', this.onScroll);\n        document.defaultView?.addEventListener('scroll', this.onScroll);\n        document.defaultView?.addEventListener('resize', this.onScroll);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.removeMouseUpEventListener();\n\n        const document = this.editor?.getDocument();\n\n        document?.defaultView?.removeEventListener('resize', this.onScroll);\n        document?.defaultView?.removeEventListener('scroll', this.onScroll);\n        this.state.scrollContainer.removeEventListener('scroll', this.onScroll);\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onDragStart = (e: Event) => {\n        const dragEvent = e as DragEvent;\n        const element = this.editor?.getElementAtCursor('*', dragEvent.target as Node);\n\n        if (element && !element.isContentEditable) {\n            dragEvent.preventDefault();\n        }\n    };\n    private onDrop = () => {\n        this.editor?.runAsync(() => {\n            if (this.editor) {\n                this.editor.takeSnapshot();\n                this.editor.triggerContentChangedEvent(ChangeSource.Drop);\n            }\n        });\n    };\n\n    private onScroll = (e: Event) => {\n        this.editor?.triggerPluginEvent(PluginEventType.Scroll, {\n            rawEvent: e,\n            scrollContainer: this.state.scrollContainer,\n        });\n    };\n\n    private getEventHandler(eventType: PluginEventType): DOMEventRecord {\n        const beforeDispatch = (event: Event) =>\n            eventType == PluginEventType.Input\n                ? this.onInputEvent(<InputEvent>event)\n                : this.onKeyboardEvent(<KeyboardEvent>event);\n\n        return {\n            pluginEventType: eventType,\n            beforeDispatch,\n        };\n    }\n\n    private onKeyboardEvent = (event: KeyboardEvent) => {\n        if (isCharacterValue(event) || isCursorMovingKey(event)) {\n            // Stop propagation for Character keys and Up/Down/Left/Right/Home/End/PageUp/PageDown\n            // since editor already handles these keys and no need to propagate to parents\n            event.stopPropagation();\n        }\n    };\n\n    private onInputEvent = (event: InputEvent) => {\n        event.stopPropagation();\n    };\n\n    private onMouseDown = (event: MouseEvent) => {\n        if (this.editor) {\n            if (!this.state.mouseUpEventListerAdded) {\n                this.editor\n                    .getDocument()\n                    .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\n                this.state.mouseUpEventListerAdded = true;\n                this.state.mouseDownX = event.pageX;\n                this.state.mouseDownY = event.pageY;\n            }\n\n            this.editor.triggerPluginEvent(PluginEventType.MouseDown, {\n                rawEvent: event,\n            });\n        }\n    };\n\n    private onMouseUp = (rawEvent: MouseEvent) => {\n        if (this.editor) {\n            this.removeMouseUpEventListener();\n            this.editor.triggerPluginEvent(PluginEventType.MouseUp, {\n                rawEvent,\n                isClicking:\n                    this.state.mouseDownX == rawEvent.pageX &&\n                    this.state.mouseDownY == rawEvent.pageY,\n            });\n        }\n    };\n\n    private onContextMenuEvent = (event: MouseEvent) => {\n        const allItems: any[] = [];\n\n        // TODO: Remove dependency to ContentSearcher\n        const searcher = this.editor?.getContentSearcherOfCursor();\n        const elementBeforeCursor = searcher?.getInlineElementBefore();\n\n        let eventTargetNode = event.target as Node;\n        if (event.button != 2 && elementBeforeCursor) {\n            eventTargetNode = elementBeforeCursor.getContainerNode();\n        }\n        this.state.contextMenuProviders.forEach(provider => {\n            const items = provider.getContextMenuItems(eventTargetNode) ?? [];\n            if (items?.length > 0) {\n                if (allItems.length > 0) {\n                    allItems.push(null);\n                }\n\n                allItems.push(...items);\n            }\n        });\n        this.editor?.triggerPluginEvent(PluginEventType.ContextMenu, {\n            rawEvent: event,\n            items: allItems,\n        });\n    };\n\n    private onCompositionStart = () => {\n        this.state.isInIME = true;\n    };\n\n    private onCompositionEnd = (rawEvent: CompositionEvent) => {\n        this.state.isInIME = false;\n        this.editor?.triggerPluginEvent(PluginEventType.CompositionEnd, {\n            rawEvent,\n        });\n    };\n\n    private removeMouseUpEventListener() {\n        if (this.editor && this.state.mouseUpEventListerAdded) {\n            this.state.mouseUpEventListerAdded = false;\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\n        }\n    }\n}\n\nfunction isContextMenuProvider(source: EditorPlugin): source is ContextMenuProvider<any> {\n    return !!(<ContextMenuProvider<any>>source)?.getContextMenuItems;\n}\n\n/**\n * @internal\n * Create a new instance of DOMEventPlugin.\n * @param option The editor option\n * @param contentDiv The editor content DIV element\n */\nexport function createDOMEventPlugin(\n    option: StandaloneEditorOptions,\n    contentDiv: HTMLDivElement\n): PluginWithState<DOMEventPluginState> {\n    return new DOMEventPlugin(option, contentDiv);\n}\n","import { findAllEntities } from './utils/findAllEntities';\nimport { transformColor } from '../publicApi/color/transformColor';\nimport {\n    createEntity,\n    generateEntityClassNames,\n    getAllEntityWrappers,\n    getObjectKeys,\n    isEntityElement,\n    parseEntityClassName,\n} from 'roosterjs-content-model-dom';\nimport { EntityOperation as LegacyEntityOperation, PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    ChangedEntity,\n    ContentModelContentChangedEvent,\n    ContentModelEntityFormat,\n    EntityOperation,\n    EntityPluginState,\n    IStandaloneEditor,\n} from 'roosterjs-content-model-types';\nimport type {\n    ContentChangedEvent,\n    IEditor,\n    PluginEvent,\n    PluginMouseUpEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\nconst ENTITY_ID_REGEX = /_(\\d{1,8})$/;\n\n// This is only used for compatibility with old editor\n// TODO: Remove this map once we have standalone editor\nconst EntityOperationMap: Record<EntityOperation, LegacyEntityOperation> = {\n    newEntity: LegacyEntityOperation.NewEntity,\n    overwrite: LegacyEntityOperation.Overwrite,\n    removeFromEnd: LegacyEntityOperation.RemoveFromEnd,\n    removeFromStart: LegacyEntityOperation.RemoveFromStart,\n    replaceTemporaryContent: LegacyEntityOperation.ReplaceTemporaryContent,\n    updateEntityState: LegacyEntityOperation.UpdateEntityState,\n    click: LegacyEntityOperation.Click,\n};\n\n/**\n * Entity Plugin helps handle all operations related to an entity and generate entity specified events\n */\nclass EntityPlugin implements PluginWithState<EntityPluginState> {\n    private editor: (IEditor & IStandaloneEditor) | null = null;\n    private state: EntityPluginState;\n\n    /**\n     * Construct a new instance of EntityPlugin\n     */\n    constructor() {\n        this.state = {\n            entityMap: {},\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Entity';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor as IStandaloneEditor & IEditor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n        this.state.entityMap = {};\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case PluginEventType.MouseUp:\n                    this.handleMouseUpEvent(this.editor, event);\n                    break;\n                case PluginEventType.ContentChanged:\n                    this.handleContentChangedEvent(this.editor, event);\n                    break;\n\n                case PluginEventType.EditorReady:\n                    this.handleContentChangedEvent(this.editor);\n                    break;\n                case PluginEventType.ExtractContentWithDom:\n                    this.handleExtractContentWithDomEvent(this.editor, event.clonedRoot);\n                    break;\n            }\n        }\n    }\n\n    private handleMouseUpEvent(editor: IEditor & IStandaloneEditor, event: PluginMouseUpEvent) {\n        const { rawEvent, isClicking } = event;\n        let node: Node | null = rawEvent.target as Node;\n\n        if (isClicking && this.editor) {\n            while (node && this.editor.contains(node)) {\n                if (isEntityElement(node)) {\n                    this.triggerEvent(editor, node as HTMLElement, 'click', rawEvent);\n                    break;\n                } else {\n                    node = node.parentNode;\n                }\n            }\n        }\n    }\n\n    private handleContentChangedEvent(\n        editor: IStandaloneEditor & IEditor,\n        event?: ContentChangedEvent\n    ) {\n        const cmEvent = event as ContentModelContentChangedEvent | undefined;\n        const modifiedEntities: ChangedEntity[] =\n            cmEvent?.changedEntities ?? this.getChangedEntities(editor);\n        const entityStates = cmEvent?.entityStates;\n\n        modifiedEntities.forEach(entry => {\n            const { entity, operation, rawEvent } = entry;\n            const {\n                entityFormat: { id, entityType, isFakeEntity },\n                wrapper,\n            } = entity;\n\n            if (entityType && !isFakeEntity) {\n                if (operation == 'newEntity') {\n                    entity.entityFormat.id = this.ensureUniqueId(entityType, id ?? '', wrapper);\n                    wrapper.className = generateEntityClassNames(entity.entityFormat);\n\n                    if (entity.entityFormat.isReadonly) {\n                        wrapper.contentEditable = 'false';\n                    }\n\n                    const eventResult = this.triggerEvent(editor, wrapper, operation, rawEvent);\n\n                    this.state.entityMap[entity.entityFormat.id] = {\n                        element: wrapper,\n                        canPersist: eventResult?.shouldPersist,\n                    };\n\n                    if (editor.isDarkMode()) {\n                        transformColor(\n                            wrapper,\n                            true /*includeSelf*/,\n                            'lightToDark',\n                            editor.getDarkColorHandler()\n                        );\n                    }\n                } else if (id) {\n                    const mapEntry = this.state.entityMap[id];\n\n                    if (mapEntry) {\n                        mapEntry.isDeleted = true;\n                    }\n\n                    this.triggerEvent(editor, wrapper, operation, rawEvent);\n                }\n            }\n        });\n\n        entityStates?.forEach(entityState => {\n            const { id, state } = entityState;\n            const wrapper = this.state.entityMap[id]?.element;\n\n            if (wrapper) {\n                this.triggerEvent(\n                    editor,\n                    wrapper,\n                    'updateEntityState',\n                    undefined /*rawEvent*/,\n                    state\n                );\n            }\n        });\n    }\n\n    private getChangedEntities(editor: IStandaloneEditor): ChangedEntity[] {\n        const result: ChangedEntity[] = [];\n\n        findAllEntities(editor.createContentModel(), result);\n\n        getObjectKeys(this.state.entityMap).forEach(id => {\n            const entry = this.state.entityMap[id];\n\n            if (!entry.isDeleted) {\n                const index = result.findIndex(\n                    x =>\n                        x.operation == 'newEntity' &&\n                        x.entity.entityFormat.id == id &&\n                        x.entity.wrapper == entry.element\n                );\n\n                if (index >= 0) {\n                    // Found matched entity in editor, so there is no change to this entity,\n                    // we can safely remove it from the new entity array\n                    result.splice(index, 1);\n                } else {\n                    // Entity is not in editor, which means it is deleted, use a temporary entity here to represent this entity\n                    const tempEntity = createEntity(entry.element);\n                    let isEntity = false;\n\n                    entry.element.classList.forEach(name => {\n                        isEntity = parseEntityClassName(name, tempEntity.entityFormat) || isEntity;\n                    });\n\n                    if (isEntity) {\n                        result.push({\n                            entity: tempEntity,\n                            operation: 'overwrite',\n                        });\n                    }\n                }\n            }\n        });\n\n        return result;\n    }\n\n    private handleExtractContentWithDomEvent(\n        editor: IEditor & IStandaloneEditor,\n        root: HTMLElement\n    ) {\n        getAllEntityWrappers(root).forEach(element => {\n            element.removeAttribute('contentEditable');\n\n            this.triggerEvent(editor, element, 'replaceTemporaryContent');\n        });\n    }\n\n    private triggerEvent(\n        editor: IEditor & IStandaloneEditor,\n        wrapper: HTMLElement,\n        operation: EntityOperation,\n        rawEvent?: Event,\n        state?: string\n    ) {\n        const format: ContentModelEntityFormat = {};\n        wrapper.classList.forEach(name => {\n            parseEntityClassName(name, format);\n        });\n\n        return format.id && format.entityType && !format.isFakeEntity\n            ? editor.triggerPluginEvent(PluginEventType.EntityOperation, {\n                  operation: EntityOperationMap[operation],\n                  rawEvent,\n                  entity: {\n                      id: format.id,\n                      type: format.entityType,\n                      isReadonly: !!format.isReadonly,\n                      wrapper,\n                  },\n                  state: operation == 'updateEntityState' ? state : undefined,\n              })\n            : null;\n    }\n\n    private ensureUniqueId(type: string, id: string, wrapper: HTMLElement): string {\n        const match = ENTITY_ID_REGEX.exec(id);\n        const baseId = (match ? id.substr(0, id.length - match[0].length) : id) || type;\n\n        // Make sure entity id is unique\n        let newId = '';\n\n        for (let num = (match && parseInt(match[1])) || 0; ; num++) {\n            newId = num > 0 ? `${baseId}_${num}` : baseId;\n\n            const item = this.state.entityMap[newId];\n\n            if (!item || item.element == wrapper) {\n                break;\n            }\n        }\n\n        return newId;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of EntityPlugin.\n */\nexport function createEntityPlugin(): PluginWithState<EntityPluginState> {\n    return new EntityPlugin();\n}\n","import { ChangeSource } from '../constants/ChangeSource';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport {\n    createBr,\n    createContentModelDocument,\n    createParagraph,\n    createSelectionMarker,\n    setColor,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n    IStandaloneEditor,\n    LifecyclePluginState,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\nimport type { IEditor, PluginWithState, PluginEvent } from 'roosterjs-editor-types';\n\nconst ContentEditableAttributeName = 'contenteditable';\nconst DefaultTextColor = '#000000';\nconst DefaultBackColor = '#ffffff';\n\n/**\n * Lifecycle plugin handles editor initialization and disposing\n */\nclass LifecyclePlugin implements PluginWithState<LifecyclePluginState> {\n    private editor: (IStandaloneEditor & IEditor) | null = null;\n    private state: LifecyclePluginState;\n    private initialModel: ContentModelDocument;\n    private initializer: (() => void) | null = null;\n    private disposer: (() => void) | null = null;\n    private adjustColor: () => void;\n\n    /**\n     * Construct a new instance of LifecyclePlugin\n     * @param options The editor options\n     * @param contentDiv The editor content DIV\n     */\n    constructor(options: StandaloneEditorOptions, contentDiv: HTMLDivElement) {\n        this.initialModel =\n            options.initialModel ?? this.createInitModel(options.defaultSegmentFormat);\n\n        // Make the container editable and set its selection styles\n        if (contentDiv.getAttribute(ContentEditableAttributeName) === null) {\n            this.initializer = () => {\n                contentDiv.contentEditable = 'true';\n                contentDiv.style.userSelect = 'text';\n            };\n            this.disposer = () => {\n                contentDiv.style.userSelect = '';\n                contentDiv.removeAttribute(ContentEditableAttributeName);\n            };\n        }\n        this.adjustColor = options.doNotAdjustEditorColor\n            ? () => {}\n            : () => {\n                  this.adjustContainerColor(contentDiv);\n              };\n\n        this.state = {\n            isDarkMode: !!options.inDarkMode,\n            onExternalContentTransform: null,\n            shadowEditFragment: null,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Lifecycle';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor as IEditor & IStandaloneEditor;\n\n        this.editor.setContentModel(this.initialModel, { ignoreSelection: true });\n\n        // Initial model is only used once. After that we can just clean it up to make sure we don't cache anything useless\n        // including the cached DOM element inside the model.\n        this.initialModel = createContentModelDocument();\n\n        // Set content DIV to be editable\n        this.initializer?.();\n\n        // Set editor background color for dark mode\n        this.adjustColor();\n\n        // Let other plugins know that we are ready\n        this.editor.triggerPluginEvent(PluginEventType.EditorReady, {}, true /*broadcast*/);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor?.triggerPluginEvent(PluginEventType.BeforeDispose, {}, true /*broadcast*/);\n\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n            this.initializer = null;\n        }\n\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (\n            event.eventType == PluginEventType.ContentChanged &&\n            (event.source == ChangeSource.SwitchToDarkMode ||\n                event.source == ChangeSource.SwitchToLightMode)\n        ) {\n            this.state.isDarkMode = event.source == ChangeSource.SwitchToDarkMode;\n            this.adjustColor();\n        }\n    }\n\n    private adjustContainerColor(contentDiv: HTMLElement) {\n        if (this.editor) {\n            const { isDarkMode } = this.state;\n            const darkColorHandler = this.editor.getDarkColorHandler();\n\n            setColor(\n                contentDiv,\n                DefaultTextColor,\n                false /*isBackground*/,\n                darkColorHandler,\n                isDarkMode\n            );\n            setColor(\n                contentDiv,\n                DefaultBackColor,\n                true /*isBackground*/,\n                darkColorHandler,\n                isDarkMode\n            );\n        }\n    }\n\n    private createInitModel(format?: ContentModelSegmentFormat) {\n        const model = createContentModelDocument(format);\n        const paragraph = createParagraph(false /*isImplicit*/, undefined /*blockFormat*/, format);\n\n        paragraph.segments.push(createSelectionMarker(format), createBr(format));\n        model.blocks.push(paragraph);\n\n        return model;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of LifecyclePlugin.\n * @param option The editor option\n * @param contentDiv The editor content DIV element\n */\nexport function createLifecyclePlugin(\n    option: StandaloneEditorOptions,\n    contentDiv: HTMLDivElement\n): PluginWithState<LifecyclePluginState> {\n    return new LifecyclePlugin(option, contentDiv);\n}\n","import { isElementOfType, isNodeOfType, toArray } from 'roosterjs-content-model-dom';\nimport { isModifierKey } from '../publicApi/domUtils/eventUtils';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { IEditor, PluginEvent, PluginWithState } from 'roosterjs-editor-types';\nimport type {\n    DOMSelection,\n    IStandaloneEditor,\n    SelectionPluginState,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\n\nconst MouseMiddleButton = 1;\nconst MouseRightButton = 2;\n\nclass SelectionPlugin implements PluginWithState<SelectionPluginState> {\n    private editor: (IStandaloneEditor & IEditor) | null = null;\n    private state: SelectionPluginState;\n    private disposer: (() => void) | null = null;\n\n    constructor(options: StandaloneEditorOptions) {\n        this.state = {\n            selection: null,\n            selectionStyleNode: null,\n            imageSelectionBorderColor: options.imageSelectionBorderColor, // TODO: Move to Selection core plugin\n        };\n    }\n\n    getName() {\n        return 'Selection';\n    }\n\n    initialize(editor: IEditor) {\n        this.editor = editor as IEditor & IStandaloneEditor;\n\n        const doc = this.editor.getDocument();\n        const styleNode = doc.createElement('style');\n\n        doc.head.appendChild(styleNode);\n        this.state.selectionStyleNode = styleNode;\n\n        const env = this.editor.getEnvironment();\n        const document = this.editor.getDocument();\n\n        if (env.isSafari) {\n            document.addEventListener('mousedown', this.onMouseDownDocument, true /*useCapture*/);\n            document.addEventListener('keydown', this.onKeyDownDocument);\n            document.defaultView?.addEventListener('blur', this.onBlur);\n            this.disposer = this.editor.attachDomEvent({ focus: { beforeDispatch: this.onFocus } });\n        } else {\n            this.disposer = this.editor.attachDomEvent({\n                focus: { beforeDispatch: this.onFocus },\n                blur: { beforeDispatch: this.onBlur },\n            });\n        }\n    }\n\n    dispose() {\n        if (this.state.selectionStyleNode) {\n            this.state.selectionStyleNode.parentNode?.removeChild(this.state.selectionStyleNode);\n            this.state.selectionStyleNode = null;\n        }\n\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n        }\n\n        if (this.editor) {\n            const document = this.editor.getDocument();\n\n            document.removeEventListener(\n                'mousedown',\n                this.onMouseDownDocument,\n                true /*useCapture*/\n            );\n            document.removeEventListener('keydown', this.onKeyDownDocument);\n            document.defaultView?.removeEventListener('blur', this.onBlur);\n\n            this.editor = null;\n        }\n    }\n\n    getState(): SelectionPluginState {\n        return this.state;\n    }\n\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n\n        let image: HTMLImageElement | null;\n        let selection: DOMSelection | null;\n\n        switch (event.eventType) {\n            case PluginEventType.MouseUp:\n                if (\n                    (image = this.getClickingImage(event.rawEvent)) &&\n                    image.isContentEditable &&\n                    event.rawEvent.button != MouseMiddleButton &&\n                    event.isClicking\n                ) {\n                    this.selectImage(this.editor, image);\n                }\n                break;\n\n            case PluginEventType.MouseDown:\n                selection = this.editor.getDOMSelection();\n                if (\n                    event.rawEvent.button === MouseRightButton &&\n                    (image = this.getClickingImage(event.rawEvent)) &&\n                    image.isContentEditable\n                ) {\n                    this.selectImage(this.editor, image);\n                } else if (\n                    selection?.type == 'image' &&\n                    selection.image !== event.rawEvent.target\n                ) {\n                    this.selectBeforeImage(this.editor, selection.image);\n                }\n                break;\n\n            case PluginEventType.KeyDown:\n                const rawEvent = event.rawEvent;\n                const key = rawEvent.key;\n                selection = this.editor.getDOMSelection();\n\n                if (\n                    !isModifierKey(rawEvent) &&\n                    !rawEvent.shiftKey &&\n                    selection?.type == 'image' &&\n                    selection.image.parentNode\n                ) {\n                    if (key === 'Escape') {\n                        this.selectBeforeImage(this.editor, selection.image);\n                        event.rawEvent.stopPropagation();\n                    } else if (key !== 'Delete' && key !== 'Backspace') {\n                        this.selectBeforeImage(this.editor, selection.image);\n                    }\n                }\n                break;\n        }\n    }\n\n    private selectImage(editor: IStandaloneEditor, image: HTMLImageElement) {\n        editor.setDOMSelection({\n            type: 'image',\n            image: image,\n        });\n    }\n\n    private selectBeforeImage(editor: IStandaloneEditor, image: HTMLImageElement) {\n        const doc = editor.getDocument();\n        const parent = image.parentNode;\n        const index = parent && toArray(parent.childNodes).indexOf(image);\n\n        if (parent && index !== null && index >= 0) {\n            const range = doc.createRange();\n            range.setStart(parent, index);\n            range.collapse();\n\n            editor.setDOMSelection({\n                type: 'range',\n                range: range,\n            });\n        }\n    }\n\n    private getClickingImage(event: UIEvent): HTMLImageElement | null {\n        const target = event.target as Node;\n\n        return isNodeOfType(target, 'ELEMENT_NODE') && isElementOfType(target, 'img')\n            ? target\n            : null;\n    }\n\n    private onFocus = () => {\n        if (!this.state.skipReselectOnFocus && this.state.selection) {\n            this.editor?.setDOMSelection(this.state.selection);\n        }\n\n        if (this.state.selection?.type == 'range') {\n            // Editor is focused, now we can get live selection. So no need to keep a selection if the selection type is range.\n            this.state.selection = null;\n        }\n    };\n\n    private onBlur = () => {\n        if (!this.state.selection && this.editor) {\n            this.state.selection = this.editor.getDOMSelection();\n        }\n    };\n\n    private onKeyDownDocument = (event: KeyboardEvent) => {\n        if (event.key == 'Tab' && !event.defaultPrevented) {\n            this.onBlur();\n        }\n    };\n\n    private onMouseDownDocument = (event: MouseEvent) => {\n        if (this.editor && !this.editor.contains(event.target as Node)) {\n            this.onBlur();\n        }\n    };\n}\n\n/**\n * @internal\n * Create a new instance of SelectionPlugin.\n * @param option The editor option\n */\nexport function createSelectionPlugin(\n    options: StandaloneEditorOptions\n): PluginWithState<SelectionPluginState> {\n    return new SelectionPlugin(options);\n}\n","import { ChangeSource } from '../constants/ChangeSource';\nimport { createSnapshotsManager } from '../editor/SnapshotsManagerImpl';\nimport { isCursorMovingKey } from '../publicApi/domUtils/eventUtils';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport { undo } from '../publicApi/undo/undo';\nimport type {\n    IStandaloneEditor,\n    StandaloneEditorOptions,\n    UndoPluginState,\n} from 'roosterjs-content-model-types';\nimport type {\n    ContentChangedEvent,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\nconst Backspace = 'Backspace';\nconst Delete = 'Delete';\nconst Enter = 'Enter';\n\n/**\n * Provides snapshot based undo service for Editor\n */\nclass UndoPlugin implements PluginWithState<UndoPluginState> {\n    private editor: (IStandaloneEditor & IEditor) | null = null;\n    private state: UndoPluginState;\n\n    /**\n     * Construct a new instance of UndoPlugin\n     * @param options The wrapper of the state object\n     */\n    constructor(options: StandaloneEditorOptions) {\n        this.state = {\n            snapshotsManager: options.snapshotsManager || createSnapshotsManager(),\n            isRestoring: false,\n            isNested: false,\n            posContainer: null,\n            posOffset: null,\n            lastKeyPress: null,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Undo';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor): void {\n        this.editor = editor as IEditor & IStandaloneEditor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * @param event The event to check\n     */\n    willHandleEventExclusively(event: PluginEvent) {\n        return (\n            !!this.editor &&\n            event.eventType == PluginEventType.KeyDown &&\n            event.rawEvent.key == Backspace &&\n            !event.rawEvent.ctrlKey &&\n            this.canUndoAutoComplete(this.editor)\n        );\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent): void {\n        // if editor is in IME, don't do anything\n        if (!this.editor || this.editor.isInIME()) {\n            return;\n        }\n\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n                const manager = this.state.snapshotsManager;\n                const canUndo = manager.hasNewContent || manager.canMove(-1);\n                const canRedo = manager.canMove(1);\n\n                if (!canUndo && !canRedo) {\n                    // Only add initial snapshot when there is no existing snapshot\n                    // Otherwise preserved undo/redo state may be ruined\n                    this.addUndoSnapshot();\n                }\n                break;\n            case PluginEventType.KeyDown:\n                this.onKeyDown(this.editor, event.rawEvent);\n                break;\n            case PluginEventType.KeyPress:\n                this.onKeyPress(this.editor, event.rawEvent);\n                break;\n            case PluginEventType.CompositionEnd:\n                this.clearRedoForInput();\n                this.addUndoSnapshot();\n                break;\n            case PluginEventType.ContentChanged:\n                this.onContentChanged(event);\n                break;\n            case PluginEventType.BeforeKeyboardEditing:\n                this.onBeforeKeyboardEditing(event.rawEvent);\n                break;\n        }\n    }\n\n    private onKeyDown(editor: IStandaloneEditor, evt: KeyboardEvent): void {\n        const { snapshotsManager } = this.state;\n\n        // Handle backspace/delete when there is a selection to take a snapshot\n        // since we want the state prior to deletion restorable\n        // Ignore if keycombo is ALT+BACKSPACE\n        if ((evt.key == Backspace && !evt.altKey) || evt.key == Delete) {\n            if (evt.key == Backspace && !evt.ctrlKey && this.canUndoAutoComplete(editor)) {\n                evt.preventDefault();\n                undo(editor);\n                this.state.posContainer = null;\n                this.state.posOffset = null;\n                this.state.lastKeyPress = evt.key;\n            } else if (!evt.defaultPrevented) {\n                const selection = editor.getDOMSelection();\n\n                // Add snapshot when\n                // 1. Something has been selected (not collapsed), or\n                // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\n                // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\n                if (\n                    selection &&\n                    (selection.type != 'range' ||\n                        !selection.range.collapsed ||\n                        this.state.lastKeyPress != evt.key ||\n                        this.isCtrlOrMetaPressed(editor, evt))\n                ) {\n                    this.addUndoSnapshot();\n                }\n\n                // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\n                snapshotsManager.hasNewContent = true;\n                this.state.lastKeyPress = evt.key;\n            }\n        } else if (isCursorMovingKey(evt)) {\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\n            if (snapshotsManager.hasNewContent) {\n                this.addUndoSnapshot();\n            }\n            this.state.lastKeyPress = null;\n        } else if (this.state.lastKeyPress == Backspace || this.state.lastKeyPress == Delete) {\n            if (snapshotsManager.hasNewContent) {\n                this.addUndoSnapshot();\n            }\n        }\n    }\n\n    private onKeyPress(editor: IStandaloneEditor, evt: KeyboardEvent): void {\n        if (evt.metaKey) {\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\n            return;\n        }\n\n        const selection = editor.getDOMSelection();\n\n        if (\n            (selection && (selection.type != 'range' || !selection.range.collapsed)) ||\n            (evt.key == ' ' && this.state.lastKeyPress != ' ') ||\n            evt.key == Enter\n        ) {\n            this.addUndoSnapshot();\n\n            if (evt.key == Enter) {\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\n                // we restore the snapshot before ENTER\n                this.state.snapshotsManager.hasNewContent = true;\n            }\n        } else {\n            this.clearRedoForInput();\n        }\n\n        this.state.lastKeyPress = evt.key;\n    }\n\n    private onBeforeKeyboardEditing(event: KeyboardEvent) {\n        // For keyboard event (triggered from Content Model), we can get its keycode from event.data\n        // And when user is keep pressing the same key, mark editor with \"hasNewContent\" so that next time user\n        // do some other action or press a different key, we will add undo snapshot\n        if (event.key != this.state.lastKeyPress) {\n            this.addUndoSnapshot();\n        }\n\n        this.state.lastKeyPress = event.key;\n        this.state.snapshotsManager.hasNewContent = true;\n    }\n\n    private onContentChanged(event: ContentChangedEvent) {\n        if (\n            !(\n                this.state.isRestoring ||\n                event.source == ChangeSource.SwitchToDarkMode ||\n                event.source == ChangeSource.SwitchToLightMode ||\n                event.source == ChangeSource.Keyboard\n            )\n        ) {\n            this.clearRedoForInput();\n        }\n    }\n\n    private clearRedoForInput() {\n        this.state.snapshotsManager.clearRedo();\n        this.state.lastKeyPress = null;\n        this.state.snapshotsManager.hasNewContent = true;\n    }\n\n    private canUndoAutoComplete(editor: IStandaloneEditor) {\n        const selection = editor.getDOMSelection();\n\n        return (\n            this.state.snapshotsManager.canUndoAutoComplete() &&\n            selection?.type == 'range' &&\n            selection.range.collapsed &&\n            selection.range.startContainer == this.state.posContainer &&\n            selection.range.startOffset == this.state.posOffset\n        );\n    }\n\n    private addUndoSnapshot() {\n        this.editor?.takeSnapshot();\n        this.state.posContainer = null;\n        this.state.posOffset = null;\n    }\n\n    private isCtrlOrMetaPressed(editor: IStandaloneEditor, event: KeyboardEvent) {\n        const env = editor.getEnvironment();\n\n        return env.isMac ? event.metaKey : event.ctrlKey;\n    }\n}\n\n/**\n * @internal\n * Create a new instance of UndoPlugin.\n * @param option The editor option\n */\nexport function createUndoPlugin(\n    option: StandaloneEditorOptions\n): PluginWithState<UndoPluginState> {\n    return new UndoPlugin(option);\n}\n","import { createContentModelCachePlugin } from './ContentModelCachePlugin';\nimport { createContentModelCopyPastePlugin } from './ContentModelCopyPastePlugin';\nimport { createContentModelFormatPlugin } from './ContentModelFormatPlugin';\nimport { createDOMEventPlugin } from './DOMEventPlugin';\nimport { createEntityPlugin } from './EntityPlugin';\nimport { createLifecyclePlugin } from './LifecyclePlugin';\nimport { createSelectionPlugin } from './SelectionPlugin';\nimport { createUndoPlugin } from './UndoPlugin';\nimport type {\n    StandaloneEditorCorePlugins,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create core plugins for standalone editor\n * @param options Options of editor\n */\nexport function createStandaloneEditorCorePlugins(\n    options: StandaloneEditorOptions,\n    contentDiv: HTMLDivElement\n): StandaloneEditorCorePlugins {\n    return {\n        cache: createContentModelCachePlugin(options),\n        format: createContentModelFormatPlugin(options),\n        copyPaste: createContentModelCopyPastePlugin(options),\n        domEvent: createDOMEventPlugin(options, contentDiv),\n        lifecycle: createLifecyclePlugin(options, contentDiv),\n        entity: createEntityPlugin(),\n        selection: createSelectionPlugin(options),\n        undo: createUndoPlugin(options),\n    };\n}\n","/**\n * @internal\n */\nexport function addRangeToSelection(doc: Document, range: Range) {\n    const selection = doc.defaultView?.getSelection();\n\n    if (selection) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n    }\n}\n","import { deleteSelection } from '../../publicApi/selection/deleteSelection';\nimport { isBlockElement, isNodeOfType, normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type { IEditor } from 'roosterjs-editor-types';\nimport type { ContentModelSegmentFormat, IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * When necessary, set default format as current pending format so it will be applied when Input event is fired\n * @param editor The Content Model Editor\n * @param defaultFormat The default segment format to apply\n */\nexport function applyDefaultFormat(\n    editor: IStandaloneEditor & IEditor,\n    defaultFormat: ContentModelSegmentFormat\n) {\n    const selection = editor.getDOMSelection();\n    const range = selection?.type == 'range' ? selection.range : null;\n    const posContainer = range?.startContainer ?? null;\n    const posOffset = range?.startOffset ?? null;\n\n    if (posContainer) {\n        let node: Node | null = posContainer;\n\n        while (node && editor.contains(node)) {\n            if (isNodeOfType(node, 'ELEMENT_NODE')) {\n                if (node.getAttribute?.('style')) {\n                    return;\n                } else if (isBlockElement(node)) {\n                    break;\n                }\n            }\n\n            node = node.parentNode;\n        }\n    } else {\n        return;\n    }\n\n    editor.formatContentModel((model, context) => {\n        const result = deleteSelection(model, [], context);\n\n        if (result.deleteResult == 'range') {\n            normalizeContentModel(model);\n\n            editor.takeSnapshot();\n\n            return true;\n        } else if (\n            result.deleteResult == 'notDeleted' &&\n            result.insertPoint &&\n            posContainer &&\n            posOffset !== null\n        ) {\n            const { paragraph, path, marker } = result.insertPoint;\n            const blocks = path[0].blocks;\n            const blockCount = blocks.length;\n            const blockIndex = blocks.indexOf(paragraph);\n\n            if (\n                paragraph.isImplicit &&\n                paragraph.segments.length == 1 &&\n                paragraph.segments[0] == marker &&\n                blockCount > 0 &&\n                blockIndex == blockCount - 1\n            ) {\n                // Focus is in the last paragraph which is implicit and there is not other segments.\n                // This can happen when focus is moved after all other content under current block group.\n                // We need to check if browser will merge focus into previous paragraph by checking if\n                // previous block is block. If previous block is paragraph, browser will most likely merge\n                // the input into previous paragraph, then nothing need to do here. Otherwise we need to\n                // apply pending format since this input event will start a new real paragraph.\n                const previousBlock = blocks[blockIndex - 1];\n\n                if (previousBlock?.blockType != 'Paragraph') {\n                    context.newPendingFormat = getNewPendingFormat(\n                        editor,\n                        defaultFormat,\n                        marker.format\n                    );\n                }\n            } else if (paragraph.segments.every(x => x.segmentType != 'Text')) {\n                context.newPendingFormat = getNewPendingFormat(\n                    editor,\n                    defaultFormat,\n                    marker.format\n                );\n            }\n        }\n\n        // We didn't do any change but just apply default format to pending format, so no need to write back\n        return false;\n    });\n}\n\nfunction getNewPendingFormat(\n    editor: IStandaloneEditor,\n    defaultFormat: ContentModelSegmentFormat,\n    markerFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    return {\n        ...defaultFormat,\n        ...editor.getPendingFormat(),\n        ...markerFormat,\n    };\n}\n","import { iterateSelections } from '../../publicApi/selection/iterateSelections';\nimport type { ContentModelSegmentFormat, IStandaloneEditor } from 'roosterjs-content-model-types';\nimport {\n    createText,\n    normalizeContentModel,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\n\nconst ANSI_SPACE = '\\u0020';\nconst NON_BREAK_SPACE = '\\u00A0';\n\n/**\n * @internal\n * Apply pending format to the text user just input\n * @param editor The editor to get format from\n * @param data The text user just input\n */\nexport function applyPendingFormat(\n    editor: IStandaloneEditor,\n    data: string,\n    format: ContentModelSegmentFormat\n) {\n    let isChanged = false;\n\n    editor.formatContentModel(\n        (model, context) => {\n            iterateSelections(model, (_, __, block, segments) => {\n                if (\n                    block?.blockType == 'Paragraph' &&\n                    segments?.length == 1 &&\n                    segments[0].segmentType == 'SelectionMarker'\n                ) {\n                    const marker = segments[0];\n                    const index = block.segments.indexOf(marker);\n                    const previousSegment = block.segments[index - 1];\n\n                    if (previousSegment?.segmentType == 'Text') {\n                        const text = previousSegment.text;\n                        const subStr = text.substr(-data.length, data.length);\n\n                        // For space, there can be &#32 (space) or &#160 (&nbsp;), we treat them as the same\n                        if (subStr == data || (data == ANSI_SPACE && subStr == NON_BREAK_SPACE)) {\n                            marker.format = { ...format };\n                            previousSegment.text = text.substring(0, text.length - data.length);\n\n                            const newText = createText(\n                                data == ANSI_SPACE ? NON_BREAK_SPACE : data,\n                                {\n                                    ...previousSegment.format,\n                                    ...format,\n                                }\n                            );\n\n                            block.segments.splice(index, 0, newText);\n                            setParagraphNotImplicit(block);\n                            isChanged = true;\n                        }\n                    }\n                }\n                return true;\n            });\n\n            if (isChanged) {\n                normalizeContentModel(model);\n                context.skipUndoSnapshot = true;\n            }\n\n            return isChanged;\n        },\n        {\n            apiName: 'applyPendingFormat',\n        }\n    );\n}\n","import type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Check if the given selections are the same\n */\nexport function areSameSelection(sel1: DOMSelection, sel2: DOMSelection): boolean {\n    if (sel1 == sel2) {\n        return true;\n    }\n\n    switch (sel1.type) {\n        case 'image':\n            return sel2.type == 'image' && sel2.image == sel1.image;\n\n        case 'table':\n            return (\n                sel2.type == 'table' &&\n                sel2.table == sel1.table &&\n                sel2.firstColumn == sel1.firstColumn &&\n                sel2.lastColumn == sel1.lastColumn &&\n                sel2.firstRow == sel1.firstRow &&\n                sel2.lastRow == sel1.lastRow\n            );\n\n        case 'range':\n        default:\n            return sel2.type == 'range' && areSameRanges(sel2.range, sel1.range);\n    }\n}\n\nfunction areSameRanges(r1?: Range, r2?: Range): boolean {\n    return !!(\n        r1 &&\n        r2 &&\n        r1.startContainer == r2.startContainer &&\n        r1.startOffset == r2.startOffset &&\n        r1.endContainer == r2.endContainer &&\n        r1.endOffset == r2.endOffset\n    );\n}\n","import { createSelectionMarker, createText, isNodeOfType } from 'roosterjs-content-model-dom';\nimport { setSelection } from '../../publicApi/selection/setSelection';\nimport type {\n    ContentModelDocument,\n    ContentModelDomIndexer,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSelectionMarker,\n    ContentModelTable,\n    ContentModelTableRow,\n    ContentModelText,\n    DOMSelection,\n    Selectable,\n} from 'roosterjs-content-model-types';\n\ninterface SegmentItem {\n    paragraph: ContentModelParagraph;\n    segments: ContentModelSegment[];\n}\n\ninterface TableItem {\n    tableRows: ContentModelTableRow[];\n}\n\ninterface IndexedSegmentNode extends Node {\n    __roosterjsContentModel: SegmentItem;\n}\n\ninterface IndexedTableElement extends HTMLTableElement {\n    __roosterjsContentModel: TableItem;\n}\n\nfunction isIndexedSegment(node: Node): node is IndexedSegmentNode {\n    const { paragraph, segments } = (node as IndexedSegmentNode).__roosterjsContentModel ?? {};\n\n    return (\n        paragraph &&\n        paragraph.blockType == 'Paragraph' &&\n        Array.isArray(paragraph.segments) &&\n        Array.isArray(segments)\n    );\n}\n\nfunction onSegment(\n    segmentNode: Node,\n    paragraph: ContentModelParagraph,\n    segment: ContentModelSegment[]\n) {\n    const indexedText = segmentNode as IndexedSegmentNode;\n    indexedText.__roosterjsContentModel = {\n        paragraph,\n        segments: segment,\n    };\n}\n\nfunction onParagraph(paragraphElement: HTMLElement) {\n    let previousText: Text | null = null;\n\n    for (let child = paragraphElement.firstChild; child; child = child.nextSibling) {\n        if (isNodeOfType(child, 'TEXT_NODE')) {\n            if (!previousText) {\n                previousText = child;\n            } else {\n                const item = isIndexedSegment(previousText)\n                    ? previousText.__roosterjsContentModel\n                    : undefined;\n\n                if (item && isIndexedSegment(child)) {\n                    item.segments = item.segments.concat(child.__roosterjsContentModel.segments);\n                    child.__roosterjsContentModel.segments = [];\n                }\n            }\n        } else if (isNodeOfType(child, 'ELEMENT_NODE')) {\n            previousText = null;\n\n            onParagraph(child);\n        } else {\n            previousText = null;\n        }\n    }\n}\n\nfunction onTable(tableElement: HTMLTableElement, table: ContentModelTable) {\n    const indexedTable = tableElement as IndexedTableElement;\n    indexedTable.__roosterjsContentModel = { tableRows: table.rows };\n}\n\nfunction reconcileSelection(\n    model: ContentModelDocument,\n    newSelection: DOMSelection,\n    oldSelection?: DOMSelection\n): boolean {\n    if (oldSelection) {\n        if (\n            oldSelection.type == 'range' &&\n            oldSelection.range.collapsed &&\n            isNodeOfType(oldSelection.range.startContainer, 'TEXT_NODE')\n        ) {\n            if (isIndexedSegment(oldSelection.range.startContainer)) {\n                reconcileTextSelection(oldSelection.range.startContainer);\n            }\n        } else {\n            setSelection(model);\n        }\n    }\n\n    switch (newSelection.type) {\n        case 'image':\n        case 'table':\n            // For image and table selection, we just clear the cached model since during selecting the element id might be changed\n            return false;\n\n        case 'range':\n            const newRange = newSelection.range;\n            if (newRange) {\n                const {\n                    startContainer,\n                    startOffset,\n                    endContainer,\n                    endOffset,\n                    collapsed,\n                } = newRange;\n\n                if (collapsed) {\n                    return !!reconcileNodeSelection(startContainer, startOffset);\n                } else if (\n                    startContainer == endContainer &&\n                    isNodeOfType(startContainer, 'TEXT_NODE')\n                ) {\n                    return (\n                        isIndexedSegment(startContainer) &&\n                        !!reconcileTextSelection(startContainer, startOffset, endOffset)\n                    );\n                } else {\n                    const marker1 = reconcileNodeSelection(startContainer, startOffset);\n                    const marker2 = reconcileNodeSelection(endContainer, endOffset);\n\n                    if (marker1 && marker2) {\n                        setSelection(model, marker1, marker2);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n\n            break;\n    }\n\n    return false;\n}\n\nfunction reconcileNodeSelection(node: Node, offset: number): Selectable | undefined {\n    if (isNodeOfType(node, 'TEXT_NODE')) {\n        return isIndexedSegment(node) ? reconcileTextSelection(node, offset) : undefined;\n    } else if (offset >= node.childNodes.length) {\n        return insertMarker(node.lastChild, true /*isAfter*/);\n    } else {\n        return insertMarker(node.childNodes[offset], false /*isAfter*/);\n    }\n}\n\nfunction insertMarker(node: Node | null, isAfter: boolean): Selectable | undefined {\n    let marker: ContentModelSelectionMarker | undefined;\n\n    if (node && isIndexedSegment(node)) {\n        const { paragraph, segments } = node.__roosterjsContentModel;\n        const index = paragraph.segments.indexOf(segments[0]);\n\n        if (index >= 0) {\n            const formatSegment =\n                (!isAfter && paragraph.segments[index - 1]) || paragraph.segments[index];\n            marker = createSelectionMarker(formatSegment.format);\n\n            paragraph.segments.splice(isAfter ? index + 1 : index, 0, marker);\n        }\n    }\n\n    return marker;\n}\n\nfunction reconcileTextSelection(\n    textNode: IndexedSegmentNode,\n    startOffset?: number,\n    endOffset?: number\n) {\n    const { paragraph, segments } = textNode.__roosterjsContentModel;\n    const first = segments[0];\n    const last = segments[segments.length - 1];\n    let selectable: Selectable | undefined;\n\n    if (first?.segmentType == 'Text' && last?.segmentType == 'Text') {\n        const newSegments: ContentModelSegment[] = [];\n        const txt = textNode.nodeValue || '';\n        const textSegments: ContentModelText[] = [];\n\n        if (startOffset === undefined) {\n            first.text = txt;\n            newSegments.push(first);\n            textSegments.push(first);\n        } else {\n            if (startOffset > 0) {\n                first.text = txt.substring(0, startOffset);\n                newSegments.push(first);\n                textSegments.push(first);\n            }\n\n            if (endOffset === undefined) {\n                const marker = createSelectionMarker(first.format);\n                newSegments.push(marker);\n\n                selectable = marker;\n                endOffset = startOffset;\n            } else if (endOffset > startOffset) {\n                const middle = createText(\n                    txt.substring(startOffset, endOffset),\n                    first.format,\n                    first.link,\n                    first.code\n                );\n\n                middle.isSelected = true;\n                newSegments.push(middle);\n                textSegments.push(middle);\n                selectable = middle;\n            }\n\n            if (endOffset < txt.length) {\n                const newLast = createText(\n                    txt.substring(endOffset),\n                    first.format,\n                    first.link,\n                    first.code\n                );\n                newSegments.push(newLast);\n                textSegments.push(newLast);\n            }\n        }\n\n        let firstIndex = paragraph.segments.indexOf(first);\n        let lastIndex = paragraph.segments.indexOf(last);\n\n        if (firstIndex >= 0 && lastIndex >= 0) {\n            while (\n                firstIndex > 0 &&\n                paragraph.segments[firstIndex - 1].segmentType == 'SelectionMarker'\n            ) {\n                firstIndex--;\n            }\n\n            while (\n                lastIndex < paragraph.segments.length - 1 &&\n                paragraph.segments[lastIndex + 1].segmentType == 'SelectionMarker'\n            ) {\n                lastIndex++;\n            }\n\n            paragraph.segments.splice(firstIndex, lastIndex - firstIndex + 1, ...newSegments);\n        }\n\n        onSegment(textNode, paragraph, textSegments);\n\n        delete paragraph.cachedElement;\n    }\n\n    return selectable;\n}\n\n/**\n * @internal\n * Implementation of ContentModelDomIndexer\n */\nexport const contentModelDomIndexer: ContentModelDomIndexer = {\n    onSegment,\n    onParagraph,\n    onTable,\n    reconcileSelection,\n};\n","import hasSelectionInBlock from '../../publicApi/selection/hasSelectionInBlock';\nimport hasSelectionInBlockGroup from '../../publicApi/selection/hasSelectionInBlockGroup';\nimport { getClosestAncestorBlockGroupIndex } from '../../publicApi/model/getClosestAncestorBlockGroupIndex';\nimport type {\n    ContentModelBlock,\n    DeleteSelectionContext,\n    DeleteSelectionStep,\n} from 'roosterjs-content-model-types';\n\nfunction isEmptyBlock(block: ContentModelBlock | undefined): boolean {\n    if (block && block.blockType == 'Paragraph') {\n        return block.segments.every(\n            segment => segment.segmentType !== 'SelectionMarker' && segment.segmentType == 'Br'\n        );\n    }\n\n    if (block && block.blockType == 'BlockGroup') {\n        return block.blocks.every(isEmptyBlock);\n    }\n\n    return !!block;\n}\n\n/**\n * @internal\n * If the first item o the list is selected in a expanded selection, we need to remove the list item levels\n * @param context A context object provided by formatContentModel API\n */\nexport const deleteEmptyList: DeleteSelectionStep = (context: DeleteSelectionContext) => {\n    const { insertPoint, deleteResult } = context;\n    if (deleteResult == 'range' && insertPoint?.path) {\n        const index = getClosestAncestorBlockGroupIndex(\n            insertPoint.path,\n            ['ListItem'],\n            ['TableCell']\n        );\n        const item = insertPoint.path[index];\n        if (index >= 0 && item && item.blockGroupType == 'ListItem') {\n            const listItemIndex = insertPoint.path[index + 1].blocks.indexOf(item);\n            const previousBlock =\n                listItemIndex > -1\n                    ? insertPoint.path[index + 1].blocks[listItemIndex - 1]\n                    : undefined;\n            const nextBlock =\n                listItemIndex > -1\n                    ? insertPoint.path[index + 1].blocks[listItemIndex + 1]\n                    : undefined;\n            if (\n                hasSelectionInBlockGroup(item) &&\n                (!previousBlock || hasSelectionInBlock(previousBlock)) &&\n                nextBlock &&\n                isEmptyBlock(nextBlock)\n            ) {\n                item.levels = [];\n            }\n        }\n    }\n};\n","import type { ChangedEntity, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function findAllEntities(group: ContentModelBlockGroup, entities: ChangedEntity[]) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                findAllEntities(block, entities);\n                break;\n\n            case 'Entity':\n                entities.push({\n                    entity: block,\n                    operation: 'newEntity',\n                });\n                break;\n\n            case 'Paragraph':\n                block.segments.forEach(segment => {\n                    switch (segment.segmentType) {\n                        case 'Entity':\n                            entities.push({\n                                entity: segment,\n                                operation: 'newEntity',\n                            });\n                            break;\n\n                        case 'General':\n                            findAllEntities(segment, entities);\n                            break;\n                    }\n                });\n                break;\n\n            case 'Table':\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => findAllEntities(cell, entities))\n                );\n                break;\n        }\n    });\n}\n","import { getObjectKeys } from 'roosterjs-content-model-dom';\nimport type {\n    ColorKeyAndValue,\n    DarkColorHandler,\n    ModeIndependentColor,\n} from 'roosterjs-editor-types';\n\nconst VARIABLE_REGEX = /^\\s*var\\(\\s*(\\-\\-[a-zA-Z0-9\\-_]+)\\s*(?:,\\s*(.*))?\\)\\s*$/;\nconst VARIABLE_PREFIX = 'var(';\nconst COLOR_VAR_PREFIX = 'darkColor';\nconst enum ColorAttributeEnum {\n    CssColor = 0,\n    HtmlColor = 1,\n}\nconst ColorAttributeName: { [key in ColorAttributeEnum]: string }[] = [\n    {\n        [ColorAttributeEnum.CssColor]: 'color',\n        [ColorAttributeEnum.HtmlColor]: 'color',\n    },\n    {\n        [ColorAttributeEnum.CssColor]: 'background-color',\n        [ColorAttributeEnum.HtmlColor]: 'bgcolor',\n    },\n];\nconst HEX3_REGEX = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/;\nconst HEX6_REGEX = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/;\nconst RGB_REGEX = /^rgb\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*\\)$/;\nconst RGBA_REGEX = /^rgba\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*\\)$/;\n\n/**\n * @internal\n */\nexport class DarkColorHandlerImpl implements DarkColorHandler {\n    private knownColors: Record<string, Readonly<ModeIndependentColor>> = {};\n\n    constructor(private contentDiv: HTMLElement, private getDarkColor: (color: string) => string) {}\n\n    /**\n     * Get a copy of known colors\n     * @returns\n     */\n    getKnownColorsCopy() {\n        return Object.values(this.knownColors);\n    }\n\n    /**\n     * Given a light mode color value and an optional dark mode color value, register this color\n     * so that editor can handle it, then return the CSS color value for current color mode.\n     * @param lightModeColor Light mode color value\n     * @param isDarkMode Whether current color mode is dark mode\n     * @param darkModeColor Optional dark mode color value. If not passed, we will calculate one.\n     */\n    registerColor(lightModeColor: string, isDarkMode: boolean, darkModeColor?: string): string {\n        const parsedColor = this.parseColorValue(lightModeColor);\n        let colorKey: string | undefined;\n\n        if (parsedColor) {\n            lightModeColor = parsedColor.lightModeColor;\n            darkModeColor = parsedColor.darkModeColor || darkModeColor;\n            colorKey = parsedColor.key;\n        }\n\n        if (isDarkMode && lightModeColor) {\n            colorKey =\n                colorKey || `--${COLOR_VAR_PREFIX}_${lightModeColor.replace(/[^\\d\\w]/g, '_')}`;\n\n            if (!this.knownColors[colorKey]) {\n                darkModeColor = darkModeColor || this.getDarkColor(lightModeColor);\n\n                this.knownColors[colorKey] = { lightModeColor, darkModeColor };\n                this.contentDiv.style.setProperty(colorKey, darkModeColor);\n            }\n\n            return `var(${colorKey}, ${lightModeColor})`;\n        } else {\n            return lightModeColor;\n        }\n    }\n\n    /**\n     * Reset known color record, clean up registered color variables.\n     */\n    reset(): void {\n        getObjectKeys(this.knownColors).forEach(key => this.contentDiv.style.removeProperty(key));\n        this.knownColors = {};\n    }\n\n    /**\n     * Parse an existing color value, if it is in variable-based color format, extract color key,\n     * light color and query related dark color if any\n     * @param color The color string to parse\n     * @param isInDarkMode Whether current content is in dark mode. When set to true, if the color value is not in dark var format,\n     * we will treat is as a dark mode color and try to find a matched dark mode color.\n     */\n    parseColorValue(color: string | undefined | null, isInDarkMode?: boolean): ColorKeyAndValue {\n        let key: string | undefined;\n        let lightModeColor = '';\n        let darkModeColor: string | undefined;\n\n        if (color) {\n            const match = color.startsWith(VARIABLE_PREFIX) ? VARIABLE_REGEX.exec(color) : null;\n\n            if (match) {\n                if (match[2]) {\n                    key = match[1];\n                    lightModeColor = match[2];\n                    darkModeColor = this.knownColors[key]?.darkModeColor;\n                } else {\n                    lightModeColor = '';\n                }\n            } else if (isInDarkMode) {\n                // If editor is in dark mode but the color is not in dark color format, it is possible the color was inserted from external code\n                // without any light color info. So we first try to see if there is a known dark color can match this color, and use its related\n                // light color as light mode color. Otherwise we need to drop this color to avoid show \"white on white\" content.\n                lightModeColor = this.findLightColorFromDarkColor(color) || '';\n\n                if (lightModeColor) {\n                    darkModeColor = color;\n                }\n            } else {\n                lightModeColor = color;\n            }\n        }\n\n        return { key, lightModeColor, darkModeColor };\n    }\n\n    /**\n     * Find related light mode color from dark mode color.\n     * @param darkColor The existing dark color\n     */\n    findLightColorFromDarkColor(darkColor: string): string | null {\n        const rgbSearch = this.parseColor(darkColor);\n\n        if (rgbSearch) {\n            const key = getObjectKeys(this.knownColors).find(key => {\n                const rgbCurrent = this.parseColor(this.knownColors[key].darkModeColor);\n\n                return (\n                    rgbCurrent &&\n                    rgbCurrent[0] == rgbSearch[0] &&\n                    rgbCurrent[1] == rgbSearch[1] &&\n                    rgbCurrent[2] == rgbSearch[2]\n                );\n            });\n\n            if (key) {\n                return this.knownColors[key].lightModeColor;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Transform element color, from dark to light or from light to dark\n     * @param element The element to transform color\n     * @param fromDarkMode Whether this is transforming color from dark mode\n     * @param toDarkMode Whether this is transforming color to dark mode\n     */\n    transformElementColor(element: HTMLElement, fromDarkMode: boolean, toDarkMode: boolean): void {\n        ColorAttributeName.forEach((names, i) => {\n            const color = this.parseColorValue(\n                element.style.getPropertyValue(names[ColorAttributeEnum.CssColor]) ||\n                    element.getAttribute(names[ColorAttributeEnum.HtmlColor]),\n                !!fromDarkMode\n            ).lightModeColor;\n            const transformedColor =\n                color && color != 'inherit' ? this.registerColor(color, !!toDarkMode) : null;\n\n            element.style.setProperty(names[ColorAttributeEnum.CssColor], transformedColor);\n            element.removeAttribute(names[ColorAttributeEnum.HtmlColor]);\n        });\n    }\n\n    /**\n     * Parse color string to r/g/b value.\n     * If the given color is not in a recognized format, return null\n     */\n    private parseColor(color: string): [number, number, number] | null {\n        color = (color || '').trim();\n\n        let match: RegExpMatchArray | null;\n        if ((match = color.match(HEX3_REGEX))) {\n            return [\n                parseInt(match[1] + match[1], 16),\n                parseInt(match[2] + match[2], 16),\n                parseInt(match[3] + match[3], 16),\n            ];\n        } else if ((match = color.match(HEX6_REGEX))) {\n            return [parseInt(match[1], 16), parseInt(match[2], 16), parseInt(match[3], 16)];\n        } else if ((match = color.match(RGB_REGEX) || color.match(RGBA_REGEX))) {\n            return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n        } else {\n            // CSS color names such as red, green is not included for now.\n            // If need, we can add those colors from https://www.w3.org/wiki/CSS/Properties/color/keywords\n            return null;\n        }\n    }\n}\n","import type { Snapshot, Snapshots, SnapshotsManager } from 'roosterjs-content-model-types';\n\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\n// to keep size under limit. This is kept at 10MB\nconst MAX_SIZE_LIMIT = 1e7;\n\nclass SnapshotsManagerImpl implements SnapshotsManager {\n    private snapshots: Snapshots;\n    private hasNewContentValue: boolean = false;\n\n    constructor(snapshots?: Snapshots) {\n        this.snapshots = snapshots ?? {\n            snapshots: [],\n            totalSize: 0,\n            currentIndex: -1,\n            autoCompleteIndex: -1,\n            maxSize: MAX_SIZE_LIMIT,\n        };\n    }\n\n    get hasNewContent(): boolean {\n        return this.hasNewContentValue;\n    }\n\n    set hasNewContent(value: boolean) {\n        this.hasNewContentValue = value;\n    }\n\n    canMove(step: number): boolean {\n        const newIndex = this.snapshots.currentIndex + step;\n        return newIndex >= 0 && newIndex < this.snapshots.snapshots.length;\n    }\n\n    move(step: number): Snapshot | null {\n        if (this.canMove(step)) {\n            this.snapshots.currentIndex += step;\n            this.snapshots.autoCompleteIndex = -1;\n            return this.snapshots.snapshots[this.snapshots.currentIndex];\n        } else {\n            return null;\n        }\n    }\n\n    addSnapshot(snapshot: Snapshot, isAutoCompleteSnapshot: boolean): void {\n        const currentSnapshot = this.snapshots.snapshots[this.snapshots.currentIndex];\n        const isSameSnapshot =\n            currentSnapshot &&\n            currentSnapshot.html == snapshot.html &&\n            !currentSnapshot.entityStates &&\n            !snapshot.entityStates;\n\n        if (this.snapshots.currentIndex < 0 || !currentSnapshot || !isSameSnapshot) {\n            this.clearRedo();\n            this.snapshots.snapshots.push(snapshot);\n            this.snapshots.currentIndex++;\n            this.snapshots.totalSize += this.getSnapshotLength(snapshot);\n\n            let removeCount = 0;\n            while (\n                removeCount < this.snapshots.snapshots.length &&\n                this.snapshots.totalSize > this.snapshots.maxSize\n            ) {\n                this.snapshots.totalSize -= this.getSnapshotLength(\n                    this.snapshots.snapshots[removeCount]\n                );\n                removeCount++;\n            }\n\n            if (removeCount > 0) {\n                this.snapshots.snapshots.splice(0, removeCount);\n                this.snapshots.currentIndex -= removeCount;\n\n                if (this.snapshots.autoCompleteIndex >= 0) {\n                    this.snapshots.autoCompleteIndex -= removeCount;\n                }\n            }\n\n            if (isAutoCompleteSnapshot) {\n                this.snapshots.autoCompleteIndex = this.snapshots.currentIndex;\n            }\n        } else if (isSameSnapshot) {\n            // replace the currentSnapshot's metadata so the selection is updated\n            this.snapshots.snapshots.splice(this.snapshots.currentIndex, 1, snapshot);\n        }\n    }\n\n    clearRedo(): void {\n        if (this.canMove(1)) {\n            let removedSize = 0;\n            for (\n                let i = this.snapshots.currentIndex + 1;\n                i < this.snapshots.snapshots.length;\n                i++\n            ) {\n                removedSize += this.getSnapshotLength(this.snapshots.snapshots[i]);\n            }\n\n            this.snapshots.snapshots.splice(this.snapshots.currentIndex + 1);\n            this.snapshots.totalSize -= removedSize;\n            this.snapshots.autoCompleteIndex = -1;\n        }\n    }\n\n    canUndoAutoComplete(): boolean {\n        return (\n            this.snapshots.autoCompleteIndex >= 0 &&\n            this.snapshots.currentIndex - this.snapshots.autoCompleteIndex == 1\n        );\n    }\n\n    private getSnapshotLength(snapshot: Snapshot) {\n        return snapshot.html?.length ?? 0;\n    }\n}\n\n/**\n * Create a new instance of Undo Snapshots Manager\n * @param snapshots @optional Snapshots object for storing undo snapshots. If not passed, default implementation will be used\n */\nexport function createSnapshotsManager(snapshots?: Snapshots): SnapshotsManager {\n    return new SnapshotsManagerImpl(snapshots);\n}\n","import { createStandaloneEditorCorePlugins } from '../corePlugin/createStandaloneEditorCorePlugins';\nimport { DarkColorHandlerImpl } from './DarkColorHandlerImpl';\nimport { standaloneCoreApiMap } from './standaloneCoreApiMap';\nimport {\n    createDomToModelSettings,\n    createModelToDomSettings,\n} from './createStandaloneEditorDefaultSettings';\nimport type { EditorPlugin } from 'roosterjs-editor-types';\nimport type {\n    EditorEnvironment,\n    StandaloneEditorCore,\n    StandaloneEditorCorePluginState,\n    StandaloneEditorCorePlugins,\n    StandaloneEditorOptions,\n    UnportedCoreApiMap,\n    UnportedCorePluginState,\n} from 'roosterjs-content-model-types';\n\n/**\n * A temporary function to create Standalone Editor core\n * @param contentDiv Editor content DIV\n * @param options Editor options\n */\nexport function createStandaloneEditorCore(\n    contentDiv: HTMLDivElement,\n    options: StandaloneEditorOptions,\n    unportedCoreApiMap: UnportedCoreApiMap,\n    unportedCorePluginState: UnportedCorePluginState,\n    tempPlugins: EditorPlugin[]\n): StandaloneEditorCore {\n    const corePlugins = createStandaloneEditorCorePlugins(options, contentDiv);\n\n    return {\n        contentDiv,\n        api: { ...standaloneCoreApiMap, ...unportedCoreApiMap, ...options.coreApiOverride },\n        originalApi: { ...standaloneCoreApiMap, ...unportedCoreApiMap },\n        plugins: [\n            corePlugins.cache,\n            corePlugins.format,\n            corePlugins.copyPaste,\n            corePlugins.domEvent,\n            corePlugins.selection,\n            corePlugins.entity,\n            ...tempPlugins,\n            corePlugins.undo,\n            corePlugins.lifecycle,\n        ],\n        environment: createEditorEnvironment(),\n        darkColorHandler: new DarkColorHandlerImpl(\n            contentDiv,\n            options.getDarkColor ?? getDarkColorFallback\n        ),\n        trustedHTMLHandler: options.trustedHTMLHandler || defaultTrustHtmlHandler,\n        domToModelSettings: createDomToModelSettings(options),\n        modelToDomSettings: createModelToDomSettings(options),\n        ...getPluginState(corePlugins),\n        ...unportedCorePluginState,\n    };\n}\n\nfunction createEditorEnvironment(): EditorEnvironment {\n    // It is ok to use global window here since the environment should always be the same for all windows in one session\n    const userAgent = window.navigator.userAgent;\n\n    return {\n        isMac: window.navigator.appVersion.indexOf('Mac') != -1,\n        isAndroid: /android/i.test(userAgent),\n        isSafari:\n            userAgent.indexOf('Safari') >= 0 &&\n            userAgent.indexOf('Chrome') < 0 &&\n            userAgent.indexOf('Android') < 0,\n    };\n}\n\n/**\n * @internal export for test only\n */\nexport function defaultTrustHtmlHandler(html: string) {\n    return html;\n}\n\nfunction getPluginState(corePlugins: StandaloneEditorCorePlugins): StandaloneEditorCorePluginState {\n    return {\n        domEvent: corePlugins.domEvent.getState(),\n        copyPaste: corePlugins.copyPaste.getState(),\n        cache: corePlugins.cache.getState(),\n        format: corePlugins.format.getState(),\n        lifecycle: corePlugins.lifecycle.getState(),\n        entity: corePlugins.entity.getState(),\n        selection: corePlugins.selection.getState(),\n        undo: corePlugins.undo.getState(),\n    };\n}\n\n// A fallback function, always return original color\nfunction getDarkColorFallback(color: string) {\n    return color;\n}\n","import { createDomToModelConfig, createModelToDomConfig } from 'roosterjs-content-model-dom';\nimport { listItemMetadataApplier, listLevelMetadataApplier } from '../metadata/updateListMetadata';\nimport { tablePreProcessor } from '../override/tablePreProcessor';\nimport type {\n    ContentModelSettings,\n    DomToModelOption,\n    DomToModelSettings,\n    ModelToDomOption,\n    ModelToDomSettings,\n    StandaloneEditorOptions,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create default DOM to Content Model conversion settings for a standalone editor\n * @param options The editor options\n */\nexport function createDomToModelSettings(\n    options: StandaloneEditorOptions\n): ContentModelSettings<DomToModelOption, DomToModelSettings> {\n    const builtIn: DomToModelOption = {\n        processorOverride: {\n            table: tablePreProcessor,\n        },\n    };\n    const customized: DomToModelOption = options.defaultDomToModelOptions ?? {};\n\n    return {\n        builtIn,\n        customized,\n        calculated: createDomToModelConfig([builtIn, customized]),\n    };\n}\n\n/**\n * @internal\n * Create default Content Model to DOM conversion settings for a standalone editor\n * @param options The editor options\n */\nexport function createModelToDomSettings(\n    options: StandaloneEditorOptions\n): ContentModelSettings<ModelToDomOption, ModelToDomSettings> {\n    const builtIn: ModelToDomOption = {\n        metadataAppliers: {\n            listItem: listItemMetadataApplier,\n            listLevel: listLevelMetadataApplier,\n        },\n    };\n    const customized: ModelToDomOption = options.defaultModelToDomOptions ?? {};\n\n    return {\n        builtIn,\n        customized,\n        calculated: createModelToDomConfig([builtIn, customized]),\n    };\n}\n","import { addUndoSnapshot } from '../coreApi/addUndoSnapshot';\nimport { attachDomEvent } from '../coreApi/attachDomEvent';\nimport { createContentModel } from '../coreApi/createContentModel';\nimport { createEditorContext } from '../coreApi/createEditorContext';\nimport { focus } from '../coreApi/focus';\nimport { formatContentModel } from '../coreApi/formatContentModel';\nimport { getDOMSelection } from '../coreApi/getDOMSelection';\nimport { getVisibleViewport } from '../coreApi/getVisibleViewport';\nimport { hasFocus } from '../coreApi/hasFocus';\nimport { paste } from '../coreApi/paste';\nimport { restoreUndoSnapshot } from '../coreApi/restoreUndoSnapshot';\nimport { setContentModel } from '../coreApi/setContentModel';\nimport { setDOMSelection } from '../coreApi/setDOMSelection';\nimport { switchShadowEdit } from '../coreApi/switchShadowEdit';\nimport { triggerEvent } from '../coreApi/triggerEvent';\nimport type { PortedCoreApiMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Core API map for Standalone Content Model Editor\n */\nexport const standaloneCoreApiMap: PortedCoreApiMap = {\n    createContentModel: createContentModel,\n    createEditorContext: createEditorContext,\n    formatContentModel: formatContentModel,\n    getDOMSelection: getDOMSelection,\n    setContentModel: setContentModel,\n    setDOMSelection: setDOMSelection,\n    switchShadowEdit: switchShadowEdit,\n    getVisibleViewport: getVisibleViewport,\n    focus: focus,\n    hasFocus: hasFocus,\n    addUndoSnapshot: addUndoSnapshot,\n    restoreUndoSnapshot: restoreUndoSnapshot,\n    attachDomEvent: attachDomEvent,\n    triggerEvent: triggerEvent,\n    paste: paste,\n};\n","export { CachedElementHandler, CloneModelOptions, cloneModel } from './publicApi/model/cloneModel';\nexport { mergeModel, MergeModelOption } from './publicApi/model/mergeModel';\nexport { isBlockGroupOfType } from './publicApi/model/isBlockGroupOfType';\nexport {\n    getClosestAncestorBlockGroupIndex,\n    TypeOfBlockGroup,\n} from './publicApi/model/getClosestAncestorBlockGroupIndex';\nexport { isBold } from './publicApi/model/isBold';\nexport { createModelFromHtml } from './publicApi/model/createModelFromHtml';\n\nexport {\n    iterateSelections,\n    IterateSelectionsCallback,\n    IterateSelectionsOption,\n} from './publicApi/selection/iterateSelections';\nexport { getSelectionRootNode } from './publicApi/selection/getSelectionRootNode';\nexport { deleteSelection } from './publicApi/selection/deleteSelection';\nexport { deleteSegment } from './publicApi/selection/deleteSegment';\nexport { deleteBlock } from './publicApi/selection/deleteBlock';\nexport { default as hasSelectionInBlock } from './publicApi/selection/hasSelectionInBlock';\nexport { default as hasSelectionInSegment } from './publicApi/selection/hasSelectionInSegment';\nexport { default as hasSelectionInBlockGroup } from './publicApi/selection/hasSelectionInBlockGroup';\nexport {\n    OperationalBlocks,\n    getFirstSelectedListItem,\n    getFirstSelectedTable,\n    getOperationalBlocks,\n    getSelectedParagraphs,\n    getSelectedSegments,\n    getSelectedSegmentsAndParagraphs,\n} from './publicApi/selection/collectSelections';\nexport { setSelection } from './publicApi/selection/setSelection';\n\nexport { applyTableFormat } from './publicApi/table/applyTableFormat';\nexport { normalizeTable } from './publicApi/table/normalizeTable';\nexport { setTableCellBackgroundColor } from './publicApi/table/setTableCellBackgroundColor';\nexport { getSelectedCells } from './publicApi/table/getSelectedCells';\n\nexport { isCharacterValue, isModifierKey } from './publicApi/domUtils/eventUtils';\nexport { combineBorderValue, extractBorderValues } from './publicApi/domUtils/borderValues';\nexport { isPunctuation, isSpace, normalizeText } from './publicApi/domUtils/stringUtil';\nexport { parseTableCells, createTableRanges } from './publicApi/domUtils/tableCellUtils';\nexport { getSegmentTextFormat } from './publicApi/domUtils/getSegmentTextFormat';\nexport { readFile } from './publicApi/domUtils/readFile';\n\nexport { undo } from './publicApi/undo/undo';\nexport { redo } from './publicApi/undo/redo';\nexport { transformColor } from './publicApi/color/transformColor';\n\nexport { updateImageMetadata } from './metadata/updateImageMetadata';\nexport { updateTableCellMetadata } from './metadata/updateTableCellMetadata';\nexport { updateTableMetadata } from './metadata/updateTableMetadata';\nexport { updateListMetadata, getListStyleTypeFromString } from './metadata/updateListMetadata';\n\nexport { ChangeSource } from './constants/ChangeSource';\nexport { BulletListType } from './constants/BulletListType';\nexport { NumberingListType } from './constants/NumberingListType';\nexport { TableBorderFormat } from './constants/TableBorderFormat';\n\nexport { createStandaloneEditorCore } from './editor/createStandaloneEditorCore';\nexport { createSnapshotsManager } from './editor/SnapshotsManagerImpl';\n","import type {\n    ArrayDefinition,\n    BooleanDefinition,\n    Definition,\n    NumberDefinition,\n    ObjectDefinition,\n    ObjectPropertyDefinition,\n    StringDefinition,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Create a number definition\n * @param isOptional Whether this property is optional\n * @param value Optional value of the number\n * @param minValue Optional minimum value\n * @param maxValue Optional maximum value\n * @param allowNull Allow the property to be null\n * @returns The number definition object\n */\nexport function createNumberDefinition(\n    isOptional?: boolean,\n    value?: number,\n    minValue?: number,\n    maxValue?: number,\n    allowNull?: boolean\n): NumberDefinition {\n    return {\n        type: 'number',\n        isOptional,\n        value,\n        maxValue,\n        minValue,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create a boolean definition\n * @param isOptional  Whether this property is optional\n * @param value Optional expected boolean value\n * @param allowNull Allow the property to be null\n * @returns  The boolean definition object\n */\nexport function createBooleanDefinition(\n    isOptional?: boolean,\n    value?: boolean,\n    allowNull?: boolean\n): BooleanDefinition {\n    return {\n        type: 'boolean',\n        isOptional,\n        value,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create a string definition\n * @param isOptional  Whether this property is optional\n * @param value Optional expected string value\n * @param allowNull Allow the property to be null\n * @returns  The string definition object\n */\nexport function createStringDefinition(\n    isOptional?: boolean,\n    value?: string,\n    allowNull?: boolean\n): StringDefinition {\n    return {\n        type: 'string',\n        isOptional,\n        value,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create an array definition\n * @param itemDef Definition of each item of the related array\n * @param isOptional  Whether this property is optional\n * @param allowNull Allow the property to be null\n * @returns  The array definition object\n */\nexport function createArrayDefinition<T>(\n    itemDef: Definition<T>,\n    isOptional?: boolean,\n    minLength?: number,\n    maxLength?: number,\n    allowNull?: boolean\n): ArrayDefinition<T[]> {\n    return {\n        type: 'array',\n        isOptional,\n        itemDef,\n        minLength,\n        maxLength,\n        allowNull,\n    };\n}\n\n/**\n * @internal\n * Create an object definition\n * @param propertyDef Definition of each property of the related object\n * @param isOptional  Whether this property is optional\n * @param allowNull Allow the property to be null\n * @returns  The object definition object\n */\nexport function createObjectDefinition<T extends Object>(\n    propertyDef: ObjectPropertyDefinition<T>,\n    isOptional?: boolean,\n    allowNull?: boolean\n): ObjectDefinition<T> {\n    return {\n        type: 'object',\n        isOptional,\n        propertyDef,\n        allowNull,\n    };\n}\n","import { updateMetadata } from 'roosterjs-content-model-dom';\nimport {\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from './definitionCreators';\nimport type { ContentModelImage, ImageMetadataFormat } from 'roosterjs-content-model-types';\n\nconst NumberDefinition = createNumberDefinition();\n\nconst ImageMetadataFormatDefinition = createObjectDefinition<Required<ImageMetadataFormat>>({\n    widthPx: NumberDefinition,\n    heightPx: NumberDefinition,\n    leftPercent: NumberDefinition,\n    rightPercent: NumberDefinition,\n    topPercent: NumberDefinition,\n    bottomPercent: NumberDefinition,\n    angleRad: NumberDefinition,\n    src: createStringDefinition(),\n    naturalHeight: NumberDefinition,\n    naturalWidth: NumberDefinition,\n});\n\n/**\n * Update image metadata with a callback\n * @param image The image Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateImageMetadata(\n    image: ContentModelImage,\n    callback?: (format: ImageMetadataFormat | null) => ImageMetadataFormat | null\n): ImageMetadataFormat | null {\n    return updateMetadata(image, callback, ImageMetadataFormatDefinition);\n}\n","import { BulletListType } from '../constants/BulletListType';\nimport { createNumberDefinition, createObjectDefinition } from './definitionCreators';\nimport { getObjectKeys, updateMetadata } from 'roosterjs-content-model-dom';\nimport { NumberingListType } from '../constants/NumberingListType';\nimport type {\n    ContentModelListItemFormat,\n    ContentModelListItemLevelFormat,\n    ContentModelWithDataset,\n    ListMetadataFormat,\n    MetadataApplier,\n} from 'roosterjs-content-model-types';\n\nconst DefaultOrderedListStyles = ['decimal', 'lower-alpha', 'lower-roman'];\nconst DefaultUnorderedListStyles = ['disc', 'circle', 'square'];\nconst OrderedMapPlaceholderRegex = /\\$\\{(\\w+)\\}/;\nconst CharCodeOfA = 65;\nconst RomanValues: Record<string, number> = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n};\nconst OrderedMap: Record<number, string> = {\n    [NumberingListType.Decimal]: 'decimal',\n    [NumberingListType.DecimalDash]: '\"${Number}- \"',\n    [NumberingListType.DecimalParenthesis]: '\"${Number}) \"',\n    [NumberingListType.DecimalDoubleParenthesis]: '\"(${Number}) \"',\n    [NumberingListType.LowerAlpha]: 'lower-alpha',\n    [NumberingListType.LowerAlphaDash]: '\"${LowerAlpha}- \"',\n    [NumberingListType.LowerAlphaParenthesis]: '\"${LowerAlpha}) \"',\n    [NumberingListType.LowerAlphaDoubleParenthesis]: '\"(${LowerAlpha}) \"',\n    [NumberingListType.UpperAlpha]: 'upper-alpha',\n    [NumberingListType.UpperAlphaDash]: '\"${UpperAlpha}- \"',\n    [NumberingListType.UpperAlphaParenthesis]: '\"${UpperAlpha}) \"',\n    [NumberingListType.UpperAlphaDoubleParenthesis]: '\"(${UpperAlpha}) \"',\n    [NumberingListType.LowerRoman]: 'lower-roman',\n    [NumberingListType.LowerRomanDash]: '\"${LowerRoman}- \"',\n    [NumberingListType.LowerRomanParenthesis]: '\"${LowerRoman}) \"',\n    [NumberingListType.LowerRomanDoubleParenthesis]: '\"(${LowerRoman}) \"',\n    [NumberingListType.UpperRoman]: 'upper-roman',\n    [NumberingListType.UpperRomanDash]: '\"${UpperRoman}- \"',\n    [NumberingListType.UpperRomanParenthesis]: '\"${UpperRoman}) \"',\n    [NumberingListType.UpperRomanDoubleParenthesis]: '\"(${UpperRoman}) \"',\n};\nconst UnorderedMap: Record<number, string> = {\n    [BulletListType.Disc]: 'disc',\n    [BulletListType.Square]: '\"∎ \"',\n    [BulletListType.Circle]: 'circle',\n    [BulletListType.Dash]: '\"- \"',\n    [BulletListType.LongArrow]: '\"➔ \"',\n    [BulletListType.DoubleLongArrow]: '\"➔ \"',\n    [BulletListType.ShortArrow]: '\"➢ \"',\n    [BulletListType.UnfilledArrow]: '\"➪ \"',\n    [BulletListType.Hyphen]: '\"— \"',\n};\n\nfunction getOrderedListStyleValue(\n    template: string | undefined,\n    listNumber: number\n): string | undefined {\n    return template\n        ? template.replace(OrderedMapPlaceholderRegex, (_, subStr) => {\n              switch (subStr) {\n                  case 'Number':\n                      return listNumber + '';\n                  case 'LowerAlpha':\n                      return convertDecimalsToAlpha(listNumber, true /*isLowerCase*/);\n                  case 'UpperAlpha':\n                      return convertDecimalsToAlpha(listNumber, false /*isLowerCase*/);\n                  case 'LowerRoman':\n                      return convertDecimalsToRoman(listNumber, true /*isLowerCase*/);\n                  case 'UpperRoman':\n                      return convertDecimalsToRoman(listNumber, false /*isLowerCase*/);\n              }\n\n              return '';\n          })\n        : undefined;\n}\n\nfunction convertDecimalsToAlpha(decimal: number, isLowerCase?: boolean): string {\n    let alpha = '';\n    decimal--;\n\n    while (decimal >= 0) {\n        alpha = String.fromCharCode((decimal % 26) + CharCodeOfA) + alpha;\n        decimal = Math.floor(decimal / 26) - 1;\n    }\n    return isLowerCase ? alpha.toLowerCase() : alpha;\n}\n\nfunction convertDecimalsToRoman(decimal: number, isLowerCase?: boolean) {\n    let romanValue = '';\n\n    for (const i of getObjectKeys(RomanValues)) {\n        const timesRomanCharAppear = Math.floor(decimal / RomanValues[i]);\n        decimal = decimal - timesRomanCharAppear * RomanValues[i];\n        romanValue = romanValue + i.repeat(timesRomanCharAppear);\n    }\n    return isLowerCase ? romanValue.toLocaleLowerCase() : romanValue;\n}\n\nconst listMetadataDefinition = createObjectDefinition<ListMetadataFormat>(\n    {\n        orderedStyleType: createNumberDefinition(\n            true /** isOptional */,\n            undefined /** value **/,\n            NumberingListType.Min,\n            NumberingListType.Max\n        ),\n        unorderedStyleType: createNumberDefinition(\n            true /** isOptional */,\n            undefined /** value **/,\n            BulletListType.Min,\n            BulletListType.Max\n        ),\n    },\n    true /** isOptional */,\n    true /** allowNull */\n);\n\nfunction shouldApplyToItem(listStyleType: string) {\n    return listStyleType.indexOf('\"') >= 0;\n}\n\nfunction getRawListStyleType(listType: 'OL' | 'UL', metadata: ListMetadataFormat, depth: number) {\n    const { orderedStyleType, unorderedStyleType } = metadata;\n    if (listType == 'OL') {\n        return orderedStyleType === undefined\n            ? DefaultOrderedListStyles[depth % DefaultOrderedListStyles.length]\n            : OrderedMap[orderedStyleType];\n    } else {\n        return unorderedStyleType === undefined\n            ? DefaultUnorderedListStyles[depth % DefaultUnorderedListStyles.length]\n            : UnorderedMap[unorderedStyleType];\n    }\n}\n\n/**\n * Gets the list style type that the bullet is part of, using the Constant record\n * @param listType whether the list is ordered or unordered\n * @param bullet bullet string\n * @returns the number of the style override or undefined if was not found in the Record\n */\nexport function getListStyleTypeFromString(listType: 'OL' | 'UL', bullet: string) {\n    const map = listType == 'OL' ? OrderedMap : UnorderedMap;\n    const keys = getObjectKeys(map);\n    const result = keys.find(key => map[key] == bullet);\n    if (result) {\n        return typeof result == 'string' ? parseInt(result) : result;\n    }\n    return result;\n}\n\n/**\n * @internal\n */\nexport const listItemMetadataApplier: MetadataApplier<\n    ListMetadataFormat,\n    ContentModelListItemFormat\n> = {\n    metadataDefinition: listMetadataDefinition,\n    applierFunction: (metadata, format, context) => {\n        const depth = context.listFormat.nodeStack.length - 2; // Minus two for the parent element and convert length to index\n\n        if (depth >= 0) {\n            const listType = context.listFormat.nodeStack[depth + 1].listType ?? 'OL';\n            const listStyleType = getRawListStyleType(listType, metadata ?? {}, depth);\n\n            if (listStyleType && shouldApplyToItem(listStyleType)) {\n                format.listStyleType =\n                    listType == 'OL'\n                        ? getOrderedListStyleValue(\n                              listStyleType,\n                              context.listFormat.threadItemCounts[depth]\n                          )\n                        : listStyleType;\n            } else {\n                delete format.listStyleType;\n            }\n        }\n    },\n};\n\n/**\n * @internal\n */\nexport const listLevelMetadataApplier: MetadataApplier<\n    ListMetadataFormat,\n    ContentModelListItemLevelFormat\n> = {\n    metadataDefinition: listMetadataDefinition,\n    applierFunction: (metadata, format, context) => {\n        const depth = context.listFormat.nodeStack.length - 2; // Minus two for the parent element and convert length to index\n\n        if (depth >= 0) {\n            const listType = context.listFormat.nodeStack[depth + 1].listType ?? 'OL';\n            const listStyleType = getRawListStyleType(listType, metadata ?? {}, depth);\n\n            if (listStyleType && !shouldApplyToItem(listStyleType)) {\n                format.listStyleType = listStyleType;\n            } else {\n                delete format.listStyleType;\n            }\n        }\n    },\n};\n\n/**\n * Update list metadata with a callback\n * @param list The list Content Model (metadata holder)\n * @param callback The callback function used for updating metadata\n */\nexport function updateListMetadata(\n    list: ContentModelWithDataset<ListMetadataFormat>,\n    callback?: (format: ListMetadataFormat | null) => ListMetadataFormat | null\n): ListMetadataFormat | null {\n    return updateMetadata(list, callback, listMetadataDefinition);\n}\n","import { createBooleanDefinition, createObjectDefinition } from './definitionCreators';\nimport { updateMetadata } from 'roosterjs-content-model-dom';\nimport type { ContentModelTableCell, TableCellMetadataFormat } from 'roosterjs-content-model-types';\n\nconst TableCellMetadataFormatDefinition = createObjectDefinition<Required<TableCellMetadataFormat>>(\n    {\n        bgColorOverride: createBooleanDefinition(true /** isOptional */),\n        vAlignOverride: createBooleanDefinition(true /** isOptional */),\n        borderOverride: createBooleanDefinition(true /** isOptional */),\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Update table cell metadata with a callback\n * @param cell The table cell Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateTableCellMetadata(\n    cell: ContentModelTableCell,\n    callback?: (format: TableCellMetadataFormat | null) => TableCellMetadataFormat | null\n): TableCellMetadataFormat | null {\n    return updateMetadata(cell, callback, TableCellMetadataFormatDefinition);\n}\n","import { TableBorderFormat } from '../constants/TableBorderFormat';\nimport { updateMetadata } from 'roosterjs-content-model-dom';\nimport {\n    createBooleanDefinition,\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from './definitionCreators';\nimport type { ContentModelTable, TableMetadataFormat } from 'roosterjs-content-model-types';\n\nconst NullStringDefinition = createStringDefinition(\n    false /** isOptional */,\n    undefined /** value */,\n    true /** allowNull */\n);\n\nconst BooleanDefinition = createBooleanDefinition(false /** isOptional */);\n\nconst TableFormatDefinition = createObjectDefinition<Required<TableMetadataFormat>>(\n    {\n        topBorderColor: NullStringDefinition,\n        bottomBorderColor: NullStringDefinition,\n        verticalBorderColor: NullStringDefinition,\n        hasHeaderRow: BooleanDefinition,\n        headerRowColor: NullStringDefinition,\n        hasFirstColumn: BooleanDefinition,\n        hasBandedColumns: BooleanDefinition,\n        hasBandedRows: BooleanDefinition,\n        bgColorEven: NullStringDefinition,\n        bgColorOdd: NullStringDefinition,\n        tableBorderFormat: createNumberDefinition(\n            false /** isOptional */,\n            undefined /* value */,\n            TableBorderFormat.Min /* first table border format */,\n            TableBorderFormat.Max /* last table border format */\n        ),\n        verticalAlign: NullStringDefinition,\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Update table metadata with a callback\n * @param table The table Content Model\n * @param callback The callback function used for updating metadata\n */\nexport function updateTableMetadata(\n    table: ContentModelTable,\n    callback?: (format: TableMetadataFormat | null) => TableMetadataFormat | null\n): TableMetadataFormat | null {\n    return updateMetadata(table, callback, TableFormatDefinition);\n}\n","import { deleteBlock } from '../../publicApi/selection/deleteBlock';\nimport { deleteSegment } from '../../publicApi/selection/deleteSegment';\nimport { getSegmentTextFormat } from '../../publicApi/domUtils/getSegmentTextFormat';\nimport { iterateSelections } from '../../publicApi/selection/iterateSelections';\nimport type { IterateSelectionsOption } from '../../publicApi/selection/iterateSelections';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelParagraph,\n    ContentModelSelectionMarker,\n    DeleteSelectionContext,\n    FormatWithContentModelContext,\n    InsertPoint,\n    TableSelectionContext,\n} from 'roosterjs-content-model-types';\nimport {\n    createBr,\n    createParagraph,\n    createSelectionMarker,\n    setParagraphNotImplicit,\n} from 'roosterjs-content-model-dom';\n\nconst DeleteSelectionIteratingOptions: IterateSelectionsOption = {\n    contentUnderSelectedTableCell: 'ignoreForTableOrCell', // When a table cell is selected, we replace all content for this cell, so no need to go into its content\n    contentUnderSelectedGeneralElement: 'generalElementOnly', // When a general element is selected, we replace the whole element so no need to go into its content\n    includeListFormatHolder: 'never',\n};\n\n/**\n * @internal\n * Iterate the model and find all selected content if any, delete them, and keep/create an insert point\n * at the first deleted position so that we know where to put cursor to after delete\n */\nexport function deleteExpandedSelection(\n    model: ContentModelDocument,\n    formatContext?: FormatWithContentModelContext\n): DeleteSelectionContext {\n    const context: DeleteSelectionContext = {\n        deleteResult: 'notDeleted',\n        insertPoint: null,\n        formatContext,\n    };\n\n    iterateSelections(\n        model,\n        (path, tableContext, block, segments) => {\n            // Set paragraph, format and index for default position where we will put cursor to.\n            // Later we can overwrite these info when process the selections\n            let paragraph = createParagraph(\n                true /*implicit*/,\n                undefined /*blockFormat*/,\n                model.format\n            );\n            let markerFormat = model.format;\n            let insertMarkerIndex = 0;\n\n            if (segments) {\n                // Delete segments inside a paragraph\n                if (segments[0] && block?.blockType == 'Paragraph') {\n                    // Now that we have found a paragraph with selections, we can overwrite the default paragraph with this one\n                    // so we can put cursor here after delete\n                    paragraph = block;\n                    insertMarkerIndex = paragraph.segments.indexOf(segments[0]);\n                    markerFormat = getSegmentTextFormat(segments[0]);\n\n                    context.lastParagraph = paragraph;\n                    context.lastTableContext = tableContext;\n\n                    segments.forEach((segment, i) => {\n                        if (\n                            i == 0 &&\n                            !context.insertPoint &&\n                            segment.segmentType == 'SelectionMarker'\n                        ) {\n                            // First time we hit a selection and it is a selection marker, just mark it and not need to delete\n                            // because this is possible a collapsed selection, then it will be handled later\n                            context.insertPoint = createInsertPoint(\n                                segment,\n                                block,\n                                path,\n                                tableContext\n                            );\n                        } else if (deleteSegment(block, segment, context.formatContext)) {\n                            context.deleteResult = 'range';\n                        }\n                    });\n\n                    // Since we are operating on this paragraph and it possible we delete everything from this paragraph,\n                    // Need to make it \"not implicit\" so that it will always have a container element, so that when we do normalization\n                    // of this paragraph, a BR can be added if need\n                    if (context.deleteResult == 'range') {\n                        setParagraphNotImplicit(block);\n                    }\n                }\n            } else if (block) {\n                // Delete a whole block (divider, table, ...)\n                const blocks = path[0].blocks;\n\n                if (deleteBlock(blocks, block, paragraph, context.formatContext)) {\n                    context.deleteResult = 'range';\n                }\n            } else if (tableContext) {\n                // Delete a whole table cell\n                const { table, colIndex, rowIndex } = tableContext;\n                const row = table.rows[rowIndex];\n                const cell = row.cells[colIndex];\n\n                path = [cell, ...path];\n                paragraph.segments.push(createBr(model.format));\n                cell.blocks = [paragraph];\n\n                delete cell.cachedElement;\n                delete row.cachedElement;\n                context.deleteResult = 'range';\n            }\n\n            if (!context.insertPoint) {\n                // If we have not got a insert point after delete and we have a paragraph to put an insert point in, create insert point now\n                const marker = createSelectionMarker(markerFormat);\n\n                setParagraphNotImplicit(paragraph);\n                paragraph.segments.splice(insertMarkerIndex, 0, marker);\n                context.insertPoint = createInsertPoint(marker, paragraph, path, tableContext);\n            }\n        },\n        DeleteSelectionIteratingOptions\n    );\n\n    return context;\n}\n\nfunction createInsertPoint(\n    marker: ContentModelSelectionMarker,\n    paragraph: ContentModelParagraph,\n    path: ContentModelBlockGroup[],\n    tableContext: TableSelectionContext | undefined\n): InsertPoint {\n    return {\n        marker,\n        paragraph,\n        path,\n        tableContext,\n    };\n}\n","/**\n * @internal\n */\nexport function deleteSingleChar(text: string, isForward: boolean) {\n    // In case of emoji that occupies multiple characters, we need to delete the whole emoji\n    const array = [...text];\n    let deleteLength = 0;\n\n    for (\n        let i = isForward ? 0 : array.length - 1,\n            deleteState: 'notDeleted' | 'waiting' | 'done' = 'notDeleted';\n        i >= 0 && i < array.length && deleteState != 'done';\n        i += isForward ? 1 : -1\n    ) {\n        switch (array[i]) {\n            case '\\u200D': // ZERO WIDTH JOINER\n            case '\\u20E3': // COMBINING ENCLOSING KEYCAP\n            case '\\uFE0E': // VARIATION SELECTOR-15\n            case '\\uFE0F': // VARIATION SELECTOR-16\n                deleteState = 'notDeleted';\n                deleteLength++;\n                break;\n\n            default:\n                if (deleteState == 'notDeleted') {\n                    deleteState = 'waiting';\n                    deleteLength++;\n                } else if (deleteState == 'waiting') {\n                    deleteState = 'done';\n                }\n                break;\n        }\n    }\n\n    array.splice(isForward ? 0 : array.length - deleteLength, deleteLength);\n\n    return array.join('');\n}\n","import type { DisplayFormat, FormatParser } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const pasteDisplayFormatParser: FormatParser<DisplayFormat> = (format, element) => {\n    const display = element.style.display;\n\n    if (display && display != 'flex') {\n        format.display = display;\n    }\n};\n","import {\n    AllowedTags,\n    DisallowedTags,\n    removeStyle,\n    sanitizeElement,\n} from '../utils/sanitizeElement';\nimport type { DomToModelOptionForPaste, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createPasteEntityProcessor(\n    options: DomToModelOptionForPaste\n): ElementProcessor<HTMLElement> {\n    const allowedTags = AllowedTags.concat(options.additionalAllowedTags);\n    const disallowedTags = DisallowedTags.concat(options.additionalDisallowedTags);\n\n    return (group, element, context) => {\n        const sanitizedElement = sanitizeElement(element, allowedTags, disallowedTags, {\n            position: removeStyle,\n        });\n\n        if (sanitizedElement) {\n            context.defaultElementProcessors.entity(group, sanitizedElement, context);\n        }\n    };\n}\n","import { moveChildNodes } from 'roosterjs-content-model-dom';\nimport {\n    AllowedTags,\n    createSanitizedElement,\n    DisallowedTags,\n    removeDisplayFlex,\n    removeStyle,\n} from '../utils/sanitizeElement';\nimport type { DomToModelOptionForPaste, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createPasteGeneralProcessor(\n    options: DomToModelOptionForPaste\n): ElementProcessor<HTMLElement> {\n    const allowedTags = AllowedTags.concat(options.additionalAllowedTags);\n    const disallowedTags = DisallowedTags.concat(options.additionalDisallowedTags);\n\n    return (group, element, context) => {\n        const tag = element.tagName.toLowerCase();\n        const processor =\n            allowedTags.indexOf(tag) >= 0\n                ? internalGeneralProcessor\n                : disallowedTags.indexOf(tag) >= 0\n                ? undefined // Ignore those disallowed tags\n                : context.defaultElementProcessors.span; // For other unknown tags, treat them as SPAN\n\n        processor?.(group, element, context);\n    };\n}\n\nconst internalGeneralProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const sanitizedElement = createSanitizedElement(\n        element.ownerDocument,\n        element.tagName,\n        element.attributes,\n        {\n            position: removeStyle,\n            display: removeDisplayFlex,\n        }\n    );\n\n    moveChildNodes(sanitizedElement, element);\n    context.defaultElementProcessors['*']?.(group, sanitizedElement, context);\n};\n","import { entityProcessor, hasMetadata, tableProcessor } from 'roosterjs-content-model-dom';\nimport { getSelectionRootNode } from '../publicApi/selection/getSelectionRootNode';\nimport type { DomToModelContext, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const tablePreProcessor: ElementProcessor<HTMLTableElement> = (group, element, context) => {\n    const processor = shouldUseTableProcessor(element, context) ? tableProcessor : entityProcessor;\n\n    processor(group, element, context);\n};\n\nfunction shouldUseTableProcessor(element: HTMLTableElement, context: DomToModelContext) {\n    const selectionRoot = getSelectionRootNode(context.selection);\n    // Treat table as a real table when:\n    // 1. It is a roosterjs table (has metadata)\n    // 2. Table is in selection\n    // 3. There is selection inside table (or whole table is selected)\n    // Otherwise, we treat the table as entity so we will not change it when write back\n    return (\n        hasMetadata(element) ||\n        context.isInSelection ||\n        (selectionRoot && element.contains(selectionRoot))\n    );\n}\n","import type { DarkColorHandler } from 'roosterjs-editor-types';\n\n/**\n * Edit and transform color of elements between light mode and dark mode\n * @param rootNode The root DOM node to transform\n * @param includeSelf True to transform the root node as well, otherwise false\n * @param direction To specify the transform direction, light to dark, or dark to light\n * @param darkColorHandler The dark color handler object to help do color transformation\n */\nexport function transformColor(\n    rootNode: Node,\n    includeSelf: boolean,\n    direction: 'lightToDark' | 'darkToLight',\n    darkColorHandler: DarkColorHandler\n) {\n    const toDarkMode = direction == 'lightToDark';\n    const transformer = (element: HTMLElement) => {\n        darkColorHandler.transformElementColor(element, !toDarkMode, toDarkMode);\n    };\n\n    iterateElements(rootNode, transformer, includeSelf);\n}\n\nfunction iterateElements(\n    root: Node,\n    transformer: (element: HTMLElement) => void,\n    includeSelf?: boolean\n) {\n    if (includeSelf && isHTMLElement(root)) {\n        transformer(root);\n    }\n\n    for (let child = root.firstChild; child; child = child.nextSibling) {\n        if (isHTMLElement(child)) {\n            transformer(child);\n        }\n\n        iterateElements(child, transformer);\n    }\n}\n\n// This is not a strict check, we just need to make sure this element has style so that we can set style to it\n// We don't use safeInstanceOf() here since this function will be called very frequently when extract html content\n// in dark mode, so we need to make sure this check is fast enough\nfunction isHTMLElement(node: Node): node is HTMLElement {\n    const htmlElement = <HTMLElement>node;\n    return node.nodeType == Node.ELEMENT_NODE && !!htmlElement.style;\n}\n","import type { Border } from 'roosterjs-content-model-types';\n\nconst BorderStyles = [\n    'none',\n    'hidden',\n    'dotted',\n    'dashed',\n    'solid',\n    'double',\n    'groove',\n    'ridge',\n    'inset',\n    'outset',\n];\nconst BorderSizeRegex = /^(thin|medium|thick|[\\d\\.]+\\w*)$/;\n\n/**\n * Extract an integrated border string with border width, style, color to value tuple\n * @param combinedBorder The integrated border style string\n * @returns An array with the splitted values\n */\nexport function extractBorderValues(combinedBorder?: string): Border {\n    const result: Border = {};\n    const values = (combinedBorder || '').replace(/, /g, ',').split(' ');\n\n    values.forEach(v => {\n        if (BorderStyles.indexOf(v) >= 0 && !result.style) {\n            result.style = v;\n        } else if (BorderSizeRegex.test(v) && !result.width) {\n            result.width = v;\n        } else if (v && !result.color) {\n            result.color = v; // TODO: Do we need to use a regex to match all possible colors?\n        }\n    });\n\n    return result;\n}\n\n/**\n * Combine border value array back to string\n * @param values Input string values\n * @param initialValue Initial value for those items without valid value\n */\nexport function combineBorderValue(value: Border): string {\n    return [value.width || '', value.style || '', value.color || ''].join(' ').trim() || 'none';\n}\n","const CTRL_CHAR_CODE = 'Control';\nconst ALT_CHAR_CODE = 'Alt';\nconst META_CHAR_CODE = 'Meta';\n\nconst CursorMovingKeys = new Set<string>([\n    'ArrowUp',\n    'ArrowDown',\n    'ArrowLeft',\n    'ArrowRight',\n    'Home',\n    'End',\n    'PageUp',\n    'PageDown',\n]);\n\n/**\n * Returns true when the event was fired from a modifier key, otherwise false\n * @param event The keyboard event object\n */\nexport function isModifierKey(event: KeyboardEvent): boolean {\n    const isCtrlKey = event.ctrlKey || event.key === CTRL_CHAR_CODE;\n    const isAltKey = event.altKey || event.key === ALT_CHAR_CODE;\n    const isMetaKey = event.metaKey || event.key === META_CHAR_CODE;\n\n    return isCtrlKey || isAltKey || isMetaKey;\n}\n\n/**\n * Returns true when the event was fired from a key that produces a character value, otherwise false\n * This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\n * event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\n * So if we missed some case here it is still acceptable.\n * @param event The keyboard event object\n */\nexport function isCharacterValue(event: KeyboardEvent): boolean {\n    return !isModifierKey(event) && !!event.key && event.key.length == 1;\n}\n\n/**\n * @internal\n * Returns true if the given event is a cursor moving event (Left, Right, Up, Down, Home, End, Page Up, Page Down).\n * This does not check modifier keys (Ctrl, Alt, Meta). So if there are modifier keys pressed, it can still return true if one of the modifier key is pressed\n * @param event The keyboard event to check\n */\nexport function isCursorMovingKey(event: KeyboardEvent): boolean {\n    return CursorMovingKeys.has(event.key);\n}\n","import type { ContentModelSegment, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Get the text format of a segment, this function will return only format that is applicable to text\n * @param segment The segment to get format from\n * @returns\n */\nexport function getSegmentTextFormat(segment: ContentModelSegment): ContentModelSegmentFormat {\n    const { fontFamily, fontSize, textColor, backgroundColor, letterSpacing, lineHeight } =\n        segment?.format ?? {};\n\n    const textFormat: ContentModelSegmentFormat = {\n        fontFamily,\n        fontSize,\n        textColor,\n        backgroundColor,\n        letterSpacing,\n        lineHeight,\n    };\n\n    return removeUndefinedValues(textFormat);\n}\n\nconst removeUndefinedValues = (format: ContentModelSegmentFormat): ContentModelSegmentFormat => {\n    const textFormat: Record<string, string | undefined | boolean> = {};\n    Object.keys(format).filter(key => {\n        const value = format[key as keyof ContentModelSegmentFormat];\n        if (value !== undefined) {\n            textFormat[key] = value;\n        }\n    });\n    return textFormat;\n};\n","/**\n * Read a file object and invoke a callback function with the data url of this file\n * @param file The file to read\n * @param callback the callback to invoke with data url of the file.\n * If fail to read, dataUrl will be null\n */\nexport function readFile(file: File, callback: (dataUrl: string | null) => void) {\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = () => {\n            callback(reader.result as string);\n        };\n        reader.onerror = () => {\n            callback(null);\n        };\n        reader.readAsDataURL(file);\n    }\n}\n","const SPACES_REGEX = /[\\u2000\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000\\s\\t\\r\\n]/gm;\nconst PUNCTUATIONS = '.,?!:\"()[]\\\\/';\n\n/**\n * Check if the given character is punctuation\n * @param char The character to check\n */\nexport function isPunctuation(char: string) {\n    return PUNCTUATIONS.indexOf(char) >= 0;\n}\n\n/**\n * Check if the give character is a space. A space can be normal ASCII pace (32) or non-break space (160) or other kinds of spaces\n * such as ZeroWidthSpace, ...\n * @param char The character to check\n */\nexport function isSpace(char: string) {\n    const code = char?.charCodeAt(0) ?? 0;\n    return code == 160 || code == 32 || SPACES_REGEX.test(char);\n}\n\n/**\n * Normalize spaces of the given string. After normalization, all leading (for forward) or trailing (for backward) spaces\n * will be replaces with non-break space (160)\n * @param txt The string to normalize\n * @param isForward Whether normalize forward or backward\n */\nexport function normalizeText(txt: string, isForward: boolean): string {\n    return txt.replace(isForward ? /^\\u0020+/ : /\\u0020+$/, '\\u00A0');\n}\n","import { toArray } from 'roosterjs-content-model-dom';\nimport type { TableSelection } from 'roosterjs-content-model-types';\n\n/**\n * Parse a table into a two dimensions array of TD elements. For those merged cells, the value will be null.\n * @param table Input HTML Table element\n * @returns Array of TD elements\n */\nexport function parseTableCells(table: HTMLTableElement): (HTMLTableCellElement | null)[][] {\n    const trs = toArray(table.rows);\n    const cells: (HTMLTableCellElement | null)[][] = trs.map(row => []);\n\n    trs.forEach((tr, rowIndex) => {\n        for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\n            // Skip the cells which already initialized\n            for (; cells[rowIndex][targetCol] !== undefined; targetCol++) {}\n\n            const td = tr.cells[sourceCol];\n\n            for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\n                for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\n                    if (cells[rowIndex + rowSpan]) {\n                        cells[rowIndex + rowSpan][targetCol] =\n                            colSpan == 0 && rowSpan == 0 ? td : null;\n                    }\n                }\n            }\n        }\n\n        for (let col = 0; col < cells[rowIndex].length; col++) {\n            cells[rowIndex][col] = cells[rowIndex][col] || null;\n        }\n    });\n\n    return cells;\n}\n\n/**\n * Create ranges from a table selection\n * @param selection The source table selection\n * @returns An array of DOM ranges of selected table cells\n */\nexport function createTableRanges(selection: TableSelection): Range[] {\n    const result: Range[] = [];\n    const { table, firstColumn, firstRow, lastColumn, lastRow } = selection;\n    const cells = parseTableCells(table);\n\n    for (let row = firstRow; row <= lastRow; row++) {\n        for (let col = firstColumn; col <= lastColumn; col++) {\n            const td = cells[row]?.[col];\n\n            if (td) {\n                const range = table.ownerDocument.createRange();\n\n                range.selectNode(td);\n                result.push(range);\n            }\n        }\n    }\n\n    return result;\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockBase,\n    ContentModelBlockGroupBase,\n    ContentModelBlockGroupType,\n    ContentModelBlockType,\n    ContentModelDivider,\n    ContentModelDocument,\n    ContentModelEntity,\n    ContentModelFormatBase,\n    ContentModelFormatContainer,\n    ContentModelGeneralBlock,\n    ContentModelImage,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentBase,\n    ContentModelSegmentType,\n    ContentModelSelectionMarker,\n    ContentModelTable,\n    ContentModelTableCell,\n    ContentModelWithDataset,\n    ContentModelWithFormat,\n    ContentModelGeneralSegment,\n    ContentModelText,\n    ContentModelTableRow,\n    ContentModelListLevel,\n} from 'roosterjs-content-model-types';\n\n/**\n * Function type used for cloneModel API to specify how to handle cached element when clone a model\n * @param node The cached node\n * @param type Type of the node, it can be\n * - general: DOM element of ContentModelGeneralSegment or ContentModelGeneralBlock\n * - entity: Wrapper element in ContentModelEntity\n * - cache: Cached node in other model element that supports cache\n */\nexport type CachedElementHandler = (\n    node: HTMLElement,\n    type: 'general' | 'entity' | 'cache'\n) => HTMLElement | undefined;\n\n/**\n *\n * Options for cloneModel API\n */\nexport interface CloneModelOptions {\n    /**\n     * Specify how to deal with cached element, including cached block element, element in General Model, and wrapper element in Entity\n     * - True: Cloned model will have the same reference to the cached element\n     * - False/Not passed: For cached block element, cached element will be undefined. For General Model and Entity, the element will have deep clone and assign to the cloned model\n     * - A callback: invoke the callback with the source cached element and a string to specify model type, let the callback return the expected value of cached element.\n     * For General Model and Entity, the callback must return a valid element, otherwise there will be exception thrown.\n     */\n    includeCachedElement?: boolean | CachedElementHandler;\n}\n\n/**\n * Clone a content model\n * @param model The content model to clone\n * @param options @optional Options to specify customize the clone behavior\n */\nexport function cloneModel(\n    model: ContentModelDocument,\n    options?: CloneModelOptions\n): ContentModelDocument {\n    const newModel: ContentModelDocument = cloneBlockGroupBase(model, options || {});\n\n    if (model.format) {\n        newModel.format = Object.assign({}, model.format);\n    }\n\n    return newModel;\n}\n\nfunction cloneBlock(block: ContentModelBlock, options: CloneModelOptions): ContentModelBlock {\n    switch (block.blockType) {\n        case 'BlockGroup':\n            switch (block.blockGroupType) {\n                case 'FormatContainer':\n                    return cloneFormatContainer(block, options);\n                case 'General':\n                    return cloneGeneralBlock(block, options);\n                case 'ListItem':\n                    return cloneListItem(block, options);\n            }\n            break;\n        case 'Divider':\n            return cloneDivider(block, options);\n        case 'Entity':\n            return cloneEntity(block, options);\n        case 'Paragraph':\n            return cloneParagraph(block, options);\n        case 'Table':\n            return cloneTable(block, options);\n    }\n}\n\nfunction cloneSegment(\n    segment: ContentModelSegment,\n    options: CloneModelOptions\n): ContentModelSegment {\n    switch (segment.segmentType) {\n        case 'Br':\n            return cloneSegmentBase(segment);\n        case 'Entity':\n            return cloneEntity(segment, options);\n        case 'General':\n            return cloneGeneralSegment(segment, options);\n        case 'Image':\n            return cloneImage(segment);\n        case 'SelectionMarker':\n            return cloneSelectionMarker(segment);\n        case 'Text':\n            return cloneText(segment);\n    }\n}\n\nfunction cloneModelWithFormat<T extends ContentModelFormatBase>(\n    model: ContentModelWithFormat<T>\n): ContentModelWithFormat<T> {\n    return {\n        format: Object.assign({}, model.format),\n    };\n}\n\nfunction cloneModelWithDataset<T>(model: ContentModelWithDataset<T>): ContentModelWithDataset<T> {\n    return {\n        dataset: Object.assign({}, model.dataset),\n    };\n}\n\nfunction cloneBlockBase<T extends ContentModelBlockType>(\n    block: ContentModelBlockBase<T>\n): ContentModelBlockBase<T> {\n    const { blockType } = block;\n\n    return Object.assign(\n        {\n            blockType,\n        },\n        cloneModelWithFormat(block)\n    );\n}\n\nfunction cloneBlockGroupBase<T extends ContentModelBlockGroupType>(\n    group: ContentModelBlockGroupBase<T>,\n    options: CloneModelOptions\n): ContentModelBlockGroupBase<T> {\n    const { blockGroupType, blocks } = group;\n\n    return {\n        blockGroupType: blockGroupType,\n        blocks: blocks.map(block => cloneBlock(block, options)),\n    };\n}\n\nfunction cloneSegmentBase<T extends ContentModelSegmentType>(\n    segment: ContentModelSegmentBase<T>\n): ContentModelSegmentBase<T> {\n    const { segmentType, isSelected, code, link } = segment;\n\n    const newSegment: ContentModelSegmentBase<T> = Object.assign(\n        {\n            segmentType,\n            isSelected,\n        },\n        cloneModelWithFormat(segment)\n    );\n\n    if (code) {\n        newSegment.code = cloneModelWithFormat(code);\n    }\n    if (link) {\n        newSegment.link = Object.assign(cloneModelWithFormat(link), cloneModelWithDataset(link));\n    }\n\n    return newSegment;\n}\n\nfunction cloneEntity(entity: ContentModelEntity, options: CloneModelOptions): ContentModelEntity {\n    const { wrapper, entityFormat } = entity;\n\n    return Object.assign(\n        {\n            wrapper: handleCachedElement(wrapper, 'entity', options),\n            entityFormat: { ...entityFormat },\n        },\n        cloneBlockBase(entity),\n        cloneSegmentBase(entity)\n    );\n}\n\nfunction cloneParagraph(\n    paragraph: ContentModelParagraph,\n    options: CloneModelOptions\n): ContentModelParagraph {\n    const { cachedElement, segments, isImplicit, decorator, segmentFormat } = paragraph;\n\n    const newParagraph: ContentModelParagraph = Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            isImplicit,\n            segments: segments.map(segment => cloneSegment(segment, options)),\n            segmentFormat: segmentFormat ? { ...segmentFormat } : undefined,\n        },\n        cloneBlockBase(paragraph),\n        cloneModelWithFormat(paragraph)\n    );\n\n    if (decorator) {\n        newParagraph.decorator = Object.assign(\n            {\n                tagName: decorator.tagName,\n            },\n            cloneModelWithFormat(decorator)\n        );\n    }\n\n    return newParagraph;\n}\n\nfunction cloneTable(table: ContentModelTable, options: CloneModelOptions): ContentModelTable {\n    const { cachedElement, widths, rows } = table;\n\n    return Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            widths: Array.from(widths),\n            rows: rows.map(row => cloneTableRow(row, options)),\n        },\n        cloneBlockBase(table),\n        cloneModelWithDataset(table)\n    );\n}\n\nfunction cloneTableRow(\n    row: ContentModelTableRow,\n    options: CloneModelOptions\n): ContentModelTableRow {\n    const { height, cells, cachedElement } = row;\n\n    return Object.assign(\n        {\n            height,\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            cells: cells.map(cell => cloneTableCell(cell, options)),\n        },\n        cloneModelWithFormat(row)\n    );\n}\n\nfunction cloneTableCell(\n    cell: ContentModelTableCell,\n    options: CloneModelOptions\n): ContentModelTableCell {\n    const { cachedElement, isSelected, spanAbove, spanLeft, isHeader } = cell;\n\n    return Object.assign(\n        {\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n            isSelected,\n            spanAbove,\n            spanLeft,\n            isHeader,\n        },\n        cloneBlockGroupBase(cell, options),\n        cloneModelWithFormat(cell),\n        cloneModelWithDataset(cell)\n    );\n}\n\nfunction cloneFormatContainer(\n    container: ContentModelFormatContainer,\n    options: CloneModelOptions\n): ContentModelFormatContainer {\n    const { tagName, cachedElement } = container;\n    const newContainer: ContentModelFormatContainer = Object.assign(\n        { tagName, cachedElement: handleCachedElement(cachedElement, 'cache', options) },\n        cloneBlockBase(container),\n        cloneBlockGroupBase(container, options)\n    );\n\n    if (container.zeroFontSize) {\n        newContainer.zeroFontSize = true;\n    }\n\n    return newContainer;\n}\n\nfunction cloneListItem(\n    item: ContentModelListItem,\n    options: CloneModelOptions\n): ContentModelListItem {\n    const { formatHolder, levels } = item;\n\n    return Object.assign(\n        {\n            formatHolder: cloneSelectionMarker(formatHolder),\n            levels: levels.map(cloneListLevel),\n        },\n        cloneBlockBase(item),\n        cloneBlockGroupBase(item, options)\n    );\n}\n\nfunction cloneListLevel(level: ContentModelListLevel): ContentModelListLevel {\n    const { listType } = level;\n\n    return Object.assign({ listType }, cloneModelWithFormat(level), cloneModelWithDataset(level));\n}\nfunction cloneDivider(\n    divider: ContentModelDivider,\n    options: CloneModelOptions\n): ContentModelDivider {\n    const { tagName, isSelected, cachedElement } = divider;\n\n    return Object.assign(\n        {\n            isSelected,\n            tagName,\n            cachedElement: handleCachedElement(cachedElement, 'cache', options),\n        },\n        cloneBlockBase(divider)\n    );\n}\n\nfunction cloneGeneralBlock(\n    general: ContentModelGeneralBlock,\n    options: CloneModelOptions\n): ContentModelGeneralBlock {\n    const { element } = general;\n\n    return Object.assign(\n        {\n            element: handleCachedElement(element, 'general', options),\n        },\n        cloneBlockBase(general),\n        cloneBlockGroupBase(general, options)\n    );\n}\n\nfunction cloneSelectionMarker(marker: ContentModelSelectionMarker): ContentModelSelectionMarker {\n    return Object.assign({ isSelected: marker.isSelected }, cloneSegmentBase(marker));\n}\n\nfunction cloneImage(image: ContentModelImage): ContentModelImage {\n    const { src, alt, title, isSelectedAsImageSelection } = image;\n\n    return Object.assign(\n        { src, alt, title, isSelectedAsImageSelection },\n        cloneSegmentBase(image),\n        cloneModelWithDataset(image)\n    );\n}\n\nfunction cloneGeneralSegment(\n    general: ContentModelGeneralSegment,\n    options: CloneModelOptions\n): ContentModelGeneralSegment {\n    return Object.assign(cloneGeneralBlock(general, options), cloneSegmentBase(general));\n}\n\nfunction cloneText(textSegment: ContentModelText): ContentModelText {\n    const { text } = textSegment;\n    return Object.assign({ text }, cloneSegmentBase(textSegment));\n}\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T,\n    type: 'general' | 'entity',\n    options: CloneModelOptions\n): T;\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T | undefined,\n    type: 'cache',\n    options: CloneModelOptions\n): T | undefined;\n\nfunction handleCachedElement<T extends HTMLElement>(\n    node: T | undefined,\n    type: 'general' | 'entity' | 'cache',\n    options: CloneModelOptions\n): T | undefined {\n    const { includeCachedElement } = options;\n\n    if (!node) {\n        return undefined;\n    } else if (!includeCachedElement) {\n        return type == 'cache' ? undefined : (node.cloneNode(true /*deep*/) as T);\n    } else if (includeCachedElement === true) {\n        return node;\n    } else {\n        const result = includeCachedElement(node, type) as T | undefined;\n\n        if ((type == 'general' || type == 'entity') && !result) {\n            throw new Error('Entity and General Model must has wrapper element');\n        }\n\n        return result;\n    }\n}\n","import { createDomToModelContext, domToContentModel } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n    DomToModelOption,\n} from 'roosterjs-content-model-types';\nimport type { TrustedHTMLHandler } from 'roosterjs-editor-types';\n\n/**\n * Create Content Model from HTML string\n * @param html The source HTML string\n * @param options Options for DOM to Content Model conversion\n * @param trustedHTMLHandler A string handler to convert string to trusted string\n * @returns A Content Model Document object that contains the Content Model from the give HTML, or undefined if failed to parse the source HTML\n */\nexport function createModelFromHtml(\n    html: string,\n    options?: DomToModelOption,\n    trustedHTMLHandler?: TrustedHTMLHandler,\n    defaultSegmentFormat?: ContentModelSegmentFormat\n): ContentModelDocument | undefined {\n    const doc = new DOMParser().parseFromString(trustedHTMLHandler?.(html) ?? html, 'text/html');\n\n    return doc?.body\n        ? domToContentModel(\n              doc.body,\n              createDomToModelContext(\n                  {\n                      defaultFormat: defaultSegmentFormat,\n                  },\n                  options\n              )\n          )\n        : undefined;\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelBlockGroupBase,\n    ContentModelBlockGroupType,\n} from 'roosterjs-content-model-types';\n\n/**\n * Retrieve block group type string from a given block group\n */\nexport type TypeOfBlockGroup<\n    T extends ContentModelBlockGroup\n> = T extends ContentModelBlockGroupBase<infer U> ? U : never;\n\n/**\n * Get index of closest ancestor block group of the expected block group type. If not found, return -1\n * @param path The block group path, from the closest one to root\n * @param blockGroupTypes The expected block group types\n * @param stopTypes @optional Block group types that will cause stop searching\n */\nexport function getClosestAncestorBlockGroupIndex<T extends ContentModelBlockGroup>(\n    path: ContentModelBlockGroup[],\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[] = []\n): number {\n    for (let i = 0; i < path.length; i++) {\n        const group = path[i];\n\n        if ((blockGroupTypes as string[]).indexOf(group.blockGroupType) >= 0) {\n            return i;\n        } else if (stopTypes.indexOf(group.blockGroupType) >= 0) {\n            // Do not go across boundary specified by stopTypes.\n            // For example, in most case we will set table as the boundary,\n            // in order to allow modify list item under a table when the table itself is in another list item\n            // Although this is not very likely to happen in most case, but we still need to handle it\n            return -1;\n        }\n    }\n\n    return -1;\n}\n","import type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\nimport type { TypeOfBlockGroup } from './getClosestAncestorBlockGroupIndex';\n\n/**\n * Check if the given content model block or block group is of the expected block group type\n * @param input The object to check\n * @param type The expected type\n */\nexport function isBlockGroupOfType<T extends ContentModelBlockGroup>(\n    input: ContentModelBlock | ContentModelBlockGroup | null | undefined,\n    type: TypeOfBlockGroup<T>\n): input is T {\n    const item = <T | null | undefined>input;\n\n    return item?.blockGroupType == type;\n}\n","/**\n * Check if the given bold style represents a bold style\n * @param boldStyle The style to check\n */\nexport function isBold(boldStyle?: string): boolean {\n    return (\n        !!boldStyle && (boldStyle == 'bold' || boldStyle == 'bolder' || parseInt(boldStyle) >= 600)\n    );\n}\n","import { applyTableFormat } from '../table/applyTableFormat';\nimport { deleteSelection } from '../../publicApi/selection/deleteSelection';\nimport { getClosestAncestorBlockGroupIndex } from './getClosestAncestorBlockGroupIndex';\nimport { normalizeTable } from '../table/normalizeTable';\nimport {\n    addSegment,\n    createListItem,\n    createParagraph,\n    createSelectionMarker,\n    createTableCell,\n    getObjectKeys,\n    normalizeContentModel,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    FormatWithContentModelContext,\n    InsertPoint,\n} from 'roosterjs-content-model-types';\n\nconst HeadingTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\n/**\n * Options to specify how to merge models\n */\nexport interface MergeModelOption {\n    /**\n     * When there is only a table to merge, whether merge this table into current table (if any), or just directly insert (nested table).\n     * This is usually used when paste table inside a table\n     * @default false\n     */\n    mergeTable?: boolean;\n\n    /**\n     * Use this insert position to merge instead of querying selection from target model\n     * @default undefined\n     */\n    insertPosition?: InsertPoint;\n\n    /**\n     * Use this to decide whether to change the source model format when doing the merge.\n     * 'mergeAll': segment format of the insert position will be merged into the content that is merged into current model.\n     * If the source model already has some format, it will not be overwritten.\n     * 'keepSourceEmphasisFormat': format of the insert position will be set into the content that is merged into current model.\n     * If the source model already has emphasis format, such as, fontWeight, Italic or underline different than the default style, it will not be overwritten.\n     * 'none' the source segment format will not be modified.\n     * @default undefined\n     */\n    mergeFormat?: 'mergeAll' | 'keepSourceEmphasisFormat' | 'none';\n}\n\n/**\n * Merge source model into target mode\n * @param target Target Content Model that will merge content into\n * @param source Source Content Model will be merged to target model\n * @param context Format context. When call this function inside formatContentModel, provide this context so that formatContentModel will do extra handling to the result\n * @param options More options, see MergeModelOption\n * @returns Insert point after merge, or null if there is no insert point\n */\nexport function mergeModel(\n    target: ContentModelDocument,\n    source: ContentModelDocument,\n    context?: FormatWithContentModelContext,\n    options?: MergeModelOption\n): InsertPoint | null {\n    const insertPosition =\n        options?.insertPosition ?? deleteSelection(target, [], context).insertPoint;\n\n    if (insertPosition) {\n        if (options?.mergeFormat && options.mergeFormat != 'none') {\n            const newFormat: ContentModelSegmentFormat = {\n                ...(target.format || {}),\n                ...insertPosition.marker.format,\n            };\n\n            applyDefaultFormat(source, newFormat, options?.mergeFormat);\n        }\n\n        for (let i = 0; i < source.blocks.length; i++) {\n            const block = source.blocks[i];\n\n            switch (block.blockType) {\n                case 'Paragraph':\n                    mergeParagraph(insertPosition, block, i == 0, context, options);\n                    break;\n\n                case 'Divider':\n                    insertBlock(insertPosition, block);\n                    break;\n\n                case 'Entity':\n                    insertBlock(insertPosition, block);\n                    context?.newEntities.push(block);\n                    break;\n\n                case 'Table':\n                    if (source.blocks.length == 1 && options?.mergeTable) {\n                        mergeTable(insertPosition, block, source);\n                    } else {\n                        insertBlock(insertPosition, block);\n                    }\n                    break;\n\n                case 'BlockGroup':\n                    switch (block.blockGroupType) {\n                        case 'General':\n                        case 'FormatContainer':\n                            insertBlock(insertPosition, block);\n                            break;\n                        case 'ListItem':\n                            mergeList(insertPosition, block);\n                            break;\n                    }\n                    break;\n            }\n        }\n    }\n\n    normalizeContentModel(target);\n\n    return insertPosition;\n}\n\nfunction mergeParagraph(\n    markerPosition: InsertPoint,\n    newPara: ContentModelParagraph,\n    mergeToCurrentParagraph: boolean,\n    context?: FormatWithContentModelContext,\n    option?: MergeModelOption\n) {\n    const { paragraph, marker } = markerPosition;\n    const newParagraph = mergeToCurrentParagraph\n        ? paragraph\n        : splitParagraph(markerPosition, newPara.format);\n    const segmentIndex = newParagraph.segments.indexOf(marker);\n\n    if (option?.mergeFormat == 'none' && mergeToCurrentParagraph) {\n        newParagraph.segments.forEach(segment => {\n            segment.format = { ...(newParagraph.segmentFormat || {}), ...segment.format };\n        });\n        delete newParagraph.segmentFormat;\n    }\n    if (segmentIndex >= 0) {\n        for (let i = 0; i < newPara.segments.length; i++) {\n            const segment = newPara.segments[i];\n\n            newParagraph.segments.splice(segmentIndex + i, 0, segment);\n\n            if (context) {\n                if (segment.segmentType == 'Entity') {\n                    context.newEntities.push(segment);\n                }\n\n                if (segment.segmentType == 'Image') {\n                    context.newImages.push(segment);\n                }\n            }\n        }\n    }\n\n    if (newPara.decorator) {\n        newParagraph.decorator = { ...newPara.decorator };\n        if (HeadingTags.indexOf(newParagraph.decorator.tagName) > -1) {\n            const sourceKeys: (keyof ContentModelSegmentFormat)[] = getObjectKeys(\n                newParagraph.decorator.format\n            );\n            const segmentDecoratorKeys: (keyof ContentModelSegmentFormat)[] = getObjectKeys(\n                newParagraph.segmentFormat || {}\n            );\n\n            sourceKeys.forEach(key => {\n                if (segmentDecoratorKeys.indexOf(key) > -1) {\n                    delete newParagraph.segmentFormat?.[key];\n                }\n            });\n        }\n    }\n\n    if (!mergeToCurrentParagraph) {\n        newParagraph.format = newPara.format;\n    }\n}\n\nfunction mergeTable(\n    markerPosition: InsertPoint,\n    newTable: ContentModelTable,\n    source: ContentModelDocument\n) {\n    const { tableContext, marker } = markerPosition;\n\n    if (tableContext && source.blocks.length == 1 && source.blocks[0] == newTable) {\n        const { table, colIndex, rowIndex } = tableContext;\n        for (let i = 0; i < newTable.rows.length; i++) {\n            for (let j = 0; j < newTable.rows[i].cells.length; j++) {\n                const newCell = newTable.rows[i].cells[j];\n\n                if (i == 0 && colIndex + j >= table.rows[0].cells.length) {\n                    for (let k = 0; k < table.rows.length; k++) {\n                        const leftCell = table.rows[k]?.cells[colIndex + j - 1];\n                        table.rows[k].cells[colIndex + j] = createTableCell(\n                            false /*spanLeft*/,\n                            false /*spanAbove*/,\n                            leftCell?.isHeader,\n                            leftCell?.format\n                        );\n                    }\n                }\n\n                if (j == 0 && rowIndex + i >= table.rows.length) {\n                    if (!table.rows[rowIndex + i]) {\n                        table.rows[rowIndex + i] = {\n                            cells: [],\n                            format: {},\n                            height: 0,\n                        };\n                    }\n\n                    for (let k = 0; k < table.rows[rowIndex].cells.length; k++) {\n                        const aboveCell = table.rows[rowIndex + i - 1]?.cells[k];\n                        table.rows[rowIndex + i].cells[k] = createTableCell(\n                            false /*spanLeft*/,\n                            false /*spanAbove*/,\n                            false /*isHeader*/,\n                            aboveCell?.format\n                        );\n                    }\n                }\n\n                const oldCell = table.rows[rowIndex + i].cells[colIndex + j];\n                table.rows[rowIndex + i].cells[colIndex + j] = newCell;\n\n                if (i == 0 && j == 0) {\n                    const newMarker = createSelectionMarker(marker.format);\n                    const newPara = addSegment(newCell, newMarker);\n\n                    if (markerPosition.path[0] == oldCell) {\n                        // Update insert point to match the change result\n                        markerPosition.path[0] = newCell;\n                        markerPosition.marker = newMarker;\n                        markerPosition.paragraph = newPara;\n                    }\n                }\n            }\n        }\n\n        normalizeTable(table, markerPosition.marker.format);\n        applyTableFormat(table, undefined /*newFormat*/, true /*keepCellShade*/);\n    } else {\n        insertBlock(markerPosition, newTable);\n    }\n}\n\nfunction mergeList(markerPosition: InsertPoint, newList: ContentModelListItem) {\n    splitParagraph(markerPosition, newList.format);\n\n    const { path, paragraph } = markerPosition;\n\n    const listItemIndex = getClosestAncestorBlockGroupIndex(path, ['ListItem']);\n    const listItem = path[listItemIndex] as ContentModelListItem;\n    const listParent = path[listItemIndex + 1]; // It is ok here when index is -1, that means there is no list and we just insert a new paragraph and use path[0] as its parent\n    const blockIndex = listParent.blocks.indexOf(listItem || paragraph);\n\n    if (blockIndex >= 0) {\n        listParent.blocks.splice(blockIndex, 0, newList);\n    }\n\n    if (listItem) {\n        listItem?.levels.forEach((level, i) => {\n            newList.levels[i] = { ...level };\n        });\n    }\n}\n\nfunction splitParagraph(markerPosition: InsertPoint, newParaFormat: ContentModelBlockFormat) {\n    const { paragraph, marker, path } = markerPosition;\n    const segmentIndex = paragraph.segments.indexOf(marker);\n    const paraIndex = path[0].blocks.indexOf(paragraph);\n    const newParagraph = createParagraph(\n        false /*isImplicit*/,\n        { ...paragraph.format, ...newParaFormat },\n        paragraph.segmentFormat\n    );\n\n    if (segmentIndex >= 0) {\n        newParagraph.segments = paragraph.segments.splice(segmentIndex);\n    }\n\n    if (paraIndex >= 0) {\n        path[0].blocks.splice(paraIndex + 1, 0, newParagraph);\n    }\n\n    const listItemIndex = getClosestAncestorBlockGroupIndex(\n        path,\n        ['ListItem'],\n        ['FormatContainer', 'TableCell']\n    );\n    const listItem = path[listItemIndex] as ContentModelListItem;\n\n    if (listItem) {\n        const listParent = listItemIndex >= 0 ? path[listItemIndex + 1] : null;\n        const blockIndex = listParent ? listParent.blocks.indexOf(listItem) : -1;\n\n        if (blockIndex >= 0 && listParent) {\n            const newListItem = createListItem(listItem.levels, listItem.formatHolder.format);\n\n            if (paraIndex >= 0) {\n                newListItem.blocks = listItem.blocks.splice(paraIndex + 1);\n            }\n\n            if (blockIndex >= 0) {\n                listParent.blocks.splice(blockIndex + 1, 0, newListItem);\n            }\n\n            path[listItemIndex] = newListItem;\n        }\n    }\n\n    markerPosition.paragraph = newParagraph;\n\n    return newParagraph;\n}\n\nfunction insertBlock(markerPosition: InsertPoint, block: ContentModelBlock) {\n    const { path } = markerPosition;\n    const newParaFormat = block.blockType !== 'Paragraph' ? {} : block.format;\n    const newPara = splitParagraph(markerPosition, newParaFormat);\n    const blockIndex = path[0].blocks.indexOf(newPara);\n\n    if (blockIndex >= 0) {\n        path[0].blocks.splice(blockIndex, 0, block);\n    }\n}\n\nfunction applyDefaultFormat(\n    group: ContentModelBlockGroup,\n    format: ContentModelSegmentFormat,\n    applyDefaultFormatOption: 'mergeAll' | 'keepSourceEmphasisFormat'\n) {\n    group.blocks.forEach(block => {\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem') {\n                    block.formatHolder.format = mergeSegmentFormat(\n                        applyDefaultFormatOption,\n                        format,\n                        block.formatHolder.format\n                    );\n                }\n                applyDefaultFormat(block, format, applyDefaultFormatOption);\n                break;\n\n            case 'Table':\n                block.rows.forEach(row =>\n                    row.cells.forEach(cell => {\n                        applyDefaultFormat(cell, format, applyDefaultFormatOption);\n                    })\n                );\n                break;\n\n            case 'Paragraph':\n                const paragraphFormat = block.decorator?.format || {};\n                block.segments.forEach(segment => {\n                    if (segment.segmentType == 'General') {\n                        applyDefaultFormat(segment, format, applyDefaultFormatOption);\n                    }\n\n                    segment.format = mergeSegmentFormat(applyDefaultFormatOption, format, {\n                        ...paragraphFormat,\n                        ...segment.format,\n                    });\n                });\n\n                if (applyDefaultFormatOption === 'keepSourceEmphasisFormat') {\n                    delete block.decorator;\n                }\n                break;\n        }\n    });\n}\n\nfunction mergeSegmentFormat(\n    applyDefaultFormatOption: 'mergeAll' | 'keepSourceEmphasisFormat',\n    targetformat: ContentModelSegmentFormat,\n    sourceFormat: ContentModelSegmentFormat\n): ContentModelSegmentFormat {\n    return applyDefaultFormatOption == 'mergeAll'\n        ? { ...targetformat, ...sourceFormat }\n        : {\n              ...targetformat,\n              ...getSemanticFormat(sourceFormat),\n          };\n}\n\nfunction getSemanticFormat(segmentFormat: ContentModelSegmentFormat): ContentModelSegmentFormat {\n    const result: ContentModelSegmentFormat = {};\n\n    const { fontWeight, italic, underline } = segmentFormat;\n\n    if (fontWeight && fontWeight != 'normal') {\n        result.fontWeight = fontWeight;\n    }\n    if (italic) {\n        result.italic = italic;\n    }\n    if (underline) {\n        result.underline = underline;\n    }\n\n    return result;\n}\n","import { getClosestAncestorBlockGroupIndex } from '../model/getClosestAncestorBlockGroupIndex';\nimport { isBlockGroupOfType } from '../model/isBlockGroupOfType';\nimport { iterateSelections } from './iterateSelections';\nimport type { IterateSelectionsOption } from './iterateSelections';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelBlockGroupType,\n    ContentModelDocument,\n    ContentModelListItem,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelTable,\n    TableSelectionContext,\n} from 'roosterjs-content-model-types';\nimport type { TypeOfBlockGroup } from '../model/getClosestAncestorBlockGroupIndex';\n\n/**\n * Represent a pair of parent block group and child block\n */\nexport type OperationalBlocks<T extends ContentModelBlockGroup> = {\n    /**\n     * The parent block group\n     */\n    parent: ContentModelBlockGroup;\n\n    /**\n     * The child block\n     */\n    block: ContentModelBlock | T;\n};\n\n/**\n * Get an array of selected parent paragraph and child segment pair\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item, in that case paragraph will be null\n */\nexport function getSelectedSegmentsAndParagraphs(\n    model: ContentModelDocument,\n    includingFormatHolder: boolean\n): [ContentModelSegment, ContentModelParagraph | null][] {\n    const selections = collectSelections(model, {\n        includeListFormatHolder: includingFormatHolder ? 'allSegments' : 'never',\n    });\n    const result: [ContentModelSegment, ContentModelParagraph | null][] = [];\n\n    selections.forEach(({ segments, block }) => {\n        if (segments && ((includingFormatHolder && !block) || block?.blockType == 'Paragraph')) {\n            segments.forEach(segment => {\n                if (segment.segmentType != 'Entity' || !segment.entityFormat.isReadonly) {\n                    result.push([segment, block?.blockType == 'Paragraph' ? block : null]);\n                }\n            });\n        }\n    });\n\n    return result;\n}\n\n/**\n * Get an array of selected segments from a content model\n * @param model The Content Model to get selection from\n * @param includingFormatHolder True means also include format holder as segment from list item\n */\nexport function getSelectedSegments(\n    model: ContentModelDocument,\n    includingFormatHolder: boolean\n): ContentModelSegment[] {\n    return getSelectedSegmentsAndParagraphs(model, includingFormatHolder).map(x => x[0]);\n}\n\n/**\n * Get any array of selected paragraphs from a content model\n * @param model The Content Model to get selection from\n */\nexport function getSelectedParagraphs(model: ContentModelDocument): ContentModelParagraph[] {\n    const selections = collectSelections(model, { includeListFormatHolder: 'never' });\n    const result: ContentModelParagraph[] = [];\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ block }) => {\n        if (block?.blockType == 'Paragraph') {\n            result.push(block);\n        }\n    });\n\n    return result;\n}\n\n/**\n * Get an array of block group - block pair that is of the expected block group type from selection\n * @param model The Content Model to get selection from\n * @param blockGroupTypes The expected block group types\n * @param stopTypes Block group types that will stop searching when hit\n * @param deepFirst True means search in deep first, otherwise wide first\n */\nexport function getOperationalBlocks<T extends ContentModelBlockGroup>(\n    model: ContentModelDocument,\n    blockGroupTypes: TypeOfBlockGroup<T>[],\n    stopTypes: ContentModelBlockGroupType[],\n    deepFirst?: boolean\n): OperationalBlocks<T>[] {\n    const result: OperationalBlocks<T>[] = [];\n    const findSequence = deepFirst ? blockGroupTypes.map(type => [type]) : [blockGroupTypes];\n    const selections = collectSelections(model, {\n        includeListFormatHolder: 'never',\n        contentUnderSelectedTableCell: 'ignoreForTable', // When whole table is selected, we treat the table as a single block\n    });\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ path, block }) => {\n        for (let i = 0; i < findSequence.length; i++) {\n            const groupIndex = getClosestAncestorBlockGroupIndex(path, findSequence[i], stopTypes);\n\n            if (groupIndex >= 0) {\n                if (result.filter(x => x.block == path[groupIndex]).length <= 0) {\n                    result.push({\n                        parent: path[groupIndex + 1],\n                        block: path[groupIndex] as T,\n                    });\n                }\n                break;\n            } else if (i == findSequence.length - 1 && block) {\n                result.push({\n                    parent: path[0],\n                    block: block,\n                });\n                break;\n            }\n        }\n    });\n\n    return result;\n}\n\n/**\n * Get the first selected table from content model\n * @param model The Content Model to get selection from\n */\nexport function getFirstSelectedTable(\n    model: ContentModelDocument\n): [ContentModelTable | undefined, ContentModelBlockGroup[]] {\n    const selections = collectSelections(model, { includeListFormatHolder: 'never' });\n    let table: ContentModelTable | undefined;\n    let resultPath: ContentModelBlockGroup[] = [];\n\n    removeUnmeaningfulSelections(selections);\n\n    selections.forEach(({ block, tableContext, path }) => {\n        if (!table) {\n            if (block?.blockType == 'Table') {\n                table = block;\n                resultPath = [...path];\n            } else if (tableContext?.table) {\n                table = tableContext.table;\n\n                const parent = path.filter(\n                    group => group.blocks.indexOf(tableContext.table) >= 0\n                )[0];\n                const index = path.indexOf(parent);\n                resultPath = index >= 0 ? path.slice(index) : [];\n            }\n        }\n    });\n\n    return [table, resultPath];\n}\n\n/**\n * Get the first selected list item from content model\n * @param model The Content Model to get selection from\n */\nexport function getFirstSelectedListItem(\n    model: ContentModelDocument\n): ContentModelListItem | undefined {\n    let listItem: ContentModelListItem | undefined;\n\n    getOperationalBlocks(model, ['ListItem'], ['TableCell']).forEach(r => {\n        if (!listItem && isBlockGroupOfType<ContentModelListItem>(r.block, 'ListItem')) {\n            listItem = r.block;\n        }\n    });\n\n    return listItem;\n}\n\ninterface SelectionInfo {\n    path: ContentModelBlockGroup[];\n    segments?: ContentModelSegment[];\n    block?: ContentModelBlock;\n    tableContext?: TableSelectionContext;\n}\n\nfunction collectSelections(\n    model: ContentModelDocument,\n    option?: IterateSelectionsOption\n): SelectionInfo[] {\n    const selections: SelectionInfo[] = [];\n\n    iterateSelections(\n        model,\n        (path, tableContext, block, segments) => {\n            selections.push({\n                path,\n                tableContext,\n                block,\n                segments,\n            });\n        },\n        option\n    );\n\n    return selections;\n}\n\nfunction removeUnmeaningfulSelections(selections: SelectionInfo[]) {\n    if (\n        selections.length > 1 &&\n        isOnlySelectionMarkerSelected(selections, false /*checkFirstParagraph*/)\n    ) {\n        selections.pop();\n    }\n\n    // Remove head paragraph if first selection marker is the only selection\n    if (\n        selections.length > 1 &&\n        isOnlySelectionMarkerSelected(selections, true /*checkFirstParagraph*/)\n    ) {\n        selections.shift();\n    }\n}\n\nfunction isOnlySelectionMarkerSelected(\n    selections: SelectionInfo[],\n    checkFirstParagraph: boolean\n): boolean {\n    const selection = selections[checkFirstParagraph ? 0 : selections.length - 1];\n\n    if (\n        selection.block?.blockType == 'Paragraph' &&\n        selection.segments &&\n        selection.segments.length > 0\n    ) {\n        const allSegments = selection.block.segments;\n        const segment = selection.segments[0];\n\n        return (\n            selection.segments.length == 1 &&\n            segment.segmentType == 'SelectionMarker' &&\n            segment == allSegments[checkFirstParagraph ? allSegments.length - 1 : 0]\n        );\n    } else {\n        return false;\n    }\n}\n","import type {\n    ContentModelBlock,\n    EntityRemovalOperation,\n    FormatWithContentModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Delete a content model block from current selection\n * @param blocks Array of the block to delete\n * @param blockToDelete The block to delete\n * @param replacement @optional If specified, use this block to replace the deleted block\n * @param context @optional Context object provided by formatContentModel API\n * @param direction @optional Whether this is deleting forward or backward. This is only used for deleting entity.\n * If not specified, only selected entity will be deleted\n */\nexport function deleteBlock(\n    blocks: ContentModelBlock[],\n    blockToDelete: ContentModelBlock,\n    replacement?: ContentModelBlock,\n    context?: FormatWithContentModelContext,\n    direction?: 'forward' | 'backward'\n): boolean {\n    const index = blocks.indexOf(blockToDelete);\n\n    switch (blockToDelete.blockType) {\n        case 'Table':\n        case 'Divider':\n            replacement ? blocks.splice(index, 1, replacement) : blocks.splice(index, 1);\n            return true;\n\n        case 'Entity':\n            const operation: EntityRemovalOperation | undefined = blockToDelete.isSelected\n                ? 'overwrite'\n                : direction == 'forward'\n                ? 'removeFromStart'\n                : direction == 'backward'\n                ? 'removeFromEnd'\n                : undefined;\n\n            if (operation !== undefined) {\n                replacement ? blocks.splice(index, 1, replacement) : blocks.splice(index, 1);\n                context?.deletedEntities.push({\n                    entity: blockToDelete,\n                    operation,\n                });\n            }\n\n            return true;\n\n        case 'BlockGroup':\n            switch (blockToDelete.blockGroupType) {\n                case 'General':\n                    if (replacement) {\n                        blocks.splice(index, 1, replacement);\n                        return true;\n                    } else {\n                        // no op, let browser handle it\n                        return false;\n                    }\n\n                case 'ListItem':\n                case 'FormatContainer':\n                    blocks.splice(index, 1);\n                    return true;\n            }\n    }\n\n    return false;\n}\n","import { deleteSingleChar } from '../../modelApi/edit/deleteSingleChar';\nimport { isWhiteSpacePreserved, normalizeSingleSegment } from 'roosterjs-content-model-dom';\nimport { normalizeText } from '../domUtils/stringUtil';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegment,\n    EntityRemovalOperation,\n    FormatWithContentModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Delete a content model segment from current selection\n * @param paragraph Parent paragraph of the segment to delete\n * @param segmentToDelete The segment to delete\n * @param context @optional Context object provided by formatContentModel API\n * @param direction @optional Whether this is deleting forward or backward. This is only used for deleting entity.\n * If not specified, only selected entity will be deleted\n */\nexport function deleteSegment(\n    paragraph: ContentModelParagraph,\n    segmentToDelete: ContentModelSegment,\n    context?: FormatWithContentModelContext,\n    direction?: 'forward' | 'backward'\n): boolean {\n    const segments = paragraph.segments;\n    const index = segments.indexOf(segmentToDelete);\n    const preserveWhiteSpace = isWhiteSpacePreserved(paragraph);\n    const isForward = direction == 'forward';\n    const isBackward = direction == 'backward';\n\n    if (!preserveWhiteSpace) {\n        normalizePreviousSegment(segments, index);\n    }\n\n    switch (segmentToDelete.segmentType) {\n        case 'Br':\n        case 'Image':\n        case 'SelectionMarker':\n            segments.splice(index, 1);\n            return true;\n\n        case 'Entity':\n            const operation: EntityRemovalOperation | undefined = segmentToDelete.isSelected\n                ? 'overwrite'\n                : isForward\n                ? 'removeFromStart'\n                : isBackward\n                ? 'removeFromEnd'\n                : undefined;\n            if (operation !== undefined) {\n                segments.splice(index, 1);\n                context?.deletedEntities.push({\n                    entity: segmentToDelete,\n                    operation,\n                });\n            }\n\n            return true;\n\n        case 'Text':\n            let text = segmentToDelete.text;\n\n            if (text.length == 0 || segmentToDelete.isSelected) {\n                segments.splice(index, 1);\n            } else if (direction) {\n                text = deleteSingleChar(text, isForward); //  isForward ? text.substring(1) : text.substring(0, text.length - 1);\n\n                if (!preserveWhiteSpace) {\n                    text = normalizeText(text, isForward);\n                }\n\n                if (text == '') {\n                    segments.splice(index, 1);\n                } else {\n                    segmentToDelete.text = text;\n                }\n            }\n\n            return true;\n\n        case 'General':\n            if (segmentToDelete.isSelected) {\n                segments.splice(index, 1);\n                return true;\n            } else {\n                // No op if a general segment is not selected, let browser handle general segment\n                // TODO: Need to revisit this\n                return false;\n            }\n    }\n}\n\nfunction normalizePreviousSegment(segments: ContentModelSegment[], currentIndex: number) {\n    let index = currentIndex - 1;\n\n    while (segments[index]?.segmentType == 'SelectionMarker') {\n        index--;\n    }\n\n    const segment = segments[index];\n\n    if (segment) {\n        normalizeSingleSegment(segment);\n    }\n}\n","import { deleteExpandedSelection } from '../../modelApi/edit/deleteExpandedSelection';\nimport type {\n    ContentModelDocument,\n    DeleteSelectionContext,\n    DeleteSelectionResult,\n    DeleteSelectionStep,\n    FormatWithContentModelContext,\n    ValidDeleteSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Delete selected content from Content Model\n * @param model The model to delete selected content from\n * @param additionalSteps @optional Addition delete steps\n * @param formatContext @optional A context object provided by formatContentModel API\n * @returns A DeleteSelectionResult object to specify the deletion result\n */\nexport function deleteSelection(\n    model: ContentModelDocument,\n    additionalSteps: (DeleteSelectionStep | null)[] = [],\n    formatContext?: FormatWithContentModelContext\n): DeleteSelectionResult {\n    const context = deleteExpandedSelection(model, formatContext);\n\n    additionalSteps.forEach(step => {\n        if (step && isValidDeleteSelectionContext(context)) {\n            step(context);\n        }\n    });\n\n    mergeParagraphAfterDelete(context);\n    return context;\n}\n\nfunction isValidDeleteSelectionContext(\n    context: DeleteSelectionContext\n): context is ValidDeleteSelectionContext {\n    return !!context.insertPoint;\n}\n\n// If we end up with multiple paragraphs impacted, we need to merge them\nfunction mergeParagraphAfterDelete(context: DeleteSelectionContext) {\n    const { insertPoint, deleteResult, lastParagraph, lastTableContext } = context;\n\n    if (\n        insertPoint &&\n        deleteResult != 'notDeleted' &&\n        deleteResult != 'nothingToDelete' &&\n        lastParagraph &&\n        lastParagraph != insertPoint.paragraph &&\n        lastTableContext == insertPoint.tableContext\n    ) {\n        insertPoint.paragraph.segments.push(...lastParagraph.segments);\n        lastParagraph.segments = [];\n    }\n}\n","import type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * Get root node of a given DOM selection\n * For table selection, root node is the selected table\n * For image selection, root node is the selected image\n * For range selection, root node is the common ancestor container node of the selection range\n * @param selection The selection to get root node from\n */\nexport function getSelectionRootNode(selection: DOMSelection | undefined): Node | undefined {\n    return !selection\n        ? undefined\n        : selection.type == 'range'\n        ? selection.range.commonAncestorContainer\n        : selection.type == 'table'\n        ? selection.table\n        : selection.type == 'image'\n        ? selection.image\n        : undefined;\n}\n","import hasSelectionInBlockGroup from './hasSelectionInBlockGroup';\nimport hasSelectionInSegment from './hasSelectionInSegment';\nimport type { ContentModelBlock } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given block\n * @param block The block to check\n */\nexport default function hasSelectionInBlock(block: ContentModelBlock): boolean {\n    switch (block.blockType) {\n        case 'Paragraph':\n            return block.segments.some(hasSelectionInSegment);\n\n        case 'Table':\n            return block.rows.some(row => row.cells.some(hasSelectionInBlockGroup));\n\n        case 'BlockGroup':\n            return hasSelectionInBlockGroup(block);\n\n        case 'Divider':\n        case 'Entity':\n            return !!block.isSelected;\n\n        default:\n            return false;\n    }\n}\n","import hasSelectionInBlock from './hasSelectionInBlock';\nimport type { ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given block\n * @param block The block to check\n */\nexport default function hasSelectionInBlockGroup(group: ContentModelBlockGroup): boolean {\n    if (group.blockGroupType == 'TableCell' && group.isSelected) {\n        return true;\n    }\n\n    if (group.blocks.some(hasSelectionInBlock)) {\n        return true;\n    }\n\n    return false;\n}\n","import hasSelectionInBlock from './hasSelectionInBlock';\nimport type { ContentModelSegment } from 'roosterjs-content-model-types';\n\n/**\n * Check if there is selection within the given segment\n * @param segment The segment to check\n */\nexport default function hasSelectionInSegment(segment: ContentModelSegment): boolean {\n    return (\n        segment.isSelected ||\n        (segment.segmentType == 'General' && segment.blocks.some(hasSelectionInBlock))\n    );\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelBlockWithCache,\n    ContentModelSegment,\n    TableSelectionContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Options for iterateSelections API\n */\nexport interface IterateSelectionsOption {\n    /**\n     * For selected table cell, this property determines how do we handle its content.\n     * include: No matter if table cell is selected, always invoke callback function for selected content (default value)\n     * ignoreForTable: When the whole table is selected we invoke callback for the table (using block parameter) but skip\n     * all its cells and content, otherwise keep invoking callback for table cell and content\n     * ignoreForTableOrCell: If whole table is selected, same with ignoreForTable, or if a table cell is selected, only\n     * invoke callback for the table cell itself but not for its content, otherwise keep invoking callback for content.\n     * @default include\n     */\n    contentUnderSelectedTableCell?: 'include' | 'ignoreForTable' | 'ignoreForTableOrCell';\n\n    /**\n     * For a selected general element, this property determines how do we handle its content.\n     * contentOnly: (Default) When the whole general element is selected, we only invoke callback for its selected content\n     * generalElementOnly: When the whole general element is selected, we only invoke callback for the general element (using block or\n     * segment parameter depends on if it is a block or segment), but skip all its content.\n     * both: When general element is selected, we invoke callback first for its content, then for general element itself\n     */\n    contentUnderSelectedGeneralElement?: 'contentOnly' | 'generalElementOnly' | 'both';\n\n    /**\n     * Whether call the callback for the list item format holder segment\n     * anySegment: call the callback if any segment is selected under a list item\n     * allSegments: call the callback only when all segments under the list item are selected\n     * never: never call the callback for list item format holder\n     * @default allSegments\n     */\n    includeListFormatHolder?: 'anySegment' | 'allSegments' | 'never';\n}\n\n/**\n * The callback function type for iterateSelections\n * @param path The block group path of current selection\n * @param tableContext Table context of current selection\n * @param block Block of current selection\n * @param segments Segments of current selection\n * @returns True to stop iterating, otherwise keep going\n */\nexport type IterateSelectionsCallback = (\n    path: ContentModelBlockGroup[],\n    tableContext?: TableSelectionContext,\n    block?: ContentModelBlock,\n    segments?: ContentModelSegment[]\n) => void | boolean;\n\n/**\n * Iterate all selected elements in a given model\n * @param group The given Content Model to iterate selection from\n * @param callback The callback function to access the selected element\n * @param option Option to determine how to iterate\n */\nexport function iterateSelections(\n    group: ContentModelBlockGroup,\n    callback: IterateSelectionsCallback,\n    option?: IterateSelectionsOption\n): void {\n    const internalCallback: IterateSelectionsCallback = (path, tableContext, block, segments) => {\n        if (!!(block as ContentModelBlockWithCache)?.cachedElement) {\n            // TODO: This is a temporary solution. A better solution would be making all results from iterationSelection() to be readonly,\n            // use a util function to change it to be editable before edit them where we clear its cached element\n            delete (block as ContentModelBlockWithCache).cachedElement;\n        }\n\n        return callback(path, tableContext, block, segments);\n    };\n\n    internalIterateSelections([group], internalCallback, option);\n}\n\nfunction internalIterateSelections(\n    path: ContentModelBlockGroup[],\n    callback: IterateSelectionsCallback,\n    option?: IterateSelectionsOption,\n    table?: TableSelectionContext,\n    treatAllAsSelect?: boolean\n): boolean {\n    const parent = path[0];\n    const includeListFormatHolder = option?.includeListFormatHolder || 'allSegments';\n    const contentUnderSelectedTableCell = option?.contentUnderSelectedTableCell || 'include';\n    const contentUnderSelectedGeneralElement =\n        option?.contentUnderSelectedGeneralElement || 'contentOnly';\n\n    let hasSelectedSegment = false;\n    let hasUnselectedSegment = false;\n\n    for (let i = 0; i < parent.blocks.length; i++) {\n        const block = parent.blocks[i];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                const newPath = [block, ...path];\n\n                if (block.blockGroupType == 'General') {\n                    const isSelected = treatAllAsSelect || block.isSelected;\n                    const handleGeneralContent =\n                        !isSelected ||\n                        contentUnderSelectedGeneralElement == 'both' ||\n                        contentUnderSelectedGeneralElement == 'contentOnly';\n                    const handleGeneralElement =\n                        isSelected &&\n                        (contentUnderSelectedGeneralElement == 'both' ||\n                            contentUnderSelectedGeneralElement == 'generalElementOnly' ||\n                            block.blocks.length == 0);\n\n                    if (\n                        (handleGeneralContent &&\n                            internalIterateSelections(\n                                newPath,\n                                callback,\n                                option,\n                                table,\n                                isSelected\n                            )) ||\n                        (handleGeneralElement && callback(path, table, block))\n                    ) {\n                        return true;\n                    }\n                } else if (\n                    internalIterateSelections(newPath, callback, option, table, treatAllAsSelect)\n                ) {\n                    return true;\n                }\n                break;\n\n            case 'Table':\n                const rows = block.rows;\n                const isWholeTableSelected = rows.every(row =>\n                    row.cells.every(cell => cell.isSelected)\n                );\n\n                if (contentUnderSelectedTableCell != 'include' && isWholeTableSelected) {\n                    if (callback(path, table, block)) {\n                        return true;\n                    }\n                } else {\n                    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                        const row = rows[rowIndex];\n\n                        for (let colIndex = 0; colIndex < row.cells.length; colIndex++) {\n                            const cell = row.cells[colIndex];\n                            if (!cell) {\n                                continue;\n                            }\n\n                            const newTable: TableSelectionContext = {\n                                table: block,\n                                rowIndex,\n                                colIndex,\n                                isWholeTableSelected,\n                            };\n\n                            if (cell.isSelected && callback(path, newTable)) {\n                                return true;\n                            }\n\n                            if (\n                                !cell.isSelected ||\n                                contentUnderSelectedTableCell != 'ignoreForTableOrCell'\n                            ) {\n                                const newPath = [cell, ...path];\n                                const isSelected = treatAllAsSelect || cell.isSelected;\n\n                                if (\n                                    internalIterateSelections(\n                                        newPath,\n                                        callback,\n                                        option,\n                                        newTable,\n                                        isSelected\n                                    )\n                                ) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                break;\n\n            case 'Paragraph':\n                const segments: ContentModelSegment[] = [];\n\n                for (let i = 0; i < block.segments.length; i++) {\n                    const segment = block.segments[i];\n                    const isSelected = treatAllAsSelect || segment.isSelected;\n\n                    if (segment.segmentType == 'General') {\n                        const handleGeneralContent =\n                            !isSelected ||\n                            contentUnderSelectedGeneralElement == 'both' ||\n                            contentUnderSelectedGeneralElement == 'contentOnly';\n                        const handleGeneralElement =\n                            isSelected &&\n                            (contentUnderSelectedGeneralElement == 'both' ||\n                                contentUnderSelectedGeneralElement == 'generalElementOnly' ||\n                                segment.blocks.length == 0);\n\n                        if (\n                            handleGeneralContent &&\n                            internalIterateSelections(\n                                [segment, ...path],\n                                callback,\n                                option,\n                                table,\n                                isSelected\n                            )\n                        ) {\n                            return true;\n                        }\n\n                        if (handleGeneralElement) {\n                            segments.push(segment);\n                        }\n                    } else if (isSelected) {\n                        segments.push(segment);\n                    }\n\n                    if (isSelected) {\n                        hasSelectedSegment = true;\n                    } else {\n                        hasUnselectedSegment = true;\n                    }\n                }\n\n                if (segments.length > 0 && callback(path, table, block, segments)) {\n                    return true;\n                }\n                break;\n\n            case 'Divider':\n            case 'Entity':\n                if ((treatAllAsSelect || block.isSelected) && callback(path, table, block)) {\n                    return true;\n                }\n\n                break;\n        }\n    }\n\n    if (\n        includeListFormatHolder != 'never' &&\n        parent.blockGroupType == 'ListItem' &&\n        hasSelectedSegment &&\n        (!hasUnselectedSegment || includeListFormatHolder == 'anySegment') &&\n        // When whole list item is selected, also add its format holder as selected segment\n        callback(path, table, undefined /*block*/, [parent.formatHolder])\n    ) {\n        return true;\n    }\n\n    return false;\n}\n","import { isGeneralSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n    ContentModelTable,\n    Selectable,\n} from 'roosterjs-content-model-types';\n\n/**\n * Set selection into Content Model. If the Content Model already has selection, existing selection will be overwritten by the new one.\n * @param group The root level group of Content Model\n * @param start The start selected element. If not passed, existing selection of content model will be cleared\n * @param end The end selected element. If not passed, only the start element will be selected. If passed, all elements between start and end elements will be selected\n */\nexport function setSelection(group: ContentModelBlockGroup, start?: Selectable, end?: Selectable) {\n    setSelectionToBlockGroup(group, false /*isInSelection*/, start || null, end || null);\n}\n\nfunction setSelectionToBlockGroup(\n    group: ContentModelBlockGroup,\n    isInSelection: boolean,\n    start: Selectable | null,\n    end: Selectable | null\n): boolean {\n    return handleSelection(isInSelection, group, start, end, isInSelection => {\n        if (isGeneralSegment(group)) {\n            setIsSelected(group, isInSelection);\n        }\n\n        group.blocks.forEach(block => {\n            isInSelection = setSelectionToBlock(block, isInSelection, start, end);\n        });\n\n        return isInSelection;\n    });\n}\n\nfunction setSelectionToBlock(\n    block: ContentModelBlock,\n    isInSelection: boolean,\n    start: Selectable | null,\n    end: Selectable | null\n) {\n    switch (block.blockType) {\n        case 'BlockGroup':\n            return setSelectionToBlockGroup(block, isInSelection, start, end);\n\n        case 'Table':\n            return setSelectionToTable(block, isInSelection, start, end);\n\n        case 'Divider':\n        case 'Entity':\n            return handleSelection(isInSelection, block, start, end, isInSelection => {\n                if (isInSelection) {\n                    block.isSelected = true;\n                } else {\n                    delete block.isSelected;\n                }\n\n                return isInSelection;\n            });\n\n        case 'Paragraph':\n            const segmentsToDelete: number[] = [];\n\n            block.segments.forEach((segment, i) => {\n                isInSelection = handleSelection(\n                    isInSelection,\n                    segment,\n                    start,\n                    end,\n                    isInSelection => {\n                        return setSelectionToSegment(\n                            segment,\n                            isInSelection,\n                            segmentsToDelete,\n                            start,\n                            end,\n                            i\n                        );\n                    }\n                );\n            });\n\n            while (segmentsToDelete.length > 0) {\n                const index = segmentsToDelete.pop()!;\n\n                if (index >= 0) {\n                    block.segments.splice(index, 1);\n                }\n            }\n\n            return isInSelection;\n\n        default:\n            return isInSelection;\n    }\n}\n\nfunction setSelectionToTable(\n    table: ContentModelTable,\n    isInSelection: boolean,\n    start: Selectable | null,\n    end: Selectable | null\n): boolean {\n    const first = findCell(table, start);\n    const last = end ? findCell(table, end) : first;\n\n    if (!isInSelection) {\n        for (let row = 0; row < table.rows.length; row++) {\n            const currentRow = table.rows[row];\n            for (let col = 0; col < currentRow.cells.length; col++) {\n                const currentCell = table.rows[row].cells[col];\n                const isSelected =\n                    row >= first.row && row <= last.row && col >= first.col && col <= last.col;\n\n                setIsSelected(currentCell, isSelected);\n\n                if (!isSelected) {\n                    setSelectionToBlockGroup(currentCell, false /*isInSelection*/, start, end);\n                }\n            }\n        }\n    } else {\n        table.rows.forEach(row =>\n            row.cells.forEach(cell => {\n                isInSelection = setSelectionToBlockGroup(cell, isInSelection, start, end);\n            })\n        );\n    }\n\n    return isInSelection;\n}\n\nfunction findCell(table: ContentModelTable, cell: Selectable | null): { row: number; col: number } {\n    let col = -1;\n    const row = cell\n        ? table.rows.findIndex(row => (col = (row.cells as Selectable[]).indexOf(cell)) >= 0)\n        : -1;\n\n    return { row, col };\n}\n\nfunction setSelectionToSegment(\n    segment: ContentModelSegment,\n    isInSelection: boolean,\n    segmentsToDelete: number[],\n    start: Selectable | null,\n    end: Selectable | null,\n    i: number\n) {\n    switch (segment.segmentType) {\n        case 'SelectionMarker':\n            if (!isInSelection || (segment != start && segment != end)) {\n                // Delete the selection marker when\n                // 1. It is not in selection any more. Or\n                // 2. It is in middle of selection, so no need to have it\n                segmentsToDelete.push(i);\n            }\n            return isInSelection;\n\n        case 'General':\n            setIsSelected(segment, isInSelection);\n\n            return segment != start && segment != end\n                ? setSelectionToBlockGroup(segment, isInSelection, start, end)\n                : isInSelection;\n\n        case 'Image':\n            setIsSelected(segment, isInSelection);\n            segment.isSelectedAsImageSelection = start == segment && (!end || end == segment);\n            return isInSelection;\n        default:\n            setIsSelected(segment, isInSelection);\n            return isInSelection;\n    }\n}\n\nfunction setIsSelected(selectable: Selectable, value: boolean) {\n    if (value) {\n        selectable.isSelected = true;\n    } else {\n        delete selectable.isSelected;\n    }\n\n    return value;\n}\n\nfunction handleSelection(\n    isInSelection: boolean,\n    model: ContentModelBlockGroup | ContentModelBlock | ContentModelSegment,\n    start: Selectable | null,\n    end: Selectable | null,\n    callback: (isInSelection: boolean) => boolean\n) {\n    isInSelection = isInSelection || model == start;\n    isInSelection = callback(isInSelection);\n    return isInSelection && !!end && model != end;\n}\n","import { BorderKeys } from 'roosterjs-content-model-dom';\nimport { combineBorderValue, extractBorderValues } from '../domUtils/borderValues';\nimport { setTableCellBackgroundColor } from './setTableCellBackgroundColor';\nimport { TableBorderFormat } from '../../constants/TableBorderFormat';\nimport { updateTableCellMetadata } from '../../metadata/updateTableCellMetadata';\nimport { updateTableMetadata } from '../../metadata/updateTableMetadata';\nimport type {\n    BorderFormat,\n    ContentModelTable,\n    ContentModelTableRow,\n    TableMetadataFormat,\n} from 'roosterjs-content-model-types';\n\nconst DEFAULT_FORMAT: Required<TableMetadataFormat> = {\n    topBorderColor: '#ABABAB',\n    bottomBorderColor: '#ABABAB',\n    verticalBorderColor: '#ABABAB',\n    hasHeaderRow: false,\n    hasFirstColumn: false,\n    hasBandedRows: false,\n    hasBandedColumns: false,\n    bgColorEven: null,\n    bgColorOdd: '#ABABAB20',\n    headerRowColor: '#ABABAB',\n    tableBorderFormat: TableBorderFormat.Default,\n    verticalAlign: null,\n};\n\ntype MetaOverrides = {\n    bgColorOverrides: boolean[][];\n    vAlignOverrides: boolean[][];\n    borderOverrides: boolean[][];\n};\n\n/**\n * Apply table format from table metadata and the passed in new format\n * @param table The table to apply format to\n * @param newFormat @optional New format to apply. When passed, this value will be merged into existing metadata format and default format\n * @param keepCellShade @optional When pass true, table cells with customized shade color will not be overwritten. @default false\n */\nexport function applyTableFormat(\n    table: ContentModelTable,\n    newFormat?: TableMetadataFormat,\n    keepCellShade?: boolean\n) {\n    const { rows } = table;\n\n    updateTableMetadata(table, format => {\n        const effectiveMetadata = {\n            ...DEFAULT_FORMAT,\n            ...format,\n            ...(newFormat || {}),\n        };\n\n        const metaOverrides: MetaOverrides = updateOverrides(rows, !keepCellShade);\n\n        delete table.cachedElement;\n\n        clearCache(rows);\n        formatCells(rows, effectiveMetadata, metaOverrides);\n        setFirstColumnFormat(rows, effectiveMetadata, metaOverrides);\n        setHeaderRowFormat(rows, effectiveMetadata, metaOverrides);\n        return effectiveMetadata;\n    });\n}\n\nfunction clearCache(rows: ContentModelTableRow[]) {\n    rows.forEach(row => {\n        row.cells.forEach(cell => {\n            delete cell.cachedElement;\n        });\n\n        delete row.cachedElement;\n    });\n}\n\nfunction updateOverrides(rows: ContentModelTableRow[], removeCellShade: boolean): MetaOverrides {\n    const overrides: MetaOverrides = {\n        bgColorOverrides: [],\n        vAlignOverrides: [],\n        borderOverrides: [],\n    };\n\n    rows.forEach(row => {\n        const bgColorOverrides: boolean[] = [];\n        const vAlignOverrides: boolean[] = [];\n        const borderOverrides: boolean[] = [];\n\n        overrides.bgColorOverrides.push(bgColorOverrides);\n        overrides.vAlignOverrides.push(vAlignOverrides);\n        overrides.borderOverrides.push(borderOverrides);\n\n        row.cells.forEach(cell => {\n            updateTableCellMetadata(cell, metadata => {\n                if (metadata && removeCellShade) {\n                    bgColorOverrides.push(false);\n                    delete metadata.bgColorOverride;\n                } else {\n                    bgColorOverrides.push(!!metadata?.bgColorOverride);\n                }\n                vAlignOverrides.push(!!metadata?.vAlignOverride);\n                borderOverrides.push(!!metadata?.borderOverride);\n\n                return metadata;\n            });\n        });\n    });\n\n    return overrides;\n}\n\ntype ShouldUseTransparentBorder = (indexProp: {\n    firstRow: boolean;\n    lastRow: boolean;\n    firstColumn: boolean;\n    lastColumn: boolean;\n}) => [boolean, boolean, boolean, boolean];\n\nconst BorderFormatters: Record<number, ShouldUseTransparentBorder | undefined> = {\n    [TableBorderFormat.Default]: _ => [false, false, false, false],\n    [TableBorderFormat.ListWithSideBorders]: ({ lastColumn, firstColumn }) => [\n        false,\n        !lastColumn,\n        false,\n        !firstColumn,\n    ],\n    [TableBorderFormat.FirstColumnHeaderExternal]: ({\n        firstColumn,\n        firstRow,\n        lastColumn,\n        lastRow,\n    }) => [\n        !firstRow,\n        (!lastColumn && !firstColumn) || (firstColumn && firstRow),\n        !lastRow && !firstRow,\n        !firstColumn,\n    ],\n    [TableBorderFormat.NoHeaderBorders]: ({ firstRow, firstColumn, lastColumn }) => [\n        firstRow,\n        firstRow || lastColumn,\n        false,\n        firstRow || firstColumn,\n    ],\n    [TableBorderFormat.NoSideBorders]: ({ firstColumn, lastColumn }) => [\n        false,\n        lastColumn,\n        false,\n        firstColumn,\n    ],\n    [TableBorderFormat.EspecialType1]: ({ firstRow, firstColumn }) => [\n        firstColumn && !firstRow,\n        firstRow,\n        firstColumn && !firstRow,\n        firstRow && !firstColumn,\n    ],\n    [TableBorderFormat.EspecialType2]: ({ firstRow, firstColumn }) => [\n        !firstRow,\n        firstRow || !firstColumn,\n        !firstRow,\n        !firstColumn,\n    ],\n    [TableBorderFormat.EspecialType3]: ({ firstColumn, firstRow }) => [\n        true,\n        firstRow || !firstColumn,\n        !firstRow,\n        true,\n    ],\n    [TableBorderFormat.Clear]: () => [true, true, true, true],\n};\n\n/*\n * Apply vertical align, borders, and background color to all cells in the table\n */\nfunction formatCells(\n    rows: ContentModelTableRow[],\n    format: TableMetadataFormat,\n    metaOverrides: MetaOverrides\n) {\n    const { hasBandedRows, hasBandedColumns, bgColorOdd, bgColorEven } = format;\n\n    rows.forEach((row, rowIndex) => {\n        row.cells.forEach((cell, colIndex) => {\n            // Format Borders\n            if (\n                !metaOverrides.borderOverrides[rowIndex][colIndex] &&\n                typeof format.tableBorderFormat == 'number'\n            ) {\n                const transparentBorderMatrix = BorderFormatters[format.tableBorderFormat]?.({\n                    firstRow: rowIndex === 0,\n                    lastRow: rowIndex === rows.length - 1,\n                    firstColumn: colIndex === 0,\n                    lastColumn: colIndex === row.cells.length - 1,\n                });\n\n                const formatColor = [\n                    format.topBorderColor,\n                    format.verticalBorderColor,\n                    format.bottomBorderColor,\n                    format.verticalBorderColor,\n                ];\n\n                transparentBorderMatrix?.forEach((alwaysUseTransparent, i) => {\n                    const borderColor = (!alwaysUseTransparent && formatColor[i]) || '';\n\n                    cell.format[BorderKeys[i]] = combineBorderValue({\n                        style: getBorderStyleFromColor(borderColor),\n                        width: '1px',\n                        color: borderColor,\n                    });\n                });\n            }\n\n            // Format Background Color\n            if (!metaOverrides.bgColorOverrides[rowIndex][colIndex]) {\n                const color =\n                    hasBandedRows || hasBandedColumns\n                        ? (hasBandedColumns && colIndex % 2 != 0) ||\n                          (hasBandedRows && rowIndex % 2 != 0)\n                            ? bgColorOdd\n                            : bgColorEven\n                        : bgColorEven; /* bgColorEven is the default color */\n\n                setTableCellBackgroundColor(\n                    cell,\n                    color,\n                    false /*isColorOverride*/,\n                    true /*applyToSegments*/\n                );\n            }\n\n            // Format Vertical Align\n            if (format.verticalAlign && !metaOverrides.vAlignOverrides[rowIndex][colIndex]) {\n                cell.format.verticalAlign = format.verticalAlign;\n            }\n        });\n    });\n}\n\nfunction setFirstColumnFormat(\n    rows: ContentModelTableRow[],\n    format: Partial<TableMetadataFormat>,\n    metaOverrides: MetaOverrides\n) {\n    rows.forEach((row, rowIndex) => {\n        row.cells.forEach((cell, cellIndex) => {\n            if (format.hasFirstColumn && cellIndex === 0) {\n                cell.isHeader = true;\n\n                if (rowIndex !== 0 && !metaOverrides.bgColorOverrides[rowIndex][cellIndex]) {\n                    setBorderColor(cell.format, 'borderTop');\n                    setTableCellBackgroundColor(\n                        cell,\n                        null /*color*/,\n                        false /*isColorOverride*/,\n                        true /*applyToSegments*/\n                    );\n                }\n\n                if (rowIndex !== rows.length - 1 && rowIndex !== 0) {\n                    setBorderColor(cell.format, 'borderBottom');\n                }\n            } else {\n                cell.isHeader = false;\n            }\n        });\n    });\n}\n\nfunction setHeaderRowFormat(\n    rows: ContentModelTableRow[],\n    format: TableMetadataFormat,\n    metaOverrides: MetaOverrides\n) {\n    const rowIndex = 0;\n\n    rows[rowIndex]?.cells.forEach((cell, cellIndex) => {\n        cell.isHeader = format.hasHeaderRow;\n\n        if (format.hasHeaderRow && format.headerRowColor) {\n            if (!metaOverrides.bgColorOverrides[rowIndex][cellIndex]) {\n                setTableCellBackgroundColor(\n                    cell,\n                    format.headerRowColor,\n                    false /*isColorOverride*/,\n                    true /*applyToSegments*/\n                );\n            }\n\n            setBorderColor(cell.format, 'borderTop', format.headerRowColor);\n            setBorderColor(cell.format, 'borderRight', format.headerRowColor);\n            setBorderColor(cell.format, 'borderLeft', format.headerRowColor);\n        }\n    });\n}\n\nfunction setBorderColor(format: BorderFormat, key: keyof BorderFormat, value?: string) {\n    const border = extractBorderValues(format[key]);\n    border.color = value || '';\n    border.style = getBorderStyleFromColor(border.color);\n    format[key] = combineBorderValue(border);\n}\n\nfunction getBorderStyleFromColor(color?: string): string {\n    return !color || color == 'transparent' ? 'none' : 'solid';\n}\n","import hasSelectionInBlockGroup from '../selection/hasSelectionInBlockGroup';\nimport type { ContentModelTable, TableSelectionCoordinates } from 'roosterjs-content-model-types';\n\n/**\n * Get selection coordinates of a table. If there is no selection, return null\n * @param table The table model to get selection from\n */\nexport function getSelectedCells(table: ContentModelTable): TableSelectionCoordinates | null {\n    let firstRow = -1;\n    let firstColumn = -1;\n    let lastRow = -1;\n    let lastColumn = -1;\n    let hasSelection = false;\n\n    table.rows.forEach((row, rowIndex) =>\n        row.cells.forEach((cell, colIndex) => {\n            if (hasSelectionInBlockGroup(cell)) {\n                hasSelection = true;\n\n                if (firstRow < 0) {\n                    firstRow = rowIndex;\n                }\n\n                if (firstColumn < 0) {\n                    firstColumn = colIndex;\n                }\n\n                lastRow = Math.max(lastRow, rowIndex);\n                lastColumn = Math.max(lastColumn, colIndex);\n            }\n        })\n    );\n\n    return hasSelection ? { firstRow, firstColumn, lastRow, lastColumn } : null;\n}\n","import { addBlock, addSegment, createBr, createParagraph } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n    ContentModelTable,\n    ContentModelTableCell,\n} from 'roosterjs-content-model-types';\n\nconst MIN_HEIGHT = 22;\n\n/**\n * Normalize a Content Model table, make sure:\n * 1. Fist cells are not spanned\n * 2. Inner cells are not header\n * 3. All cells have content and width\n * 4. Table and table row have correct width/height\n * 5. Spanned cell has no child blocks\n * 6. default format is correctly applied\n * @param table The table to normalize\n * @param defaultSegmentFormat @optional Default segment format to apply to cell\n */\nexport function normalizeTable(\n    table: ContentModelTable,\n    defaultSegmentFormat?: ContentModelSegmentFormat\n) {\n    // Always collapse border and use border box for table in roosterjs to make layout simpler\n    const format = table.format;\n\n    if (!format.borderCollapse || !format.useBorderBox) {\n        format.borderCollapse = true;\n        format.useBorderBox = true;\n    }\n\n    // Make sure all first cells are not spanned\n    // Make sure all inner cells are not header\n    // Make sure all cells have content and width\n    table.rows.forEach((row, rowIndex) => {\n        row.cells.forEach((cell, colIndex) => {\n            if (cell.blocks.length == 0) {\n                const format = cell.format.textColor\n                    ? {\n                          ...defaultSegmentFormat,\n                          textColor: cell.format.textColor,\n                      }\n                    : defaultSegmentFormat;\n                addBlock(\n                    cell,\n                    createParagraph(undefined /*isImplicit*/, undefined /*blockFormat*/, format)\n                );\n                addSegment(cell, createBr(format));\n            }\n\n            if (rowIndex == 0) {\n                cell.spanAbove = false;\n            } else if (rowIndex > 0 && cell.isHeader) {\n                cell.isHeader = false;\n                delete cell.cachedElement;\n            }\n\n            if (colIndex == 0) {\n                cell.spanLeft = false;\n            }\n\n            cell.format.useBorderBox = true;\n        });\n\n        // Make sure table has correct width and height array\n        if (row.height < MIN_HEIGHT) {\n            row.height = MIN_HEIGHT;\n        }\n    });\n\n    const columns = Math.max(...table.rows.map(row => row.cells.length));\n\n    for (let i = 0; i < columns; i++) {\n        if (table.widths[i] === undefined) {\n            table.widths[i] = getTableCellWidth(columns);\n        }\n    }\n\n    // Move blocks from spanned cell to its main cell if any,\n    // and remove rows/columns if all cells in it are spanned\n    const colCount = table.rows[0]?.cells.length || 0;\n\n    for (let colIndex = colCount - 1; colIndex > 0; colIndex--) {\n        table.rows.forEach(row => {\n            const cell = row.cells[colIndex];\n            const leftCell = row.cells[colIndex - 1];\n            if (cell && leftCell && cell.spanLeft) {\n                tryMoveBlocks(leftCell, cell);\n            }\n        });\n\n        if (table.rows.every(row => row.cells[colIndex]?.spanLeft)) {\n            table.rows.forEach(row => row.cells.splice(colIndex, 1));\n            table.widths.splice(\n                colIndex - 1,\n                2,\n                table.widths[colIndex - 1] + table.widths[colIndex]\n            );\n        }\n    }\n\n    for (let rowIndex = table.rows.length - 1; rowIndex > 0; rowIndex--) {\n        const row = table.rows[rowIndex];\n\n        row.cells.forEach((cell, colIndex) => {\n            const aboveCell = table.rows[rowIndex - 1]?.cells[colIndex];\n            if (aboveCell && cell.spanAbove) {\n                tryMoveBlocks(aboveCell, cell);\n            }\n        });\n\n        if (row.cells.every(cell => cell.spanAbove)) {\n            table.rows[rowIndex - 1].height += row.height;\n            table.rows.splice(rowIndex, 1);\n        }\n    }\n}\n\nfunction getTableCellWidth(columns: number): number {\n    if (columns <= 4) {\n        return 120;\n    } else if (columns <= 6) {\n        return 100;\n    } else {\n        return 70;\n    }\n}\n\nfunction tryMoveBlocks(targetCell: ContentModelTableCell, sourceCell: ContentModelTableCell) {\n    const onlyHasEmptyOrBr = sourceCell.blocks.every(\n        block => block.blockType == 'Paragraph' && hasOnlyBrSegment(block.segments)\n    );\n\n    if (!onlyHasEmptyOrBr) {\n        targetCell.blocks.push(...sourceCell.blocks);\n        sourceCell.blocks = [];\n    }\n}\n\nfunction hasOnlyBrSegment(segments: ContentModelSegment[]): boolean {\n    segments = segments.filter(s => s.segmentType != 'SelectionMarker');\n\n    return segments.length == 0 || (segments.length == 1 && segments[0].segmentType == 'Br');\n}\n","import { updateTableCellMetadata } from '../../metadata/updateTableCellMetadata';\nimport type { ContentModelTableCell } from 'roosterjs-content-model-types';\n\n// Using the HSL (hue, saturation and lightness) representation for RGB color values.\n// If the value of the lightness is less than 20, the color is dark.\n// If the value of the lightness is more than 80, the color is bright\nconst DARK_COLORS_LIGHTNESS = 20;\nconst BRIGHT_COLORS_LIGHTNESS = 80;\nconst White = '#ffffff';\nconst Black = '#000000';\n\n/**\n * Set shade color of table cell\n * @param cell The cell to set shade color to\n * @param color The color to set\n * @param isColorOverride @optional When pass true, it means this shade color is not part of table format, so it can be preserved when apply table format\n * @param applyToSegments @optional When pass true, we will also apply text color from table cell to its child blocks and segments\n */\nexport function setTableCellBackgroundColor(\n    cell: ContentModelTableCell,\n    color: string | null | undefined,\n    isColorOverride?: boolean,\n    applyToSegments?: boolean\n) {\n    if (color) {\n        cell.format.backgroundColor = color;\n\n        if (isColorOverride) {\n            updateTableCellMetadata(cell, metadata => {\n                metadata = metadata || {};\n                metadata.bgColorOverride = true;\n                return metadata;\n            });\n        }\n\n        const lightness = calculateLightness(color);\n\n        if (lightness < DARK_COLORS_LIGHTNESS) {\n            cell.format.textColor = White;\n        } else if (lightness > BRIGHT_COLORS_LIGHTNESS) {\n            cell.format.textColor = Black;\n        } else {\n            delete cell.format.textColor;\n        }\n\n        if (applyToSegments) {\n            setAdaptiveCellColor(cell);\n        }\n    } else {\n        delete cell.format.backgroundColor;\n        delete cell.format.textColor;\n        if (applyToSegments) {\n            removeAdaptiveCellColor(cell);\n        }\n    }\n\n    delete cell.cachedElement;\n}\n\nfunction removeAdaptiveCellColor(cell: ContentModelTableCell) {\n    cell.blocks.forEach(block => {\n        if (block.blockType == 'Paragraph') {\n            if (\n                block.segmentFormat?.textColor &&\n                shouldRemoveColor(block.segmentFormat?.textColor, cell.format.backgroundColor || '')\n            ) {\n                delete block.segmentFormat.textColor;\n            }\n            block.segments.forEach(segment => {\n                if (\n                    segment.format.textColor &&\n                    shouldRemoveColor(segment.format.textColor, cell.format.backgroundColor || '')\n                ) {\n                    delete segment.format.textColor;\n                }\n            });\n        }\n    });\n}\n\nfunction setAdaptiveCellColor(cell: ContentModelTableCell) {\n    if (cell.format.textColor) {\n        cell.blocks.forEach(block => {\n            if (block.blockType == 'Paragraph') {\n                if (!block.segmentFormat?.textColor) {\n                    block.segmentFormat = {\n                        ...block.segmentFormat,\n                        textColor: cell.format.textColor,\n                    };\n                }\n                block.segments.forEach(segment => {\n                    if (!segment.format?.textColor) {\n                        segment.format = {\n                            ...segment.format,\n                            textColor: cell.format.textColor,\n                        };\n                    }\n                });\n            }\n        });\n    }\n}\n\n/**\n * If the cell background color is too dark or too bright, and the text color is white or black, we should remove the text color\n * @param textColor the segment or block text color\n * @param cellBackgroundColor the cell background color\n * @returns\n */\nfunction shouldRemoveColor(textColor: string, cellBackgroundColor: string) {\n    const lightness = calculateLightness(cellBackgroundColor);\n    if (\n        ([White, 'rgb(255,255,255)'].indexOf(textColor) > -1 &&\n            (lightness > BRIGHT_COLORS_LIGHTNESS || cellBackgroundColor == '')) ||\n        ([Black, 'rgb(0,0,0)'].indexOf(textColor) > -1 &&\n            (lightness < DARK_COLORS_LIGHTNESS || cellBackgroundColor == ''))\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction calculateLightness(color: string) {\n    const colorValues = parseColor(color);\n\n    // Use the values of r,g,b to calculate the lightness in the HSl representation\n    //First calculate the fraction of the light in each color, since in css the value of r,g,b is in the interval of [0,255], we have\n    if (colorValues) {\n        const red = colorValues[0] / 255;\n        const green = colorValues[1] / 255;\n        const blue = colorValues[2] / 255;\n\n        //Then the lightness in the HSL representation is the average between maximum fraction of r,g,b and the minimum fraction\n        return (Math.max(red, green, blue) + Math.min(red, green, blue)) * 50;\n    } else {\n        return 255;\n    }\n}\n\nconst HEX3_REGEX = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/;\nconst HEX6_REGEX = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/;\nconst RGB_REGEX = /^rgb\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*\\)$/;\nconst RGBA_REGEX = /^rgba\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*\\)$/;\n\n/**\n * @internal Export for test only\n * Parse color string to r/g/b value.\n * If the given color is not in a recognized format, return null\n */\nexport function parseColor(color: string): [number, number, number] | null {\n    color = (color || '').trim();\n\n    let match: RegExpMatchArray | null;\n    if ((match = color.match(HEX3_REGEX))) {\n        return [\n            parseInt(match[1] + match[1], 16),\n            parseInt(match[2] + match[2], 16),\n            parseInt(match[3] + match[3], 16),\n        ];\n    } else if ((match = color.match(HEX6_REGEX))) {\n        return [parseInt(match[1], 16), parseInt(match[2], 16), parseInt(match[3], 16)];\n    } else if ((match = color.match(RGB_REGEX) || color.match(RGBA_REGEX))) {\n        return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n    } else {\n        // CSS color names such as red, green is not included for now.\n        // If need, we can add those colors from https://www.w3.org/wiki/CSS/Properties/color/keywords\n        return null;\n    }\n}\n","import type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Redo to next undo snapshot\n * @param editor The editor to undo with\n */\nexport function redo(editor: IStandaloneEditor): void {\n    editor.focus();\n\n    const manager = editor.getSnapshotsManager();\n    const snapshot = manager.move(1);\n\n    if (snapshot) {\n        editor.restoreSnapshot(snapshot);\n    }\n}\n","import type { IStandaloneEditor } from 'roosterjs-content-model-types';\n\n/**\n * Undo to last undo snapshot\n * @param editor The editor to undo with\n */\nexport function undo(editor: IStandaloneEditor): void {\n    editor.focus();\n\n    const manager = editor.getSnapshotsManager();\n\n    if (manager.hasNewContent) {\n        editor.takeSnapshot();\n    }\n\n    const snapshot = manager.move(-1);\n\n    if (snapshot) {\n        editor.restoreSnapshot(snapshot);\n    }\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { DOMSelection, SnapshotSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function createSnapshotSelection(\n    contentDiv: HTMLElement,\n    selection: DOMSelection | null\n): SnapshotSelection {\n    switch (selection?.type) {\n        case 'image':\n            return {\n                type: 'image',\n                imageId: selection.image.id,\n            };\n\n        case 'table':\n            return {\n                type: 'table',\n                tableId: selection.table.id,\n                firstColumn: selection.firstColumn,\n                lastColumn: selection.lastColumn,\n                firstRow: selection.firstRow,\n                lastRow: selection.lastRow,\n            };\n\n        case 'range':\n            const range = selection.range;\n\n            return {\n                type: 'range',\n                start: getPath(range.startContainer, range.startOffset, contentDiv),\n                end: getPath(range.endContainer, range.endOffset, contentDiv),\n            };\n\n        default:\n            return {\n                type: 'range',\n                start: [],\n                end: [],\n            };\n    }\n}\n\n/**\n * Get the path of the node relative to rootNode.\n * The path of the node is an array of integer indices into the childNodes of the given node.\n *\n * The node path will be what the node path will be on a _normalized_ dom\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\n *\n * @param rootNode the node the path will be relative to\n * @param position the position to get indexes from. Follows the same semantics\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\n * If node is of type Element, it is the index of a child in that Element node.)\n */\nfunction getPath(node: Node | null, offset: number, rootNode: Node): number[] {\n    const result: number[] = [];\n    let parent: Node | null;\n\n    if (!node || !rootNode.contains(node)) {\n        return result;\n    }\n\n    if (isNodeOfType(node, 'TEXT_NODE')) {\n        parent = node.parentNode;\n\n        while (node.previousSibling && isNodeOfType(node.previousSibling, 'TEXT_NODE')) {\n            offset += node.previousSibling.nodeValue?.length || 0;\n            node = node.previousSibling;\n        }\n\n        result.unshift(offset);\n    } else {\n        parent = node;\n        node = node.childNodes[offset];\n    }\n\n    do {\n        offset = 0;\n        let isPreviousText = false;\n\n        for (let c: Node | null = parent?.firstChild || null; c && c != node; c = c.nextSibling) {\n            if (isNodeOfType(c, 'TEXT_NODE')) {\n                if (c.nodeValue?.length === 0 || isPreviousText) {\n                    continue;\n                }\n\n                isPreviousText = true;\n            } else {\n                isPreviousText = false;\n            }\n\n            offset++;\n        }\n\n        result.unshift(offset);\n        node = parent;\n        parent = parent?.parentNode || null;\n    } while (node && node != rootNode);\n\n    return result;\n}\n","import { readFile } from '../publicApi/domUtils/readFile';\nimport type { ClipboardData, EdgeLinkPreview } from 'roosterjs-content-model-types';\n\nconst ContentHandlers: {\n    [contentType: string]: (data: ClipboardData, value: string, type?: string) => void;\n} = {\n    ['text/html']: (data, value) => (data.rawHtml = value),\n    ['text/plain']: (data, value) => (data.text = value),\n    ['text/*']: (data, value, type?) => !!type && (data.customValues[type] = value),\n    ['text/link-preview']: tryParseLinkPreview,\n};\n\n/**\n * @internal\n * Extract clipboard items to be a ClipboardData object for IE\n * @param items The clipboard items retrieve from a DataTransfer object\n * @param allowedCustomPasteType Allowed custom content type when paste besides text/plain, text/html and images\n    Only text types are supported, and do not add \"text/\" prefix to the type values\n */\nexport function extractClipboardItems(\n    items: DataTransferItem[],\n    allowedCustomPasteType?: string[]\n): Promise<ClipboardData> {\n    const data: ClipboardData = {\n        types: [],\n        text: '',\n        image: null,\n        files: [],\n        rawHtml: null,\n        customValues: {},\n        pasteNativeEvent: true,\n    };\n\n    return Promise.all(\n        (items || []).map(item => {\n            const type = item.type;\n\n            if (type.indexOf('image/') == 0 && !data.image && item.kind == 'file') {\n                data.types.push(type);\n                data.image = item.getAsFile();\n                return new Promise<void>(resolve => {\n                    if (data.image) {\n                        readFile(data.image, dataUrl => {\n                            data.imageDataUri = dataUrl;\n                            resolve();\n                        });\n                    } else {\n                        resolve();\n                    }\n                });\n            } else if (item.kind == 'file') {\n                return new Promise<void>(resolve => {\n                    const file = item.getAsFile();\n                    if (!!file) {\n                        data.types.push(type);\n                        data.files!.push(file);\n                    }\n                    resolve();\n                });\n            } else {\n                const customType = getAllowedCustomType(type, allowedCustomPasteType);\n                const handler =\n                    ContentHandlers[type] || (customType ? ContentHandlers['text/*'] : null);\n                return new Promise<void>(resolve =>\n                    handler\n                        ? item.getAsString(value => {\n                              data.types.push(type);\n                              handler(data, value, customType);\n                              resolve();\n                          })\n                        : resolve()\n                );\n            }\n        })\n    ).then(() => data);\n}\n\nfunction tryParseLinkPreview(data: ClipboardData, value: string) {\n    try {\n        data.customValues['link-preview'] = value;\n        data.linkPreview = JSON.parse(value) as EdgeLinkPreview;\n    } catch {}\n}\n\nfunction getAllowedCustomType(type: string, allowedCustomPasteType?: string[]) {\n    const textType = type.indexOf('text/') == 0 ? type.substring('text/'.length) : null;\n    const index =\n        allowedCustomPasteType && textType ? allowedCustomPasteType.indexOf(textType) : -1;\n    return textType && index >= 0 ? textType : undefined;\n}\n","import { toArray } from 'roosterjs-content-model-dom';\nimport type { CssRule } from './retrieveHtmlInfo';\n\n/**\n * @internal\n */\nexport function convertInlineCss(root: ParentNode, cssRules: CssRule[]) {\n    for (let i = cssRules.length - 1; i >= 0; i--) {\n        const { selectors, text } = cssRules[i];\n\n        for (const selector of selectors) {\n            if (!selector || !selector.trim() || selector.indexOf(':') >= 0) {\n                continue;\n            }\n\n            const nodes = toArray(root.querySelectorAll(selector));\n\n            // Always put existing styles after so that they have higher priority\n            // Which means if both global style and inline style apply to the same element,\n            // inline style will have higher priority\n            nodes.forEach(node =>\n                node.setAttribute('style', text + (node.getAttribute('style') || ''))\n            );\n        }\n    }\n}\n","import { moveChildNodes, wrap } from 'roosterjs-content-model-dom';\nimport type { ClipboardData, PasteType } from 'roosterjs-content-model-types';\n\nconst NBSP_HTML = '\\u00A0';\nconst ENSP_HTML = '\\u2002';\nconst TAB_SPACES = 6;\n\n/**\n * @internal\n */\nexport function createPasteFragment(\n    document: Document,\n    clipboardData: ClipboardData,\n    pasteType: PasteType,\n    root: HTMLElement | undefined\n): DocumentFragment {\n    const { imageDataUri, text } = clipboardData;\n    const fragment = document.createDocumentFragment();\n\n    if (\n        (pasteType == 'asImage' && imageDataUri) ||\n        (pasteType != 'asPlainText' && !text && imageDataUri)\n    ) {\n        // Paste image\n        const img = document.createElement('img');\n        img.style.maxWidth = '100%';\n        img.src = imageDataUri;\n        fragment.appendChild(img);\n    } else if (pasteType != 'asPlainText' && root) {\n        moveChildNodes(fragment, root);\n    } else if (text) {\n        text.split('\\n').forEach((line, index, lines) => {\n            line = line\n                .replace(/^ /g, NBSP_HTML)\n                .replace(/ $/g, NBSP_HTML)\n                .replace(/\\r/g, '')\n                .replace(/ {2}/g, ' ' + NBSP_HTML);\n\n            if (line.includes('\\t')) {\n                line = transformTabCharacters(line);\n            }\n\n            const textNode = document.createTextNode(line);\n\n            // There are 3 scenarios:\n            // 1. Single line: Paste as it is\n            // 2. Two lines: Add <br> between the lines\n            // 3. 3 or More lines, For first and last line, paste as it is. For middle lines, wrap with DIV, and add BR if it is empty line\n            if (lines.length == 2 && index == 0) {\n                // 1 of 2 lines scenario, add BR\n                fragment.appendChild(textNode);\n                fragment.appendChild(document.createElement('br'));\n            } else if (index > 0 && index < lines.length - 1) {\n                // Middle line of >=3 lines scenario, wrap with DIV\n                fragment.appendChild(\n                    wrap(document, line == '' ? document.createElement('br') : textNode, 'div')\n                );\n            } else {\n                // All others, paste as it is\n                fragment.appendChild(textNode);\n            }\n        });\n    }\n\n    return fragment;\n}\n\n/**\n * Transform \\t characters into EN SPACE characters\n * @param input string NOT containing \\n characters\n * @example t(\"\\thello\", 2) => \"&ensp;&ensp;&ensp;&ensp;hello\"\n */\nfunction transformTabCharacters(input: string, initialOffset: number = 0) {\n    let line = input;\n    let tIndex: number;\n    while ((tIndex = line.indexOf('\\t')) != -1) {\n        const lineBefore = line.slice(0, tIndex);\n        const lineAfter = line.slice(tIndex + 1);\n        const tabCount = TAB_SPACES - ((lineBefore.length + initialOffset) % TAB_SPACES);\n        const tabStr = Array(tabCount).fill(ENSP_HTML).join('');\n        line = lineBefore + tabStr + lineAfter;\n    }\n    return line;\n}\n","import { PasteType as OldPasteType, PluginEventType } from 'roosterjs-editor-types';\nimport type { HtmlFromClipboard } from './retrieveHtmlInfo';\nimport type {\n    ClipboardData,\n    ContentModelBeforePasteEvent,\n    DomToModelOptionForPaste,\n    PasteType,\n    StandaloneEditorCore,\n} from 'roosterjs-content-model-types';\n\n// Map new PasteType to old PasteType\n// TODO: We can remove this once we have standalone editor\nconst PasteTypeMap: Record<PasteType, OldPasteType> = {\n    asImage: OldPasteType.AsImage,\n    asPlainText: OldPasteType.AsPlainText,\n    mergeFormat: OldPasteType.MergeFormat,\n    normal: OldPasteType.Normal,\n};\n\n/**\n * @internal\n */\nexport function generatePasteOptionFromPlugins(\n    core: StandaloneEditorCore,\n    clipboardData: ClipboardData,\n    fragment: DocumentFragment,\n    htmlFromClipboard: HtmlFromClipboard,\n    pasteType: PasteType\n): ContentModelBeforePasteEvent {\n    const domToModelOption: DomToModelOptionForPaste = {\n        additionalAllowedTags: [],\n        additionalDisallowedTags: [],\n        additionalFormatParsers: {},\n        formatParserOverride: {},\n        processorOverride: {},\n    };\n\n    const event: ContentModelBeforePasteEvent = {\n        eventType: PluginEventType.BeforePaste,\n        clipboardData,\n        fragment,\n        htmlBefore: htmlFromClipboard.htmlBefore ?? '',\n        htmlAfter: htmlFromClipboard.htmlAfter ?? '',\n        htmlAttributes: htmlFromClipboard.metadata,\n        pasteType: PasteTypeMap[pasteType],\n        domToModelOption,\n\n        // Deprecated\n        sanitizingOption: {\n            elementCallbacks: {},\n            attributeCallbacks: {},\n            cssStyleCallbacks: {},\n            additionalTagReplacements: {},\n            additionalAllowedAttributes: [],\n            additionalAllowedCssClasses: [],\n            additionalDefaultStyleValues: {},\n            additionalGlobalStyleNodes: [],\n            additionalPredefinedCssForElement: {},\n            preserveHtmlComments: false,\n            unknownTagReplacement: null,\n        },\n    };\n\n    if (pasteType !== 'asPlainText') {\n        core.api.triggerEvent(core, event, true /* broadcast */);\n    }\n\n    return event;\n}\n","import { createDomToModelContext, domToContentModel } from 'roosterjs-content-model-dom';\nimport { createPasteEntityProcessor } from '../../override/pasteEntityProcessor';\nimport { createPasteGeneralProcessor } from '../../override/pasteGeneralProcessor';\nimport { getSegmentTextFormat } from '../../publicApi/domUtils/getSegmentTextFormat';\nimport { getSelectedSegments } from '../../publicApi/selection/collectSelections';\nimport { mergeModel } from '../../publicApi/model/mergeModel';\nimport { pasteDisplayFormatParser } from '../../override/pasteDisplayFormatParser';\nimport { PasteType } from 'roosterjs-editor-types';\nimport type { MergeModelOption } from '../../publicApi/model/mergeModel';\nimport type {\n    ContentModelBeforePasteEvent,\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n    DomToModelOption,\n    FormatWithContentModelContext,\n} from 'roosterjs-content-model-types';\n\nconst EmptySegmentFormat: Required<ContentModelSegmentFormat> = {\n    backgroundColor: '',\n    fontFamily: '',\n    fontSize: '',\n    fontWeight: '',\n    italic: false,\n    letterSpacing: '',\n    lineHeight: '',\n    strikethrough: false,\n    superOrSubScriptSequence: '',\n    textColor: '',\n    underline: false,\n};\n\n/**\n * @internal\n */\nexport function mergePasteContent(\n    model: ContentModelDocument,\n    context: FormatWithContentModelContext,\n    eventResult: ContentModelBeforePasteEvent,\n    defaultDomToModelOptions: DomToModelOption\n) {\n    const { fragment, domToModelOption, customizedMerge, pasteType } = eventResult;\n    const selectedSegment = getSelectedSegments(model, true /*includeFormatHolder*/)[0];\n    const domToModelContext = createDomToModelContext(\n        undefined /*editorContext*/,\n        defaultDomToModelOptions,\n        {\n            processorOverride: {\n                entity: createPasteEntityProcessor(domToModelOption),\n                '*': createPasteGeneralProcessor(domToModelOption),\n            },\n            formatParserOverride: {\n                display: pasteDisplayFormatParser,\n            },\n        },\n        domToModelOption\n    );\n\n    domToModelContext.segmentFormat = selectedSegment ? getSegmentTextFormat(selectedSegment) : {};\n\n    const pasteModel = domToContentModel(fragment, domToModelContext);\n    const mergeOption: MergeModelOption = {\n        mergeFormat: pasteType == PasteType.MergeFormat ? 'keepSourceEmphasisFormat' : 'none',\n        mergeTable: shouldMergeTable(pasteModel),\n    };\n\n    const insertPoint = customizedMerge\n        ? customizedMerge(model, pasteModel)\n        : mergeModel(model, pasteModel, context, mergeOption);\n\n    if (insertPoint) {\n        context.newPendingFormat = {\n            ...EmptySegmentFormat,\n            ...model.format,\n            ...insertPoint.marker.format,\n        };\n    }\n}\n\nfunction shouldMergeTable(pasteModel: ContentModelDocument): boolean | undefined {\n    // If model contains a table and a paragraph element after the table with a single BR segment, remove the Paragraph after the table\n    if (\n        pasteModel.blocks.length == 2 &&\n        pasteModel.blocks[0].blockType === 'Table' &&\n        pasteModel.blocks[1].blockType === 'Paragraph' &&\n        pasteModel.blocks[1].segments.length === 1 &&\n        pasteModel.blocks[1].segments[0].segmentType === 'Br'\n    ) {\n        pasteModel.blocks.splice(1);\n    }\n    // Only merge table when the document contain a single table.\n    return pasteModel.blocks.length === 1 && pasteModel.blocks[0].blockType === 'Table';\n}\n","import { isNodeOfType, toArray } from 'roosterjs-content-model-dom';\nimport type { ClipboardData } from 'roosterjs-content-model-types';\n\nconst START_FRAGMENT = '<!--StartFragment-->';\nconst END_FRAGMENT = '<!--EndFragment-->';\n\n/**\n * @internal\n */\nexport interface CssRule {\n    selectors: string[];\n    text: string;\n}\n\n/**\n * @internal\n */\nexport interface HtmlFromClipboard {\n    metadata: Record<string, string>;\n    globalCssRules: CssRule[];\n    htmlBefore?: string;\n    htmlAfter?: string;\n}\n\n/**\n * @internal\n */\nexport function retrieveHtmlInfo(\n    doc: Document | null,\n    clipboardData: Partial<ClipboardData>\n): HtmlFromClipboard {\n    let result: HtmlFromClipboard = {\n        metadata: {},\n        globalCssRules: [],\n    };\n\n    if (doc) {\n        result = {\n            ...retrieveHtmlStrings(clipboardData),\n            globalCssRules: retrieveCssRules(doc),\n            metadata: retrieveMetadata(doc),\n        };\n\n        clipboardData.htmlFirstLevelChildTags = retrieveTopLevelTags(doc);\n    }\n\n    return result;\n}\n\nfunction retrieveTopLevelTags(doc: Document): string[] {\n    const topLevelTags: string[] = [];\n\n    for (let child = doc.body.firstChild; child; child = child.nextSibling) {\n        if (isNodeOfType(child, 'TEXT_NODE')) {\n            const trimmedString = child.nodeValue?.replace(/(\\r\\n|\\r|\\n)/gm, '').trim();\n\n            if (trimmedString) {\n                topLevelTags.push(''); // Push an empty string as tag for text node\n            }\n        } else if (isNodeOfType(child, 'ELEMENT_NODE')) {\n            topLevelTags.push(child.tagName);\n        }\n    }\n\n    return topLevelTags;\n}\n\nfunction retrieveMetadata(doc: Document): Record<string, string> {\n    const result: Record<string, string> = {};\n    const attributes = doc.querySelector('html')?.attributes;\n\n    (attributes ? toArray(attributes) : []).forEach(attr => {\n        result[attr.name] = attr.value;\n    });\n\n    toArray(doc.querySelectorAll('meta')).forEach(meta => {\n        result[meta.name] = meta.content;\n    });\n\n    return result;\n}\n\nfunction retrieveCssRules(doc: Document): CssRule[] {\n    const styles = toArray(doc.querySelectorAll('style'));\n    const result: CssRule[] = [];\n\n    styles.forEach(styleNode => {\n        const sheet = styleNode.sheet as CSSStyleSheet;\n\n        for (let ruleIndex = 0; ruleIndex < sheet.cssRules.length; ruleIndex++) {\n            const rule = sheet.cssRules[ruleIndex] as CSSStyleRule;\n\n            if (rule.type == CSSRule.STYLE_RULE && rule.selectorText) {\n                result.push({\n                    selectors: rule.selectorText.split(','),\n                    text: rule.style.cssText,\n                });\n            }\n        }\n\n        styleNode.parentNode?.removeChild(styleNode);\n    });\n\n    return result;\n}\n\nfunction retrieveHtmlStrings(\n    clipboardData: Partial<ClipboardData>\n): {\n    htmlBefore: string;\n    htmlAfter: string;\n} {\n    const rawHtml = clipboardData.rawHtml ?? '';\n    const startIndex = rawHtml.indexOf(START_FRAGMENT);\n    const endIndex = rawHtml.lastIndexOf(END_FRAGMENT);\n    let htmlBefore = '';\n    let htmlAfter = '';\n\n    if (startIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\n        htmlBefore = rawHtml.substring(0, startIndex);\n        htmlAfter = rawHtml.substring(endIndex + END_FRAGMENT.length);\n        clipboardData.html = rawHtml.substring(startIndex + START_FRAGMENT.length, endIndex);\n    } else {\n        clipboardData.html = rawHtml;\n    }\n\n    return { htmlBefore, htmlAfter };\n}\n","import { transformColor } from '../publicApi/color/transformColor';\nimport type { StandaloneEditorCore, Snapshot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function restoreSnapshotColors(core: StandaloneEditorCore, snapshot: Snapshot) {\n    const isDarkMode = core.lifecycle.isDarkMode;\n    const darkColorHandler = core.darkColorHandler;\n\n    snapshot.knownColors.forEach(color => {\n        darkColorHandler.registerColor(color.lightModeColor, isDarkMode, color.darkModeColor);\n    });\n\n    if (!!snapshot.isDarkMode != !!isDarkMode) {\n        transformColor(\n            core.contentDiv,\n            false /*includeSelf*/,\n            isDarkMode ? 'lightToDark' : 'darkToLight',\n            darkColorHandler\n        );\n    }\n}\n","import {\n    getAllEntityWrappers,\n    isEntityElement,\n    isNodeOfType,\n    parseEntityClassName,\n    reuseCachedElement,\n} from 'roosterjs-content-model-dom';\nimport type {\n    Snapshot,\n    StandaloneEditorCore,\n    KnownEntityItem,\n    ContentModelEntityFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function restoreSnapshotHTML(core: StandaloneEditorCore, snapshot: Snapshot) {\n    const {\n        contentDiv,\n        entity: { entityMap },\n    } = core;\n    let refNode: Node | null = contentDiv.firstChild;\n\n    const body = new DOMParser().parseFromString(\n        core.trustedHTMLHandler?.(snapshot.html) ?? snapshot.html,\n        'text/html'\n    ).body;\n\n    for (let currentNode = body.firstChild; currentNode; ) {\n        const next = currentNode.nextSibling;\n        const originalEntityElement = tryGetEntityElement(entityMap, currentNode);\n\n        if (originalEntityElement) {\n            refNode = reuseCachedElement(contentDiv, originalEntityElement, refNode);\n        } else {\n            contentDiv.insertBefore(currentNode, refNode);\n\n            if (isNodeOfType(currentNode, 'ELEMENT_NODE')) {\n                const childEntities = getAllEntityWrappers(currentNode);\n\n                childEntities.forEach(element => {\n                    const wrapper = tryGetEntityElement(entityMap, element);\n\n                    if (wrapper) {\n                        if (wrapper == refNode) {\n                            // In case the node we are moving is just the ref node,\n                            // We create a temporary clone and insert it before the refNode, the use this cloned node as refNode\n                            // Then after replaceChild(), the original refNode will be moved away\n                            const markerNode = wrapper.cloneNode();\n\n                            contentDiv.insertBefore(markerNode, refNode);\n                            refNode = markerNode;\n                        }\n\n                        element.parentNode?.replaceChild(wrapper, element);\n                    }\n                });\n            }\n        }\n        currentNode = next;\n    }\n\n    while (refNode) {\n        const next = refNode.nextSibling;\n\n        refNode.parentNode?.removeChild(refNode);\n        refNode = next;\n    }\n}\n\nfunction tryGetEntityElement(\n    entityMap: Record<string, KnownEntityItem>,\n    node: Node\n): HTMLElement | null {\n    let result: HTMLElement | null = null;\n\n    if (isNodeOfType(node, 'ELEMENT_NODE') && isEntityElement(node)) {\n        const format: ContentModelEntityFormat = {};\n\n        node.classList.forEach(name => {\n            parseEntityClassName(name, format);\n        });\n\n        result = (format.id && entityMap[format.id]?.element) || null;\n    }\n\n    return result;\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\nimport type { DOMSelection, StandaloneEditorCore, Snapshot } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function restoreSnapshotSelection(core: StandaloneEditorCore, snapshot: Snapshot) {\n    const snapshotSelection = snapshot.selection;\n    const { contentDiv } = core;\n    let domSelection: DOMSelection | null = null;\n\n    if (snapshotSelection) {\n        switch (snapshotSelection.type) {\n            case 'range':\n                const startPos = getPositionFromPath(contentDiv, snapshotSelection.start);\n                const endPos = getPositionFromPath(contentDiv, snapshotSelection.end);\n                const range = contentDiv.ownerDocument.createRange();\n\n                range.setStart(startPos.node, startPos.offset);\n                range.setEnd(endPos.node, endPos.offset);\n\n                domSelection = {\n                    type: 'range',\n                    range,\n                };\n                break;\n            case 'table':\n                const table = contentDiv.querySelector(\n                    '#' + snapshotSelection.tableId\n                ) as HTMLTableElement;\n\n                if (table) {\n                    domSelection = {\n                        type: 'table',\n                        table: table,\n                        firstColumn: snapshotSelection.firstColumn,\n                        firstRow: snapshotSelection.firstRow,\n                        lastColumn: snapshotSelection.lastColumn,\n                        lastRow: snapshotSelection.lastRow,\n                    };\n                }\n                break;\n            case 'image':\n                const image = contentDiv.querySelector(\n                    '#' + snapshotSelection.imageId\n                ) as HTMLImageElement;\n\n                if (image) {\n                    domSelection = {\n                        type: 'image',\n                        image: image,\n                    };\n                }\n                break;\n        }\n    }\n\n    if (domSelection) {\n        core.api.setDOMSelection(core, domSelection);\n    }\n}\n\nfunction getPositionFromPath(node: Node, path: number[]): { node: Node; offset: number } {\n    // Iterate with a for loop to avoid mutating the passed in element path stack\n    // or needing to copy it.\n    let offset: number = 0;\n\n    for (let i = 0; i < path.length; i++) {\n        offset = path[i];\n\n        if (\n            i < path.length - 1 &&\n            node &&\n            isNodeOfType(node, 'ELEMENT_NODE') &&\n            node.childNodes.length > offset\n        ) {\n            node = node.childNodes[offset];\n        } else {\n            break;\n        }\n    }\n\n    return { node, offset };\n}\n","import { isNodeOfType } from 'roosterjs-content-model-dom';\n\n/**\n * @internal\n */\nexport const AllowedTags: ReadonlyArray<string> = [\n    'a',\n    'abbr',\n    'address',\n    'area',\n    'article',\n    'aside',\n    'b',\n    'bdi',\n    'bdo',\n    'blockquote',\n    'body',\n    'br',\n    'button',\n    'canvas',\n    'caption',\n    'center',\n    'cite',\n    'code',\n    'col',\n    'colgroup',\n    'data',\n    'datalist',\n    'dd',\n    'del',\n    'details',\n    'dfn',\n    'dialog',\n    'dir',\n    'div',\n    'dl',\n    'dt',\n    'em',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'font',\n    'footer',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'head',\n    'header',\n    'hgroup',\n    'hr',\n    'html',\n    'i',\n    'img',\n    'input',\n    'ins',\n    'kbd',\n    'label',\n    'legend',\n    'li',\n    'main',\n    'map',\n    'mark',\n    'menu',\n    'menuitem',\n    'meter',\n    'nav',\n    'ol',\n    'optgroup',\n    'option',\n    'output',\n    'p',\n    'picture',\n    'pre',\n    'progress',\n    'q',\n    'rp',\n    'rt',\n    'ruby',\n    's',\n    'samp',\n    'section',\n    'select',\n    'small',\n    'span',\n    'strike',\n    'strong',\n    'sub',\n    'summary',\n    'sup',\n    'table',\n    'tbody',\n    'td',\n    'textarea',\n    'tfoot',\n    'th',\n    'thead',\n    'time',\n    'tr',\n    'tt',\n    'u',\n    'ul',\n    'var',\n    'wbr',\n    'xmp',\n];\n\n/**\n * @internal\n */\nexport const DisallowedTags: ReadonlyArray<string> = [\n    'applet',\n    'audio',\n    'base',\n    'basefont',\n    'embed',\n    'frame',\n    'frameset',\n    'iframe',\n    'link',\n    'meta',\n    'noscript',\n    'object',\n    'param',\n    'script',\n    'slot',\n    'source',\n    'style',\n    'template',\n    'title',\n    'track',\n    'video',\n];\n\nconst VARIABLE_REGEX = /^\\s*var\\(\\s*[a-zA-Z0-9-_]+\\s*(,\\s*(.*))?\\)\\s*$/;\nconst VARIABLE_PREFIX = 'var(';\n\nconst AllowedAttributes = [\n    'accept',\n    'align',\n    'alt',\n    'checked',\n    'cite',\n    'class',\n    'color',\n    'cols',\n    'colspan',\n    'contextmenu',\n    'coords',\n    'datetime',\n    'default',\n    'dir',\n    'dirname',\n    'disabled',\n    'download',\n    'face',\n    'headers',\n    'height',\n    'hidden',\n    'high',\n    'href',\n    'hreflang',\n    'ismap',\n    'kind',\n    'label',\n    'lang',\n    'list',\n    'low',\n    'max',\n    'maxlength',\n    'media',\n    'min',\n    'multiple',\n    'open',\n    'optimum',\n    'pattern',\n    'placeholder',\n    'readonly',\n    'rel',\n    'required',\n    'reversed',\n    'rows',\n    'rowspan',\n    'scope',\n    'selected',\n    'shape',\n    'size',\n    'sizes',\n    'span',\n    'spellcheck',\n    'src',\n    'srclang',\n    'srcset',\n    'start',\n    'step',\n    'style',\n    'tabindex',\n    'target',\n    'title',\n    'translate',\n    'type',\n    'usemap',\n    'valign',\n    'value',\n    'width',\n    'wrap',\n    'bgColor',\n];\n\nconst DefaultStyleValue: { [name: string]: string } = {\n    'background-color': 'transparent',\n    'border-bottom-color': 'rgb(0, 0, 0)',\n    'border-bottom-style': 'none',\n    'border-bottom-width': '0px',\n    'border-image-outset': '0',\n    'border-image-repeat': 'stretch',\n    'border-image-slice': '100%',\n    'border-image-source': 'none',\n    'border-image-width': '1',\n    'border-left-color': 'rgb(0, 0, 0)',\n    'border-left-style': 'none',\n    'border-left-width': '0px',\n    'border-right-color': 'rgb(0, 0, 0)',\n    'border-right-style': 'none',\n    'border-right-width': '0px',\n    'border-top-color': 'rgb(0, 0, 0)',\n    'border-top-style': 'none',\n    'border-top-width': '0px',\n    'outline-color': 'transparent',\n    'outline-style': 'none',\n    'outline-width': '0px',\n    overflow: 'visible',\n    '-webkit-text-stroke-width': '0px',\n    'word-wrap': 'break-word',\n    'margin-left': '0px',\n    'margin-right': '0px',\n    padding: '0px',\n    'padding-top': '0px',\n    'padding-left': '0px',\n    'padding-right': '0px',\n    'padding-bottom': '0px',\n    border: '0px',\n    'border-top': '0px',\n    'border-left': '0px',\n    'border-right': '0px',\n    'border-bottom': '0px',\n    'vertical-align': 'baseline',\n    float: 'none',\n    'font-style': 'normal',\n    'font-variant-ligatures': 'normal',\n    'font-variant-caps': 'normal',\n    'font-weight': '400',\n    'letter-spacing': 'normal',\n    orphans: '2',\n    'text-align': 'start',\n    'text-indent': '0px',\n    'text-transform': 'none',\n    widows: '2',\n    'word-spacing': '0px',\n    'white-space': 'normal',\n};\n\n/**\n * @internal\n */\nexport function sanitizeElement(\n    element: HTMLElement,\n    allowedTags: ReadonlyArray<string>,\n    disallowedTags: ReadonlyArray<string>,\n    styleCallbacks?: Record<string, (value: string, tagName: string) => string | null>\n): HTMLElement | null {\n    const tag = element.tagName.toLowerCase();\n    const sanitizedElement =\n        disallowedTags.indexOf(tag) >= 0\n            ? null\n            : createSanitizedElement(\n                  element.ownerDocument,\n                  allowedTags.indexOf(tag) >= 0 ? tag : 'span',\n                  element.attributes,\n                  styleCallbacks\n              );\n\n    if (sanitizedElement) {\n        for (let child = element.firstChild; child; child = child.nextSibling) {\n            const newChild = isNodeOfType(child, 'ELEMENT_NODE')\n                ? sanitizeElement(child, allowedTags, disallowedTags, styleCallbacks)\n                : isNodeOfType(child, 'TEXT_NODE')\n                ? child.cloneNode()\n                : null;\n\n            if (newChild) {\n                sanitizedElement?.appendChild(newChild);\n            }\n        }\n    }\n\n    return sanitizedElement;\n}\n\n/**\n * @internal\n */\nexport function createSanitizedElement(\n    doc: Document,\n    tag: string,\n    attributes: NamedNodeMap,\n    styleCallbacks?: Record<string, (value: string, tagName: string) => string | null>\n): HTMLElement {\n    const element = doc.createElement(tag);\n\n    for (let i = 0; i < attributes.length; i++) {\n        const attribute = attributes[i];\n        const name = attribute.name.toLowerCase().trim();\n        const value = attribute.value;\n\n        const newValue =\n            name == 'style'\n                ? processStyles(tag, value, styleCallbacks)\n                : AllowedAttributes.indexOf(name) >= 0 || name.indexOf('data-') == 0\n                ? value\n                : null;\n\n        if (\n            newValue !== null &&\n            newValue !== undefined &&\n            !newValue.match(/s\\n*c\\n*r\\n*i\\n*p\\n*t\\n*:/i) // match script: with any NewLine inside. Browser will ignore those NewLine char and still treat it as script prefix\n        ) {\n            element.setAttribute(name, newValue);\n        }\n    }\n\n    return element;\n}\n\n/**\n * @internal\n */\nexport function removeStyle(): string | null {\n    return null;\n}\n\n/**\n * @internal\n */\nexport function removeDisplayFlex(value: string) {\n    return value == 'flex' ? null : value;\n}\n\nfunction processStyles(\n    tagName: string,\n    value: string,\n    styleCallbacks?: Record<string, (value: string, tagName: string) => string | null>\n) {\n    const pairs = value.split(';');\n    const result: string[] = [];\n\n    pairs.forEach(pair => {\n        const valueIndex = pair.indexOf(':');\n        const name = pair.slice(0, valueIndex).trim();\n        let value: string | null = pair.slice(valueIndex + 1).trim();\n\n        if (name && value) {\n            if (isCssVariable(value)) {\n                value = processCssVariable(value);\n            }\n\n            const callback = styleCallbacks?.[name];\n\n            if (callback) {\n                value = callback(value, tagName);\n            }\n\n            if (\n                !!value &&\n                value != 'inherit' &&\n                value != 'initial' &&\n                value.indexOf('expression') < 0 &&\n                !name.startsWith('-') &&\n                DefaultStyleValue[name] != value\n            ) {\n                result.push(`${name}:${value}`);\n            }\n        }\n    });\n\n    return result.join(';');\n}\n\nfunction processCssVariable(value: string): string {\n    const match = VARIABLE_REGEX.exec(value);\n    return match?.[2] || ''; // Without fallback value, we don't know what does the original value mean, so ignore it\n}\n\nfunction isCssVariable(value: string): boolean {\n    return value.indexOf(VARIABLE_PREFIX) == 0;\n}\n","import type { DefaultImplicitFormatMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * A map from tag name to its default implicit formats\n */\nexport const defaultContentModelFormatMap: DefaultImplicitFormatMap = {\n    a: {\n        underline: true,\n    },\n    blockquote: {\n        marginTop: '1em',\n        marginBottom: '1em',\n        marginLeft: '40px',\n        marginRight: '40px',\n    },\n    code: {\n        fontFamily: 'monospace',\n    },\n    h1: {\n        fontWeight: 'bold',\n        fontSize: '2em',\n    },\n    h2: {\n        fontWeight: 'bold',\n        fontSize: '1.5em',\n    },\n    h3: {\n        fontWeight: 'bold',\n        fontSize: '1.17em',\n    },\n    h4: {\n        fontWeight: 'bold',\n        fontSize: '1em', // Set this default value here to overwrite existing font size when change heading level\n    },\n    h5: {\n        fontWeight: 'bold',\n        fontSize: '0.83em',\n    },\n    h6: {\n        fontWeight: 'bold',\n        fontSize: '0.67em',\n    },\n    p: {\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    pre: {\n        fontFamily: 'monospace',\n        whiteSpace: 'pre',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n};\n","import type { DefaultStyleMap } from 'roosterjs-content-model-types';\n\nconst blockElement: Partial<CSSStyleDeclaration> = {\n    display: 'block',\n};\n\n/**\n * @internal\n */\nexport const defaultHTMLStyleMap: DefaultStyleMap = {\n    address: blockElement,\n    article: blockElement,\n    aside: blockElement,\n    b: {\n        fontWeight: 'bold',\n    },\n    blockquote: {\n        display: 'block',\n        marginTop: '1em',\n        marginBottom: '1em',\n        marginLeft: '40px',\n        marginRight: '40px',\n    },\n    br: blockElement,\n    center: {\n        display: 'block',\n        textAlign: 'center',\n    },\n    dd: blockElement,\n    div: blockElement,\n    dl: blockElement,\n    dt: blockElement,\n    em: {\n        fontStyle: 'italic',\n    },\n    fieldset: blockElement,\n    figcaption: blockElement,\n    figure: blockElement,\n    footer: blockElement,\n    form: blockElement,\n    h1: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '2em',\n    },\n    h2: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '1.5em',\n    },\n    h3: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '1.17em',\n    },\n    h4: {\n        display: 'block',\n        fontWeight: 'bold',\n    },\n    h5: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '0.83em',\n    },\n    h6: {\n        display: 'block',\n        fontWeight: 'bold',\n        fontSize: '0.67em',\n    },\n    header: blockElement,\n    hr: blockElement,\n    i: {\n        fontStyle: 'italic',\n    },\n    li: {\n        display: 'list-item',\n    },\n    main: blockElement,\n    nav: blockElement,\n    ol: blockElement,\n    p: {\n        display: 'block',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    pre: {\n        display: 'block',\n        fontFamily: 'monospace',\n        whiteSpace: 'pre',\n        marginTop: '1em',\n        marginBottom: '1em',\n    },\n    s: {\n        textDecoration: 'line-through',\n    },\n    section: blockElement,\n    strike: {\n        textDecoration: 'line-through',\n    },\n    strong: {\n        fontWeight: 'bold',\n    },\n    sub: {\n        verticalAlign: 'sub',\n        fontSize: 'smaller',\n    },\n    sup: {\n        verticalAlign: 'super',\n        fontSize: 'smaller',\n    },\n    table: {\n        display: 'table',\n        boxSizing: 'border-box',\n    },\n    td: {\n        display: 'table-cell',\n    },\n    th: {\n        display: 'table-cell',\n    },\n    u: {\n        textDecoration: 'underline',\n    },\n    ul: blockElement,\n};\n","import { defaultProcessorMap } from './defaultProcessors';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport {\n    defaultFormatKeysPerCategory,\n    defaultFormatParsers,\n} from '../../formatHandlers/defaultFormatHandlers';\nimport type {\n    ContentModelBlockFormat,\n    DomToModelContext,\n    DomToModelDecoratorContext,\n    DomToModelFormatContext,\n    DomToModelOption,\n    DomToModelSelectionContext,\n    DomToModelSettings,\n    EditorContext,\n    FormatParser,\n    FormatParsers,\n    FormatParsersPerCategory,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create context object for DOM to Content Model conversion\n * @param editorContext Context of editor\n * @param options Option array to customize the DOM to Model conversion behavior\n */\nexport function createDomToModelContext(\n    editorContext?: EditorContext,\n    ...options: (DomToModelOption | undefined)[]\n): DomToModelContext {\n    return createDomToModelContextWithConfig(createDomToModelConfig(options), editorContext);\n}\n\n/**\n * Create context object for DOM to Content Model conversion with an existing configure\n * @param config A full config object to define how to convert DOM tree to Content Model\n * @param editorContext Context of editor\n */\nexport function createDomToModelContextWithConfig(\n    config: DomToModelSettings,\n    editorContext?: EditorContext\n) {\n    return Object.assign(\n        {},\n        editorContext,\n        createDomToModelSelectionContext(),\n        createDomToModelFormatContext(editorContext?.isRootRtl),\n        createDomToModelDecoratorContext(),\n        config\n    );\n}\n\nfunction createDomToModelSelectionContext(): DomToModelSelectionContext {\n    return { isInSelection: false };\n}\n\nfunction createDomToModelFormatContext(isRootRtl?: boolean): DomToModelFormatContext {\n    const blockFormat: ContentModelBlockFormat = isRootRtl ? { direction: 'rtl' } : {};\n\n    return {\n        blockFormat,\n        segmentFormat: {},\n\n        listFormat: {\n            levels: [],\n            threadItemCounts: [],\n        },\n    };\n}\n\nfunction createDomToModelDecoratorContext(): DomToModelDecoratorContext {\n    return {\n        link: {\n            format: {},\n            dataset: {},\n        },\n        code: {\n            format: {},\n        },\n        blockDecorator: {\n            format: {},\n            tagName: '',\n        },\n    };\n}\n\n/**\n * Create Dom to Content Model Config object\n * @param options All customizations of content model creation\n */\nexport function createDomToModelConfig(\n    options: (DomToModelOption | undefined)[]\n): DomToModelSettings {\n    return {\n        elementProcessors: Object.assign(\n            {},\n            defaultProcessorMap,\n            ...options.map(x => x?.processorOverride)\n        ),\n        formatParsers: buildFormatParsers(\n            options.map(x => x?.formatParserOverride),\n            options.map(x => x?.additionalFormatParsers)\n        ),\n        defaultElementProcessors: defaultProcessorMap,\n        defaultFormatParsers,\n    };\n}\n\n/**\n * @internal Export for test only\n * Build format parsers used by DOM to Content Model conversion\n * @param override\n * @param additionalParsersArray\n * @returns\n */\nexport function buildFormatParsers(\n    overrides: (Partial<FormatParsers> | undefined)[] = [],\n    additionalParsersArray: (Partial<FormatParsersPerCategory> | undefined)[] = []\n): FormatParsersPerCategory {\n    const combinedOverrides = Object.assign({}, ...overrides);\n\n    return getObjectKeys(defaultFormatKeysPerCategory).reduce((result, key) => {\n        const value = defaultFormatKeysPerCategory[key]\n            .map(\n                formatKey =>\n                    (combinedOverrides[formatKey] === undefined\n                        ? defaultFormatParsers[formatKey]\n                        : combinedOverrides[formatKey]) as FormatParser<any>\n            )\n            .concat(\n                ...additionalParsersArray.map(\n                    parsers => (parsers?.[key] ?? []) as FormatParser<any>[]\n                )\n            );\n\n        result[key] = value;\n\n        return result;\n    }, {} as FormatParsersPerCategory);\n}\n","import { brProcessor } from '../processors/brProcessor';\nimport { childProcessor } from '../processors/childProcessor';\nimport { codeProcessor } from '../processors/codeProcessor';\nimport { delimiterProcessor } from '../processors/delimiterProcessor';\nimport { elementProcessor } from '../processors/elementProcessor';\nimport { entityProcessor } from '../processors/entityProcessor';\nimport { fontProcessor } from '../processors/fontProcessor';\nimport { formatContainerProcessor } from '../processors/formatContainerProcessor';\nimport { generalProcessor } from '../processors/generalProcessor';\nimport { headingProcessor } from '../processors/headingProcessor';\nimport { hrProcessor } from '../processors/hrProcessor';\nimport { imageProcessor } from '../processors/imageProcessor';\nimport { knownElementProcessor } from '../processors/knownElementProcessor';\nimport { linkProcessor } from '../processors/linkProcessor';\nimport { listItemProcessor } from '../processors/listItemProcessor';\nimport { listProcessor } from '../processors/listProcessor';\nimport { pProcessor } from '../processors/pProcessor';\nimport { tableProcessor } from '../processors/tableProcessor';\nimport { textProcessor } from '../processors/textProcessor';\nimport type { ElementProcessorMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const defaultProcessorMap: ElementProcessorMap = {\n    a: linkProcessor,\n    b: knownElementProcessor,\n    blockquote: knownElementProcessor,\n    br: brProcessor,\n    code: codeProcessor,\n    div: knownElementProcessor,\n    em: knownElementProcessor,\n    font: fontProcessor,\n    i: knownElementProcessor,\n    img: imageProcessor,\n    h1: headingProcessor,\n    h2: headingProcessor,\n    h3: headingProcessor,\n    h4: headingProcessor,\n    h5: headingProcessor,\n    h6: headingProcessor,\n    hr: hrProcessor,\n    li: listItemProcessor,\n    ol: listProcessor,\n    p: pProcessor,\n    pre: formatContainerProcessor,\n    s: knownElementProcessor,\n    section: knownElementProcessor,\n    span: knownElementProcessor,\n    strike: knownElementProcessor,\n    strong: knownElementProcessor,\n    sub: knownElementProcessor,\n    sup: knownElementProcessor,\n    table: tableProcessor,\n    u: knownElementProcessor,\n    ul: listProcessor,\n\n    '*': generalProcessor,\n    '#text': textProcessor,\n    element: elementProcessor,\n    entity: entityProcessor,\n    child: childProcessor,\n    delimiter: delimiterProcessor,\n};\n","import { createContentModelDocument } from '../modelApi/creators/createContentModelDocument';\nimport { normalizeContentModel } from '../modelApi/common/normalizeContentModel';\nimport type {\n    ContentModelDocument,\n    DOMSelection,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create Content Model from DOM tree in this editor\n * @param root Root element of DOM tree to create Content Model from\n * @param context Context object for DOM to Content Model conversion\n * @param selection Selection that already exists in content\n * @returns A ContentModelDocument object that contains all the models created from the give root element\n */\nexport function domToContentModel(\n    root: HTMLElement | DocumentFragment,\n    context: DomToModelContext,\n    selection?: DOMSelection\n): ContentModelDocument {\n    const model = createContentModelDocument(context.defaultFormat);\n\n    context.selection = selection;\n    context.elementProcessors.child(model, root, context);\n\n    normalizeContentModel(model);\n\n    return model;\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { ContextStyles } from './formatContainerProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { parseFormat } from '../utils/parseFormat';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\nconst SegmentDecoratorTags = ['A', 'CODE'];\n\n/**\n * @internal\n */\nexport function blockProcessor(\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext,\n    segmentFormat?: ContentModelSegmentFormat\n) {\n    const decorator = context.blockDecorator.tagName ? context.blockDecorator : undefined;\n    const isSegmentDecorator = SegmentDecoratorTags.indexOf(element.tagName) >= 0;\n\n    parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n\n    const blockFormat = { ...context.blockFormat };\n\n    parseFormat(element, context.formatParsers.container, blockFormat, context);\n\n    ContextStyles.forEach(style => {\n        if (blockFormat[style]) {\n            context.blockFormat[style] = blockFormat[style];\n        }\n    });\n\n    if (!isSegmentDecorator) {\n        const paragraph = createParagraph(\n            false /*isImplicit*/,\n            blockFormat,\n            segmentFormat,\n            decorator\n        );\n\n        addBlock(group, paragraph);\n    }\n\n    context.elementProcessors.child(group, element, context);\n}\n","import { addSegment } from '../../modelApi/common/addSegment';\nimport { createBr } from '../../modelApi/creators/createBr';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const brProcessor: ElementProcessor<HTMLBRElement> = (group, element, context) => {\n    const br = createBr(context.segmentFormat);\n\n    if (context.isInSelection) {\n        br.isSelected = true;\n    }\n\n    const paragraph = addSegment(group, br, context.blockFormat);\n    context.domIndexer?.onSegment(element, paragraph, [br]);\n};\n","import { addSelectionMarker } from '../utils/addSelectionMarker';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type {\n    ContentModelBlockGroup,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for child elements\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const childProcessor: ElementProcessor<ParentNode> = (\n    group: ContentModelBlockGroup,\n    parent: ParentNode,\n    context: DomToModelContext\n) => {\n    const [nodeStartOffset, nodeEndOffset] = getRegularSelectionOffsets(context, parent);\n    let index = 0;\n\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\n        handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n\n        processChildNode(group, child, context);\n\n        index++;\n    }\n\n    handleRegularSelection(index, context, group, nodeStartOffset, nodeEndOffset);\n};\n\n/**\n * Helper function for processing child node\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n *\n */\nexport function processChildNode(\n    group: ContentModelBlockGroup,\n    child: Node,\n    context: DomToModelContext\n) {\n    if (isNodeOfType(child, 'ELEMENT_NODE') && child.style.display != 'none') {\n        context.elementProcessors.element(group, child, context);\n    } else if (isNodeOfType(child, 'TEXT_NODE')) {\n        context.elementProcessors['#text'](group, child, context);\n    }\n}\n\n/**\n * Helper function to handle regular (range based) selection when process child node\n * @param index Index of current child node in its parent\n * @param context DOM to Content Model context\n * @param group The parent block group\n * @param nodeStartOffset Start offset of current regular selection\n * @param nodeEndOffset  End offset of current regular selection\n */\nexport function handleRegularSelection(\n    index: number,\n    context: DomToModelContext,\n    group: ContentModelBlockGroup,\n    nodeStartOffset: number,\n    nodeEndOffset: number\n) {\n    if (index == nodeStartOffset) {\n        context.isInSelection = true;\n\n        addSelectionMarker(group, context);\n    }\n\n    if (index == nodeEndOffset && context.selection?.type == 'range') {\n        if (!context.selection.range.collapsed) {\n            addSelectionMarker(group, context);\n        }\n        context.isInSelection = false;\n    }\n}\n","import { knownElementProcessor } from './knownElementProcessor';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const codeProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    stackFormat(context, { code: 'codeDefault' }, () => {\n        parseFormat(element, context.formatParsers.code, context.code.format, context);\n\n        knownElementProcessor(group, element, context);\n    });\n};\n","import { addSelectionMarker } from '../utils/addSelectionMarker';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param group\n * @param node\n * @param context\n */\nexport const delimiterProcessor: ElementProcessor<Node> = (group, node, context) => {\n    const range = context.selection?.type == 'range' ? context.selection.range : null;\n\n    if (range) {\n        if (node.contains(range.startContainer)) {\n            context.isInSelection = true;\n\n            addSelectionMarker(group, context);\n        }\n\n        if (context.selection?.type == 'range' && node.contains(range.endContainer)) {\n            if (!context.selection.range.collapsed) {\n                addSelectionMarker(group, context);\n            }\n\n            context.isInSelection = false;\n        }\n    }\n};\n","import { isEntityDelimiter, isEntityElement } from '../../domUtils/entityUtils';\nimport type {\n    DomToModelContext,\n    ElementProcessor,\n    ElementProcessorMap,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param group\n * @param element\n * @param context\n */\nexport const elementProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const tagName = element.tagName.toLowerCase() as keyof ElementProcessorMap;\n    const processor = (tryGetProcessorForEntity(element, context) ||\n        tryGetProcessorForDelimiter(element, context) ||\n        context.elementProcessors[tagName] ||\n        (tagName.indexOf(':') >= 0 && context.elementProcessors.child) ||\n        context.elementProcessors['*']) as ElementProcessor<Node>;\n    processor(group, element, context);\n};\n\nfunction tryGetProcessorForEntity(element: HTMLElement, context: DomToModelContext) {\n    return isEntityElement(element) || element.contentEditable == 'false' // For readonly element, treat as an entity\n        ? context.elementProcessors.entity\n        : null;\n}\n\nfunction tryGetProcessorForDelimiter(element: HTMLElement, context: DomToModelContext) {\n    return isEntityDelimiter(element) ? context.elementProcessors.delimiter : null;\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createEntity } from '../../modelApi/creators/createEntity';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for entity\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const entityProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const isBlockEntity = isBlockElement(element);\n\n    stackFormat(\n        context,\n        { segment: isBlockEntity ? 'empty' : undefined, paragraph: 'empty' },\n        () => {\n            const entityModel = createEntity(element, true /*isReadonly*/, context.segmentFormat);\n\n            parseFormat(element, context.formatParsers.entity, entityModel.entityFormat, context);\n\n            // TODO: Need to handle selection for editable entity\n            if (context.isInSelection) {\n                entityModel.isSelected = true;\n            }\n\n            if (isBlockEntity) {\n                addBlock(group, entityModel);\n            } else {\n                const paragraph = addSegment(group, entityModel);\n                context.domIndexer?.onSegment(element, paragraph, [entityModel]);\n            }\n        }\n    );\n};\n","import { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\nconst FontSizes = ['10px', '13px', '16px', '18px', '24px', '32px', '48px'];\n\nfunction getFontSize(size: string | null) {\n    const intSize = parseInt(size || '');\n\n    if (Number.isNaN(intSize)) {\n        return undefined;\n    } else if (intSize < 1) {\n        return FontSizes[0];\n    } else if (intSize > FontSizes.length) {\n        return FontSizes[FontSizes.length - 1];\n    } else {\n        return FontSizes[intSize - 1];\n    }\n}\n\n/**\n * @internal\n */\nexport const fontProcessor: ElementProcessor<HTMLFontElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        {\n            segment: isBlockElement(element) ? 'shallowCloneForBlock' : 'shallowClone',\n        },\n        () => {\n            const fontFamily = element.getAttribute('face');\n            const fontSize = getFontSize(element.getAttribute('size'));\n            const textColor = element.getAttribute('color');\n            const format = context.segmentFormat;\n\n            if (fontFamily) {\n                format.fontFamily = fontFamily;\n            }\n\n            if (fontSize) {\n                format.fontSize = fontSize;\n            }\n\n            if (textColor) {\n                format.textColor = textColor;\n            }\n\n            parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n            context.elementProcessors.child(group, element, context);\n        }\n    );\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createFormatContainer } from '../../modelApi/creators/createFormatContainer';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { getDefaultStyle } from '../utils/getDefaultStyle';\nimport { parseFormat } from '../utils/parseFormat';\nimport { setParagraphNotImplicit } from '../../modelApi/block/setParagraphNotImplicit';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n    ContentModelParagraph,\n    ElementProcessor,\n    MarginFormat,\n    PaddingFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const ContextStyles: (keyof (MarginFormat & PaddingFormat))[] = [\n    'marginLeft',\n    'marginRight',\n    'paddingLeft',\n    'paddingRight',\n];\n\n/**\n * @internal\n */\nexport const formatContainerProcessor: ElementProcessor<HTMLElement> = (\n    group,\n    element,\n    context\n) => {\n    stackFormat(context, { segment: 'shallowCloneForBlock', paragraph: 'shallowClone' }, () => {\n        parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n        parseFormat(element, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n\n        const format: ContentModelFormatContainerFormat = {\n            ...context.blockFormat,\n        };\n\n        parseFormat(element, context.formatParsers.container, format, context);\n\n        const tagName =\n            getDefaultStyle(element).display == 'block' ? element.tagName.toLowerCase() : 'div';\n        const formatContainer = createFormatContainer(tagName, format);\n\n        // It is possible to inherit margin left/right styles from parent DIV or other containers,\n        // since we are going into a deeper level of format container now,\n        // the container will render these styles so no need to keep them in context format\n        ContextStyles.forEach(style => {\n            delete context.blockFormat[style];\n        });\n\n        context.elementProcessors.child(formatContainer, element, context);\n\n        if (element.style.fontSize && parseInt(element.style.fontSize) == 0) {\n            formatContainer.zeroFontSize = true;\n        }\n\n        if (shouldFallbackToParagraph(formatContainer)) {\n            // For DIV container that only has one paragraph child, container style can be merged into paragraph\n            // and no need to have this container\n            const paragraph = formatContainer.blocks[0] as ContentModelParagraph;\n\n            if (formatContainer.zeroFontSize) {\n                paragraph.segmentFormat = Object.assign({}, paragraph.segmentFormat, {\n                    fontSize: '0',\n                });\n            }\n\n            Object.assign(paragraph.format, formatContainer.format);\n            setParagraphNotImplicit(paragraph);\n            addBlock(group, paragraph);\n        } else {\n            addBlock(group, formatContainer);\n        }\n    });\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n\nfunction shouldFallbackToParagraph(formatContainer: ContentModelFormatContainer) {\n    const firstChild = formatContainer.blocks[0];\n\n    return (\n        formatContainer.tagName == 'div' &&\n        formatContainer.blocks.length == 1 &&\n        firstChild.blockType == 'Paragraph' &&\n        firstChild.isImplicit\n    );\n}\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createGeneralBlock } from '../../modelApi/creators/createGeneralBlock';\nimport { createGeneralSegment } from '../../modelApi/creators/createGeneralSegment';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\nconst generalBlockProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const block = createGeneralBlock(element);\n    const isSelectedBefore = context.isInSelection;\n\n    stackFormat(\n        context,\n        {\n            segment: 'empty',\n            paragraph: 'empty',\n            link: 'empty',\n        },\n        () => {\n            addBlock(group, block);\n\n            context.elementProcessors.child(block, element, context);\n        }\n    );\n\n    if (isSelectedBefore && context.isInSelection) {\n        block.isSelected = true;\n    }\n};\n\nconst generalSegmentProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const segment = createGeneralSegment(element, context.segmentFormat);\n    const isSelectedBefore = context.isInSelection;\n\n    addDecorators(segment, context);\n    const paragraph = addSegment(group, segment);\n    context.domIndexer?.onSegment(element, paragraph, [segment]);\n\n    stackFormat(\n        context,\n        {\n            segment:\n                'empty' /*clearFormat, General segment will include all properties and styles when generate back to HTML, so no need to carry over existing segment format*/,\n        },\n        () => {\n            context.elementProcessors.child(segment, element, context);\n        }\n    );\n\n    if (isSelectedBefore && context.isInSelection) {\n        segment.isSelected = true;\n    }\n};\n\n/**\n * @internal\n */\nexport const generalProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const processor = isBlockElement(element) ? generalBlockProcessor : generalSegmentProcessor;\n\n    processor(group, element, context);\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { createParagraphDecorator } from '../../modelApi/creators/createParagraphDecorator';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelSegmentFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const headingProcessor: ElementProcessor<HTMLHeadingElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        { segment: 'shallowCloneForBlock', paragraph: 'shallowClone', blockDecorator: 'empty' },\n        () => {\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n\n            // These formats are already declared on heading element, no need to keep them in context.\n            // And we should not duplicate them in context, either. Because when we want to turn off heading,\n            // inner text should not keep those text format from heading.\n            getObjectKeys(segmentFormat).forEach(key => {\n                delete context.segmentFormat[key];\n            });\n\n            context.blockDecorator = createParagraphDecorator(element.tagName, segmentFormat);\n\n            blockProcessor(group, element, context);\n        }\n    );\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createDivider } from '../../modelApi/creators/createDivider';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const hrProcessor: ElementProcessor<HTMLHRElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        {\n            paragraph: 'shallowClone',\n        },\n        () => {\n            parseFormat(element, context.formatParsers.divider, context.blockFormat, context);\n\n            const hr = createDivider('hr', context.blockFormat);\n\n            if (element.size) {\n                hr.size = element.size;\n            }\n\n            if (context.isInSelection) {\n                hr.isSelected = true;\n            }\n\n            addBlock(group, hr);\n        }\n    );\n};\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createImage } from '../../modelApi/creators/createImage';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelImageFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const imageProcessor: ElementProcessor<HTMLImageElement> = (group, element, context) => {\n    stackFormat(context, { segment: 'shallowClone' }, () => {\n        const imageFormat: ContentModelImageFormat = context.segmentFormat;\n\n        // Use getAttribute('src') instead of retrieving src directly, in case the src has port and may be stripped by browser\n        const src = element.getAttribute('src') ?? '';\n\n        parseFormat(element, context.formatParsers.segment, imageFormat, context);\n        parseFormat(element, context.formatParsers.image, imageFormat, context);\n        parseFormat(element, context.formatParsers.block, context.blockFormat, context);\n\n        const image = createImage(src, imageFormat);\n        const alt = element.alt;\n        const title = element.title;\n\n        parseFormat(element, context.formatParsers.dataset, image.dataset, context);\n        addDecorators(image, context);\n\n        if (alt) {\n            image.alt = alt;\n        }\n        if (title) {\n            image.title = title;\n        }\n        if (context.isInSelection) {\n            image.isSelected = true;\n        }\n        if (context.selection?.type == 'image' && context.selection.image == element) {\n            image.isSelectedAsImageSelection = true;\n            image.isSelected = true;\n        }\n\n        const paragraph = addSegment(group, image);\n        context.domIndexer?.onSegment(element, paragraph, [image]);\n    });\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { formatContainerProcessor } from './formatContainerProcessor';\nimport { getDefaultStyle } from '../utils/getDefaultStyle';\nimport { isBlockElement } from '../utils/isBlockElement';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\nconst FormatContainerTriggerStyles: (keyof CSSStyleDeclaration)[] = [\n    'marginBottom',\n    'marginTop',\n    'paddingBottom',\n    'paddingTop',\n    'paddingLeft',\n    'paddingRight',\n    'borderTopWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n    'borderRightWidth',\n    'width',\n    'height',\n    'maxWidth',\n    'maxHeight',\n    'minWidth',\n    'minHeight',\n];\nconst ByPassFormatContainerTags = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'A'];\nconst SegmentDecoratorTags = ['A', 'CODE'];\n\n/**\n * @internal\n */\nexport const knownElementProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    const isBlock = isBlockElement(element);\n\n    if (\n        (isBlock || element.style.display == 'inline-block') && // For inline-block here, we will also check if it should be represented as Format Container\n        shouldUseFormatContainer(element, context)\n    ) {\n        formatContainerProcessor(group, element, context);\n    } else if (isBlock) {\n        const decorator = context.blockDecorator.tagName ? context.blockDecorator : undefined;\n        const isSegmentDecorator = SegmentDecoratorTags.indexOf(element.tagName) >= 0;\n\n        stackFormat(context, { segment: 'shallowCloneForBlock', paragraph: 'shallowClone' }, () => {\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n            Object.assign(context.segmentFormat, segmentFormat);\n\n            blockProcessor(group, element, context, segmentFormat);\n        });\n\n        if (isBlock && !isSegmentDecorator) {\n            addBlock(\n                group,\n                createParagraph(\n                    true /*isImplicit*/,\n                    context.blockFormat,\n                    undefined /*segmentFormat*/,\n                    decorator\n                )\n            );\n        }\n    } else {\n        stackFormat(\n            context,\n            {\n                segment: 'shallowClone',\n                paragraph: 'shallowClone',\n                link: 'cloneFormat',\n            },\n            () => {\n                parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n                if (context.link.format.href && element.tagName != 'A') {\n                    parseFormat(\n                        element,\n                        context.formatParsers.segmentUnderLink,\n                        context.link.format,\n                        context\n                    );\n                }\n\n                context.elementProcessors.child(group, element, context);\n            }\n        );\n    }\n};\n\nfunction shouldUseFormatContainer(element: HTMLElement, context: DomToModelContext) {\n    // For those tags that we know we should not use format container, just return false\n    if (ByPassFormatContainerTags.indexOf(element.tagName) >= 0) {\n        return false;\n    }\n\n    const style = element.style;\n    const defaultStyle = getDefaultStyle(element);\n\n    const bgcolor = style.getPropertyValue('background-color');\n\n    // For block element with background, we need to use format container\n    if (bgcolor && bgcolor != 'transparent') {\n        return true;\n    }\n\n    // For block element with positive value of border width or top/bottom margin/padding,\n    // we need to use format container\n    if (\n        FormatContainerTriggerStyles.some(\n            key => parseInt((style[key] as string) || (defaultStyle[key] as string) || '') > 0\n        )\n    ) {\n        return true;\n    }\n\n    // For margin left/right with value \"auto\", we need to use format container\n    if (style.marginLeft == 'auto' || style.marginRight == 'auto') {\n        return true;\n    }\n\n    // For element with \"align\" attribute, we need to use format container\n    if (element.getAttribute('align')) {\n        return true;\n    }\n\n    return false;\n}\n","import { knownElementProcessor } from './knownElementProcessor';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const linkProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    if (element.hasAttribute('href')) {\n        stackFormat(context, { link: 'linkDefault' }, () => {\n            parseFormat(element, context.formatParsers.link, context.link.format, context);\n            parseFormat(element, context.formatParsers.dataset, context.link.dataset, context);\n\n            knownElementProcessor(group, element, context);\n        });\n    } else {\n        // A tag without href, can be treated as normal SPAN tag\n        knownElementProcessor(group, element, context);\n    }\n};\n","import { createListItem } from '../../modelApi/creators/createListItem';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listItemProcessor: ElementProcessor<HTMLLIElement> = (group, element, context) => {\n    const { listFormat } = context;\n\n    if (listFormat.listParent && listFormat.levels.length > 0) {\n        stackFormat(\n            context,\n            {\n                segment: 'shallowCloneForBlock',\n            },\n            () => {\n                parseFormat(\n                    element,\n                    context.formatParsers.segmentOnBlock,\n                    context.segmentFormat,\n                    context\n                );\n\n                const listItem = createListItem(listFormat.levels, context.segmentFormat);\n                parseFormat(\n                    element,\n                    context.formatParsers.listItemElement,\n                    listItem.format,\n                    context\n                );\n\n                listFormat.listParent!.blocks.push(listItem);\n\n                parseFormat(\n                    element,\n                    context.formatParsers.listItemThread,\n                    listItem.levels[listItem.levels.length - 1].format,\n                    context\n                );\n\n                context.elementProcessors.child(listItem, element, context);\n\n                const firstChild = listItem.blocks[0];\n\n                if (\n                    listItem.blocks.length == 1 &&\n                    firstChild.blockType == 'Paragraph' &&\n                    firstChild.isImplicit\n                ) {\n                    Object.assign(listItem.format, firstChild.format);\n                    firstChild.format = {};\n                }\n            }\n        );\n    } else {\n        const currentBlocks = listFormat.listParent?.blocks;\n        const lastItem = currentBlocks?.[currentBlocks?.length - 1];\n\n        context.elementProcessors['*'](\n            lastItem?.blockType == 'BlockGroup' ? lastItem : group,\n            element,\n            context\n        );\n    }\n};\n","import { createListLevel } from '../../modelApi/creators/createListLevel';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelListLevel, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listProcessor: ElementProcessor<HTMLOListElement | HTMLUListElement> = (\n    group,\n    element,\n    context\n) => {\n    stackFormat(\n        context,\n        {\n            segment: 'shallowCloneForBlock',\n            paragraph: 'shallowCloneForGroup',\n        },\n        () => {\n            const level: ContentModelListLevel = createListLevel(\n                element.tagName as 'OL' | 'UL',\n                context.blockFormat\n            );\n            const { listFormat } = context;\n\n            parseFormat(element, context.formatParsers.dataset, level.dataset, context);\n            parseFormat(element, context.formatParsers.listLevelThread, level.format, context);\n            parseFormat(element, context.formatParsers.listLevel, level.format, context);\n            parseFormat(element, context.formatParsers.segment, context.segmentFormat, context);\n\n            const originalListParent = listFormat.listParent;\n\n            listFormat.listParent = listFormat.listParent || group;\n            listFormat.levels.push(level);\n\n            try {\n                context.elementProcessors.child(group, element, context);\n            } finally {\n                listFormat.levels.pop();\n                listFormat.listParent = originalListParent;\n            }\n        }\n    );\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { blockProcessor } from './blockProcessor';\nimport { createParagraph } from '../../modelApi/creators/createParagraph';\nimport { createParagraphDecorator } from '../../modelApi/creators/createParagraphDecorator';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type { ContentModelSegmentFormat, ElementProcessor } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const pProcessor: ElementProcessor<HTMLElement> = (group, element, context) => {\n    stackFormat(\n        context,\n        { blockDecorator: 'empty', segment: 'shallowCloneForBlock', paragraph: 'shallowClone' },\n        () => {\n            context.blockDecorator = createParagraphDecorator(element.tagName);\n\n            const segmentFormat: ContentModelSegmentFormat = {};\n\n            parseFormat(element, context.formatParsers.segmentOnBlock, segmentFormat, context);\n            Object.assign(context.segmentFormat, segmentFormat);\n\n            blockProcessor(group, element, context, segmentFormat);\n        }\n    );\n\n    addBlock(group, createParagraph(true /*isImplicit*/, context.blockFormat));\n};\n","import { addBlock } from '../../modelApi/common/addBlock';\nimport { createTable } from '../../modelApi/creators/createTable';\nimport { createTableCell } from '../../modelApi/creators/createTableCell';\nimport { getBoundingClientRect } from '../utils/getBoundingClientRect';\nimport { isElementOfType } from '../../domUtils/isElementOfType';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { parseFormat } from '../utils/parseFormat';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelTableCellFormat,\n    DatasetFormat,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * Content Model Element Processor for table\n *\n * For Table with merged/splitted cells, HTML uses colSpan and rowSpan attributes to specify how it should be rendered.\n * To make it easier to edit a table, we will use a different way to describe table.\n *\n * 1. For a m * n table (m rows, n columns), we always create a m * n array for the cells.\n * 2. For a regular table cell, it is mapped to one item of this array\n * 3. For a merged/splitted table cell, it will has colSpan/rowSpan value. We also created TableCell model for those spanned\n * cells, and use \"spanLeft\" and \"spanAbove\" to mark its state\n * 4. When edit table, we always edit on this mapped m * n array because it always has an item for each cell\n * 5. When write back to DOM, we create TD/TH elements for those non-spanned cells, and mark its colSpan/rowSpan value according\n * its neighbour cell's spanLeft/spanAbove attribute\n * @param group The parent block group\n * @param parent Parent DOM node to process\n * @param context DOM to Content Model context\n */\nexport const tableProcessor: ElementProcessor<HTMLTableElement> = (\n    group,\n    tableElement,\n    context\n) => {\n    stackFormat(\n        context,\n        { segment: 'shallowCloneForBlock', paragraph: 'shallowCloneForGroup' },\n        () => {\n            parseFormat(tableElement, context.formatParsers.block, context.blockFormat, context);\n\n            const table = createTable(tableElement.rows.length, context.blockFormat);\n            const tableSelection = context.selection?.type == 'table' ? context.selection : null;\n            const selectedTable = tableSelection?.table;\n            const hasTableSelection = selectedTable == tableElement;\n\n            if (context.allowCacheElement) {\n                table.cachedElement = tableElement;\n            }\n\n            context.domIndexer?.onTable(tableElement, table);\n\n            parseFormat(tableElement, context.formatParsers.table, table.format, context);\n            parseFormat(tableElement, context.formatParsers.tableBorder, table.format, context);\n            parseFormat(\n                tableElement,\n                context.formatParsers.segmentOnBlock,\n                context.segmentFormat,\n                context\n            );\n            parseFormat(tableElement, context.formatParsers.dataset, table.dataset, context);\n            addBlock(group, table);\n\n            const columnPositions: number[] = [0];\n            const rowPositions: number[] = [0];\n            const zoomScale = context.zoomScale || 1;\n\n            for (let row = 0; row < tableElement.rows.length; row++) {\n                const tr = tableElement.rows[row];\n                const tableRow = table.rows[row];\n\n                const tbody = tr.parentNode;\n\n                if (\n                    isNodeOfType(tbody, 'ELEMENT_NODE') &&\n                    (isElementOfType(tbody, 'tbody') ||\n                        isElementOfType(tbody, 'thead') ||\n                        isElementOfType(tbody, 'tfoot'))\n                ) {\n                    parseFormat(tbody, context.formatParsers.tableRow, tableRow.format, context);\n                } else if (context.allowCacheElement) {\n                    tableRow.cachedElement = tr;\n                }\n\n                parseFormat(tr, context.formatParsers.tableRow, tableRow.format, context);\n\n                stackFormat(context, { paragraph: 'shallowClone', segment: 'shallowClone' }, () => {\n                    const parent = tr.parentElement;\n                    const parentTag = parent?.tagName;\n\n                    if (\n                        parent &&\n                        (parentTag == 'TBODY' || parentTag == 'THEAD' || parentTag == 'TFOOT')\n                    ) {\n                        // If there is TBODY around TR, retrieve format from TBODY first, in case some format are declared there\n                        parseFormat(\n                            parent,\n                            context.formatParsers.block,\n                            context.blockFormat,\n                            context\n                        );\n                        parseFormat(\n                            parent,\n                            context.formatParsers.segmentOnBlock,\n                            context.segmentFormat,\n                            context\n                        );\n                    }\n\n                    parseFormat(tr, context.formatParsers.block, context.blockFormat, context);\n                    parseFormat(\n                        tr,\n                        context.formatParsers.segmentOnBlock,\n                        context.segmentFormat,\n                        context\n                    );\n\n                    for (\n                        let sourceCol = 0, targetCol = 0;\n                        sourceCol < tr.cells.length;\n                        sourceCol++\n                    ) {\n                        for (; tableRow.cells[targetCol]; targetCol++) {}\n\n                        const td = tr.cells[sourceCol];\n                        const hasSelectionBeforeCell = context.isInSelection;\n                        const colEnd = targetCol + td.colSpan;\n                        const rowEnd = row + td.rowSpan;\n                        const needCalcWidth = columnPositions[colEnd] === undefined;\n                        const needCalcHeight = rowPositions[rowEnd] === undefined;\n\n                        if (needCalcWidth || needCalcHeight) {\n                            const rect = getBoundingClientRect(td);\n\n                            if (rect.width > 0 || rect.height > 0) {\n                                if (needCalcWidth) {\n                                    columnPositions[colEnd] =\n                                        columnPositions[targetCol] + rect.width / zoomScale;\n                                }\n\n                                if (needCalcHeight) {\n                                    rowPositions[rowEnd] =\n                                        rowPositions[row] + rect.height / zoomScale;\n                                }\n                            }\n                        }\n\n                        stackFormat(\n                            context,\n                            { paragraph: 'shallowClone', segment: 'shallowClone' },\n                            () => {\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.block,\n                                    context.blockFormat,\n                                    context\n                                );\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.segmentOnTableCell,\n                                    context.segmentFormat,\n                                    context\n                                );\n\n                                const cellFormat: ContentModelTableCellFormat = {\n                                    ...context.blockFormat,\n                                };\n                                const dataset: DatasetFormat = {};\n\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.tableCell,\n                                    cellFormat,\n                                    context\n                                );\n                                parseFormat(\n                                    td,\n                                    context.formatParsers.tableBorder,\n                                    cellFormat,\n                                    context\n                                );\n                                parseFormat(td, context.formatParsers.dataset, dataset, context);\n\n                                for (\n                                    let colSpan = 1;\n                                    colSpan <= td.colSpan;\n                                    colSpan++, targetCol++\n                                ) {\n                                    for (let rowSpan = 1; rowSpan <= td.rowSpan; rowSpan++) {\n                                        const hasTd = colSpan == 1 && rowSpan == 1;\n                                        const cell = createTableCell(\n                                            colSpan > 1,\n                                            rowSpan > 1,\n                                            td.tagName == 'TH',\n                                            cellFormat\n                                        );\n\n                                        cell.dataset = { ...dataset };\n\n                                        const spannedRow = table.rows[row + rowSpan - 1];\n\n                                        if (spannedRow) {\n                                            spannedRow.cells[targetCol] = cell;\n                                        }\n\n                                        if (hasTd) {\n                                            if (context.allowCacheElement) {\n                                                cell.cachedElement = td;\n                                            }\n\n                                            const { listParent, levels } = context.listFormat;\n\n                                            context.listFormat.listParent = undefined;\n                                            context.listFormat.levels = [];\n\n                                            try {\n                                                context.elementProcessors.child(cell, td, context);\n                                            } finally {\n                                                context.listFormat.listParent = listParent;\n                                                context.listFormat.levels = levels;\n                                            }\n                                        }\n\n                                        const hasSelectionAfterCell = context.isInSelection;\n\n                                        if (\n                                            (hasSelectionBeforeCell && hasSelectionAfterCell) ||\n                                            (hasTableSelection &&\n                                                tableSelection &&\n                                                row >= tableSelection.firstRow &&\n                                                row <= tableSelection.lastRow &&\n                                                targetCol >= tableSelection.firstColumn &&\n                                                targetCol <= tableSelection.lastColumn)\n                                        ) {\n                                            cell.isSelected = true;\n                                        }\n                                    }\n                                }\n                            }\n                        );\n                    }\n                });\n\n                for (let col = 0; col < tableRow.cells.length; col++) {\n                    if (!tableRow.cells[col]) {\n                        tableRow.cells[col] = createTableCell(\n                            false,\n                            false,\n                            false,\n                            context.blockFormat\n                        );\n                    }\n                }\n            }\n\n            table.widths = calcSizes(columnPositions);\n\n            const heights = calcSizes(rowPositions);\n\n            table.rows.forEach((row, i) => {\n                if (heights[i] > 0) {\n                    row.height = heights[i];\n                }\n            });\n        }\n    );\n};\n\nfunction calcSizes(positions: number[]): number[] {\n    const result: number[] = [];\n    let lastPos = positions[positions.length - 1];\n\n    for (let i = positions.length - 2; i >= 0; i--) {\n        if (positions[i] === undefined) {\n            result[i] = 0;\n        } else {\n            result[i] = lastPos - positions[i];\n            lastPos = positions[i];\n        }\n    }\n\n    return result;\n}\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { addSelectionMarker } from '../utils/addSelectionMarker';\nimport { createText } from '../../modelApi/creators/createText';\nimport { ensureParagraph } from '../../modelApi/common/ensureParagraph';\nimport { getRegularSelectionOffsets } from '../utils/getRegularSelectionOffsets';\nimport { hasSpacesOnly } from '../../modelApi/common/hasSpacesOnly';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelText,\n    DomToModelContext,\n    ElementProcessor,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textProcessor: ElementProcessor<Text> = (\n    group: ContentModelBlockGroup,\n    textNode: Text,\n    context: DomToModelContext\n) => {\n    let txt = textNode.nodeValue || '';\n    const offsets = getRegularSelectionOffsets(context, textNode);\n    const txtStartOffset = offsets[0];\n    let txtEndOffset = offsets[1];\n    const segments: (ContentModelText | undefined)[] = [];\n    const paragraph = ensureParagraph(group, context.blockFormat);\n\n    if (txtStartOffset >= 0) {\n        const subText = txt.substring(0, txtStartOffset);\n        segments.push(addTextSegment(group, subText, paragraph, context));\n        context.isInSelection = true;\n\n        addSelectionMarker(group, context);\n\n        txt = txt.substring(txtStartOffset);\n        txtEndOffset -= txtStartOffset;\n    }\n\n    if (txtEndOffset >= 0) {\n        const subText = txt.substring(0, txtEndOffset);\n        segments.push(addTextSegment(group, subText, paragraph, context));\n\n        if (\n            context.selection &&\n            (context.selection.type != 'range' || !context.selection.range.collapsed)\n        ) {\n            addSelectionMarker(group, context);\n        }\n\n        context.isInSelection = false;\n        txt = txt.substring(txtEndOffset);\n    }\n\n    segments.push(addTextSegment(group, txt, paragraph, context));\n    context.domIndexer?.onSegment(\n        textNode,\n        paragraph,\n        segments.filter((x): x is ContentModelText => !!x)\n    );\n};\n\n// When we see these values of white-space style, need to preserve spaces and line-breaks and let browser handle it for us.\nconst WhiteSpaceValuesNeedToHandle = ['pre', 'pre-wrap', 'pre-line', 'break-spaces'];\n\nfunction addTextSegment(\n    group: ContentModelBlockGroup,\n    text: string,\n    paragraph: ContentModelParagraph,\n    context: DomToModelContext\n): ContentModelText | undefined {\n    let textModel: ContentModelText | undefined;\n\n    if (text) {\n        if (\n            !hasSpacesOnly(text) ||\n            (paragraph?.segments.length ?? 0) > 0 ||\n            WhiteSpaceValuesNeedToHandle.indexOf(paragraph?.format.whiteSpace || '') >= 0\n        ) {\n            textModel = createText(text, context.segmentFormat);\n\n            if (context.isInSelection) {\n                textModel.isSelected = true;\n            }\n\n            addDecorators(textModel, context);\n\n            addSegment(group, textModel, context.blockFormat);\n        }\n    }\n\n    return textModel;\n}\n","import { addDecorators } from '../../modelApi/common/addDecorators';\nimport { addSegment } from '../../modelApi/common/addSegment';\nimport { createSelectionMarker } from '../../modelApi/creators/createSelectionMarker';\nimport type { ContentModelBlockGroup, DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addSelectionMarker(group: ContentModelBlockGroup, context: DomToModelContext) {\n    const segmentFormat = {\n        ...context.defaultFormat,\n        ...context.segmentFormat,\n    };\n    const marker = createSelectionMarker(segmentFormat);\n\n    addDecorators(marker, context);\n\n    addSegment(group, marker, context.blockFormat, segmentFormat);\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { ContentModelFormatBase } from 'roosterjs-content-model-types';\n\n/**\n * Check if the two given formats object are equal. This is a check to value but not to reference\n * @param f1 The first format object to check\n * @param f2 The second format object to check\n */\nexport function areSameFormats<T extends ContentModelFormatBase>(f1: T, f2: T) {\n    if (f1 == f2) {\n        return true;\n    } else {\n        const keys1 = getObjectKeys(f1);\n        const keys2 = getObjectKeys(f2);\n\n        return keys1.length == keys2.length && keys1.every(key => f1[key] == f2[key]);\n    }\n}\n","/**\n * @internal\n */\nexport function getBoundingClientRect(element: Element): DOMRect {\n    return element.getBoundingClientRect();\n}\n","import { defaultHTMLStyleMap } from '../../config/defaultHTMLStyleMap';\nimport type { DefaultStyleMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Get default CSS style of given element\n * @param element The element to get default style from\n * @returns A valid CSS style object\n */\nexport function getDefaultStyle(element: HTMLElement): Partial<CSSStyleDeclaration> {\n    const tag = element.tagName.toLowerCase() as keyof DefaultStyleMap;\n\n    return defaultHTMLStyleMap[tag] || {};\n}\n","import type { DomToModelContext } from 'roosterjs-content-model-types';\n\n/**\n * Get offset numbers of a regular (range based) selection.\n * If the selection start/end position is not in the given node, it will return -1 for the related value\n * @param context DOM to Content Model context used for retrieve the selection\n * @param currentContainer The container node to check\n * @returns a tuple of start and end offsets. -1 means selection is not directly under the given node\n */\nexport function getRegularSelectionOffsets(\n    context: DomToModelContext,\n    currentContainer: Node\n): [number, number] {\n    const range = context.selection?.type == 'range' ? context.selection.range : null;\n\n    const startOffset = range?.startContainer == currentContainer ? range.startOffset : -1;\n    const endOffset = range?.endContainer == currentContainer ? range.endOffset! : -1;\n\n    return [startOffset, endOffset];\n}\n","import { getDefaultStyle } from './getDefaultStyle';\n\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table', 'table-cell', 'flex'];\n\n/**\n * Check if the given element will be layout as a block\n * @param element The element to check\n * @param context The context of DOM to Content Model conversion\n */\nexport function isBlockElement(element: HTMLElement): boolean {\n    const display = element.style.display || getDefaultStyle(element).display || '';\n\n    return BLOCK_DISPLAY_STYLES.indexOf(display) >= 0;\n}\n","import { getDefaultStyle } from './getDefaultStyle';\nimport type {\n    ContentModelFormatBase,\n    DomToModelContext,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\n/**\n * Parse formats of the given HTML element using specified format parsers\n * @param element The element to parse format from\n * @param parsers The parses we are using to parse format\n * @param format The format object to hold result format\n * @param context DOM to Content Model context\n */\nexport function parseFormat<T extends ContentModelFormatBase>(\n    element: HTMLElement,\n    parsers: (FormatParser<T> | null)[],\n    format: T,\n    context: DomToModelContext\n) {\n    const defaultStyle = getDefaultStyle(element);\n\n    parsers.forEach(parser => {\n        parser?.(format, element, context, defaultStyle);\n    });\n}\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelCode,\n    ContentModelFormatBase,\n    ContentModelLink,\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport interface StackFormatOptions {\n    segment?: 'shallowClone' | 'shallowCloneForBlock' | 'empty';\n    paragraph?: 'shallowClone' | 'shallowCloneForGroup' | 'empty';\n    blockDecorator?: 'empty';\n    link?: 'linkDefault' | 'cloneFormat' | 'empty';\n    code?: 'codeDefault' | 'empty';\n}\n\n// Some styles, such as background color, won't be inherited by block element if it was originally\n// declared from an inline element. So we need to skip them.\n// e.g.\n// <span style=\"background-color: red\">\n//   line 1       <---------------------------- in red here\n//   <div>line 2</div>  <---------------------- not in red here\n// </span>\nconst SkippedStylesForBlock: (keyof ContentModelSegmentFormat)[] = ['backgroundColor'];\nconst SkippedStylesForTable: (keyof ContentModelBlockFormat)[] = [\n    'marginLeft',\n    'marginRight',\n    'paddingLeft',\n    'paddingRight',\n];\n\n/**\n * @internal\n */\nexport function stackFormat(\n    context: DomToModelContext,\n    options: StackFormatOptions,\n    callback: () => void\n) {\n    const {\n        segmentFormat,\n        blockFormat,\n        link: linkFormat,\n        code: codeFormat,\n        blockDecorator: decoratorFormat,\n    } = context;\n    const { segment, paragraph, link, code, blockDecorator } = options;\n\n    try {\n        context.segmentFormat = stackFormatInternal(segmentFormat, segment);\n        context.blockFormat = stackFormatInternal(blockFormat, paragraph);\n        context.link = stackLinkInternal(linkFormat, link);\n        context.code = stackCodeInternal(codeFormat, code);\n        context.blockDecorator = stackDecoratorInternal(decoratorFormat, blockDecorator);\n\n        callback();\n    } finally {\n        context.segmentFormat = segmentFormat;\n        context.blockFormat = blockFormat;\n        context.link = linkFormat;\n        context.code = codeFormat;\n        context.blockDecorator = decoratorFormat;\n    }\n}\n\nfunction stackLinkInternal(\n    linkFormat: ContentModelLink,\n    link?: 'linkDefault' | 'cloneFormat' | 'empty'\n) {\n    switch (link) {\n        case 'linkDefault':\n            return {\n                format: {\n                    underline: true,\n                },\n                dataset: {},\n            };\n\n        case 'empty':\n            return {\n                format: {},\n                dataset: {},\n            };\n\n        case 'cloneFormat':\n        default:\n            return {\n                dataset: linkFormat.dataset,\n                format: { ...linkFormat.format },\n            };\n    }\n}\n\nfunction stackCodeInternal(codeFormat: ContentModelCode, code?: 'codeDefault' | 'empty') {\n    switch (code) {\n        case 'codeDefault':\n            return {\n                format: {\n                    fontFamily: 'monospace',\n                },\n            };\n        case 'empty':\n            return {\n                format: {},\n            };\n        default:\n            return codeFormat;\n    }\n}\n\nfunction stackDecoratorInternal(\n    format: ContentModelParagraphDecorator,\n    decorator?: 'decoratorDefault' | 'empty'\n) {\n    switch (decorator) {\n        case 'empty':\n            return {\n                format: {},\n                tagName: '',\n            };\n        default:\n            return format;\n    }\n}\n\nfunction stackFormatInternal<T extends ContentModelFormatBase>(\n    format: T,\n    processType?: 'shallowClone' | 'shallowCloneForBlock' | 'shallowCloneForGroup' | 'empty'\n): T | {} {\n    switch (processType) {\n        case 'empty':\n            return {};\n\n        case undefined:\n            return format;\n\n        default:\n            const result = { ...format };\n\n            getObjectKeys(format).forEach(key => {\n                if (\n                    (processType == 'shallowCloneForBlock' &&\n                        SkippedStylesForBlock.indexOf(key as keyof ContentModelSegmentFormat) >=\n                            0) ||\n                    (processType == 'shallowCloneForGroup' &&\n                        SkippedStylesForTable.indexOf(key as keyof ContentModelBlockFormat) >= 0)\n                ) {\n                    delete result[key];\n                }\n            });\n\n            return result;\n    }\n}\n","import toArray from './toArray';\nimport { isElementOfType } from './isElementOfType';\nimport { isNodeOfType } from './isNodeOfType';\nimport type { ContentModelEntityFormat } from 'roosterjs-content-model-types';\n\nconst ENTITY_INFO_NAME = '_Entity';\nconst ENTITY_TYPE_PREFIX = '_EType_';\nconst ENTITY_ID_PREFIX = '_EId_';\nconst ENTITY_READONLY_PREFIX = '_EReadonly_';\nconst ZERO_WIDTH_SPACE = '\\u200B';\nconst DELIMITER_BEFORE = 'entityDelimiterBefore';\nconst DELIMITER_AFTER = 'entityDelimiterAfter';\n\n/**\n * Check if the given DOM Node is an entity wrapper element\n */\nexport function isEntityElement(node: Node): boolean {\n    return isNodeOfType(node, 'ELEMENT_NODE') && node.classList.contains(ENTITY_INFO_NAME);\n}\n\n/**\n * Get all entity wrapper elements under the given root element\n * @param root The root element to query from\n * @returns An array of entity wrapper elements\n */\nexport function getAllEntityWrappers(root: HTMLElement): HTMLElement[] {\n    return toArray(root.querySelectorAll('.' + ENTITY_INFO_NAME)) as HTMLElement[];\n}\n\n/**\n * Parse entity class names from entity wrapper element\n * @param className Class names of entity\n * @param format The output entity format object\n */\nexport function parseEntityClassName(\n    className: string,\n    format: ContentModelEntityFormat\n): boolean | undefined {\n    if (className == ENTITY_INFO_NAME) {\n        return true;\n    } else if (className.indexOf(ENTITY_TYPE_PREFIX) == 0) {\n        format.entityType = className.substring(ENTITY_TYPE_PREFIX.length);\n    } else if (className.indexOf(ENTITY_ID_PREFIX) == 0) {\n        format.id = className.substring(ENTITY_ID_PREFIX.length);\n    } else if (className.indexOf(ENTITY_READONLY_PREFIX) == 0) {\n        format.isReadonly = className.substring(ENTITY_READONLY_PREFIX.length) == '1';\n    }\n}\n\n/**\n * Generate Entity class names for an entity wrapper\n * @param format The source entity format object\n * @returns A combined CSS class name string for entity wrapper\n */\nexport function generateEntityClassNames(format: ContentModelEntityFormat): string {\n    return format.isFakeEntity\n        ? ''\n        : `${ENTITY_INFO_NAME} ${ENTITY_TYPE_PREFIX}${format.entityType ?? ''} ${\n              format.id ? `${ENTITY_ID_PREFIX}${format.id} ` : ''\n          }${ENTITY_READONLY_PREFIX}${format.isReadonly ? '1' : '0'}`;\n}\n\n/**\n * @internal\n */\nexport function isEntityDelimiter(element: HTMLElement): boolean {\n    return (\n        isElementOfType(element, 'span') &&\n        (element.classList.contains(DELIMITER_AFTER) ||\n            element.classList.contains(DELIMITER_BEFORE)) &&\n        element.textContent === ZERO_WIDTH_SPACE\n    );\n}\n\n/**\n * Adds delimiters to the element provided. If the delimiters already exists, will not be added\n * @param element the node to add the delimiters\n */\nexport function addDelimiters(doc: Document, element: HTMLElement): HTMLElement[] {\n    let [delimiterAfter, delimiterBefore] = getDelimiters(element);\n\n    if (!delimiterAfter) {\n        delimiterAfter = insertDelimiter(doc, element, true /*isAfter*/);\n    }\n\n    if (!delimiterBefore) {\n        delimiterBefore = insertDelimiter(doc, element, false /*isAfter*/);\n    }\n\n    return [delimiterAfter, delimiterBefore];\n}\n\nfunction getDelimiters(entityWrapper: HTMLElement): (HTMLElement | undefined)[] {\n    const result: (HTMLElement | undefined)[] = [];\n    const { nextElementSibling, previousElementSibling } = entityWrapper;\n    result.push(\n        isDelimiter(nextElementSibling, DELIMITER_AFTER),\n        isDelimiter(previousElementSibling, DELIMITER_BEFORE)\n    );\n\n    return result;\n}\n\nfunction isDelimiter(el: Element | null, className: string): HTMLElement | undefined {\n    return el?.classList.contains(className) && el.textContent == ZERO_WIDTH_SPACE\n        ? (el as HTMLElement)\n        : undefined;\n}\n\nfunction insertDelimiter(doc: Document, element: Element, isAfter: boolean) {\n    const span = doc.createElement('span');\n\n    span.className = isAfter ? DELIMITER_AFTER : DELIMITER_BEFORE;\n    span.appendChild(doc.createTextNode(ZERO_WIDTH_SPACE));\n    element.parentNode?.insertBefore(span, isAfter ? element.nextSibling : element);\n\n    return span;\n}\n","/**\n * Provide a strong-typed version of Object.keys()\n * @param obj The source object\n * @returns Array of keys\n */\nexport function getObjectKeys<T extends string | number | symbol>(\n    obj: Record<T, any> | Partial<Record<T, any>>\n): T[] {\n    return Object.keys(obj) as T[];\n}\n","/**\n * Check if the given element is of the type that we are checking according to its tag name\n * @param element The element to check\n * @param tag The HTML tag name to check\n * @returns True if the element has the given tag, otherwise false\n */\nexport function isElementOfType<Tag extends keyof HTMLElementTagNameMap>(\n    element: HTMLElement,\n    tag: Tag\n): element is HTMLElementTagNameMap[Tag] {\n    return element?.tagName?.toLocaleLowerCase() == tag;\n}\n","/**\n * A type map from node type number to its type declaration. This is used by utility function isNodeOfType()\n */\nexport interface NodeTypeMap {\n    /**\n     * Attribute node\n     */\n    ATTRIBUTE_NODE: Attr;\n\n    /**\n     * Comment node\n     */\n    COMMENT_NODE: Comment;\n\n    /**\n     * DocumentFragment node\n     */\n    DOCUMENT_FRAGMENT_NODE: DocumentFragment;\n\n    /**\n     * Document node\n     */\n    DOCUMENT_NODE: Document;\n\n    /**\n     * DocumentType node\n     */\n    DOCUMENT_TYPE_NODE: DocumentType;\n\n    /**\n     * HTMLElement node\n     */\n    ELEMENT_NODE: HTMLElement;\n\n    /**\n     * ProcessingInstruction node\n     */\n    PROCESSING_INSTRUCTION_NODE: ProcessingInstruction;\n\n    /**\n     * Text node\n     */\n    TEXT_NODE: Text;\n}\n\n/**\n * Type checker for Node. Return true if it of the specified node type\n * @param node The node to check\n * @param expectedType The type to check\n */\nexport function isNodeOfType<T extends keyof NodeTypeMap>(\n    node: Node | null | undefined,\n    expectedType: T\n): node is NodeTypeMap[T] {\n    return !!node && node.nodeType == Node[expectedType];\n}\n","import { validate } from './validate';\nimport type { ContentModelWithDataset, Definition } from 'roosterjs-content-model-types';\n\nconst EditingInfoDatasetName = 'editingInfo';\n\n/**\n * Update metadata of the given model\n * @param model The model to update metadata to\n * @param callback A callback function to update metadata\n * @param definition @optional Metadata definition used for verify the metadata object\n * @returns The metadata object if any, or null\n */\nexport function updateMetadata<T>(\n    model: ContentModelWithDataset<T>,\n    callback?: (metadata: T | null) => T | null,\n    definition?: Definition<T>\n): T | null {\n    const metadataString = model.dataset[EditingInfoDatasetName];\n    let obj: T | null = null;\n\n    try {\n        obj = JSON.parse(metadataString) as T;\n    } catch {}\n\n    if (definition && !validate(obj, definition)) {\n        obj = null;\n    }\n\n    if (callback) {\n        obj = callback(obj);\n\n        if (!obj) {\n            delete model.dataset[EditingInfoDatasetName];\n        } else if (!definition || validate(obj, definition)) {\n            model.dataset[EditingInfoDatasetName] = JSON.stringify(obj);\n        }\n    }\n\n    return obj;\n}\n\n/**\n * Check if the given model has metadata\n * @param model The content model to check\n */\nexport function hasMetadata<T>(model: ContentModelWithDataset<T> | HTMLElement): boolean {\n    return !!model.dataset[EditingInfoDatasetName];\n}\n","import { getObjectKeys } from '../getObjectKeys';\nimport type { Definition } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Validate the given object with a type definition object\n * @param input The object to validate\n * @param def The type definition object used for validation\n * @returns True if the object passed the validation, otherwise false\n */\nexport function validate<T>(input: any, def: Definition<T>): input is T {\n    let result = false;\n    if ((def.isOptional && typeof input === 'undefined') || (def.allowNull && input === null)) {\n        result = true;\n    } else if (\n        (!def.isOptional && typeof input === 'undefined') ||\n        (!def.allowNull && input === null)\n    ) {\n        return false;\n    } else {\n        switch (def.type) {\n            case 'string':\n                result =\n                    typeof input === 'string' &&\n                    (typeof def.value === 'undefined' || input === def.value);\n                break;\n\n            case 'number':\n                result =\n                    typeof input === 'number' &&\n                    (typeof def.value === 'undefined' || areSameNumbers(def.value, input)) &&\n                    (typeof def.minValue === 'undefined' || input >= def.minValue) &&\n                    (typeof def.maxValue === 'undefined' || input <= def.maxValue);\n                break;\n\n            case 'boolean':\n                result =\n                    typeof input === 'boolean' &&\n                    (typeof def.value === 'undefined' || input === def.value);\n                break;\n\n            case 'array':\n                result =\n                    Array.isArray(input) &&\n                    (typeof def.minLength === 'undefined' || input.length >= def.minLength) &&\n                    (typeof def.maxLength === 'undefined' || input.length <= def.maxLength) &&\n                    input.every(x => validate(x, def.itemDef));\n                break;\n\n            case 'object':\n                result =\n                    typeof input === 'object' &&\n                    getObjectKeys(def.propertyDef).every(x =>\n                        validate(input[x], def.propertyDef[x])\n                    );\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction areSameNumbers(n1: number, n2: number) {\n    return Math.abs(n1 - n2) < 1e-3;\n}\n","/**\n * Replace all child nodes of the given target node to the child nodes of source node.\n * @param target Target node, all child nodes of this node will be removed if keepExistingChildren is not set to true\n * @param source (Optional) source node, all child nodes of this node will be move to target node\n * @param keepExistingChildren (Optional) When set to true, all existing child nodes of target will be kept\n */\nexport function moveChildNodes(target: Node, source?: Node, keepExistingChildren?: boolean) {\n    if (!target) {\n        return;\n    }\n\n    while (!keepExistingChildren && target.firstChild) {\n        target.removeChild(target.firstChild);\n    }\n\n    while (source?.firstChild) {\n        target.appendChild(source.firstChild);\n    }\n}\n\n/**\n * Wrap all child nodes of the given parent element using a new element with the given tag name\n * @param parent The parent element\n * @param tagName The tag name of new wrapper\n * @returns New wrapper element\n */\nexport function wrapAllChildNodes<T extends keyof HTMLElementTagNameMap>(\n    parent: HTMLElement,\n    tagName: T\n): HTMLElementTagNameMap[T] {\n    const newElement = parent.ownerDocument.createElement(tagName);\n\n    moveChildNodes(newElement, parent);\n    parent.appendChild(newElement);\n\n    return newElement;\n}\n","import { isEntityElement } from './entityUtils';\n\n/**\n * When set a DOM tree into editor, reuse the existing element in editor and no need to change it\n * @param param Parent node of the reused element\n * @param element The element to keep in parent node\n * @param refNode Reference node, it is point to current node that is being processed. It must be a child of parent node, or null.\n * We will start processing from this node, if it is not the same with element, remove it and keep processing its next sibling,\n * until we see an element that is the same with the passed in element or null.\n * @returns The new reference element\n */\nexport function reuseCachedElement(parent: Node, element: Node, refNode: Node | null): Node | null {\n    if (element.parentNode == parent) {\n        // Remove nodes before the one we are hitting since they don't appear in Content Model at this position.\n        // But we don't want to touch entity since it would better to keep entity at its place unless it is removed\n        // In that case we will remove it after we have handled all other nodes\n        while (refNode && refNode != element && !isEntityElement(refNode)) {\n            const next = refNode.nextSibling;\n\n            refNode.parentNode?.removeChild(refNode);\n            refNode = next;\n        }\n\n        if (refNode && refNode == element) {\n            refNode = refNode.nextSibling;\n        } else {\n            parent.insertBefore(element, refNode);\n        }\n    } else {\n        parent.insertBefore(element, refNode);\n    }\n\n    return refNode;\n}\n\n/**\n * @internal\n */\nexport function removeNode(node: Node): Node | null {\n    const next = node.nextSibling;\n    node.parentNode?.removeChild(node);\n\n    return next;\n}\n","/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport default function toArray(collection: NamedNodeMap): Attr[];\n\n/**\n * Convert a named node map to an array\n * @param collection The map to convert\n */\nexport default function toArray(collection: DataTransferItemList): DataTransferItem[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport default function toArray<T extends Node>(collection: NodeListOf<T>): T[];\n\n/**\n * Convert a collection to an array\n * @param collection The collection to convert\n */\nexport default function toArray<T extends Element>(collection: HTMLCollectionOf<T>): T[];\n\n/**\n * Convert an array to an array.\n * This is to satisfy typescript compiler. For some cases the object can be a collection at runtime,\n * but the declaration is an array. e.g. ClipboardData.types\n * @param array The array to convert\n */\nexport default function toArray<T>(array: readonly T[]): T[];\n\nexport default function toArray(collection: any): any[] {\n    return [].slice.call(collection);\n}\n","/**\n * @internal\n * Removes the node and keep all children in place, return the parentNode where the children are attached\n * @param node the node to remove\n */\nexport function unwrap(node: Node): Node | null {\n    // Unwrap requires a parentNode\n    const parentNode = node ? node.parentNode : null;\n\n    if (!parentNode) {\n        return null;\n    }\n\n    while (node.firstChild) {\n        parentNode.insertBefore(node.firstChild, node);\n    }\n\n    parentNode.removeChild(node);\n    return parentNode;\n}\n","/**\n * Wrap the given node with a new element, put the wrapper node under the parent of the first node\n * and return the wrapper element.\n * @param doc Parent document object\n * @param node The node to wrap\n * @param wrapperTag The tag of wrapper HTML element\n * @returns The wrapper element\n */\nexport function wrap<T extends keyof HTMLElementTagNameMap>(\n    doc: Document,\n    node: Node,\n    wrapperTag: T\n): HTMLElementTagNameMap[T] {\n    const wrapper = doc.createElement(wrapperTag);\n    node.parentNode?.insertBefore(wrapper, node);\n    wrapper.appendChild(node);\n\n    return wrapper;\n}\n","import type { DirectionFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const directionFormatHandler: FormatHandler<DirectionFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const dir = element.style.direction || element.dir || defaultStyle.direction;\n\n        if (dir) {\n            format.direction = dir == 'rtl' ? 'rtl' : 'ltr';\n        }\n    },\n    apply: (format, element) => {\n        if (format.direction) {\n            element.style.direction = format.direction;\n        }\n    },\n};\n","import type { DisplayFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const displayFormatHandler: FormatHandler<DisplayFormat> = {\n    parse: (format, element) => {\n        const display = element.style.display;\n\n        if (display) {\n            format.display = display;\n        }\n    },\n    apply: (format, element) => {\n        if (format.display) {\n            element.style.display = format.display;\n        }\n    },\n};\n","import { calcAlign, ResultMap } from '../utils/dir';\nimport { directionFormatHandler } from './directionFormatHandler';\nimport type {\n    DirectionFormat,\n    HtmlAlignFormat,\n    TextAlignFormat,\n} from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const htmlAlignFormatHandler: FormatHandler<\n    DirectionFormat & HtmlAlignFormat & TextAlignFormat\n> = {\n    parse: (format, element, context, defaultStyle) => {\n        directionFormatHandler.parse(format, element, context, defaultStyle);\n\n        const htmlAlign = element.getAttribute('align');\n\n        if (htmlAlign) {\n            format.htmlAlign = calcAlign(htmlAlign, format.direction);\n            delete format.textAlign;\n            delete context.blockFormat.textAlign;\n        }\n    },\n    apply: (format, element) => {\n        const dir: 'ltr' | 'rtl' = format.direction == 'rtl' ? 'rtl' : 'ltr';\n\n        if (format.htmlAlign) {\n            element.setAttribute('align', ResultMap[format.htmlAlign][dir]);\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { LineHeightFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const lineHeightFormatHandler: FormatHandler<LineHeightFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const lineHeight = element.style.lineHeight || defaultStyle.lineHeight;\n\n        if (lineHeight && lineHeight != 'inherit') {\n            format.lineHeight = lineHeight;\n        }\n    },\n    apply: (format, element) => {\n        if (format.lineHeight) {\n            element.style.lineHeight = format.lineHeight;\n        }\n    },\n};\n","import { parseValueWithUnit } from '../utils/parseValueWithUnit';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { MarginFormat } from 'roosterjs-content-model-types';\n\nconst MarginKeys: (keyof MarginFormat & keyof CSSStyleDeclaration)[] = [\n    'marginTop',\n    'marginRight',\n    'marginBottom',\n    'marginLeft',\n];\n\n/**\n * @internal\n */\nexport const marginFormatHandler: FormatHandler<MarginFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        MarginKeys.forEach(key => {\n            const value = element.style[key] || defaultStyle[key];\n\n            if (value) {\n                switch (key) {\n                    case 'marginTop':\n                    case 'marginBottom':\n                        format[key] = value;\n                        break;\n\n                    case 'marginLeft':\n                    case 'marginRight':\n                        format[key] = format[key]\n                            ? parseValueWithUnit(format[key] || '', element) +\n                              parseValueWithUnit(value, element) +\n                              'px'\n                            : value;\n                        break;\n                }\n            }\n        });\n\n        const marginBlockStart = element.style.marginBlockStart || defaultStyle.marginBlockStart;\n        const marginTop = element.style.marginTop || defaultStyle.marginTop;\n        if (marginBlockStart && !marginTop) {\n            format.marginBlockStart = parseValueWithUnit(marginBlockStart) + 'px';\n        }\n\n        const marginBlockEnd = element.style.marginBlockEnd || defaultStyle.marginBlockEnd;\n        const marginBottom = element.style.marginBottom || defaultStyle.marginBottom;\n        if (marginBlockEnd && !marginBottom) {\n            format.marginBlockEnd = parseValueWithUnit(marginBlockEnd) + 'px';\n        }\n    },\n    apply: (format, element, context) => {\n        MarginKeys.forEach(key => {\n            const value = format[key];\n\n            if (value != context.implicitFormat[key]) {\n                element.style[key] = value || '0';\n            }\n        });\n\n        if (format.marginBlockStart && !format.marginTop) {\n            element.style.marginBlockStart = format.marginBlockStart;\n        }\n\n        if (format.marginBlockEnd && !format.marginBottom) {\n            element.style.marginBlockEnd = format.marginBlockEnd;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { PaddingFormat } from 'roosterjs-content-model-types';\n\nconst PaddingKeys: (keyof PaddingFormat & keyof CSSStyleDeclaration)[] = [\n    'paddingTop',\n    'paddingRight',\n    'paddingBottom',\n    'paddingLeft',\n];\n\n/**\n * @internal\n */\nexport const paddingFormatHandler: FormatHandler<PaddingFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        PaddingKeys.forEach(key => {\n            let value = element.style[key];\n            const defaultValue = defaultStyle[key] ?? '0px';\n\n            if (value == '0') {\n                value = '0px';\n            }\n\n            if (value && value != defaultValue) {\n                format[key] = value;\n            }\n        });\n    },\n    apply: (format, element) => {\n        PaddingKeys.forEach(key => {\n            const value = format[key];\n            if (value) {\n                element.style[key] = value;\n            }\n        });\n    },\n};\n","import { calcAlign, ResultMap } from '../utils/dir';\nimport { directionFormatHandler } from './directionFormatHandler';\nimport type { DirectionFormat, TextAlignFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const textAlignFormatHandler: FormatHandler<DirectionFormat & TextAlignFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        directionFormatHandler.parse(format, element, context, defaultStyle);\n\n        let textAlign = element.style.textAlign || defaultStyle.textAlign;\n\n        if (\n            element.tagName == 'LI' &&\n            element.parentElement?.style.display === 'flex' &&\n            element.parentElement.style.flexDirection === 'column' &&\n            element.style.alignSelf\n        ) {\n            // For LI element with flex style applied, we use its \"align-self\" style value instead since LI has a different implementation for align\n            textAlign = element.style.alignSelf;\n        }\n\n        if (textAlign) {\n            format.textAlign = calcAlign(textAlign, format.direction);\n        }\n    },\n    apply: (format, element) => {\n        const dir: 'ltr' | 'rtl' = format.direction == 'rtl' ? 'rtl' : 'ltr';\n\n        if (format.textAlign) {\n            const parent = element.parentElement;\n            const parentTag = parent?.tagName;\n\n            if (element.tagName == 'LI' && parent && (parentTag == 'OL' || parentTag == 'UL')) {\n                element.style.alignSelf = format.textAlign;\n                element.parentElement.style.flexDirection = 'column';\n                element.parentElement.style.display = 'flex';\n            } else {\n                element.style.textAlign = ResultMap[format.textAlign][dir];\n            }\n        }\n    },\n};\n","import { shouldSetValue } from '../utils/shouldSetValue';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { WhiteSpaceFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const whiteSpaceFormatHandler: FormatHandler<WhiteSpaceFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const whiteSpace = element.style.whiteSpace || defaultStyle.whiteSpace;\n\n        if (shouldSetValue(whiteSpace, 'normal', format.whiteSpace, defaultStyle.whiteSpace)) {\n            format.whiteSpace = whiteSpace;\n        }\n    },\n    apply: (format, element, context) => {\n        const whiteSpace = context.implicitFormat.whiteSpace;\n        if (format.whiteSpace != whiteSpace) {\n            element.style.whiteSpace = format.whiteSpace || 'normal';\n        }\n    },\n};\n","import { getColor, setColor } from '../utils/color';\nimport { shouldSetValue } from '../utils/shouldSetValue';\nimport type { BackgroundColorFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const backgroundColorFormatHandler: FormatHandler<BackgroundColorFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const backgroundColor =\n            getColor(\n                element,\n                true /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            ) || defaultStyle.backgroundColor;\n\n        if (\n            shouldSetValue(\n                backgroundColor,\n                'transparent',\n                undefined /*existingValue*/,\n                defaultStyle.backgroundColor\n            )\n        ) {\n            format.backgroundColor = backgroundColor;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.backgroundColor) {\n            setColor(\n                element,\n                format.backgroundColor,\n                true /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            );\n        }\n    },\n};\n","import type { BorderBoxFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const borderBoxFormatHandler: FormatHandler<BorderBoxFormat> = {\n    parse: (format, element) => {\n        if (element.style?.boxSizing == 'border-box') {\n            format.useBorderBox = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.useBorderBox) {\n            element.style.boxSizing = 'border-box';\n        }\n    },\n};\n","import type { BorderFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * Keys of border items\n */\nexport const BorderKeys: (keyof BorderFormat & keyof CSSStyleDeclaration)[] = [\n    'borderTop',\n    'borderRight',\n    'borderBottom',\n    'borderLeft',\n];\n\n// This array needs to match BorderKeys array\nconst BorderWidthKeys: (keyof CSSStyleDeclaration)[] = [\n    'borderTopWidth',\n    'borderRightWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n];\n\n/**\n * @internal\n */\nexport const borderFormatHandler: FormatHandler<BorderFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        BorderKeys.forEach((key, i) => {\n            const value = element.style[key];\n            const defaultWidth = defaultStyle[BorderWidthKeys[i]] ?? '0px';\n            let width = element.style[BorderWidthKeys[i]];\n\n            if (width == '0') {\n                width = '0px';\n            }\n\n            if (value && width != defaultWidth) {\n                format[key] = value == 'none' ? '' : value;\n            }\n        });\n\n        const borderRadius = element.style.borderRadius;\n\n        if (borderRadius) {\n            format.borderRadius = borderRadius;\n        }\n    },\n    apply: (format, element) => {\n        BorderKeys.forEach(key => {\n            const value = format[key];\n\n            if (value) {\n                element.style[key] = value;\n            }\n        });\n    },\n};\n","import type { BoxShadowFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const boxShadowFormatHandler: FormatHandler<BoxShadowFormat> = {\n    parse: (format, element) => {\n        if (element.style?.boxShadow) {\n            format.boxShadow = element.style.boxShadow;\n        }\n    },\n    apply: (format, element) => {\n        if (format.boxShadow) {\n            element.style.boxShadow = format.boxShadow;\n        }\n    },\n};\n","import { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport type { DatasetFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const datasetFormatHandler: FormatHandler<DatasetFormat> = {\n    parse: (format, element) => {\n        const dataset = element.dataset;\n\n        getObjectKeys(dataset).forEach(key => {\n            format[key] = dataset[key] || '';\n        });\n    },\n\n    apply: (format, element) => {\n        getObjectKeys(format).forEach(key => {\n            element.dataset[key] = format[key];\n        });\n    },\n};\n","import type { FloatFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const floatFormatHandler: FormatHandler<FloatFormat> = {\n    parse: (format, element) => {\n        const float = element.style.float || element.getAttribute('align');\n\n        if (float) {\n            format.float = float;\n        }\n    },\n    apply: (format, element) => {\n        if (format.float) {\n            element.style.float = format.float;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { IdFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const idFormatHandler: FormatHandler<IdFormat> = {\n    parse: (format, element) => {\n        if (element.id) {\n            format.id = element.id;\n        }\n    },\n    apply: (format, element) => {\n        if (format.id) {\n            element.id = format.id;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { SizeFormat } from 'roosterjs-content-model-types';\n\nconst PercentageRegex = /[\\d\\.]+%/;\n\n/**\n * @internal\n */\nexport const sizeFormatHandler: FormatHandler<SizeFormat> = {\n    parse: (format, element, context) => {\n        const width = element.style.width || tryParseSize(element, 'width');\n        const height = element.style.height || tryParseSize(element, 'height');\n        const maxWidth = element.style.maxWidth;\n        const maxHeight = element.style.maxHeight;\n        const minWidth = element.style.minWidth;\n        const minHeight = element.style.minHeight;\n\n        if (width) {\n            format.width = width;\n        }\n        if (height) {\n            format.height = height;\n        }\n        if (maxWidth) {\n            format.maxWidth = maxWidth;\n        }\n        if (maxHeight) {\n            format.maxHeight = maxHeight;\n        }\n        if (minWidth) {\n            format.minWidth = minWidth;\n        }\n        if (minHeight) {\n            format.minHeight = minHeight;\n        }\n    },\n    apply: (format, element) => {\n        if (format.width) {\n            element.style.width = format.width;\n        }\n        if (format.height) {\n            element.style.height = format.height;\n        }\n        if (format.maxWidth) {\n            element.style.maxWidth = format.maxWidth;\n        }\n        if (format.maxHeight) {\n            element.style.maxHeight = format.maxHeight;\n        }\n        if (format.minWidth) {\n            element.style.minWidth = format.minWidth;\n        }\n        if (format.minHeight) {\n            element.style.minHeight = format.minHeight;\n        }\n    },\n};\n\nfunction tryParseSize(element: HTMLElement, attrName: 'width' | 'height'): string | undefined {\n    const attrValue = element.getAttribute(attrName);\n    const value = parseInt(attrValue || '');\n\n    return attrValue && PercentageRegex.test(attrValue)\n        ? attrValue\n        : Number.isNaN(value) || value == 0\n        ? undefined\n        : value + 'px';\n}\n","import type { FormatHandler } from '../FormatHandler';\nimport type { VerticalAlignFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const verticalAlignFormatHandler: FormatHandler<VerticalAlignFormat> = {\n    parse: (format, element) => {\n        const align = element.style.verticalAlign || element.getAttribute('valign');\n\n        switch (align) {\n            case 'baseline':\n            case 'initial':\n            case 'super':\n            case 'sub':\n            case 'text-top':\n            case 'text-bottom':\n            case 'top':\n                format.verticalAlign = 'top';\n                break;\n\n            case 'bottom':\n                format.verticalAlign = 'bottom';\n                break;\n\n            case 'middle':\n                format.verticalAlign = 'middle';\n                break;\n        }\n    },\n    apply: (format, element) => {\n        if (format.verticalAlign) {\n            element.style.verticalAlign = format.verticalAlign;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { WordBreakFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const wordBreakFormatHandler: FormatHandler<WordBreakFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const wordBreak = element.style.wordBreak || defaultStyle.wordBreak;\n\n        if (wordBreak) {\n            format.wordBreak = wordBreak;\n        }\n    },\n    apply: (format, element) => {\n        if (format.wordBreak) {\n            element.style.wordBreak = format.wordBreak;\n        }\n    },\n};\n","import { backgroundColorFormatHandler } from './common/backgroundColorFormatHandler';\nimport { boldFormatHandler } from './segment/boldFormatHandler';\nimport { borderBoxFormatHandler } from './common/borderBoxFormatHandler';\nimport { borderFormatHandler } from './common/borderFormatHandler';\nimport { boxShadowFormatHandler } from './common/boxShadowFormatHandler';\nimport { datasetFormatHandler } from './common/datasetFormatHandler';\nimport { directionFormatHandler } from './block/directionFormatHandler';\nimport { displayFormatHandler } from './block/displayFormatHandler';\nimport { entityFormatHandler } from './entity/entityFormatHandler';\nimport { floatFormatHandler } from './common/floatFormatHandler';\nimport { fontFamilyFormatHandler } from './segment/fontFamilyFormatHandler';\nimport { fontSizeFormatHandler } from './segment/fontSizeFormatHandler';\nimport { getObjectKeys } from '../domUtils/getObjectKeys';\nimport { htmlAlignFormatHandler } from './block/htmlAlignFormatHandler';\nimport { idFormatHandler } from './common/idFormatHandler';\nimport { italicFormatHandler } from './segment/italicFormatHandler';\nimport { letterSpacingFormatHandler } from './segment/letterSpacingFormatHandler';\nimport { lineHeightFormatHandler } from './block/lineHeightFormatHandler';\nimport { linkFormatHandler } from './segment/linkFormatHandler';\nimport { listItemThreadFormatHandler } from './list/listItemThreadFormatHandler';\nimport { listLevelThreadFormatHandler } from './list/listLevelThreadFormatHandler';\nimport { listStyleFormatHandler } from './list/listStyleFormatHandler';\nimport { marginFormatHandler } from './block/marginFormatHandler';\nimport { paddingFormatHandler } from './block/paddingFormatHandler';\nimport { sizeFormatHandler } from './common/sizeFormatHandler';\nimport { strikeFormatHandler } from './segment/strikeFormatHandler';\nimport { superOrSubScriptFormatHandler } from './segment/superOrSubScriptFormatHandler';\nimport { tableLayoutFormatHandler } from './table/tableLayoutFormatHandler';\nimport { tableSpacingFormatHandler } from './table/tableSpacingFormatHandler';\nimport { textAlignFormatHandler } from './block/textAlignFormatHandler';\nimport { textColorFormatHandler } from './segment/textColorFormatHandler';\nimport { textColorOnTableCellFormatHandler } from './table/textColorOnTableCellFormatHandler';\nimport { underlineFormatHandler } from './segment/underlineFormatHandler';\nimport { verticalAlignFormatHandler } from './common/verticalAlignFormatHandler';\nimport { whiteSpaceFormatHandler } from './block/whiteSpaceFormatHandler';\nimport { wordBreakFormatHandler } from './common/wordBreakFormatHandler';\nimport type { FormatHandler } from './FormatHandler';\nimport type {\n    ContentModelFormatMap,\n    FormatApplier,\n    FormatAppliers,\n    FormatHandlerTypeMap,\n    FormatKey,\n    FormatParser,\n    FormatParsers,\n} from 'roosterjs-content-model-types';\n\ntype FormatHandlers = {\n    [Key in FormatKey]: FormatHandler<FormatHandlerTypeMap[Key]>;\n};\n\nconst defaultFormatHandlerMap: FormatHandlers = {\n    backgroundColor: backgroundColorFormatHandler,\n    bold: boldFormatHandler,\n    border: borderFormatHandler,\n    borderBox: borderBoxFormatHandler,\n    boxShadow: boxShadowFormatHandler,\n    dataset: datasetFormatHandler,\n    direction: directionFormatHandler,\n    display: displayFormatHandler,\n    float: floatFormatHandler,\n    fontFamily: fontFamilyFormatHandler,\n    fontSize: fontSizeFormatHandler,\n    entity: entityFormatHandler,\n    htmlAlign: htmlAlignFormatHandler,\n    id: idFormatHandler,\n    italic: italicFormatHandler,\n    letterSpacing: letterSpacingFormatHandler,\n    lineHeight: lineHeightFormatHandler,\n    link: linkFormatHandler,\n    listItemThread: listItemThreadFormatHandler,\n    listLevelThread: listLevelThreadFormatHandler,\n    listStyle: listStyleFormatHandler,\n    margin: marginFormatHandler,\n    padding: paddingFormatHandler,\n    size: sizeFormatHandler,\n    strike: strikeFormatHandler,\n    superOrSubScript: superOrSubScriptFormatHandler,\n    tableLayout: tableLayoutFormatHandler,\n    tableSpacing: tableSpacingFormatHandler,\n    textAlign: textAlignFormatHandler,\n    textColor: textColorFormatHandler,\n    textColorOnTableCell: textColorOnTableCellFormatHandler,\n    underline: underlineFormatHandler,\n    verticalAlign: verticalAlignFormatHandler,\n    whiteSpace: whiteSpaceFormatHandler,\n    wordBreak: wordBreakFormatHandler,\n};\n\nconst styleBasedSegmentFormats: (keyof FormatHandlerTypeMap)[] = [\n    'letterSpacing',\n    'fontFamily',\n    'fontSize',\n];\n\nconst elementBasedSegmentFormats: (keyof FormatHandlerTypeMap)[] = [\n    'strike',\n    'underline',\n    'superOrSubScript',\n    'italic',\n    'bold',\n];\nconst sharedBlockFormats: (keyof FormatHandlerTypeMap)[] = [\n    'direction',\n    'textAlign',\n    'lineHeight',\n    'whiteSpace',\n];\nconst sharedContainerFormats: (keyof FormatHandlerTypeMap)[] = [\n    'backgroundColor',\n    'margin',\n    'padding',\n    'border',\n];\n\n/**\n * @internal\n */\nexport const defaultFormatKeysPerCategory: {\n    [key in keyof ContentModelFormatMap]: (keyof FormatHandlerTypeMap)[];\n} = {\n    block: sharedBlockFormats,\n    listItemThread: ['listItemThread'],\n    listLevelThread: ['listLevelThread'],\n    listItemElement: [\n        ...sharedBlockFormats,\n        'direction',\n        'textAlign',\n        'lineHeight',\n        'margin',\n        'listStyle',\n    ],\n    listLevel: ['direction', 'textAlign', 'margin', 'padding', 'listStyle', 'backgroundColor'],\n    styleBasedSegment: [...styleBasedSegmentFormats, 'textColor', 'backgroundColor', 'lineHeight'],\n    elementBasedSegment: elementBasedSegmentFormats,\n    segment: [\n        ...styleBasedSegmentFormats,\n        ...elementBasedSegmentFormats,\n        'textColor',\n        'backgroundColor',\n        'lineHeight',\n    ],\n    segmentOnBlock: [...styleBasedSegmentFormats, ...elementBasedSegmentFormats, 'textColor'],\n    segmentOnTableCell: [\n        ...styleBasedSegmentFormats,\n        ...elementBasedSegmentFormats,\n        'textColorOnTableCell',\n    ],\n    tableCell: [\n        'border',\n        'backgroundColor',\n        'padding',\n        'verticalAlign',\n        'wordBreak',\n        'textColor',\n        'htmlAlign',\n        'size',\n    ],\n    tableRow: ['backgroundColor'],\n    table: [\n        'id',\n        'border',\n        'backgroundColor',\n        'display',\n        'htmlAlign',\n        'margin',\n        'size',\n        'tableLayout',\n    ],\n    tableBorder: ['borderBox', 'tableSpacing'],\n    tableCellBorder: ['borderBox'],\n    image: [\n        'id',\n        'size',\n        'margin',\n        'padding',\n        'borderBox',\n        'border',\n        'boxShadow',\n        'display',\n        'float',\n        'verticalAlign',\n    ],\n    link: [\n        'link',\n        'textColor',\n        'underline',\n        'display',\n        'margin',\n        'padding',\n        'backgroundColor',\n        'border',\n        'size',\n        'textAlign',\n    ],\n    segmentUnderLink: ['textColor'],\n    code: ['fontFamily', 'display'],\n    dataset: ['dataset'],\n    divider: [...sharedBlockFormats, ...sharedContainerFormats, 'display', 'size', 'htmlAlign'],\n    container: [...sharedContainerFormats, 'htmlAlign', 'size', 'display'],\n    entity: ['entity'],\n};\n\n/**\n * @internal\n */\nexport const defaultFormatParsers: FormatParsers = getObjectKeys(defaultFormatHandlerMap).reduce(\n    (result, key) => {\n        result[key] = defaultFormatHandlerMap[key].parse as FormatParser<any>;\n        return result;\n    },\n    <FormatParsers>{}\n);\n\n/**\n * @internal\n */\nexport const defaultFormatAppliers: FormatAppliers = getObjectKeys(defaultFormatHandlerMap).reduce(\n    (result, key) => {\n        result[key] = defaultFormatHandlerMap[key].apply as FormatApplier<any>;\n        return result;\n    },\n    <FormatAppliers>{}\n);\n","import { generateEntityClassNames, parseEntityClassName } from '../../domUtils/entityUtils';\nimport type { EntityInfoFormat, IdFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const entityFormatHandler: FormatHandler<EntityInfoFormat & IdFormat> = {\n    parse: (format, element) => {\n        let isEntity = false;\n\n        element.classList.forEach(name => {\n            isEntity = parseEntityClassName(name, format) || isEntity;\n        });\n\n        if (!isEntity) {\n            format.isFakeEntity = true;\n            format.isReadonly = !element.isContentEditable;\n        }\n    },\n\n    apply: (format, element) => {\n        if (!format.isFakeEntity) {\n            element.className = generateEntityClassNames(format);\n        }\n\n        if (format.isReadonly) {\n            element.contentEditable = 'false';\n        } else {\n            element.removeAttribute('contenteditable');\n        }\n    },\n};\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListThreadFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listItemThreadFormatHandler: FormatHandler<ListThreadFormat> = {\n    parse: (format, element, context, defaultStyles) => {\n        const { listFormat } = context;\n        const depth = listFormat.levels.length;\n        const display = element.style.display || defaultStyles.display;\n\n        if (display && display != 'list-item') {\n            format.displayForDummyItem = display;\n        } else if (isLiUnderOl(element) && depth > 0) {\n            listFormat.threadItemCounts[depth - 1]++;\n            listFormat.threadItemCounts.splice(depth);\n            listFormat.levels.forEach(level => {\n                // Delete restart number so next list item doesn't need to have this value.\n                // Then it will be treated as a continuous list item to the previous one\n                delete level.format.startNumberOverride;\n            });\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.displayForDummyItem) {\n            element.style.display = format.displayForDummyItem;\n        } else if (isLiUnderOl(element)) {\n            const { listFormat } = context;\n            const { threadItemCounts } = listFormat;\n            const index = listFormat.nodeStack.length - 2; // The first one is always the parent of list, then minus another 1 to convert length to index\n\n            if (index >= 0) {\n                threadItemCounts.splice(index + 1);\n                threadItemCounts[index] = (threadItemCounts[index] ?? 0) + 1;\n            }\n        }\n    },\n};\n\nfunction isLiUnderOl(element: HTMLElement) {\n    return (\n        isElementOfType(element, 'li') &&\n        isNodeOfType(element.parentNode, 'ELEMENT_NODE') &&\n        isElementOfType(element.parentNode, 'ol')\n    );\n}\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ListThreadFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listLevelThreadFormatHandler: FormatHandler<ListThreadFormat> = {\n    parse: (format, element, context) => {\n        if (isElementOfType(element, 'ol')) {\n            const { listFormat } = context;\n            const { threadItemCounts, levels } = listFormat;\n            const depth = levels.length;\n\n            if (\n                typeof threadItemCounts[depth] === 'number' &&\n                element.start != threadItemCounts[depth] + 1\n            ) {\n                format.startNumberOverride = element.start;\n            }\n\n            threadItemCounts[depth] = element.start - 1;\n        }\n    },\n    apply: (format, element, context) => {\n        const {\n            listFormat: { threadItemCounts, nodeStack },\n        } = context;\n\n        // The first one is always the parent of list, and minus another one to convert length to index\n        // This format applier needs to be executed after new list level is pushed into node stack\n        const depth = nodeStack.length - 2;\n\n        if (depth >= 0 && isElementOfType(element, 'ol')) {\n            const startNumber = format.startNumberOverride;\n\n            if (typeof startNumber === 'number') {\n                threadItemCounts[depth] = startNumber - 1;\n            } else if (typeof threadItemCounts[depth] != 'number') {\n                threadItemCounts[depth] = 0;\n            }\n\n            threadItemCounts.splice(depth + 1);\n            element.start = threadItemCounts[depth] + 1;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { ListStyleFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const listStyleFormatHandler: FormatHandler<ListStyleFormat> = {\n    parse: (format, element) => {\n        const listStylePosition = element.style.listStylePosition;\n        const listStyleType = element.style.listStyleType;\n\n        if (listStylePosition) {\n            format.listStylePosition = listStylePosition;\n        }\n\n        if (listStyleType) {\n            format.listStyleType = listStyleType;\n        }\n    },\n    apply: (format, element) => {\n        if (format.listStylePosition) {\n            element.style.listStylePosition = format.listStylePosition;\n        }\n\n        if (format.listStyleType) {\n            element.style.listStyleType = format.listStyleType;\n        }\n    },\n};\n","import { shouldSetValue } from '../utils/shouldSetValue';\nimport { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { BoldFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const boldFormatHandler: FormatHandler<BoldFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontWeight = element.style.fontWeight || defaultStyle.fontWeight;\n\n        if (shouldSetValue(fontWeight, '400', format.fontWeight, defaultStyle.fontWeight)) {\n            format.fontWeight = fontWeight;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.fontWeight === 'undefined') {\n            return;\n        }\n\n        const blockFontWeight = context.implicitFormat.fontWeight;\n\n        if (\n            (blockFontWeight && blockFontWeight != format.fontWeight) ||\n            (!blockFontWeight && format.fontWeight && format.fontWeight != 'normal')\n        ) {\n            if (format.fontWeight == 'bold') {\n                wrapAllChildNodes(element, 'b');\n            } else {\n                element.style.fontWeight = format.fontWeight || 'normal';\n            }\n        }\n    },\n};\n","import type { FontFamilyFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const fontFamilyFormatHandler: FormatHandler<FontFamilyFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontFamily = element.style.fontFamily || defaultStyle.fontFamily;\n\n        if (fontFamily && fontFamily != 'inherit') {\n            format.fontFamily = fontFamily;\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.fontFamily && format.fontFamily != context.implicitFormat.fontFamily) {\n            element.style.fontFamily = format.fontFamily;\n        }\n    },\n};\n","import { isSuperOrSubScript } from './superOrSubScriptFormatHandler';\nimport { parseValueWithUnit } from '../utils/parseValueWithUnit';\nimport type { FontSizeFormat } from 'roosterjs-content-model-types';\nimport type { FormatHandler } from '../FormatHandler';\n\n/**\n * @internal\n */\nexport const fontSizeFormatHandler: FormatHandler<FontSizeFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontSize = element.style.fontSize || defaultStyle.fontSize;\n        const verticalAlign = element.style.verticalAlign || defaultStyle.verticalAlign;\n\n        // when font size is 'smaller' and the style is for superscript/subscript,\n        // the font size will be handled by superOrSubScript handler\n        if (fontSize && !isSuperOrSubScript(fontSize, verticalAlign) && fontSize != 'inherit') {\n            if (element.style.fontSize) {\n                format.fontSize = normalizeFontSize(fontSize, context.segmentFormat.fontSize);\n            } else if (defaultStyle.fontSize) {\n                format.fontSize = fontSize;\n            }\n        }\n    },\n    apply: (format, element, context) => {\n        if (format.fontSize && format.fontSize != context.implicitFormat.fontSize) {\n            element.style.fontSize = format.fontSize;\n        }\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\nconst KnownFontSizes: Record<string, string> = {\n    'xx-small': '6.75pt',\n    'x-small': '7.5pt',\n    small: '9.75pt',\n    medium: '12pt',\n    large: '13.5pt',\n    'x-large': '18pt',\n    'xx-large': '24pt',\n    'xxx-large': '36pt',\n};\n\nfunction normalizeFontSize(fontSize: string, contextFont: string | undefined): string | undefined {\n    const knownFontSize = KnownFontSizes[fontSize];\n\n    if (knownFontSize) {\n        return knownFontSize;\n    } else if (\n        fontSize == 'smaller' ||\n        fontSize == 'larger' ||\n        fontSize.endsWith('em') ||\n        fontSize.endsWith('%')\n    ) {\n        if (!contextFont) {\n            return undefined;\n        } else {\n            const existingFontSize = parseValueWithUnit(contextFont, undefined /*element*/, 'px');\n\n            if (existingFontSize) {\n                switch (fontSize) {\n                    case 'smaller':\n                        return Math.round((existingFontSize * 500) / 6) / 100 + 'px';\n                    case 'larger':\n                        return Math.round((existingFontSize * 600) / 5) / 100 + 'px';\n                    default:\n                        return parseValueWithUnit(fontSize, existingFontSize, 'px') + 'px';\n                }\n            }\n        }\n    } else if (fontSize == 'inherit' || fontSize == 'revert' || fontSize == 'unset') {\n        return undefined;\n    } else {\n        return fontSize;\n    }\n}\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { ItalicFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const italicFormatHandler: FormatHandler<ItalicFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const fontStyle = element.style.fontStyle || defaultStyle.fontStyle;\n\n        if (fontStyle == 'italic' || fontStyle == 'oblique') {\n            format.italic = true;\n        } else if (fontStyle == 'initial' || fontStyle == 'normal') {\n            format.italic = false;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.italic === 'undefined') {\n            return;\n        }\n\n        const implicitItalic = context.implicitFormat.italic;\n\n        if (!!implicitItalic != !!format.italic) {\n            if (format.italic) {\n                wrapAllChildNodes(element, 'i');\n            } else {\n                element.style.fontStyle = 'normal';\n            }\n        }\n    },\n};\n","import { shouldSetValue } from '../utils/shouldSetValue';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { LetterSpacingFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const letterSpacingFormatHandler: FormatHandler<LetterSpacingFormat> = {\n    parse: (format, element, _, defaultStyle) => {\n        const letterSpacing = element.style.letterSpacing || defaultStyle.letterSpacing;\n\n        if (\n            shouldSetValue(\n                letterSpacing,\n                'normal',\n                format.letterSpacing,\n                defaultStyle.letterSpacing\n            )\n        ) {\n            format.letterSpacing = letterSpacing;\n        }\n    },\n    apply: (format, element) => {\n        if (format.letterSpacing) {\n            element.style.letterSpacing = format.letterSpacing;\n        }\n    },\n};\n","import { isElementOfType } from '../../domUtils/isElementOfType';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { LinkFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const linkFormatHandler: FormatHandler<LinkFormat> = {\n    parse: (format, element) => {\n        if (isElementOfType(element, 'a')) {\n            const name = element.name;\n            const href = element.getAttribute('href'); // Use getAttribute to get original HREF but not the resolved absolute url\n            const target = element.target;\n            const rel = element.rel;\n            const id = element.id;\n            const className = element.className;\n            const title = element.title;\n\n            if (name) {\n                format.name = name;\n            }\n\n            if (href) {\n                format.href = href;\n            }\n\n            if (target) {\n                format.target = target;\n            }\n\n            if (id) {\n                format.anchorId = id;\n            }\n\n            if (rel) {\n                format.relationship = rel;\n            }\n\n            if (title) {\n                format.anchorTitle = title;\n            }\n\n            if (className) {\n                format.anchorClass = className;\n            }\n        }\n    },\n    apply: (format, element) => {\n        if (isElementOfType(element, 'a') && format.href) {\n            element.href = format.href;\n\n            if (format.name) {\n                element.name = format.name;\n            }\n\n            if (format.target) {\n                element.target = format.target;\n            }\n\n            if (format.anchorId) {\n                element.id = format.anchorId;\n            }\n\n            if (format.anchorClass) {\n                element.className = format.anchorClass;\n            }\n\n            if (format.anchorTitle) {\n                element.title = format.anchorTitle;\n            }\n\n            if (format.relationship) {\n                element.rel = format.relationship;\n            }\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { StrikeFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const strikeFormatHandler: FormatHandler<StrikeFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textDecoration = element.style.textDecoration || defaultStyle.textDecoration;\n\n        if (textDecoration?.indexOf('line-through')! >= 0) {\n            format.strikethrough = true;\n        }\n    },\n    apply: (format, element) => {\n        if (format.strikethrough) {\n            wrapAllChildNodes(element, 's');\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { SuperOrSubScriptFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const superOrSubScriptFormatHandler: FormatHandler<SuperOrSubScriptFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const verticalAlign = element.style.verticalAlign || defaultStyle.verticalAlign;\n        const fontSize = element.style.fontSize || defaultStyle.fontSize;\n\n        if (isSuperOrSubScript(fontSize, verticalAlign)) {\n            format.superOrSubScriptSequence = (format.superOrSubScriptSequence || '')\n                .split(' ')\n                .concat(verticalAlign)\n                .join(' ')\n                .trim();\n        }\n    },\n    apply: (format, element) => {\n        if (format.superOrSubScriptSequence) {\n            format.superOrSubScriptSequence\n                .split(' ')\n                .reverse()\n                .forEach(value => {\n                    const tagName = value == 'super' ? 'sup' : value == 'sub' ? 'sub' : null;\n\n                    if (tagName) {\n                        wrapAllChildNodes(element, tagName);\n                    }\n                });\n        }\n    },\n};\n\n/**\n * @internal\n */\nexport function isSuperOrSubScript(\n    fontSize: string | undefined,\n    verticalAlign: string | undefined\n): verticalAlign is 'sub' | 'super' {\n    return fontSize == 'smaller' && (verticalAlign == 'sub' || verticalAlign == 'super');\n}\n","import { getColor, setColor } from '../utils/color';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { TextColorFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textColorFormatHandler: FormatHandler<TextColorFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textColor =\n            getColor(\n                element,\n                false /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            ) || defaultStyle.color;\n\n        if (textColor && textColor != 'inherit') {\n            format.textColor = textColor;\n        }\n    },\n    apply: (format, element, context) => {\n        const implicitColor = context.implicitFormat.textColor;\n\n        if (format.textColor && format.textColor != implicitColor) {\n            setColor(\n                element,\n                format.textColor,\n                false /*isBackground*/,\n                context.darkColorHandler,\n                !!context.isDarkMode\n            );\n        }\n    },\n};\n","import { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type { FormatHandler } from '../FormatHandler';\nimport type { UnderlineFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const underlineFormatHandler: FormatHandler<UnderlineFormat> = {\n    parse: (format, element, context, defaultStyle) => {\n        const textDecoration = element.style.textDecoration || defaultStyle.textDecoration;\n\n        if (textDecoration?.indexOf('underline')! >= 0) {\n            format.underline = true;\n        } else if (element.tagName == 'A' && textDecoration == 'none') {\n            format.underline = false;\n        }\n    },\n    apply: (format, element, context) => {\n        if (typeof format.underline === 'undefined') {\n            return;\n        }\n\n        const blockUnderline = context.implicitFormat.underline;\n\n        if (!!blockUnderline != !!format.underline) {\n            if (format.underline) {\n                wrapAllChildNodes(element, 'u');\n            } else {\n                element.style.textDecoration = 'none';\n            }\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TableLayoutFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const tableLayoutFormatHandler: FormatHandler<TableLayoutFormat> = {\n    parse: (format, element) => {\n        const tableLayout = element.style.tableLayout;\n        if (tableLayout && tableLayout != 'inherit') {\n            format.tableLayout = tableLayout;\n        }\n    },\n    apply: (format, element) => {\n        if (format.tableLayout) {\n            element.style.tableLayout = format.tableLayout;\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { SpacingFormat } from 'roosterjs-content-model-types';\n\nconst BorderCollapsed = 'collapse';\nconst CellPadding = 'cellPadding';\n\n/**\n * @internal\n */\nexport const tableSpacingFormatHandler: FormatHandler<SpacingFormat> = {\n    parse: (format, element) => {\n        if (element.style.borderCollapse == BorderCollapsed) {\n            format.borderCollapse = true;\n        } else {\n            const cellPadding = element.getAttribute(CellPadding);\n            if (cellPadding) {\n                format.borderCollapse = true;\n            }\n        }\n    },\n    apply: (format, element) => {\n        if (format.borderCollapse) {\n            element.style.borderCollapse = BorderCollapsed;\n            element.style.borderSpacing = '0';\n            element.style.boxSizing = 'border-box';\n        }\n    },\n};\n","import type { FormatHandler } from '../FormatHandler';\nimport type { TextColorFormat } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const textColorOnTableCellFormatHandler: FormatHandler<TextColorFormat> = {\n    parse: (format, element) => {\n        if (element.style.color) {\n            // Delete color from format since text color on TD/TH will be handled by separate code\n            // and text color on segment format context need to be reset so that it will not inherit\n            // value outer container\n            delete format.textColor;\n        }\n    },\n    apply: () => {},\n};\n","import type { ColorManager } from 'roosterjs-content-model-types';\n\n/**\n * List of deprecated colors\n */\nexport const DeprecatedColors: string[] = [\n    'inactiveborder',\n    'activeborder',\n    'inactivecaptiontext',\n    'inactivecaption',\n    'activecaption',\n    'appworkspace',\n    'infobackground',\n    'background',\n    'buttonhighlight',\n    'buttonshadow',\n    'captiontext',\n    'infotext',\n    'menutext',\n    'menu',\n    'scrollbar',\n    'threeddarkshadow',\n    'threedface',\n    'threedhighlight',\n    'threedlightshadow',\n    'threedfhadow',\n    'windowtext',\n    'windowframe',\n    'window',\n];\n\n/**\n * Get color from given HTML element\n * @param element The element to get color from\n * @param isBackground True to get background color, false to get text color\n * @param darkColorHandler The dark color handler object to help manager dark mode color\n * @param isDarkMode Whether element is in dark mode now\n */\nexport function getColor(\n    element: HTMLElement,\n    isBackground: boolean,\n    darkColorHandler: ColorManager | undefined,\n    isDarkMode: boolean\n): string | undefined {\n    let color =\n        (isBackground ? element.style.backgroundColor : element.style.color) ||\n        element.getAttribute(isBackground ? 'bgcolor' : 'color') ||\n        undefined;\n\n    if (color && DeprecatedColors.indexOf(color) > -1) {\n        color = undefined;\n    }\n\n    if (darkColorHandler) {\n        color = darkColorHandler.parseColorValue(color, isDarkMode).lightModeColor;\n    }\n\n    return color;\n}\n\n/**\n * Set color to given HTML element\n * @param element The element to set color to\n * @param lightModeColor The color to set, always pass in color in light mode\n * @param isBackground True to set background color, false to set text color\n * @param darkColorHandler The dark color handler object to help manager dark mode color\n * @param isDarkMode Whether element is in dark mode now\n */\nexport function setColor(\n    element: HTMLElement,\n    lightModeColor: string,\n    isBackground: boolean,\n    darkColorHandler: ColorManager | undefined,\n    isDarkMode: boolean\n) {\n    const effectiveColor = darkColorHandler\n        ? darkColorHandler.registerColor(lightModeColor, isDarkMode)\n        : lightModeColor;\n\n    if (isBackground) {\n        element.style.backgroundColor = effectiveColor;\n    } else {\n        element.style.color = effectiveColor;\n    }\n}\n","/**\n * @internal\n */\nexport const ResultMap = {\n    start: {\n        ltr: 'left',\n        rtl: 'right',\n    },\n    center: {\n        ltr: 'center',\n        rtl: 'center',\n    },\n    end: {\n        ltr: 'right',\n        rtl: 'left',\n    },\n    initial: {\n        ltr: 'initial',\n        rtl: 'initial',\n    },\n    justify: {\n        ltr: 'justify',\n        rtl: 'justify',\n    },\n};\n\n/**\n * @internal\n */\nexport function calcAlign(align: string, dir?: 'ltr' | 'rtl') {\n    switch (align) {\n        case 'center':\n            return 'center';\n\n        case 'left':\n            return dir == 'rtl' ? 'end' : 'start';\n\n        case 'right':\n            return dir == 'rtl' ? 'start' : 'end';\n\n        case 'start':\n        case 'end':\n            return align;\n\n        case 'justify':\n        case 'initial':\n            return align;\n\n        default:\n            return undefined;\n    }\n}\n","const MarginValueRegex = /(-?\\d+(\\.\\d+)?)([a-z]+|%)/;\n\n/**\n * Parse unit value with its unit\n * @param value The source value to parse\n * @param currentSizePxOrElement The source element which has this unit value, or current font size (in px) from context.\n * @param resultUnit Unit for result, can be px or pt. @default px\n */\nexport function parseValueWithUnit(\n    value: string = '',\n    currentSizePxOrElement?: number | HTMLElement,\n    resultUnit: 'px' | 'pt' = 'px'\n): number {\n    const match = MarginValueRegex.exec(value);\n    let result = 0;\n\n    if (match) {\n        const [_, numStr, __, unit] = match;\n        const num = parseFloat(numStr);\n\n        switch (unit) {\n            case 'px':\n                result = num;\n                break;\n            case 'pt':\n                result = ptToPx(num);\n                break;\n            case 'em':\n                result = getFontSize(currentSizePxOrElement) * num;\n                break;\n            case 'ex':\n                result = (getFontSize(currentSizePxOrElement) * num) / 2;\n                break;\n            case '%':\n                result = (getFontSize(currentSizePxOrElement) * num) / 100;\n                break;\n            default:\n                // TODO: Support more unit if need\n                break;\n        }\n    }\n\n    if (result > 0 && resultUnit == 'pt') {\n        result = pxToPt(result);\n    }\n\n    return result;\n}\n\nfunction getFontSize(currentSizeOrElement?: number | HTMLElement): number {\n    if (typeof currentSizeOrElement === 'undefined') {\n        return 0;\n    } else if (typeof currentSizeOrElement === 'number') {\n        return currentSizeOrElement;\n    } else {\n        const styleInPt =\n            currentSizeOrElement.ownerDocument.defaultView?.getComputedStyle(currentSizeOrElement)\n                .fontSize ?? '';\n        const floatInPt = parseFloat(styleInPt);\n        const floatInPx = ptToPx(floatInPt);\n\n        return floatInPx;\n    }\n}\n\nfunction ptToPx(pt: number): number {\n    return Math.round((pt * 4000) / 3) / 1000;\n}\n\nfunction pxToPt(px: number) {\n    return Math.round((px * 3000) / 4) / 1000;\n}\n","/**\n * @internal\n */\nexport function shouldSetValue(\n    value: string | undefined,\n    normalValue: string,\n    existingValue: string | undefined,\n    defaultValue: string | undefined\n): boolean {\n    return (\n        !!value &&\n        value != 'inherit' &&\n        !!(value != normalValue || existingValue || (defaultValue && value != defaultValue))\n    );\n}\n","export { domToContentModel } from './domToModel/domToContentModel';\nexport { contentModelToDom } from './modelToDom/contentModelToDom';\n\nexport {\n    childProcessor,\n    handleRegularSelection,\n    processChildNode,\n} from './domToModel/processors/childProcessor';\nexport { entityProcessor } from './domToModel/processors/entityProcessor';\nexport { tableProcessor } from './domToModel/processors/tableProcessor';\nexport { getRegularSelectionOffsets } from './domToModel/utils/getRegularSelectionOffsets';\nexport { parseFormat } from './domToModel/utils/parseFormat';\nexport { areSameFormats } from './domToModel/utils/areSameFormats';\nexport { isBlockElement } from './domToModel/utils/isBlockElement';\n\nexport { updateMetadata, hasMetadata } from './domUtils/metadata/updateMetadata';\nexport { isNodeOfType, NodeTypeMap } from './domUtils/isNodeOfType';\nexport { isElementOfType } from './domUtils/isElementOfType';\nexport { getObjectKeys } from './domUtils/getObjectKeys';\nexport { default as toArray } from './domUtils/toArray';\nexport { moveChildNodes, wrapAllChildNodes } from './domUtils/moveChildNodes';\nexport { wrap } from './domUtils/wrap';\nexport {\n    isEntityElement,\n    getAllEntityWrappers,\n    parseEntityClassName,\n    generateEntityClassNames,\n    addDelimiters,\n} from './domUtils/entityUtils';\nexport { reuseCachedElement } from './domUtils/reuseCachedElement';\n\nexport { createBr } from './modelApi/creators/createBr';\nexport { createListItem } from './modelApi/creators/createListItem';\nexport { createFormatContainer } from './modelApi/creators/createFormatContainer';\nexport { createParagraph } from './modelApi/creators/createParagraph';\nexport { createSelectionMarker } from './modelApi/creators/createSelectionMarker';\nexport { createTable } from './modelApi/creators/createTable';\nexport { createTableCell } from './modelApi/creators/createTableCell';\nexport { createText } from './modelApi/creators/createText';\nexport { createImage } from './modelApi/creators/createImage';\nexport { createContentModelDocument } from './modelApi/creators/createContentModelDocument';\nexport { createParagraphDecorator } from './modelApi/creators/createParagraphDecorator';\nexport { createGeneralSegment } from './modelApi/creators/createGeneralSegment';\nexport { createGeneralBlock } from './modelApi/creators/createGeneralBlock';\nexport { createEntity } from './modelApi/creators/createEntity';\nexport { createDivider } from './modelApi/creators/createDivider';\nexport { createListLevel } from './modelApi/creators/createListLevel';\n\nexport { addBlock } from './modelApi/common/addBlock';\nexport { addCode } from './modelApi/common/addDecorators';\nexport { addLink } from './modelApi/common/addDecorators';\n\nexport { normalizeContentModel } from './modelApi/common/normalizeContentModel';\nexport { isGeneralSegment } from './modelApi/common/isGeneralSegment';\nexport { unwrapBlock } from './modelApi/common/unwrapBlock';\nexport { addSegment } from './modelApi/common/addSegment';\nexport { isWhiteSpacePreserved } from './modelApi/common/isWhiteSpacePreserved';\nexport { normalizeSingleSegment } from './modelApi/common/normalizeSegment';\n\nexport { setParagraphNotImplicit } from './modelApi/block/setParagraphNotImplicit';\n\nexport { parseValueWithUnit } from './formatHandlers/utils/parseValueWithUnit';\nexport { BorderKeys } from './formatHandlers/common/borderFormatHandler';\nexport { DeprecatedColors, getColor, setColor } from './formatHandlers/utils/color';\n\nexport {\n    createDomToModelContext,\n    createDomToModelContextWithConfig,\n    createDomToModelConfig,\n} from './domToModel/context/createDomToModelContext';\nexport {\n    createModelToDomContext,\n    createModelToDomContextWithConfig,\n    createModelToDomConfig,\n} from './modelToDom/context/createModelToDomContext';\n","import type { ContentModelBlock } from 'roosterjs-content-model-types';\n\n/**\n * For a given block, if it is a paragraph, set it to be not-implicit\n * @param block The block to check\n */\nexport function setParagraphNotImplicit(block: ContentModelBlock) {\n    if (block.blockType == 'Paragraph' && block.isImplicit) {\n        block.isImplicit = false;\n    }\n}\n","import type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Add a given block to block group\n * @param group The block group to add block into\n * @param block The block to add\n */\nexport function addBlock(group: ContentModelBlockGroup, block: ContentModelBlock) {\n    group.blocks.push(block);\n}\n","import type {\n    ContentModelCode,\n    ContentModelLink,\n    ContentModelSegment,\n    DomToModelDecoratorContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function addLink(segment: ContentModelSegment, link: ContentModelLink) {\n    if (link.format.href) {\n        segment.link = {\n            format: { ...link.format },\n            dataset: { ...link.dataset },\n        };\n    }\n}\n\n/**\n * Add a code decorator into segment if any\n * @param segment The segment to add decorator to\n * @param code The code decorator to add\n */\nexport function addCode(segment: ContentModelSegment, code: ContentModelCode) {\n    if (code.format.fontFamily) {\n        segment.code = {\n            format: { ...code.format },\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function addDecorators(segment: ContentModelSegment, context: DomToModelDecoratorContext) {\n    addLink(segment, context.link);\n    addCode(segment, context.code);\n}\n","import { ensureParagraph } from './ensureParagraph';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Add a given segment into a paragraph from its parent group. If the last block of the given group is not paragraph, create a new paragraph.\n * @param group The parent block group of the paragraph to add segment into\n * @param newSegment The segment to add\n * @param blockFormat The block format used for creating a new paragraph when need\n * @returns The parent paragraph where the segment is added to\n */\nexport function addSegment(\n    group: ContentModelBlockGroup,\n    newSegment: ContentModelSegment,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ContentModelParagraph {\n    const paragraph = ensureParagraph(group, blockFormat, segmentFormat);\n    const lastSegment = paragraph.segments[paragraph.segments.length - 1];\n\n    if (newSegment.segmentType == 'SelectionMarker') {\n        if (!lastSegment || !lastSegment.isSelected) {\n            paragraph.segments.push(newSegment);\n        }\n    } else {\n        if (newSegment.isSelected && lastSegment?.segmentType == 'SelectionMarker') {\n            paragraph.segments.pop();\n        }\n\n        paragraph.segments.push(newSegment);\n    }\n\n    return paragraph;\n}\n","import { addBlock } from './addBlock';\nimport { createParagraph } from '../creators/createParagraph';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Ensure there is a Paragraph that can insert segments in a Content Model Block Group\n * @param group The parent block group of the target paragraph\n * @param blockFormat Format of the paragraph. This is only used if we need to create a new paragraph\n */\nexport function ensureParagraph(\n    group: ContentModelBlockGroup,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat\n): ContentModelParagraph {\n    const lastBlock = group.blocks[group.blocks.length - 1];\n\n    if (lastBlock?.blockType == 'Paragraph') {\n        return lastBlock;\n    } else {\n        const paragraph = createParagraph(true, blockFormat, segmentFormat);\n        addBlock(group, paragraph);\n\n        return paragraph;\n    }\n}\n","// A regex to match text that only has space and CR\n// We use real space char \" \" (\\u0020) here but not \"\\s\" since \"\\s\" will also match \"&nbsp;\" (\\u00A0) which is something we need to keep\nconst SPACE_TEXT_REGEX = /^[\\r\\n\\t ]*$/;\n\n/**\n * @internal\n * Check if the given string only has space, including line breaks.\n * @param txt The string to check\n */\nexport function hasSpacesOnly(txt: string): boolean {\n    return SPACE_TEXT_REGEX.test(txt);\n}\n","import type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function isBlockEmpty(block: ContentModelBlock): boolean {\n    switch (block.blockType) {\n        case 'Paragraph':\n            return block.segments.length == 0;\n\n        case 'Table':\n            return block.rows.every(row => row.cells.length == 0);\n\n        case 'BlockGroup':\n            return isBlockGroupEmpty(block);\n\n        case 'Entity':\n            return false;\n\n        default:\n            return false;\n    }\n}\n\n/**\n * @internal\n */\nexport function isBlockGroupEmpty(group: ContentModelBlockGroup): boolean {\n    switch (group.blockGroupType) {\n        case 'FormatContainer':\n            // Format Container of DIV is a container for style, so we always treat it as not empty\n            return group.tagName == 'div' ? false : group.blocks.every(isBlockEmpty);\n\n        case 'ListItem':\n            return group.blocks.every(isBlockEmpty);\n\n        case 'Document':\n        case 'General':\n        case 'TableCell':\n            return false;\n\n        default:\n            return true;\n    }\n}\n\n/**\n * @internal\n */\nexport function isSegmentEmpty(segment: ContentModelSegment): boolean {\n    switch (segment.segmentType) {\n        case 'Text':\n            return !segment.text;\n\n        case 'Image':\n            return !segment.src;\n\n        default:\n            return false;\n    }\n}\n\n/**\n * @internal\n */\nexport function isEmpty(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): boolean {\n    if (isBlockGroup(model)) {\n        return isBlockGroupEmpty(model);\n    } else if (isBlock(model)) {\n        return isBlockEmpty(model);\n    } else if (isSegment(model)) {\n        return isSegmentEmpty(model);\n    }\n\n    return false;\n}\n\nfunction isSegment(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): model is ContentModelSegment {\n    return typeof (<ContentModelSegment>model).segmentType === 'string';\n}\n\nfunction isBlock(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): model is ContentModelBlock {\n    return typeof (<ContentModelBlock>model).blockType === 'string';\n}\n\nfunction isBlockGroup(\n    model: ContentModelBlock | ContentModelBlockGroup | ContentModelSegment\n): model is ContentModelBlockGroup {\n    return typeof (<ContentModelBlockGroup>model).blockGroupType === 'string';\n}\n","import type {\n    ContentModelBlockGroup,\n    ContentModelGeneralSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * Check if the given block group is a general segment\n * @param group The group to check\n */\nexport function isGeneralSegment(\n    group: ContentModelBlockGroup | ContentModelGeneralSegment\n): group is ContentModelGeneralSegment {\n    return (\n        group.blockGroupType == 'General' &&\n        (<ContentModelGeneralSegment>group).segmentType == 'General'\n    );\n}\n","import type { ContentModelParagraph } from 'roosterjs-content-model-types';\n\n// According to https://developer.mozilla.org/en-US/docs/Web/CSS/white-space, these style values will need to preserve white spaces\nconst WHITESPACE_PRE_VALUES = ['pre', 'pre-wrap', 'break-spaces'];\n\n/**\n * Check if we have white-space to be preserved for a given paragraph\n * @param paragraph The paragraph to check\n */\nexport function isWhiteSpacePreserved(paragraph: ContentModelParagraph): boolean {\n    return (\n        (paragraph.format.whiteSpace &&\n            WHITESPACE_PRE_VALUES.indexOf(paragraph.format.whiteSpace) >= 0) ||\n        false\n    );\n}\n","import { isBlockEmpty } from './isEmpty';\nimport { normalizeParagraph } from './normalizeParagraph';\nimport { unwrapBlock } from './unwrapBlock';\nimport type { ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * For a given content model, normalize it to make the model be consistent.\n * This process includes:\n * - For a list item without any list level, unwrap the list item\n * - For a paragraph, make sure it has BR at the end if it is an empty paragraph\n * - For text segments under paragraph, make sure its space values are correct (use nbsp to replace space when necessary)\n * - For an empty block, remove it\n * @param group The root level block group of content model to normalize\n */\nexport function normalizeContentModel(group: ContentModelBlockGroup) {\n    for (let i = group.blocks.length - 1; i >= 0; i--) {\n        const block = group.blocks[i];\n\n        switch (block.blockType) {\n            case 'BlockGroup':\n                if (block.blockGroupType == 'ListItem' && block.levels.length == 0) {\n                    i += block.blocks.length;\n                    unwrapBlock(group, block);\n                } else {\n                    normalizeContentModel(block);\n                }\n                break;\n            case 'Paragraph':\n                normalizeParagraph(block);\n                break;\n            case 'Table':\n                for (let r = 0; r < block.rows.length; r++) {\n                    for (let c = 0; c < block.rows[r].cells.length; c++) {\n                        if (block.rows[r].cells[c]) {\n                            normalizeContentModel(block.rows[r].cells[c]);\n                        }\n                    }\n                }\n                break;\n        }\n\n        if (isBlockEmpty(block)) {\n            group.blocks.splice(i, 1);\n        }\n    }\n}\n","import { areSameFormats } from '../../domToModel/utils/areSameFormats';\nimport { createBr } from '../creators/createBr';\nimport { isSegmentEmpty } from './isEmpty';\nimport { isWhiteSpacePreserved } from './isWhiteSpacePreserved';\nimport { normalizeAllSegments } from './normalizeSegment';\nimport type { ContentModelParagraph } from 'roosterjs-content-model-types';\n/**\n * @internal\n */\nexport function normalizeParagraph(paragraph: ContentModelParagraph) {\n    const segments = paragraph.segments;\n\n    if (!paragraph.isImplicit && segments.length > 0) {\n        const last = segments[segments.length - 1];\n        const secondLast = segments[segments.length - 2];\n\n        if (\n            last.segmentType == 'SelectionMarker' &&\n            (!secondLast || secondLast.segmentType == 'Br')\n        ) {\n            segments.push(createBr(last.format));\n        } else if (segments.length > 1 && segments[segments.length - 1].segmentType == 'Br') {\n            const noMarkerSegments = segments.filter(x => x.segmentType != 'SelectionMarker');\n\n            // When there is content with a <BR> tag at the end, we can remove the BR.\n            // But if there are more than one <BR> at the end, do not remove them.\n            if (\n                noMarkerSegments.length > 1 &&\n                noMarkerSegments[noMarkerSegments.length - 2].segmentType != 'Br'\n            ) {\n                segments.pop();\n            }\n        }\n    }\n\n    if (!isWhiteSpacePreserved(paragraph)) {\n        normalizeAllSegments(paragraph);\n    }\n\n    removeEmptyLinks(paragraph);\n\n    removeEmptySegments(paragraph);\n}\n\nfunction removeEmptySegments(block: ContentModelParagraph) {\n    for (let j = block.segments.length - 1; j >= 0; j--) {\n        if (isSegmentEmpty(block.segments[j])) {\n            block.segments.splice(j, 1);\n        }\n    }\n}\n\nfunction removeEmptyLinks(paragraph: ContentModelParagraph) {\n    const marker = paragraph.segments.find(x => x.segmentType == 'SelectionMarker');\n    if (marker) {\n        const markerIndex = paragraph.segments.indexOf(marker);\n        const prev = paragraph.segments[markerIndex - 1];\n        const next = paragraph.segments[markerIndex + 1];\n        if (\n            (prev &&\n                !prev.link &&\n                areSameFormats(prev.format, marker.format) &&\n                (!next || (!next.link && areSameFormats(next.format, marker.format))) &&\n                marker.link) ||\n            (!prev &&\n                marker.link &&\n                next &&\n                !next.link &&\n                areSameFormats(next.format, marker.format))\n        ) {\n            delete marker.link;\n        }\n    }\n}\n","import { hasSpacesOnly } from './hasSpacesOnly';\nimport type {\n    ContentModelParagraph,\n    ContentModelSegment,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\nconst SPACE = '\\u0020';\nconst NONE_BREAK_SPACE = '\\u00A0';\nconst LEADING_SPACE_REGEX = /^\\u0020+/;\nconst TRAILING_SPACE_REGEX = /\\u0020+$/;\n\n/**\n * @internal\n */\nexport function normalizeAllSegments(paragraph: ContentModelParagraph) {\n    const context = resetNormalizeSegmentContext();\n\n    paragraph.segments.forEach(segment => {\n        normalizeSegment(segment, context);\n    });\n\n    normalizeTextSegments(context.textSegments, context.lastInlineSegment);\n    normalizeLastTextSegment(context.lastTextSegment, context.lastInlineSegment);\n}\n\n/**\n * Normalize a given segment, make sure its spaces are correctly represented by space and non-break space\n * @param segment The segment to normalize\n * @param ignoreTrailingSpaces Whether we should ignore the trailing space of the text segment @default false\n */\nexport function normalizeSingleSegment(\n    segment: ContentModelSegment,\n    ignoreTrailingSpaces: boolean = false\n) {\n    const context = resetNormalizeSegmentContext();\n\n    context.ignoreTrailingSpaces = ignoreTrailingSpaces;\n    normalizeSegment(segment, context);\n}\n\n/**\n * @internal Export for test only\n */\nexport interface NormalizeSegmentContext {\n    textSegments: ContentModelText[];\n    ignoreLeadingSpaces: boolean;\n    ignoreTrailingSpaces: boolean;\n    lastTextSegment: ContentModelText | undefined;\n    lastInlineSegment: ContentModelSegment | undefined;\n}\n\n/**\n * @internal Export for test only\n */\nexport function createNormalizeSegmentContext(): NormalizeSegmentContext {\n    return resetNormalizeSegmentContext();\n}\n\nfunction resetNormalizeSegmentContext(\n    context?: Partial<NormalizeSegmentContext>\n): NormalizeSegmentContext {\n    return Object.assign(context ?? {}, {\n        textSegments: [],\n        ignoreLeadingSpaces: true,\n        ignoreTrailingSpaces: true,\n        lastInlineSegment: undefined,\n        lastTextSegment: undefined,\n    });\n}\n\n/**\n * @internal Export for test only\n */\nexport function normalizeSegment(segment: ContentModelSegment, context: NormalizeSegmentContext) {\n    switch (segment.segmentType) {\n        case 'Br':\n            normalizeTextSegments(context.textSegments, context.lastInlineSegment);\n            normalizeLastTextSegment(context.lastTextSegment, context.lastInlineSegment);\n\n            // Line ends, reset all states\n            resetNormalizeSegmentContext(context);\n            break;\n\n        case 'Entity':\n        case 'General':\n        case 'Image':\n            // Here \"inline segment\" means a segment showing some content inline such as text, image, or other inline HTML elements\n            // BR will end current line, so it is not treated as \"inline\" here.\n            // We will do some normalization to the trailing spaces for non-inline-segments\n            context.lastInlineSegment = segment;\n            context.ignoreLeadingSpaces = false;\n            break;\n\n        case 'Text':\n            context.textSegments.push(segment);\n            context.lastInlineSegment = segment;\n            context.lastTextSegment = segment;\n\n            const first = segment.text.substring(0, 1);\n            const last = segment.text.substr(-1);\n\n            if (!hasSpacesOnly(segment.text)) {\n                if (first == SPACE) {\n                    // 1. Multiple leading space => single &nbsp; or empty (depends on if previous segment ends with space)\n                    segment.text = segment.text.replace(\n                        LEADING_SPACE_REGEX,\n                        context.ignoreLeadingSpaces ? '' : NONE_BREAK_SPACE\n                    );\n                }\n\n                if (last == SPACE) {\n                    // 2. Multiple trailing space => single space\n                    segment.text = segment.text.replace(\n                        TRAILING_SPACE_REGEX,\n                        context.ignoreTrailingSpaces ? SPACE : NONE_BREAK_SPACE\n                    );\n                }\n            }\n\n            context.ignoreLeadingSpaces = last == SPACE;\n\n            break;\n    }\n}\n\nfunction normalizeTextSegments(\n    segments: ContentModelText[],\n    lastInlineSegment: ContentModelSegment | undefined\n) {\n    segments.forEach(segment => {\n        // 3. Segment ends with &nbsp; replace it with space if the previous char is not space so that next segment can wrap\n        // Only do this for segments that is not the last one since the last space will be removed in step 4\n        if (segment != lastInlineSegment) {\n            const text = segment.text;\n\n            if (\n                text.substr(-1) == NONE_BREAK_SPACE &&\n                text.length > 1 &&\n                text.substr(-2, 1) != SPACE\n            ) {\n                segment.text = text.substring(0, text.length - 1) + SPACE;\n            }\n        }\n    });\n}\n\nfunction normalizeLastTextSegment(\n    segment: ContentModelText | undefined,\n    lastInlineSegment: ContentModelSegment | undefined\n) {\n    if (segment && segment == lastInlineSegment && segment?.text.substr(-1) == SPACE) {\n        // 4. last text segment of the paragraph, remove trailing space\n        segment.text = segment.text.replace(TRAILING_SPACE_REGEX, '');\n    }\n}\n","import { setParagraphNotImplicit } from '../block/setParagraphNotImplicit';\nimport type { ContentModelBlock, ContentModelBlockGroup } from 'roosterjs-content-model-types';\n\n/**\n * Unwrap a given block group, move its child blocks to be under its parent group\n * @param parent Parent block group of the unwrapping group\n * @param groupToUnwrap  The block group to unwrap\n */\nexport function unwrapBlock(\n    parent: ContentModelBlockGroup | null,\n    groupToUnwrap: ContentModelBlockGroup & ContentModelBlock\n) {\n    const index = parent?.blocks.indexOf(groupToUnwrap) ?? -1;\n\n    if (index >= 0) {\n        groupToUnwrap.blocks.forEach(setParagraphNotImplicit);\n\n        parent?.blocks.splice(index, 1, ...groupToUnwrap.blocks);\n    }\n}\n","import type { ContentModelBr, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelBr model\n * @param format @optional The format of this model\n */\nexport function createBr(format?: ContentModelSegmentFormat): ContentModelBr {\n    return {\n        segmentType: 'Br',\n        format: format ? { ...format } : {},\n    };\n}\n","import type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelDocument model\n * @param defaultFormat @optional Default format of this model\n */\nexport function createContentModelDocument(\n    defaultFormat?: ContentModelSegmentFormat\n): ContentModelDocument {\n    const result: ContentModelDocument = {\n        blockGroupType: 'Document',\n        blocks: [],\n    };\n\n    if (defaultFormat) {\n        result.format = defaultFormat;\n    }\n\n    return result;\n}\n","import type { ContentModelBlockFormat, ContentModelDivider } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelDivider model\n * @param tagName Tag name of this divider. Currently only hr and div are supported\n * @param format @optional The format of this model\n */\nexport function createDivider(\n    tagName: 'hr' | 'div',\n    format?: ContentModelBlockFormat\n): ContentModelDivider {\n    return {\n        blockType: 'Divider',\n        tagName,\n        format: format ? { ...format } : {},\n    };\n}\n","import type { ContentModelEntity, ContentModelSegmentFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelEntity model\n * @param wrapper Wrapper element of this entity\n * @param isReadonly Whether this is a readonly entity @default true\n * @param segmentFormat @optional Segment format of this entity\n * @param type @optional Type of this entity\n * @param id @optional Id of this entity\n */\nexport function createEntity(\n    wrapper: HTMLElement,\n    isReadonly: boolean = true,\n    segmentFormat?: ContentModelSegmentFormat,\n    type?: string,\n    id?: string\n): ContentModelEntity {\n    return {\n        segmentType: 'Entity',\n        blockType: 'Entity',\n        format: { ...segmentFormat },\n        entityFormat: {\n            id,\n            entityType: type,\n            isReadonly,\n        },\n        wrapper,\n    };\n}\n","import type {\n    ContentModelFormatContainer,\n    ContentModelFormatContainerFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelFormatContainer model\n * @param tag Tag name of this format container, in lower case\n * @param format @optional The format of this model\n */\nexport function createFormatContainer(\n    tag: Lowercase<string>,\n    format?: ContentModelFormatContainerFormat\n): ContentModelFormatContainer {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'FormatContainer',\n        tagName: tag,\n        blocks: [],\n        format: { ...(format || {}) },\n    };\n}\n","import type { ContentModelGeneralBlock } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelGeneralBlock model\n * @param element Original element of this model\n */\nexport function createGeneralBlock(element: HTMLElement): ContentModelGeneralBlock {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'General',\n        element: element,\n        blocks: [],\n        format: {},\n    };\n}\n","import type {\n    ContentModelGeneralSegment,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelGeneralSegment model\n * @param element The original DOM element\n * @param format @optional The format of this model\n */\nexport function createGeneralSegment(\n    element: HTMLElement,\n    format?: ContentModelSegmentFormat\n): ContentModelGeneralSegment {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'General',\n        segmentType: 'General',\n        format: format ? { ...format } : {},\n        blocks: [],\n        element: element,\n    };\n}\n","import type { ContentModelImage, ContentModelImageFormat } from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelImage model\n * @param src Image source\n * @param format @optional The format of this model\n */\nexport function createImage(src: string, format?: ContentModelImageFormat): ContentModelImage {\n    return {\n        segmentType: 'Image',\n        src: src,\n        format: format ? { ...format } : {},\n        dataset: {},\n    };\n}\n","import { createListLevel } from './createListLevel';\nimport { createSelectionMarker } from './createSelectionMarker';\nimport type {\n    ContentModelListItem,\n    ContentModelListLevel,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelListItem model\n * @param levels Existing list levels\n * @param format @optional The format of this model\n */\nexport function createListItem(\n    levels: ContentModelListLevel[],\n    format?: ContentModelSegmentFormat\n): ContentModelListItem {\n    return {\n        blockType: 'BlockGroup',\n        blockGroupType: 'ListItem',\n        blocks: [],\n        levels: levels\n            ? levels.map(level => createListLevel(level.listType, level.format, level.dataset))\n            : [],\n        formatHolder: createSelectionMarker(format),\n        format: {},\n    };\n}\n","import type {\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    DatasetFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelListLevel model\n * @param listType Tag name of the list, either OL or UL\n * @param format @optional The format of this model\n * @param dataset @optional The dataset of this model\n */\nexport function createListLevel(\n    listType: 'OL' | 'UL',\n    format?: ContentModelListItemLevelFormat,\n    dataset?: DatasetFormat\n): ContentModelListLevel {\n    return {\n        listType,\n        format: { ...format },\n        dataset: { ...dataset },\n    };\n}\n","import type {\n    ContentModelBlockFormat,\n    ContentModelParagraph,\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelParagraph model\n * @param isImplicit @optional Whether this is an implicit paragraph. An implicit paragraph is a paragraph that will not render with DOM element container\n * @param blockFormat @optional Format of this paragraph\n * @param segmentFormat @optional Segment format applied to this block\n * @param decorator @optional Decorator of this paragraph\n */\nexport function createParagraph(\n    isImplicit?: boolean,\n    blockFormat?: ContentModelBlockFormat,\n    segmentFormat?: ContentModelSegmentFormat,\n    decorator?: ContentModelParagraphDecorator\n): ContentModelParagraph {\n    const result: ContentModelParagraph = {\n        blockType: 'Paragraph',\n        segments: [],\n        format: blockFormat ? { ...blockFormat } : {},\n    };\n\n    if (segmentFormat && Object.keys(segmentFormat).length > 0) {\n        result.segmentFormat = { ...segmentFormat };\n    }\n\n    if (isImplicit) {\n        result.isImplicit = true;\n    }\n\n    if (decorator) {\n        result.decorator = {\n            tagName: decorator.tagName,\n            format: { ...decorator.format },\n        };\n    }\n\n    return result;\n}\n","import type {\n    ContentModelParagraphDecorator,\n    ContentModelSegmentFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelParagraphDecorator model\n * @param tagName Tag name of this decorator\n * @param format @optional The format of this model\n */\nexport function createParagraphDecorator(\n    tagName: string,\n    format?: ContentModelSegmentFormat\n): ContentModelParagraphDecorator {\n    return {\n        tagName: tagName.toLocaleLowerCase(),\n        format: { ...(format || {}) },\n    };\n}\n","import type {\n    ContentModelSegmentFormat,\n    ContentModelSelectionMarker,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelSelectionMarker model\n * @param format @optional The format of this model\n */\nexport function createSelectionMarker(\n    format?: ContentModelSegmentFormat\n): ContentModelSelectionMarker {\n    return {\n        segmentType: 'SelectionMarker',\n        isSelected: true,\n        format: format ? { ...format } : {},\n    };\n}\n","import type {\n    ContentModelTable,\n    ContentModelTableFormat,\n    ContentModelTableRow,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTable model\n * @param rowCount Count of rows of this table\n * @param format @optional The format of this model\n */\nexport function createTable(rowCount: number, format?: ContentModelTableFormat): ContentModelTable {\n    const rows: ContentModelTableRow[] = [];\n\n    for (let i = 0; i < rowCount; i++) {\n        rows.push({\n            height: 0,\n            format: {},\n            cells: [],\n        });\n    }\n\n    return {\n        blockType: 'Table',\n        rows,\n        format: { ...(format || {}) },\n        widths: [],\n        dataset: {},\n    };\n}\n","import type {\n    ContentModelTableCell,\n    ContentModelTableCellFormat,\n    DatasetFormat,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelTableCell model\n * @param spanLeftOrColSpan @optional Whether this is a table cell merged with its left cell, or colspan number @default false\n * @param spanAboveOrRowSpan Whether this is a table cell merged with its upper cell, or rowSpan number @default false\n * @param isHeader @optional Whether this is a header cell @default false\n * @param format @optional The format of this model\n */\nexport function createTableCell(\n    spanLeftOrColSpan?: boolean | number,\n    spanAboveOrRowSpan?: boolean | number,\n    isHeader?: boolean,\n    format?: ContentModelTableCellFormat,\n    dataset?: DatasetFormat\n): ContentModelTableCell {\n    const spanLeft =\n        typeof spanLeftOrColSpan === 'number' ? spanLeftOrColSpan > 1 : !!spanLeftOrColSpan;\n    const spanAbove =\n        typeof spanAboveOrRowSpan === 'number' ? spanAboveOrRowSpan > 1 : !!spanAboveOrRowSpan;\n    return {\n        blockGroupType: 'TableCell',\n        blocks: [],\n        format: format ? { ...format } : {},\n        spanLeft,\n        spanAbove,\n        isHeader: !!isHeader,\n        dataset: { ...dataset },\n    };\n}\n","import { addCode, addLink } from '../common/addDecorators';\nimport type {\n    ContentModelCode,\n    ContentModelLink,\n    ContentModelSegmentFormat,\n    ContentModelText,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create a ContentModelText model\n * @param text Text of this model\n * @param format @optional The format of this model\n * @param link @optional The link decorator\n * @param code @option The code decorator\n */\nexport function createText(\n    text: string,\n    format?: ContentModelSegmentFormat,\n    link?: ContentModelLink,\n    code?: ContentModelCode\n): ContentModelText {\n    const result: ContentModelText = {\n        segmentType: 'Text',\n        text: text,\n        format: format ? { ...format } : {},\n    };\n\n    if (link) {\n        addLink(result, link);\n    }\n\n    if (code) {\n        addCode(result, code);\n    }\n\n    return result;\n}\n","import toArray from '../domUtils/toArray';\nimport { isNodeOfType } from '../domUtils/isNodeOfType';\nimport type {\n    ContentModelDocument,\n    DOMSelection,\n    ModelToDomBlockAndSegmentNode,\n    ModelToDomContext,\n    OnNodeCreated,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create DOM tree fragment from Content Model document\n * @param doc Document object of the target DOM tree\n * @param root Target node that will become the container of new DOM tree.\n * When a DOM node with existing node is passed, it will be merged with content model so that unchanged blocks\n * won't be touched.\n * @param model The content model document to generate DOM tree from\n * @param context The context object for Content Model to DOM conversion\n * @param onNodeCreated Callback invoked when a DOM node is created\n * @returns The selection range created in DOM tree from this model, or null when there is no selection\n */\nexport function contentModelToDom(\n    doc: Document,\n    root: Node,\n    model: ContentModelDocument,\n    context: ModelToDomContext,\n    onNodeCreated?: OnNodeCreated\n): DOMSelection | null {\n    context.onNodeCreated = onNodeCreated;\n\n    context.modelHandlers.blockGroupChildren(doc, root, model, context);\n\n    const range = extractSelectionRange(doc, context);\n\n    root.normalize();\n\n    return range;\n}\n\nfunction extractSelectionRange(doc: Document, context: ModelToDomContext): DOMSelection | null {\n    const {\n        regularSelection: { start, end },\n        tableSelection,\n        imageSelection,\n    } = context;\n\n    let startPosition: { container: Node; offset: number } | undefined;\n    let endPosition: { container: Node; offset: number } | undefined;\n\n    if (imageSelection) {\n        return imageSelection;\n    } else if (\n        (startPosition = start && calcPosition(start)) &&\n        (endPosition = end && calcPosition(end))\n    ) {\n        const range = doc.createRange();\n\n        range.setStart(startPosition.container, startPosition.offset);\n        range.setEnd(endPosition.container, endPosition.offset);\n\n        return {\n            type: 'range',\n            range,\n        };\n    } else if (tableSelection) {\n        return tableSelection;\n    } else {\n        return null;\n    }\n}\n\nfunction calcPosition(\n    pos: ModelToDomBlockAndSegmentNode\n): { container: Node; offset: number } | undefined {\n    let result: { container: Node; offset: number } | undefined;\n\n    if (pos.block) {\n        if (!pos.segment) {\n            result = { container: pos.block, offset: 0 };\n        } else if (isNodeOfType(pos.segment, 'TEXT_NODE')) {\n            result = { container: pos.segment, offset: pos.segment.nodeValue?.length || 0 };\n        } else if (pos.segment.parentNode) {\n            result = {\n                container: pos.segment.parentNode,\n                offset:\n                    toArray(pos.segment.parentNode.childNodes as NodeListOf<Node>).indexOf(\n                        pos.segment\n                    ) + 1,\n            };\n        }\n    }\n\n    if (result && isNodeOfType(result.container, 'DOCUMENT_FRAGMENT_NODE')) {\n        const childNodes = result.container.childNodes;\n\n        if (childNodes.length > result.offset) {\n            result = { container: childNodes[result.offset], offset: 0 };\n        } else if (result.container.lastChild) {\n            const container = result.container.lastChild;\n            result = {\n                container,\n                offset: isNodeOfType(container, 'TEXT_NODE')\n                    ? container.nodeValue?.length ?? 0\n                    : container.childNodes.length,\n            };\n        } else {\n            result = undefined;\n        }\n    }\n\n    return result;\n}\n","import { defaultContentModelHandlers } from './defaultContentModelHandlers';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport {\n    defaultFormatAppliers,\n    defaultFormatKeysPerCategory,\n} from '../../formatHandlers/defaultFormatHandlers';\nimport type {\n    EditorContext,\n    FormatApplier,\n    FormatAppliers,\n    FormatAppliersPerCategory,\n    ModelToDomContext,\n    ModelToDomFormatContext,\n    ModelToDomOption,\n    ModelToDomSelectionContext,\n    ModelToDomSettings,\n} from 'roosterjs-content-model-types';\n\n/**\n * Create context object fro Content Model to DOM conversion\n * @param editorContext Context of editor\n * @param options Option array to customize the Model to DOM conversion behavior\n */\nexport function createModelToDomContext(\n    editorContext?: EditorContext,\n    ...options: (ModelToDomOption | undefined)[]\n): ModelToDomContext {\n    return createModelToDomContextWithConfig(createModelToDomConfig(options), editorContext);\n}\n\n/**\n * Create context object for Content Model to DOM conversion with an existing configure\n * @param config A full config object to define how to convert Content Model to DOM tree\n * @param editorContext Context of editor\n */\nexport function createModelToDomContextWithConfig(\n    config: ModelToDomSettings,\n    editorContext?: EditorContext\n) {\n    return Object.assign(\n        {},\n        editorContext,\n        createModelToDomSelectionContext(),\n        createModelToDomFormatContext(),\n        config\n    );\n}\n\nfunction createModelToDomSelectionContext(): ModelToDomSelectionContext {\n    return {\n        regularSelection: {\n            current: {\n                block: null,\n                segment: null,\n            },\n        },\n    };\n}\n\nfunction createModelToDomFormatContext(): ModelToDomFormatContext {\n    return {\n        listFormat: {\n            threadItemCounts: [],\n            nodeStack: [],\n        },\n        implicitFormat: {},\n    };\n}\n\n/**\n * Create Content Model to DOM Config object\n * @param options All customizations of DOM creation\n */\nexport function createModelToDomConfig(\n    options: (ModelToDomOption | undefined)[]\n): ModelToDomSettings {\n    return {\n        modelHandlers: Object.assign(\n            {},\n            defaultContentModelHandlers,\n            ...options.map(x => x?.modelHandlerOverride)\n        ),\n        formatAppliers: buildFormatAppliers(\n            options.map(x => x?.formatApplierOverride),\n            options.map(x => x?.additionalFormatAppliers)\n        ),\n        defaultModelHandlers: defaultContentModelHandlers,\n        defaultFormatAppliers,\n        metadataAppliers: Object.assign({}, ...options.map(x => x?.metadataAppliers)),\n    };\n}\n\n/**\n * @internal Export for test only\n * Build format appliers used by Content Model to DOM conversion\n */\nexport function buildFormatAppliers(\n    overrides: (Partial<FormatAppliers> | undefined)[] = [],\n    additionalAppliersArray: (Partial<FormatAppliersPerCategory> | undefined)[] = []\n): FormatAppliersPerCategory {\n    const combinedOverrides = Object.assign({}, ...overrides);\n\n    return getObjectKeys(defaultFormatKeysPerCategory).reduce((result, key) => {\n        const value = defaultFormatKeysPerCategory[key]\n            .map(\n                formatKey =>\n                    (combinedOverrides[formatKey] === undefined\n                        ? defaultFormatAppliers[formatKey]\n                        : combinedOverrides[formatKey]) as FormatApplier<any>\n            )\n            .concat(\n                ...additionalAppliersArray.map(\n                    appliers => (appliers?.[key] ?? []) as FormatApplier<any>[]\n                )\n            );\n\n        result[key] = value;\n\n        return result;\n    }, {} as FormatAppliersPerCategory);\n}\n","import { handleBlock } from '../handlers/handleBlock';\nimport { handleBlockGroupChildren } from '../handlers/handleBlockGroupChildren';\nimport { handleBr } from '../handlers/handleBr';\nimport { handleDivider } from '../handlers/handleDivider';\nimport { handleEntityBlock, handleEntitySegment } from '../handlers/handleEntity';\nimport { handleFormatContainer } from '../handlers/handleFormatContainer';\nimport { handleGeneralBlock, handleGeneralSegment } from '../handlers/handleGeneralModel';\nimport { handleImage } from '../handlers/handleImage';\nimport { handleList } from '../handlers/handleList';\nimport { handleListItem } from '../handlers/handleListItem';\nimport { handleParagraph } from '../handlers/handleParagraph';\nimport { handleSegment } from '../handlers/handleSegment';\nimport { handleSegmentDecorator } from '../handlers/handleSegmentDecorator';\nimport { handleTable } from '../handlers/handleTable';\nimport { handleText } from '../handlers/handleText';\nimport type { ContentModelHandlerMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const defaultContentModelHandlers: ContentModelHandlerMap = {\n    block: handleBlock,\n    blockGroupChildren: handleBlockGroupChildren,\n    br: handleBr,\n    entityBlock: handleEntityBlock,\n    entitySegment: handleEntitySegment,\n    generalBlock: handleGeneralBlock,\n    generalSegment: handleGeneralSegment,\n    divider: handleDivider,\n    image: handleImage,\n    list: handleList,\n    listItem: handleListItem,\n    paragraph: handleParagraph,\n    formatContainer: handleFormatContainer,\n    segment: handleSegment,\n    segmentDecorator: handleSegmentDecorator,\n    table: handleTable,\n    text: handleText,\n};\n","import type {\n    ContentModelBlock,\n    ContentModelBlockHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBlock: ContentModelBlockHandler<ContentModelBlock> = (\n    doc: Document,\n    parent: Node,\n    block: ContentModelBlock,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    const handlers = context.modelHandlers;\n\n    switch (block.blockType) {\n        case 'Table':\n            refNode = handlers.table(doc, parent, block, context, refNode);\n            break;\n        case 'Paragraph':\n            refNode = handlers.paragraph(doc, parent, block, context, refNode);\n            break;\n        case 'Entity':\n            refNode = handlers.entityBlock(doc, parent, block, context, refNode);\n            break;\n        case 'Divider':\n            refNode = handlers.divider(doc, parent, block, context, refNode);\n            break;\n        case 'BlockGroup':\n            switch (block.blockGroupType) {\n                case 'General':\n                    refNode = handlers.generalBlock(doc, parent, block, context, refNode);\n                    break;\n\n                case 'FormatContainer':\n                    refNode = handlers.formatContainer(doc, parent, block, context, refNode);\n                    break;\n\n                case 'ListItem':\n                    refNode = handlers.listItem(doc, parent, block, context, refNode);\n                    break;\n            }\n\n            break;\n    }\n\n    return refNode;\n};\n","import type {\n    ContentModelBlockGroup,\n    ContentModelHandler,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBlockGroupChildren: ContentModelHandler<ContentModelBlockGroup> = (\n    doc: Document,\n    parent: Node,\n    group: ContentModelBlockGroup,\n    context: ModelToDomContext\n) => {\n    const { listFormat } = context;\n    const nodeStack = listFormat.nodeStack;\n    let refNode: Node | null = parent.firstChild;\n\n    try {\n        group.blocks.forEach((childBlock, index) => {\n            // When process list, we need a node stack.\n            // When there are two continuous lists, they should share the same stack\n            // so that list items with same type/threadId can be merged into the same list element\n            // In other cases, clear the stack so that two separate lists won't share the same list element\n            if (\n                index == 0 ||\n                childBlock.blockType != 'BlockGroup' ||\n                childBlock.blockGroupType != 'ListItem'\n            ) {\n                listFormat.nodeStack = [];\n            }\n\n            refNode = context.modelHandlers.block(doc, parent, childBlock, context, refNode);\n        });\n\n        // Remove all rest node if any since they don't appear in content model\n        while (refNode) {\n            const next = refNode.nextSibling;\n\n            refNode.parentNode?.removeChild(refNode);\n            refNode = next;\n        }\n    } finally {\n        listFormat.nodeStack = nodeStack;\n    }\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport type { ContentModelBr, ContentModelSegmentHandler } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleBr: ContentModelSegmentHandler<ContentModelBr> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const br = doc.createElement('br');\n    const element = doc.createElement('span');\n    element.appendChild(br);\n    parent.appendChild(element);\n\n    handleSegmentCommon(doc, br, element, segment, context, segmentNodes);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelDivider,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleDivider: ContentModelBlockHandler<ContentModelDivider> = (\n    doc: Document,\n    parent: Node,\n    divider: ContentModelDivider,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let element = context.allowCacheElement ? divider.cachedElement : undefined;\n\n    if (element) {\n        refNode = reuseCachedElement(parent, element, refNode);\n    } else {\n        element = doc.createElement(divider.tagName);\n\n        if (context.allowCacheElement) {\n            divider.cachedElement = element;\n        }\n\n        parent.insertBefore(element, refNode);\n\n        applyFormat(element, context.formatAppliers.divider, divider.format, context);\n\n        if (divider.size) {\n            element.setAttribute('size', divider.size);\n        }\n    }\n\n    context.onNodeCreated?.(divider, element);\n\n    return refNode;\n};\n","import { addDelimiters } from '../../domUtils/entityUtils';\nimport { applyFormat } from '../utils/applyFormat';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { wrap } from '../../domUtils/wrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelEntity,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleEntityBlock: ContentModelBlockHandler<ContentModelEntity> = (\n    _,\n    parent,\n    entityModel,\n    context,\n    refNode\n) => {\n    const { entityFormat, wrapper } = entityModel;\n\n    applyFormat(wrapper, context.formatAppliers.entity, entityFormat, context);\n\n    refNode = reuseCachedElement(parent, wrapper, refNode);\n    context.onNodeCreated?.(entityModel, wrapper);\n\n    return refNode;\n};\n\n/**\n * @internal\n */\nexport const handleEntitySegment: ContentModelSegmentHandler<ContentModelEntity> = (\n    doc,\n    parent,\n    entityModel,\n    context,\n    newSegments\n) => {\n    const { entityFormat, wrapper, format } = entityModel;\n\n    parent.appendChild(wrapper);\n    newSegments?.push(wrapper);\n\n    if (getObjectKeys(format).length > 0) {\n        const span = wrap(doc, wrapper, 'span');\n\n        applyFormat(span, context.formatAppliers.segment, format, context);\n    }\n\n    applyFormat(wrapper, context.formatAppliers.entity, entityFormat, context);\n\n    if (context.addDelimiterForEntity && entityFormat.isReadonly) {\n        const [after, before] = addDelimiters(doc, wrapper);\n\n        newSegments?.push(after, before);\n        context.regularSelection.current.segment = after;\n    } else {\n        context.regularSelection.current.segment = wrapper;\n    }\n\n    context.onNodeCreated?.(entityModel, wrapper);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { isBlockGroupEmpty } from '../../modelApi/common/isEmpty';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelBlockHandler,\n    ContentModelFormatContainer,\n    ContentModelSegmentFormat,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst PreChildFormat: ContentModelSegmentFormat & ContentModelBlockFormat = {\n    fontFamily: 'monospace',\n    whiteSpace: 'pre',\n};\n\n/**\n * @internal\n */\nexport const handleFormatContainer: ContentModelBlockHandler<ContentModelFormatContainer> = (\n    doc: Document,\n    parent: Node,\n    container: ContentModelFormatContainer,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let element = context.allowCacheElement ? container.cachedElement : undefined;\n\n    if (element) {\n        refNode = reuseCachedElement(parent, element, refNode);\n\n        context.modelHandlers.blockGroupChildren(doc, element, container, context);\n    } else if (!isBlockGroupEmpty(container)) {\n        const containerNode = doc.createElement(container.tagName);\n\n        if (context.allowCacheElement) {\n            container.cachedElement = containerNode;\n        }\n\n        parent.insertBefore(containerNode, refNode);\n\n        stackFormat(context, container.tagName, () => {\n            applyFormat(containerNode, context.formatAppliers.container, container.format, context);\n            applyFormat(\n                containerNode,\n                context.formatAppliers.segmentOnBlock,\n                container.format,\n                context\n            );\n\n            applyFormat(containerNode, context.formatAppliers.container, container.format, context);\n        });\n\n        if (container.tagName == 'pre') {\n            stackFormat(context, PreChildFormat, () => {\n                context.modelHandlers.blockGroupChildren(doc, containerNode, container, context);\n            });\n        } else {\n            context.modelHandlers.blockGroupChildren(doc, containerNode, container, context);\n        }\n\n        element = containerNode;\n    }\n\n    if (element) {\n        context.onNodeCreated?.(container, element);\n    }\n\n    return refNode;\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { wrap } from '../../domUtils/wrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelGeneralBlock,\n    ContentModelGeneralSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleGeneralBlock: ContentModelBlockHandler<ContentModelGeneralBlock> = (\n    doc,\n    parent,\n    group,\n    context,\n    refNode\n) => {\n    let node: Node = group.element;\n\n    if (refNode && node.parentNode == parent) {\n        refNode = reuseCachedElement(parent, node, refNode);\n    } else {\n        node = node.cloneNode();\n        group.element = node as HTMLElement;\n\n        parent.insertBefore(node, refNode);\n    }\n\n    context.onNodeCreated?.(group, node);\n    context.modelHandlers.blockGroupChildren(doc, node, group, context);\n\n    return refNode;\n};\n\n/**\n * @internal\n */\nexport const handleGeneralSegment: ContentModelSegmentHandler<ContentModelGeneralSegment> = (\n    doc,\n    parent,\n    group,\n    context,\n    segmentNodes\n) => {\n    const node = group.element.cloneNode() as HTMLElement;\n    group.element = node;\n    parent.appendChild(node);\n\n    if (isNodeOfType(node, 'ELEMENT_NODE')) {\n        const element = wrap(doc, node, 'span');\n\n        handleSegmentCommon(doc, node, element, group, context, segmentNodes);\n        context.onNodeCreated?.(group, node);\n    }\n\n    context.modelHandlers.blockGroupChildren(doc, node, group, context);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport { parseValueWithUnit } from '../../formatHandlers/utils/parseValueWithUnit';\nimport type { ContentModelImage, ContentModelSegmentHandler } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleImage: ContentModelSegmentHandler<ContentModelImage> = (\n    doc,\n    parent,\n    imageModel,\n    context,\n    segmentNodes\n) => {\n    const img = doc.createElement('img');\n    const element = document.createElement('span');\n\n    parent.appendChild(element);\n    element.appendChild(img);\n\n    img.src = imageModel.src;\n\n    if (imageModel.alt) {\n        img.alt = imageModel.alt;\n    }\n\n    if (imageModel.title) {\n        img.title = imageModel.title;\n    }\n\n    applyFormat(img, context.formatAppliers.image, imageModel.format, context);\n    applyFormat(img, context.formatAppliers.dataset, imageModel.dataset, context);\n\n    const { width, height } = imageModel.format;\n    const widthNum = width ? parseValueWithUnit(width) : 0;\n    const heightNum = height ? parseValueWithUnit(height) : 0;\n\n    if (widthNum > 0) {\n        img.width = widthNum;\n    }\n\n    if (heightNum > 0) {\n        img.height = heightNum;\n    }\n\n    if (imageModel.isSelectedAsImageSelection) {\n        context.imageSelection = {\n            type: 'image',\n            image: img,\n        };\n    }\n\n    handleSegmentCommon(doc, img, element, imageModel, context, segmentNodes);\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { applyMetadata } from '../utils/applyMetadata';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelListItem,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleList: ContentModelBlockHandler<ContentModelListItem> = (\n    doc: Document,\n    parent: Node,\n    listItem: ContentModelListItem,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let layer = 0;\n    const { nodeStack } = context.listFormat;\n\n    if (nodeStack.length == 0) {\n        nodeStack.push({\n            node: parent,\n        });\n    }\n\n    // Skip existing list levels that has same properties so we can reuse them\n    for (; layer < listItem.levels.length && layer + 1 < nodeStack.length; layer++) {\n        const stackLevel = nodeStack[layer + 1];\n        const itemLevel = listItem.levels[layer];\n\n        if (\n            stackLevel.listType != itemLevel.listType ||\n            stackLevel.dataset?.editingInfo != itemLevel.dataset.editingInfo ||\n            (itemLevel.listType == 'OL' && typeof itemLevel.format.startNumberOverride === 'number')\n        ) {\n            break;\n        }\n    }\n\n    // Cut off remained list levels that we can't reuse\n    nodeStack.splice(layer + 1);\n\n    // Create new list levels that are after reused ones\n    for (; layer < listItem.levels.length; layer++) {\n        const level = listItem.levels[layer];\n        const newList = doc.createElement(level.listType || 'UL');\n        const lastParent = nodeStack[nodeStack.length - 1].node;\n\n        lastParent.insertBefore(newList, layer == 0 ? refNode : null);\n        nodeStack.push({ node: newList, ...level });\n\n        applyFormat(newList, context.formatAppliers.listLevelThread, level.format, context);\n\n        // Need to apply metadata after applying list level format since the list numbers value relies on the result of list thread handling\n        applyMetadata(level, context.metadataAppliers.listLevel, level.format, context);\n\n        // Need to apply listItemElement formats after applying metadata since the list numbers value relies on the result of metadata handling\n        applyFormat(newList, context.formatAppliers.listLevel, level.format, context);\n        applyFormat(newList, context.formatAppliers.dataset, level.dataset, context);\n\n        context.onNodeCreated?.(level, newList);\n    }\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { applyMetadata } from '../utils/applyMetadata';\nimport { setParagraphNotImplicit } from '../../modelApi/block/setParagraphNotImplicit';\nimport { unwrap } from '../../domUtils/unwrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelListItem,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleListItem: ContentModelBlockHandler<ContentModelListItem> = (\n    doc: Document,\n    parent: Node,\n    listItem: ContentModelListItem,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    refNode = context.modelHandlers.list(doc, parent, listItem, context, refNode);\n\n    const { nodeStack } = context.listFormat;\n\n    const listParent = nodeStack?.[nodeStack?.length - 1]?.node || parent;\n    const li = doc.createElement('li');\n    const level = listItem.levels[listItem.levels.length - 1];\n\n    // It is possible listParent is the same with parent param.\n    // This happens when outdent a list item to cause it has no list level\n    listParent.insertBefore(li, refNode?.parentNode == listParent ? refNode : null);\n\n    if (level) {\n        applyFormat(li, context.formatAppliers.segment, listItem.formatHolder.format, context);\n        applyFormat(li, context.formatAppliers.listItemThread, level.format, context);\n\n        // Need to apply metadata after applying listItem format since the list numbers value relies on the result of list thread handling\n        applyMetadata(level, context.metadataAppliers.listItem, listItem.format, context);\n\n        // Need to apply listItemElement formats after applying metadata since the list numbers value relies on the result of metadata handling\n        applyFormat(li, context.formatAppliers.listItemElement, listItem.format, context);\n\n        context.modelHandlers.blockGroupChildren(doc, li, listItem, context);\n    } else {\n        // There is no level for this list item, that means it should be moved out of the list\n        // For each paragraph, make it not implicit so it will have a DIV around it, to avoid more paragraphs connected together\n        listItem.blocks.forEach(setParagraphNotImplicit);\n\n        context.modelHandlers.blockGroupChildren(doc, li, listItem, context);\n\n        unwrap(li);\n    }\n\n    context.onNodeCreated?.(listItem, li);\n\n    return refNode;\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { getObjectKeys } from '../../domUtils/getObjectKeys';\nimport { optimize } from '../optimizers/optimize';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport { stackFormat } from '../utils/stackFormat';\nimport { unwrap } from '../../domUtils/unwrap';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelParagraph,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\nconst DefaultParagraphTag = 'div';\n\n/**\n * @internal\n */\nexport const handleParagraph: ContentModelBlockHandler<ContentModelParagraph> = (\n    doc: Document,\n    parent: Node,\n    paragraph: ContentModelParagraph,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    let container = context.allowCacheElement ? paragraph.cachedElement : undefined;\n\n    if (container) {\n        refNode = reuseCachedElement(parent, container, refNode);\n    } else {\n        stackFormat(context, paragraph.decorator?.tagName || null, () => {\n            const needParagraphWrapper =\n                !paragraph.isImplicit ||\n                !!paragraph.decorator ||\n                (getObjectKeys(paragraph.format).length > 0 &&\n                    paragraph.segments.some(segment => segment.segmentType != 'SelectionMarker'));\n            const formatOnWrapper = needParagraphWrapper\n                ? {\n                      ...(paragraph.decorator?.format || {}),\n                      ...paragraph.segmentFormat,\n                  }\n                : {};\n\n            container = doc.createElement(paragraph.decorator?.tagName || DefaultParagraphTag);\n\n            parent.insertBefore(container, refNode);\n\n            context.regularSelection.current = {\n                block: needParagraphWrapper ? container : container.parentNode,\n                segment: null,\n            };\n\n            const handleSegments = () => {\n                const parent = container;\n\n                if (parent) {\n                    const firstSegment = paragraph.segments[0];\n\n                    if (firstSegment?.segmentType == 'SelectionMarker') {\n                        // Make sure there is a segment created before selection marker.\n                        // If selection marker is the first selected segment in a paragraph, create a dummy text node,\n                        // so after rewrite, the regularSelection object can have a valid segment object set to the text node.\n                        context.modelHandlers.text(\n                            doc,\n                            parent,\n                            {\n                                ...firstSegment,\n                                segmentType: 'Text',\n                                text: '',\n                            },\n                            context,\n                            []\n                        );\n                    }\n\n                    paragraph.segments.forEach(segment => {\n                        const newSegments: Node[] = [];\n                        context.modelHandlers.segment(doc, parent, segment, context, newSegments);\n\n                        newSegments.forEach(node => {\n                            context.domIndexer?.onSegment(node, paragraph, [segment]);\n                        });\n                    });\n                }\n            };\n\n            if (needParagraphWrapper) {\n                stackFormat(context, formatOnWrapper, handleSegments);\n\n                applyFormat(container, context.formatAppliers.block, paragraph.format, context);\n                applyFormat(container, context.formatAppliers.container, paragraph.format, context);\n                applyFormat(\n                    container,\n                    context.formatAppliers.segmentOnBlock,\n                    formatOnWrapper,\n                    context\n                );\n            } else {\n                handleSegments();\n            }\n\n            optimize(container);\n\n            // It is possible the next sibling node is changed during processing child segments\n            // e.g. When this paragraph is an implicit paragraph and it contains an inline entity segment\n            // The segment will be appended to container as child then the container will be removed\n            // since this paragraph it is implicit. In that case container.nextSibling will become original\n            // inline entity's next sibling. So reset refNode to its real next sibling (after change) here\n            // to make sure the value is correct.\n            refNode = container.nextSibling;\n\n            if (container) {\n                context.onNodeCreated?.(paragraph, container);\n                context.domIndexer?.onParagraph(container);\n            }\n\n            if (needParagraphWrapper) {\n                if (context.allowCacheElement) {\n                    paragraph.cachedElement = container;\n                }\n            } else {\n                unwrap(container);\n                container = undefined;\n            }\n        });\n    }\n\n    return refNode;\n};\n","import type {\n    ContentModelSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleSegment: ContentModelSegmentHandler<ContentModelSegment> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const regularSelection = context.regularSelection;\n\n    // If start position is not set yet, and current segment is in selection, set start position\n    if (segment.isSelected && !regularSelection.start) {\n        regularSelection.start = {\n            ...regularSelection.current,\n        };\n    }\n\n    switch (segment.segmentType) {\n        case 'Text':\n            context.modelHandlers.text(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Br':\n            context.modelHandlers.br(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Image':\n            context.modelHandlers.image(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'General':\n            context.modelHandlers.generalSegment(doc, parent, segment, context, segmentNodes);\n            break;\n\n        case 'Entity':\n            context.modelHandlers.entitySegment(doc, parent, segment, context, segmentNodes);\n            break;\n    }\n\n    // If end position is not set, or it is not finalized, and current segment is still in selection, set end position\n    // If there is other selection, we will overwrite regularSelection.end when we process that segment\n    if (segment.isSelected && regularSelection.start) {\n        regularSelection.end = {\n            ...regularSelection.current,\n        };\n    }\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { isNodeOfType } from '../../domUtils/isNodeOfType';\nimport { stackFormat } from '../utils/stackFormat';\nimport { wrapAllChildNodes } from '../../domUtils/moveChildNodes';\nimport type {\n    ContentModelSegment,\n    ContentModelSegmentHandler,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleSegmentDecorator: ContentModelSegmentHandler<ContentModelSegment> = (\n    _,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const { code, link } = segment;\n\n    if (isNodeOfType(parent, 'ELEMENT_NODE')) {\n        if (link) {\n            stackFormat(context, 'a', () => {\n                const a = wrapAllChildNodes(parent, 'a');\n\n                applyFormat(a, context.formatAppliers.link, link.format, context);\n                applyFormat(a, context.formatAppliers.dataset, link.dataset, context);\n\n                segmentNodes?.push(a);\n                context.onNodeCreated?.(link, a);\n            });\n        }\n\n        if (code) {\n            stackFormat(context, 'code', () => {\n                const codeNode = wrapAllChildNodes(parent, 'code');\n\n                applyFormat(codeNode, context.formatAppliers.code, code.format, context);\n\n                segmentNodes?.push(codeNode);\n                context.onNodeCreated?.(code, codeNode);\n            });\n        }\n    }\n};\n","import { applyFormat } from '../utils/applyFormat';\nimport { hasMetadata } from '../../domUtils/metadata/updateMetadata';\nimport { isBlockEmpty } from '../../modelApi/common/isEmpty';\nimport { moveChildNodes } from '../../domUtils/moveChildNodes';\nimport { reuseCachedElement } from '../../domUtils/reuseCachedElement';\nimport type {\n    ContentModelBlockHandler,\n    ContentModelTable,\n    ModelToDomContext,\n    TableSelection,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleTable: ContentModelBlockHandler<ContentModelTable> = (\n    doc: Document,\n    parent: Node,\n    table: ContentModelTable,\n    context: ModelToDomContext,\n    refNode: Node | null\n) => {\n    if (isBlockEmpty(table)) {\n        // Empty table, do not create TABLE element and just return\n        return refNode;\n    }\n\n    let tableNode = context.allowCacheElement ? table.cachedElement : undefined;\n\n    if (tableNode) {\n        refNode = reuseCachedElement(parent, tableNode, refNode);\n\n        moveChildNodes(tableNode);\n    } else {\n        tableNode = doc.createElement('table');\n\n        if (context.allowCacheElement) {\n            table.cachedElement = tableNode;\n        }\n\n        parent.insertBefore(tableNode, refNode);\n\n        applyFormat(tableNode, context.formatAppliers.block, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.table, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.tableBorder, table.format, context);\n        applyFormat(tableNode, context.formatAppliers.dataset, table.dataset, context);\n    }\n\n    context.onNodeCreated?.(table, tableNode);\n\n    const tbody = doc.createElement('tbody');\n    tableNode.appendChild(tbody);\n\n    for (let row = 0; row < table.rows.length; row++) {\n        const tableRow = table.rows[row];\n\n        if (tableRow.cells.length == 0) {\n            // Skip empty row\n            continue;\n        }\n\n        const tr = (context.allowCacheElement && tableRow.cachedElement) || doc.createElement('tr');\n        tbody.appendChild(tr);\n        moveChildNodes(tr);\n\n        if (!tableRow.cachedElement) {\n            if (context.allowCacheElement) {\n                tableRow.cachedElement = tr;\n            }\n\n            applyFormat(tr, context.formatAppliers.tableRow, tableRow.format, context);\n        }\n\n        context.onNodeCreated?.(tableRow, tr);\n\n        for (let col = 0; col < tableRow.cells.length; col++) {\n            const cell = tableRow.cells[col];\n\n            if (cell.isSelected) {\n                const tableSelection: TableSelection = context.tableSelection || {\n                    type: 'table',\n                    table: tableNode,\n                    firstColumn: col,\n                    lastColumn: col,\n                    firstRow: row,\n                    lastRow: row,\n                };\n\n                if (tableSelection.table == tableNode) {\n                    tableSelection.lastColumn = Math.max(tableSelection.lastColumn, col);\n                    tableSelection.lastRow = Math.max(tableSelection.lastRow, row);\n                }\n\n                context.tableSelection = tableSelection;\n            }\n\n            if (!cell.spanAbove && !cell.spanLeft) {\n                const td =\n                    (context.allowCacheElement && cell.cachedElement) ||\n                    doc.createElement(cell.isHeader ? 'th' : 'td');\n\n                tr.appendChild(td);\n\n                let rowSpan = 1;\n                let colSpan = 1;\n                let width = table.widths[col];\n                let height = tableRow.height;\n\n                for (; table.rows[row + rowSpan]?.cells[col]?.spanAbove; rowSpan++) {\n                    height += table.rows[row + rowSpan].height;\n                }\n                for (; tableRow.cells[col + colSpan]?.spanLeft; colSpan++) {\n                    width += table.widths[col + colSpan];\n                }\n\n                if (rowSpan > 1) {\n                    td.rowSpan = rowSpan;\n                }\n\n                if (colSpan > 1) {\n                    td.colSpan = colSpan;\n                }\n\n                if (!cell.cachedElement || (cell.format.useBorderBox && hasMetadata(table))) {\n                    if (width > 0 && !td.style.width) {\n                        td.style.width = width + 'px';\n                    }\n\n                    if (height > 0 && !td.style.height) {\n                        td.style.height = height + 'px';\n                    }\n                }\n\n                if (!cell.cachedElement) {\n                    if (context.allowCacheElement) {\n                        cell.cachedElement = td;\n                    }\n\n                    applyFormat(td, context.formatAppliers.block, cell.format, context);\n                    applyFormat(td, context.formatAppliers.tableCell, cell.format, context);\n                    applyFormat(td, context.formatAppliers.tableCellBorder, cell.format, context);\n                    applyFormat(td, context.formatAppliers.dataset, cell.dataset, context);\n                }\n\n                context.modelHandlers.blockGroupChildren(doc, td, cell, context);\n\n                context.onNodeCreated?.(cell, td);\n            }\n        }\n    }\n\n    context.domIndexer?.onTable(tableNode, table);\n\n    return refNode;\n};\n","import { handleSegmentCommon } from '../utils/handleSegmentCommon';\nimport type { ContentModelSegmentHandler, ContentModelText } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const handleText: ContentModelSegmentHandler<ContentModelText> = (\n    doc,\n    parent,\n    segment,\n    context,\n    segmentNodes\n) => {\n    const txt = doc.createTextNode(segment.text);\n    const element = doc.createElement('span');\n\n    parent.appendChild(element);\n    element.appendChild(txt);\n\n    handleSegmentCommon(doc, txt, element, segment, context, segmentNodes);\n};\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\n\nconst OptimizeTags = ['SPAN', 'B', 'EM', 'I', 'U', 'SUB', 'SUP', 'STRIKE', 'S', 'A', 'CODE'];\n\n/**\n * @internal\n */\nexport function mergeNode(root: Node) {\n    for (let child = root.firstChild; child; ) {\n        const next = child.nextSibling;\n\n        if (\n            next &&\n            isNodeOfType(child, 'ELEMENT_NODE') &&\n            isNodeOfType(next, 'ELEMENT_NODE') &&\n            child.tagName == next.tagName &&\n            OptimizeTags.indexOf(child.tagName) >= 0 &&\n            hasSameAttributes(child, next)\n        ) {\n            while (next.firstChild) {\n                child.appendChild(next.firstChild);\n            }\n\n            next.parentNode!.removeChild(next);\n        } else {\n            child = next;\n        }\n    }\n}\n\nfunction hasSameAttributes(element1: HTMLElement, element2: HTMLElement) {\n    const attr1 = element1.attributes;\n    const attr2 = element2.attributes;\n\n    if (attr1.length != attr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < attr1.length; i++) {\n        if (attr1[i].name != attr2[i].name || attr1[i].value != attr2[i].value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { isEntityElement } from '../../domUtils/entityUtils';\nimport { mergeNode } from './mergeNode';\nimport { removeUnnecessarySpan } from './removeUnnecessarySpan';\n\n/**\n * @internal\n */\nexport function optimize(root: Node) {\n    /**\n     * Do no do any optimization to entity\n     */\n    if (isEntityElement(root)) {\n        return;\n    }\n\n    removeUnnecessarySpan(root);\n    mergeNode(root);\n\n    for (let child = root.firstChild; child; child = child.nextSibling) {\n        optimize(child);\n    }\n}\n","import { isNodeOfType } from '../../domUtils/isNodeOfType';\n\n/**\n * @internal\n */\nexport function removeUnnecessarySpan(root: Node) {\n    for (let child = root.firstChild; child; ) {\n        if (\n            isNodeOfType(child, 'ELEMENT_NODE') &&\n            child.tagName == 'SPAN' &&\n            child.attributes.length == 0\n        ) {\n            const node = child;\n            let refNode = child.nextSibling;\n            child = child.nextSibling;\n\n            while (node.lastChild) {\n                const newNode = node.lastChild;\n                root.insertBefore(newNode, refNode);\n                refNode = newNode;\n            }\n\n            root.removeChild(node);\n        } else {\n            child = child.nextSibling;\n        }\n    }\n}\n","import type {\n    ContentModelFormatBase,\n    FormatApplier,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Apply formats to the given HTML element using specified appliers\n * @param element The element to apply formats to\n * @param appliers The appliers we are using to apply formats\n * @param format The format object we get format info from\n * @param context Content Model to DOM context\n */\nexport function applyFormat<T extends ContentModelFormatBase>(\n    element: HTMLElement,\n    appliers: (FormatApplier<T> | null)[],\n    format: T,\n    context: ModelToDomContext\n) {\n    appliers.forEach(applier => {\n        applier?.(format, element, context);\n    });\n}\n","import { updateMetadata } from '../../domUtils/metadata/updateMetadata';\nimport type {\n    ContentModelFormatBase,\n    ContentModelWithDataset,\n    MetadataApplier,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function applyMetadata<TMetadata, TFormat extends ContentModelFormatBase>(\n    model: ContentModelWithDataset<TMetadata>,\n    applier: MetadataApplier<TMetadata, TFormat> | undefined,\n    format: TFormat,\n    context: ModelToDomContext\n) {\n    if (applier) {\n        updateMetadata(\n            model,\n            metadata => {\n                applier.applierFunction(metadata, format, context);\n                return metadata;\n            },\n            applier.metadataDefinition\n        );\n    }\n}\n","import { applyFormat } from './applyFormat';\nimport type { ContentModelSegment, ModelToDomContext } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function handleSegmentCommon(\n    doc: Document,\n    segmentNode: Node,\n    containerNode: HTMLElement,\n    segment: ContentModelSegment,\n    context: ModelToDomContext,\n    segmentNodes: Node[]\n) {\n    if (!segmentNode.firstChild) {\n        context.regularSelection.current.segment = segmentNode;\n    }\n\n    applyFormat(containerNode, context.formatAppliers.styleBasedSegment, segment.format, context);\n\n    segmentNodes?.push(segmentNode);\n    context.modelHandlers.segmentDecorator(doc, containerNode, segment, context, segmentNodes);\n\n    applyFormat(containerNode, context.formatAppliers.elementBasedSegment, segment.format, context);\n\n    context.onNodeCreated?.(segment, segmentNode);\n}\n","import { defaultContentModelFormatMap } from '../../config/defaultContentModelFormatMap';\nimport type {\n    ContentModelBlockFormat,\n    ContentModelSegmentFormat,\n    ModelToDomContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function stackFormat(\n    context: ModelToDomContext,\n    tagNameOrFormat: string | (ContentModelSegmentFormat & ContentModelBlockFormat) | null,\n    callback: () => void\n) {\n    const newFormat =\n        typeof tagNameOrFormat === 'string'\n            ? defaultContentModelFormatMap[tagNameOrFormat]\n            : tagNameOrFormat;\n\n    if (newFormat) {\n        const implicitFormat = context.implicitFormat;\n\n        try {\n            context.implicitFormat = {\n                ...implicitFormat,\n                ...newFormat,\n            };\n\n            callback();\n        } finally {\n            context.implicitFormat = implicitFormat;\n        }\n    } else {\n        callback();\n    }\n}\n","import { ensureTypeInContainer } from './ensureTypeInContainer';\nimport { getContent } from './getContent';\nimport { getStyleBasedFormatState } from './getStyleBasedFormatState';\nimport { insertNode } from './insertNode';\nimport { setContent } from './setContent';\nimport type { UnportedCoreApiMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const coreApiMap: UnportedCoreApiMap = {\n    ensureTypeInContainer,\n    getContent,\n    getStyleBasedFormatState,\n    insertNode,\n    setContent,\n};\n","import { ContentPosition, KnownCreateElementDataIndex, PositionType } from 'roosterjs-editor-types';\nimport {\n    createElement,\n    createRange,\n    findClosestElementAncestor,\n    getBlockElementAtNode,\n    isNodeEmpty,\n    Position,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\nimport type { EnsureTypeInContainer } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * When typing goes directly under content div, many things can go wrong\n * We fix it by wrapping it with a div and reposition cursor within the div\n */\nexport const ensureTypeInContainer: EnsureTypeInContainer = (core, position, keyboardEvent) => {\n    const table = findClosestElementAncestor(position.node, core.contentDiv, 'table');\n    let td: HTMLElement | null;\n\n    if (table && (td = table.querySelector('td,th'))) {\n        position = new Position(td, PositionType.Begin);\n    }\n    position = position.normalize();\n\n    const block = getBlockElementAtNode(core.contentDiv, position.node);\n    let formatNode: HTMLElement | null;\n\n    if (block) {\n        formatNode = block.collapseToSingleElement();\n        if (isNodeEmpty(formatNode, false /* trimContent */, true /* shouldCountBrAsVisible */)) {\n            const brEl = formatNode.ownerDocument.createElement('br');\n            formatNode.append(brEl);\n        }\n        // if the block is empty, apply default format\n        // Otherwise, leave it as it is as we don't want to change the style for existing data\n        // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\n        const shouldSetNodeStyles =\n            isNodeEmpty(formatNode) ||\n            (keyboardEvent && wasNodeJustCreatedByKeyboardEvent(keyboardEvent, formatNode));\n        formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\n    } else {\n        // Only reason we don't get the selection block is that we have an empty content div\n        // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\n        // The fix is to add a DIV wrapping, apply default format and move cursor over\n        formatNode = createElement(\n            KnownCreateElementDataIndex.EmptyLine,\n            core.contentDiv.ownerDocument\n        ) as HTMLElement;\n        core.api.insertNode(core, formatNode, {\n            position: ContentPosition.End,\n            updateCursor: false,\n            replaceSelection: false,\n            insertOnNewLine: false,\n        });\n\n        // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\n        position = new Position(formatNode, PositionType.Begin);\n    }\n\n    // If this is triggered by a keyboard event, let's select the new position\n    if (keyboardEvent) {\n        core.api.setDOMSelection(core, {\n            type: 'range',\n            range: createRange(new Position(position)),\n        });\n    }\n};\n\nfunction wasNodeJustCreatedByKeyboardEvent(event: KeyboardEvent, formatNode: HTMLElement) {\n    return (\n        safeInstanceOf(event.target, 'Node') &&\n        event.target.contains(formatNode) &&\n        event.key === formatNode.innerText\n    );\n}\n","import { GetContentMode, PluginEventType } from 'roosterjs-editor-types';\nimport { transformColor } from 'roosterjs-content-model-core';\nimport {\n    createRange,\n    getHtmlWithSelectionPath,\n    getSelectionPath,\n    getTextContent,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\nimport type { GetContent } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Get current editor content as HTML string\n * @param core The StandaloneEditorCore object\n * @param mode specify what kind of HTML content to retrieve\n * @returns HTML string representing current editor content\n */\nexport const getContent: GetContent = (core, mode): string => {\n    let content: string | null = '';\n    const triggerExtractContentEvent = mode == GetContentMode.CleanHTML;\n    const includeSelectionMarker = mode == GetContentMode.RawHTMLWithSelection;\n\n    // When there is fragment for shadow edit, always use the cached fragment as document since HTML node in editor\n    // has been changed by uncommitted shadow edit which should be ignored.\n    const root = core.lifecycle.shadowEditFragment || core.contentDiv;\n\n    if (mode == GetContentMode.PlainTextFast) {\n        content = root.textContent;\n    } else if (mode == GetContentMode.PlainText) {\n        content = getTextContent(root);\n    } else {\n        const clonedRoot = cloneNode(root);\n        clonedRoot.normalize();\n\n        const originalRange = core.api.getDOMSelection(core);\n        const path =\n            !includeSelectionMarker || core.lifecycle.shadowEditFragment\n                ? null\n                : originalRange?.type == 'range'\n                ? getSelectionPath(core.contentDiv, originalRange.range)\n                : null;\n        const range = path && createRange(clonedRoot, path.start, path.end);\n\n        if (core.lifecycle.isDarkMode) {\n            transformColor(clonedRoot, false /*includeSelf*/, 'darkToLight', core.darkColorHandler);\n        }\n\n        if (triggerExtractContentEvent) {\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: PluginEventType.ExtractContentWithDom,\n                    clonedRoot,\n                },\n                true /*broadcast*/\n            );\n\n            content = clonedRoot.innerHTML;\n        } else if (range) {\n            // range is not null, which means we want to include a selection path in the content\n            content = getHtmlWithSelectionPath(clonedRoot, range);\n        } else {\n            content = clonedRoot.innerHTML;\n        }\n    }\n\n    return content ?? '';\n};\n\nfunction cloneNode(node: HTMLElement | DocumentFragment): HTMLElement {\n    let clonedNode: HTMLElement;\n    if (safeInstanceOf(node, 'DocumentFragment')) {\n        clonedNode = node.ownerDocument.createElement('div');\n        clonedNode.appendChild(node.cloneNode(true /*deep*/));\n    } else {\n        clonedNode = node.cloneNode(true /*deep*/) as HTMLElement;\n    }\n\n    return clonedNode;\n}\n","import { contains, getComputedStyles } from 'roosterjs-editor-dom';\nimport { NodeType } from 'roosterjs-editor-types';\nimport type { GetStyleBasedFormatState } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Get style based format state from current selection, including font name/size and colors\n * @param core The StandaloneEditorCore objects\n * @param node The node to get style from\n */\nexport const getStyleBasedFormatState: GetStyleBasedFormatState = (core, node) => {\n    if (!node) {\n        return {};\n    }\n\n    const styles = node\n        ? getComputedStyles(node, [\n              'font-family',\n              'font-size',\n              'color',\n              'background-color',\n              'line-height',\n              'margin-top',\n              'margin-bottom',\n              'text-align',\n              'direction',\n              'font-weight',\n          ])\n        : [];\n    const { contentDiv, darkColorHandler } = core;\n\n    let styleTextColor: string | undefined;\n    let styleBackColor: string | undefined;\n\n    while (\n        node &&\n        contains(contentDiv, node, true /*treatSameNodeAsContain*/) &&\n        !(styleTextColor && styleBackColor)\n    ) {\n        if (node.nodeType == NodeType.Element) {\n            const element = node as HTMLElement;\n\n            styleTextColor = styleTextColor || element.style.getPropertyValue('color');\n            styleBackColor = styleBackColor || element.style.getPropertyValue('background-color');\n        }\n        node = node.parentNode;\n    }\n\n    if (!core.lifecycle.isDarkMode && node == core.contentDiv) {\n        styleTextColor = styleTextColor || styles[2];\n        styleBackColor = styleBackColor || styles[3];\n    }\n\n    const textColor = darkColorHandler.parseColorValue(styleTextColor);\n    const backColor = darkColorHandler.parseColorValue(styleBackColor);\n\n    return {\n        fontName: styles[0],\n        fontSize: styles[1],\n        textColor: textColor.lightModeColor,\n        backgroundColor: backColor.lightModeColor,\n        textColors: textColor.darkModeColor\n            ? {\n                  lightModeColor: textColor.lightModeColor,\n                  darkModeColor: textColor.darkModeColor,\n              }\n            : undefined,\n        backgroundColors: backColor.darkModeColor\n            ? {\n                  lightModeColor: backColor.lightModeColor,\n                  darkModeColor: backColor.darkModeColor,\n              }\n            : undefined,\n        lineHeight: styles[4],\n        marginTop: styles[5],\n        marginBottom: styles[6],\n        textAlign: styles[7],\n        direction: styles[8],\n        fontWeight: styles[9],\n    };\n};\n","import { ContentPosition, NodeType, PositionType, RegionType } from 'roosterjs-editor-types';\nimport { transformColor } from 'roosterjs-content-model-core';\nimport type { BlockElement, InsertOption, NodePosition } from 'roosterjs-editor-types';\nimport {\n    createRange,\n    getBlockElementAtNode,\n    getFirstLastBlockElement,\n    isBlockElement,\n    isVoidHtmlElement,\n    Position,\n    safeInstanceOf,\n    toArray,\n    wrap,\n    adjustInsertPosition,\n    getRegionsFromRange,\n    splitTextNode,\n    splitParentNode,\n} from 'roosterjs-editor-dom';\nimport type { InsertNode, StandaloneEditorCore } from 'roosterjs-content-model-types';\n\nfunction getInitialRange(\n    core: StandaloneEditorCore,\n    option: InsertOption\n): { range: Range | null; rangeToRestore: Range | null } {\n    // Selection start replaces based on the current selection.\n    // Range inserts based on a provided range.\n    // Both have the potential to use the current selection to restore cursor position\n    // So in both cases we need to store the selection state.\n    const selection = core.api.getDOMSelection(core);\n    let range = selection?.type == 'range' ? selection.range : null;\n    let rangeToRestore = null;\n    if (option.position == ContentPosition.Range) {\n        rangeToRestore = range;\n        range = option.range;\n    } else if (range) {\n        rangeToRestore = range.cloneRange();\n    }\n\n    return { range, rangeToRestore };\n}\n\n/**\n * @internal\n * Insert a DOM node into editor content\n * @param core The StandaloneEditorCore object. No op if null.\n * @param option An insert option object to specify how to insert the node\n */\nexport const insertNode: InsertNode = (\n    core: StandaloneEditorCore,\n    node: Node,\n    option: InsertOption | null\n) => {\n    option = option || {\n        position: ContentPosition.SelectionStart,\n        insertOnNewLine: false,\n        updateCursor: true,\n        replaceSelection: true,\n        insertToRegionRoot: false,\n    };\n    const contentDiv = core.contentDiv;\n\n    if (option.updateCursor) {\n        core.api.focus(core);\n    }\n\n    if (option.position == ContentPosition.Outside) {\n        contentDiv.parentNode?.insertBefore(node, contentDiv.nextSibling);\n        return true;\n    }\n\n    if (core.lifecycle.isDarkMode) {\n        transformColor(node, true /*includeSelf*/, 'lightToDark', core.darkColorHandler);\n    }\n\n    switch (option.position) {\n        case ContentPosition.Begin:\n        case ContentPosition.End: {\n            const isBegin = option.position == ContentPosition.Begin;\n            const block = getFirstLastBlockElement(contentDiv, isBegin);\n            let insertedNode: Node | Node[] | undefined;\n            if (block) {\n                const refNode = isBegin ? block.getStartNode() : block.getEndNode();\n                if (\n                    option.insertOnNewLine ||\n                    refNode.nodeType == NodeType.Text ||\n                    isVoidHtmlElement(refNode)\n                ) {\n                    // For insert on new line, or refNode is text or void html element (HR, BR etc.)\n                    // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the\n                    // first and last node. Insert before 'hello' or after 'world', but still inside DIV\n                    if (safeInstanceOf(node, 'DocumentFragment')) {\n                        // if the node to be inserted is DocumentFragment, use its childNodes as insertedNode\n                        // because insertBefore() returns an empty DocumentFragment\n                        insertedNode = toArray(node.childNodes);\n                        refNode.parentNode?.insertBefore(\n                            node,\n                            isBegin ? refNode : refNode.nextSibling\n                        );\n                    } else {\n                        insertedNode = refNode.parentNode?.insertBefore(\n                            node,\n                            isBegin ? refNode : refNode.nextSibling\n                        );\n                    }\n                } else {\n                    // if the refNode can have child, use appendChild (which is like to insert as first/last child)\n                    // i.e. <div>hello</div>, the content will be inserted before/after hello\n                    insertedNode = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);\n                }\n            } else {\n                // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv\n                insertedNode = contentDiv.appendChild(node);\n            }\n\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\n            // add a DIV wrapping\n            if (insertedNode && option.insertOnNewLine) {\n                const nodes = Array.isArray(insertedNode) ? insertedNode : [insertedNode];\n                if (!isBlockElement(nodes[0]) || !isBlockElement(nodes[nodes.length - 1])) {\n                    wrap(nodes);\n                }\n            }\n\n            break;\n        }\n        case ContentPosition.DomEnd:\n            // Use appendChild to insert the node at the end of the content div.\n            const insertedNode = contentDiv.appendChild(node);\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\n            // add a DIV wrapping\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\n                wrap(insertedNode);\n            }\n            break;\n        case ContentPosition.Range:\n        case ContentPosition.SelectionStart:\n            let { range, rangeToRestore } = getInitialRange(core, option);\n            if (!range) {\n                break;\n            }\n\n            // if to replace the selection and the selection is not collapsed, remove the the content at selection first\n            if (option.replaceSelection && !range.collapsed) {\n                range.deleteContents();\n            }\n\n            let pos: NodePosition = Position.getStart(range);\n            let blockElement: BlockElement | null;\n\n            if (option.insertOnNewLine && option.insertToRegionRoot) {\n                pos = adjustInsertPositionRegionRoot(core, range, pos);\n            } else if (\n                option.insertOnNewLine &&\n                (blockElement = getBlockElementAtNode(contentDiv, pos.normalize().node))\n            ) {\n                pos = adjustInsertPositionNewLine(blockElement, core, pos);\n            } else {\n                pos = adjustInsertPosition(contentDiv, node, pos, range);\n            }\n\n            const nodeForCursor =\n                node.nodeType == NodeType.DocumentFragment ? node.lastChild : node;\n\n            range = createRange(pos);\n            range.insertNode(node);\n\n            if (option.updateCursor && nodeForCursor) {\n                rangeToRestore = createRange(\n                    new Position(nodeForCursor, PositionType.After).normalize()\n                );\n            }\n\n            if (rangeToRestore) {\n                core.api.setDOMSelection(core, {\n                    type: 'range',\n                    range: rangeToRestore,\n                });\n            }\n\n            break;\n    }\n\n    return true;\n};\n\nfunction adjustInsertPositionRegionRoot(\n    core: StandaloneEditorCore,\n    range: Range,\n    position: NodePosition\n) {\n    const region = getRegionsFromRange(core.contentDiv, range, RegionType.Table)[0];\n    let node: Node | null = position.node;\n\n    if (region) {\n        if (node.nodeType == NodeType.Text && !position.isAtEnd) {\n            node = splitTextNode(node as Text, position.offset, true /*returnFirstPart*/);\n        }\n\n        if (node != region.rootNode) {\n            while (node && node.parentNode != region.rootNode) {\n                splitParentNode(node, false /*splitBefore*/);\n                node = node.parentNode;\n            }\n        }\n\n        if (node) {\n            position = new Position(node, PositionType.After);\n        }\n    }\n\n    return position;\n}\n\nfunction adjustInsertPositionNewLine(\n    blockElement: BlockElement,\n    core: StandaloneEditorCore,\n    pos: Position\n) {\n    let tempPos = new Position(blockElement.getEndNode(), PositionType.After);\n    if (safeInstanceOf(tempPos.node, 'HTMLTableRowElement')) {\n        const div = core.contentDiv.ownerDocument.createElement('div');\n        const range = createRange(pos);\n        range.insertNode(div);\n        tempPos = new Position(div, PositionType.Begin);\n    }\n    return tempPos;\n}\n","import { ChangeSource, transformColor } from 'roosterjs-content-model-core';\nimport { convertMetadataToDOMSelection } from '../editor/utils/selectionConverter';\nimport { extractContentMetadata, restoreContentWithEntityPlaceholder } from 'roosterjs-editor-dom';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { ContentMetadata } from 'roosterjs-editor-types';\nimport type { SetContent, StandaloneEditorCore } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\n * if triggerContentChangedEvent is set to true\n * @param core The StandaloneEditorCore object\n * @param content HTML content to set in\n * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\n * @param metadata @optional Metadata of the content that helps editor know the selection and color mode.\n * If not passed, we will treat content as in light mode without selection\n */\nexport const setContent: SetContent = (core, content, triggerContentChangedEvent, metadata) => {\n    let contentChanged = false;\n    if (core.contentDiv.innerHTML != content) {\n        core.api.triggerEvent(\n            core,\n            {\n                eventType: PluginEventType.BeforeSetContent,\n                newContent: content,\n            },\n            true /*broadcast*/\n        );\n\n        const entities = core.entity.entityMap;\n        const html = content || '';\n        const body = new DOMParser().parseFromString(\n            core.trustedHTMLHandler?.(html) ?? html,\n            'text/html'\n        ).body;\n\n        restoreContentWithEntityPlaceholder(body, core.contentDiv, entities);\n\n        const metadataFromContent = extractContentMetadata(core.contentDiv);\n        metadata = metadata || metadataFromContent;\n        selectContentMetadata(core, metadata);\n        contentChanged = true;\n    }\n\n    const isDarkMode = core.lifecycle.isDarkMode;\n\n    if ((!metadata && isDarkMode) || (metadata && !!metadata.isDarkMode != !!isDarkMode)) {\n        transformColor(\n            core.contentDiv,\n            false /*includeSelf*/,\n            isDarkMode ? 'lightToDark' : 'darkToLight',\n            core.darkColorHandler\n        );\n        contentChanged = true;\n    }\n\n    if (triggerContentChangedEvent && contentChanged) {\n        core.api.triggerEvent(\n            core,\n            {\n                eventType: PluginEventType.ContentChanged,\n                source: ChangeSource.SetContent,\n            },\n            false /*broadcast*/\n        );\n    }\n};\n\nfunction selectContentMetadata(core: StandaloneEditorCore, metadata: ContentMetadata | undefined) {\n    if (!core.lifecycle.shadowEditFragment && metadata) {\n        const selection = convertMetadataToDOMSelection(core.contentDiv, metadata);\n\n        if (selection) {\n            core.api.setDOMSelection(core, selection);\n        }\n    }\n}\n","import { isCtrlOrMetaPressed } from 'roosterjs-editor-dom';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    EditPluginState,\n    GenericContentEditFeature,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\n/**\n * Edit Component helps handle Content edit features\n */\nclass EditPlugin implements PluginWithState<EditPluginState> {\n    private editor: IEditor | null = null;\n    private state: EditPluginState;\n\n    /**\n     * Construct a new instance of EditPlugin\n     * @param options The editor options\n     */\n    constructor() {\n        this.state = {\n            features: {},\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Edit';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        let hasFunctionKey = false;\n        let features: GenericContentEditFeature<PluginEvent>[] | null = null;\n        let ctrlOrMeta = false;\n        const isKeyDownEvent = event.eventType == PluginEventType.KeyDown;\n\n        if (isKeyDownEvent) {\n            const rawEvent = event.rawEvent;\n            const range = this.editor?.getSelectionRange();\n\n            ctrlOrMeta = isCtrlOrMetaPressed(rawEvent);\n            hasFunctionKey = ctrlOrMeta || rawEvent.altKey;\n            features =\n                this.state.features[rawEvent.which] ||\n                (range && !range.collapsed && this.state.features[Keys.RANGE]);\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            features = this.state.features[Keys.CONTENTCHANGED];\n        }\n\n        for (let i = 0; features && i < features?.length; i++) {\n            const feature = features[i];\n            if (\n                (feature.allowFunctionKeys || !hasFunctionKey) &&\n                this.editor &&\n                feature.shouldHandleEvent(event, this.editor, ctrlOrMeta)\n            ) {\n                feature.handleEvent(event, this.editor);\n                if (isKeyDownEvent) {\n                    event.handledByEditFeature = true;\n                }\n                break;\n            }\n        }\n    }\n}\n\n/**\n * @internal\n * Create a new instance of EditPlugin.\n */\nexport function createEditPlugin(): PluginWithState<EditPluginState> {\n    return new EditPlugin();\n}\n","import { convertDomSelectionToRangeEx } from '../editor/utils/selectionConverter';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { ContentModelSelectionChangedEvent } from 'roosterjs-content-model-types';\nimport type { EditorPlugin, PluginEvent, SelectionChangedEvent } from 'roosterjs-editor-types';\n\n/**\n * Translate Standalone editor event type to legacy event type\n */\nclass EventTypeTranslatePlugin implements EditorPlugin {\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'EventTypeTranslate';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize() {}\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {}\n\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.SelectionChanged:\n                if (!event.selectionRangeEx && isContentModelSelectionChangedEvent(event)) {\n                    event.selectionRangeEx = convertDomSelectionToRangeEx(event.newSelection);\n                }\n                break;\n        }\n    }\n}\n\nfunction isContentModelSelectionChangedEvent(\n    event: SelectionChangedEvent\n): event is ContentModelSelectionChangedEvent {\n    return !!(event as ContentModelSelectionChangedEvent).newSelection;\n}\n\n/**\n * @internal\n * Create a new instance of EventTypeTranslatePlugin.\n */\nexport function createEventTypeTranslatePlugin(): EditorPlugin {\n    return new EventTypeTranslatePlugin();\n}\n","import { PluginEventType, SelectionRangeTypes } from 'roosterjs-editor-types';\nimport {\n    changeElementTag,\n    getTagOfNode,\n    moveChildNodes,\n    safeInstanceOf,\n    toArray,\n} from 'roosterjs-editor-dom';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * TODO: Rename this plugin since it is not only for table now\n *\n * NormalizeTable plugin makes sure each table in editor has TBODY/THEAD/TFOOT tag around TR tags\n *\n * When we retrieve HTML content using innerHTML, browser will always add TBODY around TR nodes if there is not.\n * This causes some issue when we restore the HTML content with selection path since the selection path is\n * deeply coupled with DOM structure. So we need to always make sure there is already TBODY tag whenever\n * new table is inserted, to make sure the selection path we created is correct.\n */\nclass NormalizeTablePlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'NormalizeTable';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n            case PluginEventType.ContentChanged:\n                if (this.editor) {\n                    this.normalizeTables(this.editor.queryElements('table'));\n                }\n                break;\n\n            case PluginEventType.BeforePaste:\n                this.normalizeTables(toArray(event.fragment.querySelectorAll('table')));\n                break;\n\n            case PluginEventType.MouseDown:\n                this.normalizeTableFromEvent(event.rawEvent);\n                break;\n\n            case PluginEventType.KeyDown:\n                if (event.rawEvent.shiftKey) {\n                    this.normalizeTableFromEvent(event.rawEvent);\n                }\n                break;\n\n            case PluginEventType.ExtractContentWithDom:\n                normalizeListsForExport(event.clonedRoot);\n                break;\n        }\n    }\n\n    private normalizeTableFromEvent(event: KeyboardEvent | MouseEvent) {\n        const table = this.editor?.getElementAtCursor('table', event.target as Node);\n\n        if (table) {\n            this.normalizeTables([<HTMLTableElement>table]);\n        }\n    }\n\n    private normalizeTables(tables: HTMLTableElement[]) {\n        if (this.editor && tables.length > 0) {\n            const rangeEx = this.editor.getSelectionRangeEx();\n            const { startContainer, endContainer, startOffset, endOffset } =\n                (rangeEx?.type == SelectionRangeTypes.Normal && rangeEx.ranges[0]) || {};\n\n            const isChanged = normalizeTables(tables);\n\n            if (isChanged) {\n                if (\n                    startContainer &&\n                    endContainer &&\n                    typeof startOffset === 'number' &&\n                    typeof endOffset === 'number'\n                ) {\n                    this.editor.select(startContainer, startOffset, endContainer, endOffset);\n                } else if (\n                    rangeEx?.type == SelectionRangeTypes.TableSelection &&\n                    rangeEx.coordinates\n                ) {\n                    this.editor.select(rangeEx.table, rangeEx.coordinates);\n                }\n            }\n        }\n    }\n}\n\nfunction normalizeTables(tables: HTMLTableElement[]) {\n    let isDOMChanged = false;\n    tables.forEach(table => {\n        let tbody: HTMLTableSectionElement | null = null;\n\n        for (let child = table.firstChild; child; child = child.nextSibling) {\n            const tag = getTagOfNode(child);\n            switch (tag) {\n                case 'TR':\n                    if (!tbody) {\n                        tbody = table.ownerDocument.createElement('tbody');\n                        table.insertBefore(tbody, child);\n                    }\n\n                    tbody.appendChild(child);\n                    child = tbody;\n                    isDOMChanged = true;\n\n                    break;\n                case 'TBODY':\n                    if (tbody) {\n                        moveChildNodes(tbody, child, true /*keepExistingChildren*/);\n                        child.parentNode?.removeChild(child);\n                        child = tbody;\n                        isDOMChanged = true;\n                    } else {\n                        tbody = child as HTMLTableSectionElement;\n                    }\n                    break;\n                default:\n                    tbody = null;\n                    break;\n            }\n        }\n\n        const colgroups = table.querySelectorAll('colgroup');\n        const thead = table.querySelector('thead');\n        if (thead) {\n            colgroups.forEach(colgroup => {\n                if (!thead.contains(colgroup)) {\n                    thead.appendChild(colgroup);\n                }\n            });\n        }\n    });\n\n    return isDOMChanged;\n}\n\nfunction normalizeListsForExport(root: ParentNode) {\n    toArray(root.querySelectorAll('li')).forEach(li => {\n        const prevElement = li.previousSibling;\n\n        if (li.style.display == 'block' && safeInstanceOf(prevElement, 'HTMLLIElement')) {\n            li.style.removeProperty('display');\n\n            prevElement.appendChild(changeElementTag(li, 'div'));\n        }\n    });\n}\n\n/**\n * @internal\n * Create a new instance of NormalizeTablePlugin.\n */\nexport function createNormalizeTablePlugin(): EditorPlugin {\n    return new NormalizeTablePlugin();\n}\n","import { createEditPlugin } from './EditPlugin';\nimport { createEventTypeTranslatePlugin } from './EventTypeTranslatePlugin';\nimport { createNormalizeTablePlugin } from './NormalizeTablePlugin';\nimport type { UnportedCorePlugins } from '../publicTypes/ContentModelCorePlugins';\nimport type { UnportedCorePluginState } from 'roosterjs-content-model-types';\nimport type { ContentModelEditorOptions } from '../publicTypes/IContentModelEditor';\n\n/**\n * @internal\n * Create Core Plugins\n * @param options Editor options\n */\nexport function createCorePlugins(options: ContentModelEditorOptions): UnportedCorePlugins {\n    const map = options.corePluginOverride || {};\n\n    // The order matters, some plugin needs to be put before/after others to make sure event\n    // can be handled in right order\n    return {\n        eventTranslate: map.eventTranslate || createEventTypeTranslatePlugin(),\n        edit: map.edit || createEditPlugin(),\n        normalizeTable: map.normalizeTable || createNormalizeTablePlugin(),\n    };\n}\n\n/**\n * @internal\n * Get plugin state of core plugins\n * @param corePlugins ContentModelCorePlugins object\n */\nexport function getPluginState(corePlugins: UnportedCorePlugins): UnportedCorePluginState {\n    return {\n        edit: corePlugins.edit.getState(),\n    };\n}\n","import { buildRangeEx } from './utils/buildRangeEx';\nimport { createEditorCore } from './createEditorCore';\nimport { getObjectKeys } from 'roosterjs-content-model-dom';\nimport { getPendableFormatState } from './utils/getPendableFormatState';\nimport { isBold, redo, transformColor, undo } from 'roosterjs-content-model-core';\nimport {\n    ChangeSource,\n    ColorTransformDirection,\n    ContentPosition,\n    GetContentMode,\n    PluginEventType,\n    QueryScope,\n    RegionType,\n} from 'roosterjs-editor-types';\nimport type {\n    BlockElement,\n    ClipboardData,\n    ContentChangedData,\n    ContentChangedEvent,\n    DOMEventHandler,\n    DarkColorHandler,\n    DefaultFormat,\n    EditorUndoState,\n    ExperimentalFeatures,\n    GenericContentEditFeature,\n    IContentTraverser,\n    IPositionContentSearcher,\n    InsertOption,\n    NodePosition,\n    PendableFormatState,\n    PluginEvent,\n    PluginEventData,\n    PluginEventFromType,\n    PositionType,\n    Rect,\n    Region,\n    SelectionPath,\n    SelectionRangeEx,\n    SizeTransformer,\n    StyleBasedFormatState,\n    TableSelection,\n    TrustedHTMLHandler,\n} from 'roosterjs-editor-types';\nimport {\n    convertDomSelectionToRangeEx,\n    convertRangeExToDomSelection,\n} from './utils/selectionConverter';\nimport type {\n    CompatibleChangeSource,\n    CompatibleColorTransformDirection,\n    CompatibleContentPosition,\n    CompatibleExperimentalFeatures,\n    CompatibleGetContentMode,\n    CompatiblePluginEventType,\n    CompatibleQueryScope,\n    CompatibleRegionType,\n} from 'roosterjs-editor-types/lib/compatibleTypes';\nimport {\n    ContentTraverser,\n    Position,\n    PositionContentSearcher,\n    cacheGetEventData,\n    collapseNodes,\n    contains,\n    deleteSelectedContent,\n    findClosestElementAncestor,\n    getBlockElementAtNode,\n    getRegionsFromRange,\n    getSelectionPath,\n    isNodeEmpty,\n    isPositionAtBeginningOf,\n    queryElements,\n    toArray,\n    wrap,\n} from 'roosterjs-editor-dom';\nimport type { ContentModelEditorCore } from '../publicTypes/ContentModelEditorCore';\nimport type {\n    ContentModelEditorOptions,\n    IContentModelEditor,\n} from '../publicTypes/IContentModelEditor';\nimport type {\n    ContentModelDocument,\n    ContentModelSegmentFormat,\n    DOMSelection,\n    DomToModelOption,\n    ModelToDomOption,\n    OnNodeCreated,\n    ContentModelFormatter,\n    FormatWithContentModelOptions,\n    EditorEnvironment,\n    Snapshot,\n    SnapshotsManager,\n    DOMEventRecord,\n} from 'roosterjs-content-model-types';\n\n/**\n * Editor for Content Model.\n * (This class is still under development, and may still be changed in the future with some breaking changes)\n */\nexport class ContentModelEditor implements IContentModelEditor {\n    private core: ContentModelEditorCore | null = null;\n\n    /**\n     * Creates an instance of Editor\n     * @param contentDiv The DIV HTML element which will be the container element of editor\n     * @param options An optional options object to customize the editor\n     */\n    constructor(contentDiv: HTMLDivElement, options: ContentModelEditorOptions = {}) {\n        this.core = createEditorCore(contentDiv, options);\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\n    }\n\n    /**\n     * Create Content Model from DOM tree in this editor\n     * @param option The option to customize the behavior of DOM to Content Model conversion\n     */\n    createContentModel(\n        option?: DomToModelOption,\n        selectionOverride?: DOMSelection\n    ): ContentModelDocument {\n        const core = this.getCore();\n\n        return core.api.createContentModel(core, option, selectionOverride);\n    }\n\n    /**\n     * Set content with content model\n     * @param model The content model to set\n     * @param option Additional options to customize the behavior of Content Model to DOM conversion\n     * @param onNodeCreated An optional callback that will be called when a DOM node is created\n     */\n    setContentModel(\n        model: ContentModelDocument,\n        option?: ModelToDomOption,\n        onNodeCreated?: OnNodeCreated\n    ): DOMSelection | null {\n        const core = this.getCore();\n\n        return core.api.setContentModel(core, model, option, onNodeCreated);\n    }\n\n    /**\n     * Get current running environment, such as if editor is running on Mac\n     */\n    getEnvironment(): EditorEnvironment {\n        return this.getCore().environment;\n    }\n\n    /**\n     * Get current DOM selection\n     */\n    getDOMSelection(): DOMSelection | null {\n        const core = this.getCore();\n\n        return core.api.getDOMSelection(core);\n    }\n\n    /**\n     * Set DOMSelection into editor content.\n     * This is the replacement of IEditor.select.\n     * @param selection The selection to set\n     */\n    setDOMSelection(selection: DOMSelection | null) {\n        const core = this.getCore();\n\n        core.api.setDOMSelection(core, selection);\n    }\n\n    /**\n     * The general API to do format change with Content Model\n     * It will grab a Content Model for current editor content, and invoke a callback function\n     * to do format change. Then according to the return value, write back the modified content model into editor.\n     * If there is cached model, it will be used and updated.\n     * @param formatter Formatter function, see ContentModelFormatter\n     * @param options More options, see FormatWithContentModelOptions\n     */\n    formatContentModel(\n        formatter: ContentModelFormatter,\n        options?: FormatWithContentModelOptions\n    ): void {\n        const core = this.getCore();\n\n        core.api.formatContentModel(core, formatter, options);\n    }\n\n    /**\n     * Get pending format of editor if any, or return null\n     */\n    getPendingFormat(): ContentModelSegmentFormat | null {\n        return this.getCore().format.pendingFormat?.format ?? null;\n    }\n\n    /**\n     * Add a single undo snapshot to undo stack\n     */\n    takeSnapshot(): void {\n        const core = this.getCore();\n\n        core.api.addUndoSnapshot(core, false /*canUndoByBackspace*/);\n    }\n\n    /**\n     * Restore an undo snapshot into editor\n     * @param snapshot The snapshot to restore\n     */\n    restoreSnapshot(snapshot: Snapshot): void {\n        const core = this.getCore();\n\n        core.api.restoreUndoSnapshot(core, snapshot);\n    }\n\n    /**\n     * Dispose this editor, dispose all plugins and custom data\n     */\n    dispose(): void {\n        const core = this.getCore();\n\n        for (let i = core.plugins.length - 1; i >= 0; i--) {\n            const plugin = core.plugins[i];\n\n            try {\n                plugin.dispose();\n            } catch (e) {\n                // Cache the error and pass it out, then keep going since dispose should always succeed\n                core.disposeErrorHandler?.(plugin, e as Error);\n            }\n        }\n\n        getObjectKeys(core.customData).forEach(key => {\n            const data = core.customData[key];\n\n            if (data && data.disposer) {\n                data.disposer(data.value);\n            }\n\n            delete core.customData[key];\n        });\n\n        core.darkColorHandler.reset();\n\n        this.core = null;\n    }\n\n    /**\n     * Get whether this editor is disposed\n     * @returns True if editor is disposed, otherwise false\n     */\n    isDisposed(): boolean {\n        return !this.core;\n    }\n\n    /**\n     * Insert node into editor\n     * @param node The node to insert\n     * @param option Insert options. Default value is:\n     *  position: ContentPosition.SelectionStart\n     *  updateCursor: true\n     *  replaceSelection: true\n     *  insertOnNewLine: false\n     * @returns true if node is inserted. Otherwise false\n     */\n    insertNode(node: Node, option?: InsertOption): boolean {\n        const core = this.getCore();\n        return node ? core.api.insertNode(core, node, option ?? null) : false;\n    }\n\n    /**\n     * Delete a node from editor content\n     * @param node The node to delete\n     * @returns true if node is deleted. Otherwise false\n     */\n    deleteNode(node: Node): boolean {\n        // Only remove the node when it falls within editor\n        if (node && this.contains(node) && node.parentNode) {\n            node.parentNode.removeChild(node);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replace a node in editor content with another node\n     * @param existingNode The existing node to be replaced\n     * @param toNode node to replace to\n     * @param transformColorForDarkMode (optional) Whether to transform new node to dark mode. Default is false\n     * @returns true if node is replaced. Otherwise false\n     */\n    replaceNode(existingNode: Node, toNode: Node, transformColorForDarkMode?: boolean): boolean {\n        const core = this.getCore();\n        // Only replace the node when it falls within editor\n        if (this.contains(existingNode) && toNode) {\n            if (core.lifecycle.isDarkMode && transformColorForDarkMode) {\n                this.transformToDarkColor(toNode, ColorTransformDirection.LightToDark);\n            }\n\n            existingNode.parentNode?.replaceChild(toNode, existingNode);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get BlockElement at given node\n     * @param node The node to create InlineElement\n     * @returns The BlockElement result\n     */\n    getBlockElementAtNode(node: Node): BlockElement | null {\n        return getBlockElementAtNode(this.getCore().contentDiv, node);\n    }\n\n    contains(arg: Node | Range | null): boolean {\n        if (!arg) {\n            return false;\n        }\n        return contains(this.getCore().contentDiv, <Node>arg);\n    }\n\n    queryElements(\n        selector: string,\n        scopeOrCallback:\n            | QueryScope\n            | CompatibleQueryScope\n            | ((node: Node) => any) = QueryScope.Body,\n        callback?: (node: Node) => any\n    ) {\n        const core = this.getCore();\n        const result: HTMLElement[] = [];\n        const scope = scopeOrCallback instanceof Function ? QueryScope.Body : scopeOrCallback;\n        callback = scopeOrCallback instanceof Function ? scopeOrCallback : callback;\n\n        const selectionEx = scope == QueryScope.Body ? null : this.getSelectionRangeEx();\n        if (selectionEx) {\n            selectionEx.ranges.forEach(range => {\n                result.push(...queryElements(core.contentDiv, selector, callback, scope, range));\n            });\n        } else {\n            return queryElements(core.contentDiv, selector, callback, scope, undefined /* range */);\n        }\n\n        return result;\n    }\n\n    /**\n     * Collapse nodes within the given start and end nodes to their common ancestor node,\n     * split parent nodes if necessary\n     * @param start The start node\n     * @param end The end node\n     * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\n     * and the returned nodes will be all nodes from start through end after splitting\n     * False to disallow split parent\n     * @returns When canSplitParent is true, returns all node from start through end after splitting,\n     * otherwise just return start and end\n     */\n    collapseNodes(start: Node, end: Node, canSplitParent: boolean): Node[] {\n        return collapseNodes(this.getCore().contentDiv, start, end, canSplitParent);\n    }\n\n    //#endregion\n\n    //#region Content API\n\n    /**\n     * Check whether the editor contains any visible content\n     * @param trim Whether trim the content string before check. Default is false\n     * @returns True if there's no visible content, otherwise false\n     */\n    isEmpty(trim?: boolean): boolean {\n        return isNodeEmpty(this.getCore().contentDiv, trim);\n    }\n\n    /**\n     * Get current editor content as HTML string\n     * @param mode specify what kind of HTML content to retrieve\n     * @returns HTML string representing current editor content\n     */\n    getContent(mode: GetContentMode | CompatibleGetContentMode = GetContentMode.CleanHTML): string {\n        const core = this.getCore();\n        return core.api.getContent(core, mode);\n    }\n\n    /**\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\n     * @param content HTML content to set in\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\n     */\n    setContent(content: string, triggerContentChangedEvent: boolean = true) {\n        const core = this.getCore();\n        core.api.setContent(core, content, triggerContentChangedEvent);\n    }\n\n    /**\n     * Insert HTML content into editor\n     * @param HTML content to insert\n     * @param option Insert options. Default value is:\n     *  position: ContentPosition.SelectionStart\n     *  updateCursor: true\n     *  replaceSelection: true\n     *  insertOnNewLine: false\n     */\n    insertContent(content: string, option?: InsertOption) {\n        if (content) {\n            const doc = this.getDocument();\n            const body = new DOMParser().parseFromString(\n                this.getCore().trustedHTMLHandler(content),\n                'text/html'\n            )?.body;\n            let allNodes = body?.childNodes ? toArray(body.childNodes) : [];\n\n            // If it is to insert on new line, and there are more than one node in the collection, wrap all nodes with\n            // a parent DIV before calling insertNode on each top level sub node. Otherwise, every sub node may get wrapped\n            // separately to show up on its own line\n            if (option && option.insertOnNewLine && allNodes.length > 1) {\n                allNodes = [wrap(allNodes)];\n            }\n\n            const fragment = doc.createDocumentFragment();\n            allNodes.forEach(node => fragment.appendChild(node));\n\n            this.insertNode(fragment, option);\n        }\n    }\n\n    /**\n     * Delete selected content\n     */\n    deleteSelectedContent(): NodePosition | null {\n        const range = this.getSelectionRange();\n        if (range && !range.collapsed) {\n            return deleteSelectedContent(this.getCore().contentDiv, range);\n        }\n        return null;\n    }\n\n    /**\n     * Paste into editor using a clipboardData object\n     * @param clipboardData Clipboard data retrieved from clipboard\n     * @param pasteAsText Force pasting as plain text. Default value is false\n     * @param applyCurrentStyle True if apply format of current selection to the pasted content,\n     * false to keep original format.  Default value is false. When pasteAsText is true, this parameter is ignored\n     * @param pasteAsImage: When set to true, if the clipboardData contains a imageDataUri will paste the image to the editor\n     */\n    paste(\n        clipboardData: ClipboardData,\n        pasteAsText: boolean = false,\n        applyCurrentFormat: boolean = false,\n        pasteAsImage: boolean = false\n    ) {\n        const core = this.getCore();\n        core.api.paste(\n            core,\n            clipboardData,\n            pasteAsText\n                ? 'asPlainText'\n                : applyCurrentFormat\n                ? 'mergeFormat'\n                : pasteAsImage\n                ? 'asImage'\n                : 'normal'\n        );\n    }\n\n    //#endregion\n\n    //#region Focus and Selection\n\n    /**\n     * Get current selection range from Editor.\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\n     * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now.\n     * Default value is true\n     * @returns current selection range, or null if editor never got focus before\n     */\n    getSelectionRange(tryGetFromCache: boolean = true): Range | null {\n        const selection = this.getDOMSelection();\n\n        return selection?.type == 'range' ? selection.range : null;\n    }\n\n    /**\n     * Get current selection range from Editor.\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\n     * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now.\n     * Default value is true\n     * @returns current selection range, or null if editor never got focus before\n     */\n    getSelectionRangeEx(): SelectionRangeEx {\n        const selection = this.getDOMSelection();\n\n        return convertDomSelectionToRangeEx(selection);\n    }\n\n    /**\n     * Get current selection in a serializable format\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\n     * @returns current selection path, or null if editor never got focus before\n     */\n    getSelectionPath(): SelectionPath | null {\n        const range = this.getSelectionRange();\n        return range && getSelectionPath(this.getCore().contentDiv, range);\n    }\n\n    /**\n     * Check if focus is in editor now\n     * @returns true if focus is in editor, otherwise false\n     */\n    hasFocus(): boolean {\n        const core = this.getCore();\n        return core.api.hasFocus(core);\n    }\n\n    /**\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\n     */\n    focus() {\n        const core = this.getCore();\n        core.api.focus(core);\n    }\n\n    select(\n        arg1: Range | SelectionRangeEx | NodePosition | Node | SelectionPath | null,\n        arg2?: NodePosition | number | PositionType | TableSelection | null,\n        arg3?: Node,\n        arg4?: number | PositionType\n    ): boolean {\n        const core = this.getCore();\n        const rangeEx = buildRangeEx(core, arg1, arg2, arg3, arg4);\n        const selection = convertRangeExToDomSelection(rangeEx);\n\n        this.setDOMSelection(selection);\n        return true;\n    }\n\n    /**\n     * Get current focused position. Return null if editor doesn't have focus at this time.\n     */\n    getFocusedPosition(): NodePosition | null {\n        const sel = this.getDocument().defaultView?.getSelection();\n        if (sel?.focusNode && this.contains(sel.focusNode)) {\n            return new Position(sel.focusNode, sel.focusOffset);\n        }\n\n        const range = this.getSelectionRange();\n        if (range) {\n            return Position.getStart(range);\n        }\n\n        return null;\n    }\n\n    /**\n     * Get an HTML element from current cursor position.\n     * When expectedTags is not specified, return value is the current node (if it is HTML element)\n     * or its parent node (if current node is a Text node).\n     * When expectedTags is specified, return value is the first ancestor of current node which has\n     * one of the expected tags.\n     * If no element found within editor by the given tag, return null.\n     * @param selector Optional, an HTML selector to find HTML element with.\n     * @param startFrom Start search from this node. If not specified, start from current focused position\n     * @param event Optional, if specified, editor will try to get cached result from the event object first.\n     * If it is not cached before, query from DOM and cache the result into the event object\n     */\n    getElementAtCursor(\n        selector?: string,\n        startFrom?: Node,\n        event?: PluginEvent\n    ): HTMLElement | null {\n        event = startFrom ? undefined : event; // Only use cache when startFrom is not specified, for different start position can have different result\n\n        return (\n            cacheGetEventData(event ?? null, 'GET_ELEMENT_AT_CURSOR_' + selector, () => {\n                if (!startFrom) {\n                    const position = this.getFocusedPosition();\n                    startFrom = position?.node;\n                }\n                return (\n                    startFrom &&\n                    findClosestElementAncestor(startFrom, this.getCore().contentDiv, selector)\n                );\n            }) ?? null\n        );\n    }\n\n    /**\n     * Check if this position is at beginning of the editor.\n     * This will return true if all nodes between the beginning of target node and the position are empty.\n     * @param position The position to check\n     * @returns True if position is at beginning of the editor, otherwise false\n     */\n    isPositionAtBeginning(position: NodePosition): boolean {\n        return isPositionAtBeginningOf(position, this.getCore().contentDiv);\n    }\n\n    /**\n     * Get impacted regions from selection\n     */\n    getSelectedRegions(type: RegionType | CompatibleRegionType = RegionType.Table): Region[] {\n        const selection = this.getSelectionRangeEx();\n        const result: Region[] = [];\n        const contentDiv = this.getCore().contentDiv;\n        selection.ranges.forEach(range => {\n            result.push(...(range ? getRegionsFromRange(contentDiv, range, type) : []));\n        });\n        return result.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        });\n    }\n\n    //#endregion\n\n    //#region EVENT API\n\n    /**\n     * Attach a DOM event to the editor content DIV\n     * @param eventMap A map from event name to its handler\n     */\n    attachDomEvent(eventMap: Record<string, DOMEventRecord>): () => void {\n        const core = this.getCore();\n        return core.api.attachDomEvent(core, eventMap);\n    }\n\n    addDomEventHandler(\n        nameOrMap: string | Record<string, DOMEventHandler>,\n        handler?: DOMEventHandler\n    ): () => void {\n        const eventsMap = typeof nameOrMap == 'string' ? { [nameOrMap]: handler! } : nameOrMap;\n        const eventsMapResult: Record<string, DOMEventRecord> = {};\n\n        getObjectKeys(eventsMap).forEach(key => {\n            const handlerObj = eventsMap[key];\n            let result: DOMEventRecord = {\n                pluginEventType: null,\n                beforeDispatch: null,\n            };\n\n            if (typeof handlerObj === 'number') {\n                result.pluginEventType = handlerObj as PluginEventType;\n            } else if (typeof handlerObj === 'function') {\n                result.beforeDispatch = handlerObj;\n            } else if (typeof handlerObj === 'object') {\n                result = handlerObj as DOMEventRecord;\n            }\n\n            eventsMapResult[key] = result;\n        });\n\n        return this.attachDomEvent(eventsMapResult);\n    }\n\n    /**\n     * Trigger an event to be dispatched to all plugins\n     * @param eventType Type of the event\n     * @param data data of the event with given type, this is the rest part of PluginEvent with the given type\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\n     * @returns the event object which is really passed into plugins. Some plugin may modify the event object so\n     * the result of this function provides a chance to read the modified result\n     */\n    triggerPluginEvent<T extends PluginEventType | CompatiblePluginEventType>(\n        eventType: T,\n        data: PluginEventData<T>,\n        broadcast: boolean = false\n    ): PluginEventFromType<T> {\n        const core = this.getCore();\n        const event = ({\n            eventType,\n            ...data,\n        } as any) as PluginEventFromType<T>;\n        core.api.triggerEvent(core, event, broadcast);\n\n        return event;\n    }\n\n    /**\n     * Trigger a ContentChangedEvent\n     * @param source Source of this event, by default is 'SetContent'\n     * @param data additional data for this event\n     */\n    triggerContentChangedEvent(\n        source: ChangeSource | CompatibleChangeSource | string = ChangeSource.SetContent,\n        data?: any\n    ) {\n        this.triggerPluginEvent(PluginEventType.ContentChanged, {\n            source,\n            data,\n        });\n    }\n\n    //#endregion\n\n    //#region Undo API\n\n    /**\n     * Get undo snapshots manager\n     */\n    getSnapshotsManager(): SnapshotsManager {\n        const core = this.getCore();\n\n        return core.undo.snapshotsManager;\n    }\n\n    /**\n     * Undo last edit operation\n     */\n    undo() {\n        undo(this);\n    }\n\n    /**\n     * Redo next edit operation\n     */\n    redo() {\n        redo(this);\n    }\n\n    /**\n     * Add undo snapshot, and execute a format callback function, then add another undo snapshot, then trigger\n     * ContentChangedEvent with given change source.\n     * If this function is called nested, undo snapshot will only be added in the outside one\n     * @param callback The callback function to perform formatting, returns a data object which will be used as\n     * the data field in ContentChangedEvent if changeSource is not null.\n     * @param changeSource The change source to use when fire ContentChangedEvent. When the value is not null,\n     * a ContentChangedEvent will be fired with change source equal to this value\n     * @param canUndoByBackspace True if this action can be undone when user press Backspace key (aka Auto Complete).\n     */\n    addUndoSnapshot(\n        callback?: (start: NodePosition | null, end: NodePosition | null) => any,\n        changeSource?: ChangeSource | CompatibleChangeSource | string,\n        canUndoByBackspace?: boolean,\n        additionalData?: ContentChangedData\n    ) {\n        const core = this.getCore();\n        const undoState = core.undo;\n        const isNested = undoState.isNested;\n        let data: any;\n\n        if (!isNested) {\n            undoState.isNested = true;\n\n            // When there is getEntityState, it means this is triggered by an entity change.\n            // So if HTML content is not changed (hasNewContent is false), no need to add another snapshot before change\n            if (\n                core.undo.snapshotsManager.hasNewContent ||\n                !additionalData?.getEntityState ||\n                !callback\n            ) {\n                core.api.addUndoSnapshot(\n                    core,\n                    !!canUndoByBackspace,\n                    additionalData?.getEntityState?.()\n                );\n            }\n        }\n\n        try {\n            if (callback) {\n                const selection = core.api.getDOMSelection(core);\n                const range = selection?.type == 'range' ? selection.range : null;\n                data = callback(\n                    range && Position.getStart(range).normalize(),\n                    range && Position.getEnd(range).normalize()\n                );\n\n                if (!isNested) {\n                    const entityStates = additionalData?.getEntityState?.();\n\n                    core.api.addUndoSnapshot(core, false /*isAutoCompleteSnapshot*/, entityStates);\n                }\n            }\n        } finally {\n            if (!isNested) {\n                undoState.isNested = false;\n            }\n        }\n\n        if (callback && changeSource) {\n            const event: ContentChangedEvent = {\n                eventType: PluginEventType.ContentChanged,\n                source: changeSource,\n                data: data,\n                additionalData,\n            };\n            core.api.triggerEvent(core, event, true /*broadcast*/);\n        }\n\n        if (canUndoByBackspace) {\n            const selection = core.api.getDOMSelection(core);\n\n            if (selection?.type == 'range') {\n                core.undo.snapshotsManager.hasNewContent = false;\n                core.undo.posContainer = selection.range.startContainer;\n                core.undo.posOffset = selection.range.startOffset;\n            }\n        }\n    }\n\n    /**\n     * Whether there is an available undo/redo snapshot\n     */\n    getUndoState(): EditorUndoState {\n        const { snapshotsManager } = this.getCore().undo;\n        return {\n            canUndo:\n                snapshotsManager.hasNewContent || snapshotsManager.canMove(-1 /*previousSnapshot*/),\n            canRedo: snapshotsManager.canMove(1 /*nextSnapshot*/),\n        };\n    }\n\n    //#endregion\n\n    //#region Misc\n\n    /**\n     * Get document which contains this editor\n     * @returns The HTML document which contains this editor\n     */\n    getDocument(): Document {\n        return this.getCore().contentDiv.ownerDocument;\n    }\n\n    /**\n     * Get the scroll container of the editor\n     */\n    getScrollContainer(): HTMLElement {\n        return this.getCore().domEvent.scrollContainer;\n    }\n\n    /**\n     * Get custom data related to this editor\n     * @param key Key of the custom data\n     * @param getter Getter function. If custom data for the given key doesn't exist,\n     * call this function to get one and store it if it is specified. Otherwise return undefined\n     * @param disposer An optional disposer function to dispose this custom data when\n     * dispose editor.\n     */\n    getCustomData<T>(key: string, getter?: () => T, disposer?: (value: T) => void): T {\n        const core = this.getCore();\n        return (core.customData[key] = core.customData[key] || {\n            value: getter ? getter() : undefined,\n            disposer,\n        }).value as T;\n    }\n\n    /**\n     * Check if editor is in IME input sequence\n     * @returns True if editor is in IME input sequence, otherwise false\n     */\n    isInIME(): boolean {\n        return this.getCore().domEvent.isInIME;\n    }\n\n    /**\n     * Get default format of this editor\n     * @returns Default format object of this editor\n     */\n    getDefaultFormat(): DefaultFormat {\n        const format = this.getCore().format.defaultFormat;\n\n        return {\n            bold: isBold(format.fontWeight),\n            italic: format.italic,\n            underline: format.underline,\n            fontFamily: format.fontFamily,\n            fontSize: format.fontSize,\n            textColor: format.textColor,\n            backgroundColor: format.backgroundColor,\n        };\n    }\n\n    /**\n     * Get a content traverser for the whole editor\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\n     */\n    getBodyTraverser(startNode?: Node): IContentTraverser {\n        return ContentTraverser.createBodyTraverser(this.getCore().contentDiv, startNode);\n    }\n\n    /**\n     * Get a content traverser for current selection\n     * @returns A content traverser, or null if editor never got focus before\n     */\n    getSelectionTraverser(range?: Range): IContentTraverser | null {\n        range = range ?? this.getSelectionRange() ?? undefined;\n        return range\n            ? ContentTraverser.createSelectionTraverser(this.getCore().contentDiv, range)\n            : null;\n    }\n\n    /**\n     * Get a content traverser for current block element start from specified position\n     * @param startFrom Start position of the traverser. Default value is ContentPosition.SelectionStart\n     * @returns A content traverser, or null if editor never got focus before\n     */\n    getBlockTraverser(\n        startFrom: ContentPosition | CompatibleContentPosition = ContentPosition.SelectionStart\n    ): IContentTraverser | null {\n        const range = this.getSelectionRange();\n        return range\n            ? ContentTraverser.createBlockTraverser(this.getCore().contentDiv, range, startFrom)\n            : null;\n    }\n\n    /**\n     * Get a text traverser of current selection\n     * @param event Optional, if specified, editor will try to get cached result from the event object first.\n     * If it is not cached before, query from DOM and cache the result into the event object\n     * @returns A content traverser, or null if editor never got focus before\n     */\n    getContentSearcherOfCursor(event?: PluginEvent): IPositionContentSearcher | null {\n        return cacheGetEventData(event ?? null, 'ContentSearcher', () => {\n            const range = this.getSelectionRange();\n            return (\n                range &&\n                new PositionContentSearcher(this.getCore().contentDiv, Position.getStart(range))\n            );\n        });\n    }\n\n    /**\n     * Run a callback function asynchronously\n     * @param callback The callback function to run\n     * @returns a function to cancel this async run\n     */\n    runAsync(callback: (editor: IContentModelEditor) => void) {\n        const win = this.getCore().contentDiv.ownerDocument.defaultView || window;\n        const handle = win.requestAnimationFrame(() => {\n            if (!this.isDisposed() && callback) {\n                callback(this);\n            }\n        });\n\n        return () => {\n            win.cancelAnimationFrame(handle);\n        };\n    }\n\n    /**\n     * Set DOM attribute of editor content DIV\n     * @param name Name of the attribute\n     * @param value Value of the attribute\n     */\n    setEditorDomAttribute(name: string, value: string | null) {\n        if (value === null) {\n            this.getCore().contentDiv.removeAttribute(name);\n        } else {\n            this.getCore().contentDiv.setAttribute(name, value);\n        }\n    }\n\n    /**\n     * Get DOM attribute of editor content DIV, null if there is no such attribute.\n     * @param name Name of the attribute\n     */\n    getEditorDomAttribute(name: string): string | null {\n        return this.getCore().contentDiv.getAttribute(name);\n    }\n\n    /**\n     * @deprecated Use getVisibleViewport() instead.\n     *\n     * Get current relative distance from top-left corner of the given element to top-left corner of editor content DIV.\n     * @param element The element to calculate from. If the given element is not in editor, return value will be null\n     * @param addScroll When pass true, The return value will also add scrollLeft and scrollTop if any. So the value\n     * may be different than what user is seeing from the view. When pass false, scroll position will be ignored.\n     * @returns An [x, y] array which contains the left and top distances, or null if the given element is not in editor.\n     */\n    getRelativeDistanceToEditor(element: HTMLElement, addScroll?: boolean): number[] | null {\n        if (this.contains(element)) {\n            const contentDiv = this.getCore().contentDiv;\n            const editorRect = contentDiv.getBoundingClientRect();\n            const elementRect = element.getBoundingClientRect();\n\n            if (editorRect && elementRect) {\n                let x = elementRect.left - editorRect?.left;\n                let y = elementRect.top - editorRect?.top;\n\n                if (addScroll) {\n                    x += contentDiv.scrollLeft;\n                    y += contentDiv.scrollTop;\n                }\n\n                return [x, y];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Add a Content Edit feature.\n     * @param feature The feature to add\n     */\n    addContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\n        const core = this.getCore();\n        feature?.keys.forEach(key => {\n            const array = core.edit.features[key] || [];\n            array.push(feature);\n            core.edit.features[key] = array;\n        });\n    }\n\n    /**\n     * Remove a Content Edit feature.\n     * @param feature The feature to remove\n     */\n    removeContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\n        const core = this.getCore();\n        feature?.keys.forEach(key => {\n            const featureSet = core.edit.features[key];\n            const index = featureSet?.indexOf(feature) ?? -1;\n            if (index >= 0) {\n                core.edit.features[key].splice(index, 1);\n                if (core.edit.features[key].length < 1) {\n                    delete core.edit.features[key];\n                }\n            }\n        });\n    }\n\n    /**\n     * Get style based format state from current selection, including font name/size and colors\n     */\n    getStyleBasedFormatState(node?: Node): StyleBasedFormatState {\n        if (!node) {\n            const range = this.getSelectionRange();\n            node = (range && Position.getStart(range).normalize().node) ?? undefined;\n        }\n        const core = this.getCore();\n        return core.api.getStyleBasedFormatState(core, node ?? null);\n    }\n\n    /**\n     * Get the pendable format such as underline and bold\n     * @param forceGetStateFromDOM If set to true, will force get the format state from DOM tree.\n     * @returns The pending format state\n     */\n    getPendableFormatState(forceGetStateFromDOM: boolean = false): PendableFormatState {\n        const core = this.getCore();\n        return getPendableFormatState(core);\n    }\n\n    /**\n     * Ensure user will type into a container element rather than into the editor content DIV directly\n     * @param position The position that user is about to type to\n     * @param keyboardEvent Optional keyboard event object\n     */\n    ensureTypeInContainer(position: NodePosition, keyboardEvent?: KeyboardEvent) {\n        const core = this.getCore();\n        core.api.ensureTypeInContainer(core, position, keyboardEvent);\n    }\n\n    //#endregion\n\n    //#region Dark mode APIs\n\n    /**\n     * Set the dark mode state and transforms the content to match the new state.\n     * @param nextDarkMode The next status of dark mode. True if the editor should be in dark mode, false if not.\n     */\n    setDarkModeState(nextDarkMode?: boolean) {\n        const isDarkMode = this.isDarkMode();\n\n        if (isDarkMode == !!nextDarkMode) {\n            return;\n        }\n        const core = this.getCore();\n\n        transformColor(\n            core.contentDiv,\n            true /*includeSelf*/,\n            nextDarkMode ? 'lightToDark' : 'darkToLight',\n            core.darkColorHandler\n        );\n\n        this.triggerContentChangedEvent(\n            nextDarkMode ? ChangeSource.SwitchToDarkMode : ChangeSource.SwitchToLightMode\n        );\n    }\n\n    /**\n     * Check if the editor is in dark mode\n     * @returns True if the editor is in dark mode, otherwise false\n     */\n    isDarkMode(): boolean {\n        return this.getCore().lifecycle.isDarkMode;\n    }\n\n    /**\n     * Transform the given node and all its child nodes to dark mode color if editor is in dark mode\n     * @param node The node to transform\n     * @param direction The transform direction. @default ColorTransformDirection.LightToDark\n     */\n    transformToDarkColor(\n        node: Node,\n        direction:\n            | ColorTransformDirection\n            | CompatibleColorTransformDirection = ColorTransformDirection.LightToDark\n    ) {\n        const core = this.getCore();\n\n        transformColor(\n            node,\n            true /*includeSelf*/,\n            direction == ColorTransformDirection.DarkToLight ? 'darkToLight' : 'lightToDark',\n            core.darkColorHandler\n        );\n    }\n\n    /**\n     * Get a darkColorHandler object for this editor.\n     */\n    getDarkColorHandler(): DarkColorHandler {\n        return this.getCore().darkColorHandler;\n    }\n\n    /**\n     * Make the editor in \"Shadow Edit\" mode.\n     * In Shadow Edit mode, all format change will finally be ignored.\n     * This can be used for building a live preview feature for format button, to allow user\n     * see format result without really apply it.\n     * This function can be called repeated. If editor is already in shadow edit mode, we can still\n     * use this function to do more shadow edit operation.\n     */\n    startShadowEdit() {\n        const core = this.getCore();\n        core.api.switchShadowEdit(core, true /*isOn*/);\n    }\n\n    /**\n     * Leave \"Shadow Edit\" mode, all changes made during shadow edit will be discarded\n     */\n    stopShadowEdit() {\n        const core = this.getCore();\n        core.api.switchShadowEdit(core, false /*isOn*/);\n    }\n\n    /**\n     * Check if editor is in Shadow Edit mode\n     */\n    isInShadowEdit() {\n        return !!this.getCore().lifecycle.shadowEditFragment;\n    }\n\n    /**\n     * Check if the given experimental feature is enabled\n     * @param feature The feature to check\n     */\n    isFeatureEnabled(feature: ExperimentalFeatures | CompatibleExperimentalFeatures): boolean {\n        return this.getCore().experimentalFeatures.indexOf(feature) >= 0;\n    }\n\n    /**\n     * Get a function to convert HTML string to trusted HTML string.\n     * By default it will just return the input HTML directly. To override this behavior,\n     * pass your own trusted HTML handler to EditorOptions.trustedHTMLHandler\n     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\n     */\n    getTrustedHTMLHandler(): TrustedHTMLHandler {\n        return this.getCore().trustedHTMLHandler;\n    }\n\n    /**\n     * @deprecated Use getZoomScale() instead\n     */\n    getSizeTransformer(): SizeTransformer {\n        return this.getCore().sizeTransformer;\n    }\n\n    /**\n     * Get current zoom scale, default value is 1\n     * When editor is put under a zoomed container, need to pass the zoom scale number using EditorOptions.zoomScale\n     * to let editor behave correctly especially for those mouse drag/drop behaviors\n     * @returns current zoom scale number\n     */\n    getZoomScale(): number {\n        return this.getCore().zoomScale;\n    }\n\n    /**\n     * Set current zoom scale, default value is 1\n     * When editor is put under a zoomed container, need to pass the zoom scale number using EditorOptions.zoomScale\n     * to let editor behave correctly especially for those mouse drag/drop behaviors\n     * @param scale The new scale number to set. It should be positive number and no greater than 10, otherwise it will be ignored.\n     */\n    setZoomScale(scale: number): void {\n        const core = this.getCore();\n        if (scale > 0 && scale <= 10) {\n            const oldValue = core.zoomScale;\n            core.zoomScale = scale;\n\n            if (oldValue != scale) {\n                this.triggerPluginEvent(\n                    PluginEventType.ZoomChanged,\n                    {\n                        oldZoomScale: oldValue,\n                        newZoomScale: scale,\n                    },\n                    true /*broadcast*/\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves the rect of the visible viewport of the editor.\n     */\n    getVisibleViewport(): Rect | null {\n        const core = this.getCore();\n\n        return core.api.getVisibleViewport(core);\n    }\n\n    /**\n     * @returns the current ContentModelEditorCore object\n     * @throws a standard Error if there's no core object\n     */\n    private getCore(): ContentModelEditorCore {\n        if (!this.core) {\n            throw new Error('Editor is already disposed');\n        }\n        return this.core;\n    }\n}\n","import { coreApiMap } from '../coreApi/coreApiMap';\nimport { createCorePlugins, getPluginState } from '../corePlugins/createCorePlugins';\nimport { createModelFromHtml, createStandaloneEditorCore } from 'roosterjs-content-model-core';\nimport type { ContentModelEditorCore } from '../publicTypes/ContentModelEditorCore';\nimport type { ContentModelEditorOptions } from '../publicTypes/IContentModelEditor';\nimport type { EditorPlugin } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Create a new instance of Content Model Editor Core\n * @param contentDiv The DIV HTML element which will be the container element of editor\n * @param options An optional options object to customize the editor\n */\nexport function createEditorCore(\n    contentDiv: HTMLDivElement,\n    options: ContentModelEditorOptions\n): ContentModelEditorCore {\n    const corePlugins = createCorePlugins(options);\n    const pluginState = getPluginState(corePlugins);\n    const additionalPlugins: EditorPlugin[] = [\n        corePlugins.eventTranslate,\n        corePlugins.edit,\n        ...(options.plugins ?? []),\n        corePlugins.normalizeTable,\n    ].filter(x => !!x);\n\n    const zoomScale: number = (options.zoomScale ?? -1) > 0 ? options.zoomScale! : 1;\n    const initContent = options.initialContent ?? contentDiv.innerHTML;\n\n    if (initContent && !options.initialModel) {\n        options.initialModel = createModelFromHtml(\n            initContent,\n            options.defaultDomToModelOptions,\n            options.trustedHTMLHandler,\n            options.defaultSegmentFormat\n        );\n    }\n\n    const standaloneEditorCore = createStandaloneEditorCore(\n        contentDiv,\n        options,\n        coreApiMap,\n        pluginState,\n        additionalPlugins\n    );\n\n    const core: ContentModelEditorCore = {\n        ...standaloneEditorCore,\n        ...pluginState,\n        zoomScale: zoomScale,\n        sizeTransformer: (size: number) => size / zoomScale,\n        disposeErrorHandler: options.disposeErrorHandler,\n        customData: {},\n        experimentalFeatures: options.experimentalFeatures ?? [],\n    };\n\n    return core;\n}\n","import type { IContentModelEditor } from '../publicTypes/IContentModelEditor';\nimport type { IEditor } from 'roosterjs-editor-types';\n\n/**\n * Check if the given editor object is Content Model editor\n * @param editor The editor to check\n * @returns True if the given editor is Content Model editor, otherwise false\n */\nexport function isContentModelEditor(editor: IEditor): editor is IContentModelEditor {\n    const contentModelEditor = editor as IContentModelEditor;\n\n    return !!contentModelEditor.createContentModel;\n}\n","import { createRange, safeInstanceOf } from 'roosterjs-editor-dom';\nimport { SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type { ContentModelEditorCore } from '../../publicTypes/ContentModelEditorCore';\nimport type {\n    NodePosition,\n    PositionType,\n    SelectionPath,\n    SelectionRangeEx,\n    TableSelection,\n} from 'roosterjs-editor-types';\n\n/**\n * @internal\n */\nexport function buildRangeEx(\n    core: ContentModelEditorCore,\n    arg1: Range | SelectionRangeEx | NodePosition | Node | SelectionPath | null,\n    arg2?: NodePosition | number | PositionType | TableSelection | null,\n    arg3?: Node,\n    arg4?: number | PositionType\n): SelectionRangeEx {\n    let rangeEx: SelectionRangeEx | null = null;\n\n    if (isSelectionRangeEx(arg1)) {\n        rangeEx = arg1;\n    } else if (safeInstanceOf(arg1, 'HTMLTableElement') && isTableSelectionOrNull(arg2)) {\n        rangeEx = {\n            type: SelectionRangeTypes.TableSelection,\n            ranges: [],\n            areAllCollapsed: false,\n            table: arg1,\n            coordinates: arg2 ?? undefined,\n        };\n    } else if (safeInstanceOf(arg1, 'HTMLImageElement') && typeof arg2 == 'undefined') {\n        rangeEx = {\n            type: SelectionRangeTypes.ImageSelection,\n            ranges: [],\n            areAllCollapsed: false,\n            image: arg1,\n        };\n    } else {\n        const range = !arg1\n            ? null\n            : safeInstanceOf(arg1, 'Range')\n            ? arg1\n            : isSelectionPath(arg1)\n            ? createRange(core.contentDiv, arg1.start, arg1.end)\n            : isNodePosition(arg1) || safeInstanceOf(arg1, 'Node')\n            ? createRange(\n                  <Node>arg1,\n                  <number | PositionType>arg2,\n                  <Node>arg3,\n                  <number | PositionType>arg4\n              )\n            : null;\n\n        rangeEx = range\n            ? {\n                  type: SelectionRangeTypes.Normal,\n                  ranges: [range],\n                  areAllCollapsed: range.collapsed,\n              }\n            : {\n                  type: SelectionRangeTypes.Normal,\n                  ranges: [],\n                  areAllCollapsed: true,\n              };\n    }\n\n    return rangeEx;\n}\n\nfunction isSelectionRangeEx(obj: any): obj is SelectionRangeEx {\n    const rangeEx = obj as SelectionRangeEx;\n    return (\n        rangeEx &&\n        typeof rangeEx == 'object' &&\n        typeof rangeEx.type == 'number' &&\n        Array.isArray(rangeEx.ranges)\n    );\n}\n\nfunction isTableSelectionOrNull(obj: any): obj is TableSelection | null {\n    const selection = obj as TableSelection | null;\n\n    return (\n        selection === null ||\n        (selection &&\n            typeof selection == 'object' &&\n            typeof selection.firstCell == 'object' &&\n            typeof selection.lastCell == 'object')\n    );\n}\n\nfunction isSelectionPath(obj: any): obj is SelectionPath {\n    const path = obj as SelectionPath;\n\n    return path && typeof path == 'object' && Array.isArray(path.start) && Array.isArray(path.end);\n}\n\nfunction isNodePosition(obj: any): obj is NodePosition {\n    const pos = obj as NodePosition;\n\n    return (\n        pos &&\n        typeof pos == 'object' &&\n        typeof pos.node == 'object' &&\n        typeof pos.offset == 'number'\n    );\n}\n","import { contains, getObjectKeys, getTagOfNode, Position } from 'roosterjs-editor-dom';\nimport { NodeType } from 'roosterjs-editor-types';\nimport type { PendableFormatNames } from 'roosterjs-editor-dom';\nimport type { NodePosition, PendableFormatState } from 'roosterjs-editor-types';\nimport type { StandaloneEditorCore } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @param core The StandaloneEditorCore object\n * @param forceGetStateFromDOM If set to true, will force get the format state from DOM tree.\n * @returns The cached format state if it exists. If the cached position do not exist, search for pendable elements in the DOM tree and return the pendable format state.\n */\nexport function getPendableFormatState(core: StandaloneEditorCore): PendableFormatState {\n    const selection = core.api.getDOMSelection(core);\n    const range = selection?.type == 'range' ? selection.range : null;\n    const currentPosition = range && Position.getStart(range).normalize();\n\n    return currentPosition ? queryCommandStateFromDOM(core, currentPosition) : {};\n}\n\nconst PendableStyleCheckers: Record<\n    PendableFormatNames,\n    (tagName: string, style: CSSStyleDeclaration) => boolean\n> = {\n    isBold: (tag, style) =>\n        tag == 'B' ||\n        tag == 'STRONG' ||\n        tag == 'H1' ||\n        tag == 'H2' ||\n        tag == 'H3' ||\n        tag == 'H4' ||\n        tag == 'H5' ||\n        tag == 'H6' ||\n        parseInt(style.fontWeight) >= 700 ||\n        ['bold', 'bolder'].indexOf(style.fontWeight) >= 0,\n    isUnderline: (tag, style) => tag == 'U' || style.textDecoration.indexOf('underline') >= 0,\n    isItalic: (tag, style) => tag == 'I' || tag == 'EM' || style.fontStyle === 'italic',\n    isSubscript: (tag, style) => tag == 'SUB' || style.verticalAlign === 'sub',\n    isSuperscript: (tag, style) => tag == 'SUP' || style.verticalAlign === 'super',\n    isStrikeThrough: (tag, style) =>\n        tag == 'S' || tag == 'STRIKE' || style.textDecoration.indexOf('line-through') >= 0,\n};\n\n/**\n * CssFalsyCheckers checks for non pendable format that might overlay a pendable format, then it can prevent getPendableFormatState return falsy pendable format states.\n */\n\nconst CssFalsyCheckers: Record<PendableFormatNames, (style: CSSStyleDeclaration) => boolean> = {\n    isBold: style =>\n        (style.fontWeight !== '' && parseInt(style.fontWeight) < 700) ||\n        style.fontWeight === 'normal',\n    isUnderline: style =>\n        style.textDecoration !== '' && style.textDecoration.indexOf('underline') < 0,\n    isItalic: style => style.fontStyle !== '' && style.fontStyle !== 'italic',\n    isSubscript: style => style.verticalAlign !== '' && style.verticalAlign !== 'sub',\n    isSuperscript: style => style.verticalAlign !== '' && style.verticalAlign !== 'super',\n    isStrikeThrough: style =>\n        style.textDecoration !== '' && style.textDecoration.indexOf('line-through') < 0,\n};\n\nfunction queryCommandStateFromDOM(\n    core: StandaloneEditorCore,\n    currentPosition: NodePosition\n): PendableFormatState {\n    let node: Node | null = currentPosition.node;\n    const formatState: PendableFormatState = {};\n    const pendableKeys: PendableFormatNames[] = [];\n    while (node && contains(core.contentDiv, node)) {\n        const tag = getTagOfNode(node);\n        const style = node.nodeType == NodeType.Element && (node as HTMLElement).style;\n        if (tag && style) {\n            getObjectKeys(PendableStyleCheckers).forEach(key => {\n                if (!(pendableKeys.indexOf(key) >= 0)) {\n                    formatState[key] = formatState[key] || PendableStyleCheckers[key](tag, style);\n                    if (CssFalsyCheckers[key](style)) {\n                        pendableKeys.push(key);\n                    }\n                }\n            });\n        }\n        node = node.parentNode;\n    }\n    return formatState;\n}\n","import { createRange, getSelectionPath, queryElements } from 'roosterjs-editor-dom';\nimport { createTableRanges } from 'roosterjs-content-model-core';\nimport { SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type { DOMSelection } from 'roosterjs-content-model-types';\nimport type { ContentMetadata, SelectionRangeEx } from 'roosterjs-editor-types';\n\n// In theory, all functions below are not necessary. We keep these functions here only for compatibility with old IEditor interface\n\n/**\n * @internal\n */\nexport function convertRangeExToDomSelection(\n    rangeEx: SelectionRangeEx | null\n): DOMSelection | null {\n    switch (rangeEx?.type) {\n        case SelectionRangeTypes.ImageSelection:\n            return {\n                type: 'image',\n                image: rangeEx.image,\n            };\n\n        case SelectionRangeTypes.Normal:\n            return rangeEx.ranges.length > 0\n                ? {\n                      type: 'range',\n                      range: rangeEx.ranges[0],\n                  }\n                : null;\n\n        case SelectionRangeTypes.TableSelection:\n            return rangeEx.coordinates\n                ? {\n                      type: 'table',\n                      table: rangeEx.table,\n                      firstColumn: rangeEx.coordinates.firstCell.x,\n                      firstRow: rangeEx.coordinates.firstCell.y,\n                      lastColumn: rangeEx.coordinates.lastCell.x,\n                      lastRow: rangeEx.coordinates.lastCell.y,\n                  }\n                : null;\n\n        default:\n            return null;\n    }\n}\n\n/**\n * @internal\n */\nexport function convertDomSelectionToRangeEx(selection: DOMSelection | null): SelectionRangeEx {\n    switch (selection?.type) {\n        case 'image':\n            return {\n                type: SelectionRangeTypes.ImageSelection,\n                image: selection.image,\n                areAllCollapsed: false,\n                ranges: [createRange(selection.image)],\n            };\n\n        case 'range':\n            return {\n                type: SelectionRangeTypes.Normal,\n                ranges: [selection.range],\n                areAllCollapsed: selection.range.collapsed,\n            };\n\n        case 'table':\n            return {\n                type: SelectionRangeTypes.TableSelection,\n                ranges: createTableRanges(selection),\n                areAllCollapsed: false,\n                table: selection.table,\n                coordinates: {\n                    firstCell: { x: selection.firstColumn, y: selection.firstRow },\n                    lastCell: { x: selection.lastColumn, y: selection.lastRow },\n                },\n            };\n\n        default:\n            return {\n                type: SelectionRangeTypes.Normal,\n                ranges: [],\n                areAllCollapsed: true,\n            };\n    }\n}\n\n/**\n * @internal\n */\nexport function convertDomSelectionToMetadata(\n    contentDiv: HTMLElement,\n    selection: DOMSelection | null\n): ContentMetadata | null {\n    switch (selection?.type) {\n        case 'table':\n            return {\n                type: SelectionRangeTypes.TableSelection,\n                tableId: selection.table.id,\n                firstCell: {\n                    x: selection.firstColumn,\n                    y: selection.firstRow,\n                },\n                lastCell: {\n                    x: selection.lastColumn,\n                    y: selection.lastRow,\n                },\n                isDarkMode: false,\n            };\n        case 'image':\n            return {\n                type: SelectionRangeTypes.ImageSelection,\n                imageId: selection.image.id,\n                isDarkMode: false,\n            };\n        case 'range':\n            return {\n                type: SelectionRangeTypes.Normal,\n                isDarkMode: false,\n                start: [],\n                end: [],\n                ...(getSelectionPath(contentDiv, selection.range) || {}),\n            };\n        default:\n            return null;\n    }\n}\n\n/**\n * @internal\n */\nexport function convertMetadataToDOMSelection(\n    contentDiv: HTMLElement,\n    metadata: ContentMetadata | undefined\n): DOMSelection | null {\n    switch (metadata?.type) {\n        case SelectionRangeTypes.Normal:\n            return {\n                type: 'range',\n                range: createRange(contentDiv, metadata.start, metadata.end),\n            };\n        case SelectionRangeTypes.TableSelection:\n            const table = queryElements(contentDiv, '#' + metadata.tableId)[0] as HTMLTableElement;\n\n            return table\n                ? {\n                      type: 'table',\n                      table: table,\n                      firstColumn: metadata.firstCell.x,\n                      firstRow: metadata.firstCell.y,\n                      lastColumn: metadata.lastCell.x,\n                      lastRow: metadata.lastCell.y,\n                  }\n                : null;\n        case SelectionRangeTypes.ImageSelection:\n            const image = queryElements(contentDiv, '#' + metadata.imageId)[0] as HTMLImageElement;\n\n            return image\n                ? {\n                      type: 'image',\n                      image: image,\n                  }\n                : null;\n\n        default:\n            return null;\n    }\n}\n","export { ContentModelEditorCore } from './publicTypes/ContentModelEditorCore';\nexport { IContentModelEditor, ContentModelEditorOptions } from './publicTypes/IContentModelEditor';\nexport {\n    ContentModelCorePlugins,\n    UnportedCorePlugins,\n} from './publicTypes/ContentModelCorePlugins';\n\nexport { ContentModelEditor } from './editor/ContentModelEditor';\nexport { isContentModelEditor } from './editor/isContentModelEditor';\n","import { keyboardDelete } from './keyboardDelete';\nimport { keyboardInput } from './keyboardInput';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from 'roosterjs-content-model-editor';\nimport type {\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    PluginKeyDownEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * ContentModel edit plugins helps editor to do editing operation on top of content model.\n * This includes:\n * 1. Delete Key\n * 2. Backspace Key\n */\nexport class ContentModelEditPlugin implements EditorPlugin {\n    private editor: IContentModelEditor | null = null;\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelEdit';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IContentModelEditor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case PluginEventType.KeyDown:\n                    this.handleKeyDownEvent(this.editor, event);\n                    break;\n            }\n        }\n    }\n\n    private handleKeyDownEvent(editor: IContentModelEditor, event: PluginKeyDownEvent) {\n        const rawEvent = event.rawEvent;\n\n        if (!rawEvent.defaultPrevented && !event.handledByEditFeature) {\n            // TODO: Consider use ContentEditFeature and need to hide other conflict features that are not based on Content Model\n            switch (rawEvent.key) {\n                case 'Backspace':\n                case 'Delete':\n                    // Use our API to handle BACKSPACE/DELETE key.\n                    // No need to clear cache here since if we rely on browser's behavior, there will be Input event and its handler will reconcile cache\n                    keyboardDelete(editor, rawEvent);\n                    break;\n\n                case 'Enter':\n                default:\n                    keyboardInput(editor, rawEvent);\n                    break;\n            }\n        }\n    }\n}\n","import { deleteSegment } from 'roosterjs-content-model-core';\nimport type { DeleteSelectionStep } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deleteAllSegmentBefore: DeleteSelectionStep = context => {\n    if (context.deleteResult != 'notDeleted') {\n        return;\n    }\n\n    const { paragraph, marker } = context.insertPoint;\n    const index = paragraph.segments.indexOf(marker);\n\n    for (let i = index - 1; i >= 0; i--) {\n        const segment = paragraph.segments[i];\n\n        segment.isSelected = true;\n\n        if (deleteSegment(paragraph, segment, context.formatContext)) {\n            context.deleteResult = 'range';\n        }\n    }\n};\n","import { deleteBlock, deleteSegment } from 'roosterjs-content-model-core';\nimport { getLeafSiblingBlock } from '../utils/getLeafSiblingBlock';\nimport { setParagraphNotImplicit } from 'roosterjs-content-model-dom';\nimport type { BlockAndPath } from '../utils/getLeafSiblingBlock';\nimport type { ContentModelSegment, DeleteSelectionStep } from 'roosterjs-content-model-types';\n\nfunction getDeleteCollapsedSelection(direction: 'forward' | 'backward'): DeleteSelectionStep {\n    return context => {\n        if (context.deleteResult != 'notDeleted') {\n            return;\n        }\n\n        const isForward = direction == 'forward';\n        const { paragraph, marker, path, tableContext } = context.insertPoint;\n        const segments = paragraph.segments;\n\n        fixupBr(segments);\n\n        const index = segments.indexOf(marker) + (isForward ? 1 : -1);\n        const segmentToDelete = segments[index];\n        let blockToDelete: BlockAndPath | null;\n\n        if (segmentToDelete) {\n            if (deleteSegment(paragraph, segmentToDelete, context.formatContext, direction)) {\n                context.deleteResult = 'singleChar';\n\n                // It is possible that we have deleted everything from this paragraph, so we need to mark it as not implicit\n                // to avoid losing its format. See https://github.com/microsoft/roosterjs/issues/1953\n                setParagraphNotImplicit(paragraph);\n            }\n        } else if ((blockToDelete = getLeafSiblingBlock(path, paragraph, isForward))) {\n            const { block, path, siblingSegment } = blockToDelete;\n\n            if (block.blockType == 'Paragraph') {\n                if (siblingSegment) {\n                    // When selection is under general segment, need to check if it has a sibling sibling, and delete from it\n                    if (deleteSegment(block, siblingSegment, context.formatContext, direction)) {\n                        context.deleteResult = 'range';\n                    }\n                } else {\n                    if (isForward) {\n                        context.lastParagraph = block;\n                    } else {\n                        if (block.segments[block.segments.length - 1]?.segmentType == 'Br') {\n                            block.segments.pop();\n                        }\n\n                        context.insertPoint = {\n                            marker,\n                            paragraph: block,\n                            path,\n                            tableContext,\n                        };\n                        context.lastParagraph = paragraph;\n                        delete block.cachedElement;\n                    }\n\n                    context.deleteResult = 'range';\n                }\n\n                // When go across table, getLeafSiblingBlock will return null, when we are here, we must be in the same table context\n                context.lastTableContext = tableContext;\n            } else {\n                if (\n                    deleteBlock(\n                        path[0].blocks,\n                        block,\n                        undefined /*replacement*/,\n                        context.formatContext,\n                        direction\n                    )\n                ) {\n                    context.deleteResult = 'range';\n                }\n            }\n        } else {\n            // We have nothing to delete, in this case we don't want browser handle it as well.\n            // Because when Backspace on an empty document, it will also delete the only DIV and SPAN element, causes\n            // editor is really empty. We don't want that happen. So the handling should stop here.\n            context.deleteResult = 'nothingToDelete';\n        }\n    };\n}\n\n/**\n * If the last segment is BR, remove it for now. We may add it back later when normalize model.\n * So that if this is an empty paragraph, it will start to delete next block\n */\nfunction fixupBr(segments: ContentModelSegment[]) {\n    if (segments[segments.length - 1]?.segmentType == 'Br') {\n        const segmentsWithoutBr = segments.filter(x => x.segmentType != 'SelectionMarker');\n\n        if (segmentsWithoutBr[segmentsWithoutBr.length - 2]?.segmentType != 'Br') {\n            segments.pop();\n        }\n    }\n}\n\n/**\n * @internal if we didn't delete anything, and we want to delete forward, now perform it\n */\nexport const forwardDeleteCollapsedSelection = getDeleteCollapsedSelection('forward');\n\n/**\n * @internal if we didn't delete anything, and we want to delete backward, now perform it\n */\nexport const backwardDeleteCollapsedSelection = getDeleteCollapsedSelection('backward');\n","import { isPunctuation, isSpace, normalizeText } from 'roosterjs-content-model-core';\nimport { isWhiteSpacePreserved } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelParagraph,\n    DeleteSelectionContext,\n    DeleteSelectionStep,\n} from 'roosterjs-content-model-types';\n\nconst enum DeleteWordState {\n    Start,\n    Punctuation,\n    Text,\n    NonText,\n    Space,\n    End,\n}\n\ninterface CharInfo {\n    text: boolean;\n    space: boolean;\n    punctuation: boolean;\n}\n\nfunction getDeleteWordSelection(direction: 'forward' | 'backward'): DeleteSelectionStep {\n    return context => {\n        if (context.deleteResult != 'notDeleted') {\n            return;\n        }\n\n        const { marker, paragraph } = context.insertPoint;\n        const startIndex = paragraph.segments.indexOf(marker);\n        const deleteNext = direction == 'forward';\n\n        const iterator = iterateSegments(paragraph, startIndex, deleteNext, context);\n        let curr = iterator.next();\n\n        for (let state = DeleteWordState.Start; state != DeleteWordState.End && !curr.done; ) {\n            const { punctuation, space, text } = curr.value;\n\n            // This is a state machine of how to delete a whole word together with space and punctuations.\n            // For a full state machine chart, see\n            // Forward delete: https://github.com/microsoft/roosterjs/blob/master/assets/design-charts/ForwardDeleteWord.png\n            // Backward delete: https://github.com/microsoft/roosterjs/blob/master/assets/design-charts/BackwardDeleteWord.png\n            switch (state) {\n                case DeleteWordState.Start:\n                    state = space\n                        ? DeleteWordState.Space\n                        : punctuation\n                        ? DeleteWordState.Punctuation\n                        : DeleteWordState.Text;\n                    curr = iterator.next(true /*delete*/);\n                    break;\n\n                case DeleteWordState.Punctuation:\n                    if (deleteNext && space) {\n                        state = DeleteWordState.NonText;\n                        curr = iterator.next(true /*delete*/);\n                    } else if (punctuation) {\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = DeleteWordState.End;\n                    }\n                    break;\n\n                case DeleteWordState.Text:\n                    if (deleteNext && space) {\n                        state = DeleteWordState.NonText;\n                        curr = iterator.next(true /*delete*/);\n                    } else if (text) {\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = DeleteWordState.End;\n                    }\n                    break;\n\n                case DeleteWordState.NonText:\n                    if (punctuation || !space) {\n                        state = DeleteWordState.End;\n                    } else {\n                        curr = iterator.next(true /*delete*/);\n                    }\n                    break;\n\n                case DeleteWordState.Space:\n                    if (space) {\n                        curr = iterator.next(true /*delete*/);\n                    } else if (punctuation) {\n                        state = deleteNext ? DeleteWordState.NonText : DeleteWordState.Punctuation;\n                        curr = iterator.next(true /*delete*/);\n                    } else {\n                        state = deleteNext ? DeleteWordState.End : DeleteWordState.Text;\n                    }\n                    break;\n            }\n        }\n    };\n}\n\nfunction* iterateSegments(\n    paragraph: ContentModelParagraph,\n    markerIndex: number,\n    forward: boolean,\n    context: DeleteSelectionContext\n): Generator<CharInfo, null, boolean> {\n    const step = forward ? 1 : -1;\n    const segments = paragraph.segments;\n    const preserveWhiteSpace = isWhiteSpacePreserved(paragraph);\n\n    for (let i = markerIndex + step; i >= 0 && i < segments.length; i += step) {\n        const segment = segments[i];\n\n        switch (segment.segmentType) {\n            case 'Text':\n                for (\n                    let j = forward ? 0 : segment.text.length - 1;\n                    j >= 0 && j < segment.text.length;\n                    j += step\n                ) {\n                    const c = segment.text[j];\n                    const punctuation = isPunctuation(c);\n                    const space = isSpace(c);\n                    const text = !punctuation && !space;\n\n                    if (yield { punctuation, space, text }) {\n                        let newText = segment.text;\n\n                        newText = newText.substring(0, j) + newText.substring(j + 1);\n\n                        if (!preserveWhiteSpace) {\n                            newText = normalizeText(newText, forward);\n                        }\n\n                        context.deleteResult = 'range';\n\n                        if (newText) {\n                            segment.text = newText;\n\n                            if (step > 0) {\n                                j -= step;\n                            }\n                        } else {\n                            segments.splice(i, 1);\n\n                            if (step > 0) {\n                                i -= step;\n                            }\n\n                            break;\n                        }\n                    }\n                }\n                break;\n\n            case 'Image':\n                if (\n                    yield { punctuation: true, space: false, text: false } // Treat image as punctuation since they have the same behavior.\n                ) {\n                    segments.splice(i, 1);\n\n                    if (step > 0) {\n                        i -= step;\n                    }\n\n                    context.deleteResult = 'range';\n                }\n                break;\n\n            case 'SelectionMarker':\n                break;\n\n            default:\n                return null;\n        }\n    }\n\n    return null;\n}\n\n/**\n * @internal\n */\nexport const forwardDeleteWordSelection = getDeleteWordSelection('forward');\n\n/**\n * @internal\n */\nexport const backwardDeleteWordSelection = getDeleteWordSelection('backward');\n","import { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from 'roosterjs-content-model-editor';\nimport type {\n    ContentModelDocument,\n    DeleteResult,\n    FormatWithContentModelContext,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * @return True means content is changed, so need to rewrite content model to editor. Otherwise false\n */\nexport function handleKeyboardEventResult(\n    editor: IContentModelEditor,\n    model: ContentModelDocument,\n    rawEvent: KeyboardEvent,\n    result: DeleteResult,\n    context: FormatWithContentModelContext\n): boolean {\n    context.skipUndoSnapshot = true;\n    context.clearModelCache = false;\n\n    switch (result) {\n        case 'notDeleted':\n            // We have not delete anything, we will let browser handle this event, so that current cached model may be invalid\n            context.clearModelCache = true;\n\n            // Return false here since we didn't do any change to Content Model, so no need to rewrite with Content Model\n            return false;\n\n        case 'nothingToDelete':\n            // We known there is nothing to delete, no need to let browser keep handling the event\n            rawEvent.preventDefault();\n            return false;\n\n        case 'range':\n        case 'singleChar':\n            // We have deleted what we need from content model, no need to let browser keep handling the event\n            rawEvent.preventDefault();\n            normalizeContentModel(model);\n\n            if (result == 'range') {\n                // A range is about to be deleted, so add an undo snapshot immediately\n                context.skipUndoSnapshot = false;\n            }\n\n            // Trigger an event to let plugins know the content is about to be changed by Content Model keyboard editing.\n            // So plugins can do proper handling. e.g. UndoPlugin can decide whether take a snapshot before this change happens.\n            editor.triggerPluginEvent(PluginEventType.BeforeKeyboardEditing, {\n                rawEvent,\n            });\n\n            return true;\n    }\n}\n\n/**\n * @internal\n */\nexport function shouldDeleteWord(rawEvent: KeyboardEvent, isMac: boolean) {\n    return (\n        (isMac && rawEvent.altKey && !rawEvent.metaKey) ||\n        (!isMac && rawEvent.ctrlKey && !rawEvent.altKey)\n    );\n}\n\n/**\n * @internal\n */\nexport function shouldDeleteAllSegmentsBefore(rawEvent: KeyboardEvent) {\n    return rawEvent.metaKey && !rawEvent.altKey;\n}\n","import { ChangeSource, deleteSelection, isModifierKey } from 'roosterjs-content-model-core';\nimport { deleteAllSegmentBefore } from './deleteSteps/deleteAllSegmentBefore';\nimport { isNodeOfType } from 'roosterjs-content-model-dom';\nimport {\n    handleKeyboardEventResult,\n    shouldDeleteAllSegmentsBefore,\n    shouldDeleteWord,\n} from './handleKeyboardEventCommon';\nimport {\n    backwardDeleteWordSelection,\n    forwardDeleteWordSelection,\n} from './deleteSteps/deleteWordSelection';\nimport {\n    backwardDeleteCollapsedSelection,\n    forwardDeleteCollapsedSelection,\n} from './deleteSteps/deleteCollapsedSelection';\nimport type { IContentModelEditor } from 'roosterjs-content-model-editor';\nimport type { DOMSelection, DeleteSelectionStep } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n * Do keyboard event handling for DELETE/BACKSPACE key\n * @param editor The Content Model Editor\n * @param rawEvent DOM keyboard event\n */\nexport function keyboardDelete(editor: IContentModelEditor, rawEvent: KeyboardEvent) {\n    const selection = editor.getDOMSelection();\n\n    if (shouldDeleteWithContentModel(selection, rawEvent)) {\n        editor.formatContentModel(\n            (model, context) => {\n                const result = deleteSelection(\n                    model,\n                    getDeleteSteps(rawEvent, !!editor.getEnvironment().isMac),\n                    context\n                ).deleteResult;\n\n                return handleKeyboardEventResult(editor, model, rawEvent, result, context);\n            },\n            {\n                rawEvent,\n                changeSource: ChangeSource.Keyboard,\n                getChangeData: () => rawEvent.which,\n                apiName: rawEvent.key == 'Delete' ? 'handleDeleteKey' : 'handleBackspaceKey',\n            }\n        );\n\n        return true;\n    }\n}\n\nfunction getDeleteSteps(rawEvent: KeyboardEvent, isMac: boolean): (DeleteSelectionStep | null)[] {\n    const isForward = rawEvent.key == 'Delete';\n    const deleteAllSegmentBeforeStep =\n        shouldDeleteAllSegmentsBefore(rawEvent) && !isForward ? deleteAllSegmentBefore : null;\n    const deleteWordSelection = shouldDeleteWord(rawEvent, isMac)\n        ? isForward\n            ? forwardDeleteWordSelection\n            : backwardDeleteWordSelection\n        : null;\n    const deleteCollapsedSelection = isForward\n        ? forwardDeleteCollapsedSelection\n        : backwardDeleteCollapsedSelection;\n    return [deleteAllSegmentBeforeStep, deleteWordSelection, deleteCollapsedSelection];\n}\n\nfunction shouldDeleteWithContentModel(selection: DOMSelection | null, rawEvent: KeyboardEvent) {\n    if (!selection) {\n        return false; // Nothing to delete\n    } else if (selection.type != 'range' || !selection.range.collapsed) {\n        return true; // Selection is not collapsed, need to delete all selections\n    } else {\n        const range = selection.range;\n\n        // When selection is collapsed and is in middle of text node, no need to use Content Model to delete\n        return !(\n            isNodeOfType(range.startContainer, 'TEXT_NODE') &&\n            !isModifierKey(rawEvent) &&\n            (canDeleteBefore(rawEvent, range) || canDeleteAfter(rawEvent, range))\n        );\n    }\n}\n\nfunction canDeleteBefore(rawEvent: KeyboardEvent, range: Range) {\n    return rawEvent.key == 'Backspace' && range.startOffset > 1;\n}\n\nfunction canDeleteAfter(rawEvent: KeyboardEvent, range: Range) {\n    return (\n        rawEvent.key == 'Delete' &&\n        range.startOffset < (range.startContainer.nodeValue?.length ?? 0) - 1\n    );\n}\n","import { deleteSelection, isModifierKey } from 'roosterjs-content-model-core';\nimport { normalizeContentModel } from 'roosterjs-content-model-dom';\nimport type { IContentModelEditor } from 'roosterjs-content-model-editor';\nimport type { DOMSelection } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function keyboardInput(editor: IContentModelEditor, rawEvent: KeyboardEvent) {\n    const selection = editor.getDOMSelection();\n\n    if (shouldInputWithContentModel(selection, rawEvent)) {\n        editor.takeSnapshot();\n\n        editor.formatContentModel(\n            (model, context) => {\n                const result = deleteSelection(model, [], context);\n\n                // We have deleted selection then we will let browser to handle the input.\n                // With this combined operation, we don't wan to mass up the cached model so clear it\n                context.clearModelCache = true;\n\n                // Skip undo snapshot here and add undo snapshot before the operation so that we don't add another undo snapshot in middle of this replace operation\n                context.skipUndoSnapshot = true;\n\n                if (result.deleteResult == 'range') {\n                    // We have deleted something, next input should inherit the segment format from deleted content, so set pending format here\n                    context.newPendingFormat = result.insertPoint?.marker.format;\n\n                    normalizeContentModel(model);\n\n                    // Do not preventDefault since we still want browser to handle the final input for now\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            {\n                rawEvent,\n            }\n        );\n\n        return true;\n    }\n}\n\nfunction shouldInputWithContentModel(selection: DOMSelection | null, rawEvent: KeyboardEvent) {\n    if (!selection) {\n        return false; // Nothing to delete\n    } else if (\n        !isModifierKey(rawEvent) &&\n        (rawEvent.key == 'Enter' || rawEvent.key == 'Space' || rawEvent.key.length == 1)\n    ) {\n        return selection.type != 'range' || !selection.range.collapsed; // TODO: Also handle Enter key even selection is collapsed\n    } else {\n        return false;\n    }\n}\n","import { isGeneralSegment } from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlock,\n    ContentModelBlockGroup,\n    ContentModelParagraph,\n    ContentModelSegment,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport type BlockAndPath = {\n    /**\n     * The sibling block\n     */\n    block: ContentModelBlock;\n\n    /**\n     * Path of this sibling block\n     */\n    path: ContentModelBlockGroup[];\n\n    /**\n     * If the input block is under a general segment, it is possible there are sibling segments under the same paragraph.\n     * Use this property to return the sibling sibling under the same paragraph\n     */\n    siblingSegment?: ContentModelSegment;\n};\n\n/**\n * @internal\n */\nexport function getLeafSiblingBlock(\n    path: ContentModelBlockGroup[],\n    block: ContentModelBlock,\n    isNext: boolean\n): BlockAndPath | null {\n    const newPath = [...path];\n\n    while (newPath.length > 0) {\n        const group = newPath[0];\n        const index = group.blocks.indexOf(block);\n\n        if (index < 0) {\n            break;\n        }\n\n        let nextBlock = group.blocks[index + (isNext ? 1 : -1)];\n\n        if (nextBlock) {\n            while (nextBlock.blockType == 'BlockGroup') {\n                const child = nextBlock.blocks[isNext ? 0 : nextBlock.blocks.length - 1];\n\n                if (!child) {\n                    return { block: nextBlock, path: newPath };\n                } else if (child.blockType != 'BlockGroup') {\n                    newPath.unshift(nextBlock);\n                    return { block: child, path: newPath };\n                } else {\n                    newPath.unshift(nextBlock);\n                    nextBlock = child;\n                }\n            }\n\n            return { block: nextBlock, path: newPath };\n        } else if (isGeneralSegment(group)) {\n            // For general segment, we need to check if there is sibling segment under the same paragraph\n            // First let's find the parent paragraph of this segment\n            newPath.shift();\n\n            let segmentIndex = -1;\n            const segment = group;\n            const para = newPath[0]?.blocks.find(\n                x => x.blockType == 'Paragraph' && (segmentIndex = x.segments.indexOf(segment)) >= 0\n            ) as ContentModelParagraph;\n\n            if (para) {\n                // Now we have found the parent paragraph, so let's check if it has a sibling segment\n                const siblingSegment = para.segments[segmentIndex + (isNext ? 1 : -1)];\n\n                if (siblingSegment) {\n                    // Return this block, path and segment since we have found it\n                    return { block: para, path: newPath, siblingSegment };\n                } else {\n                    // No sibling segment, let's keep go upper level\n                    block = para;\n                }\n            } else {\n                // Parent sibling is not found (in theory this should never happen), just return null\n                break;\n            }\n        } else if (group.blockGroupType != 'Document' && group.blockGroupType != 'TableCell') {\n            newPath.shift();\n            block = group;\n        } else {\n            break;\n        }\n    }\n\n    return null;\n}\n","import { isCharacterValue } from 'roosterjs-content-model-core';\nimport {\n    addDelimiters,\n    isBlockElement,\n    isEntityElement,\n    isNodeOfType,\n} from 'roosterjs-content-model-dom';\nimport {\n    DelimiterClasses,\n    Keys,\n    NodeType,\n    PluginEventType,\n    PositionType,\n    SelectionRangeTypes,\n} from 'roosterjs-editor-types';\nimport {\n    Position,\n    createRange,\n    getDelimiterFromElement,\n    getEntityFromElement,\n    getEntitySelector,\n    matchesSelector,\n    splitTextNode,\n} from 'roosterjs-editor-dom';\nimport type {\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    PluginKeyDownEvent,\n} from 'roosterjs-editor-types';\nimport type { IContentModelEditor } from 'roosterjs-content-model-editor';\n\nconst DELIMITER_SELECTOR =\n    '.' + DelimiterClasses.DELIMITER_AFTER + ',.' + DelimiterClasses.DELIMITER_BEFORE;\nconst ZERO_WIDTH_SPACE = '\\u200B';\nconst INLINE_ENTITY_SELECTOR = 'span' + getEntitySelector();\n\n/**\n * Entity delimiter plugin helps maintain delimiter elements around an entity so that user can put focus before/after an entity\n */\nexport class EntityDelimiterPlugin implements EditorPlugin {\n    private editor: IContentModelEditor | null = null;\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'EntityDelimiter';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor as IContentModelEditor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor) {\n            switch (event.eventType) {\n                case PluginEventType.ContentChanged:\n                case PluginEventType.EditorReady:\n                    normalizeDelimitersInEditor(this.editor);\n                    break;\n\n                case PluginEventType.BeforePaste:\n                    const { fragment } = event;\n                    addDelimitersIfNeeded(fragment.querySelectorAll(INLINE_ENTITY_SELECTOR));\n\n                    break;\n\n                case PluginEventType.ExtractContentWithDom:\n                case PluginEventType.BeforeCutCopy:\n                    event.clonedRoot.querySelectorAll(DELIMITER_SELECTOR).forEach(node => {\n                        if (getDelimiterFromElement(node)) {\n                            removeNode(node);\n                        } else {\n                            removeDelimiterAttr(node);\n                        }\n                    });\n                    break;\n\n                case PluginEventType.KeyDown:\n                    handleKeyDownEvent(this.editor, event);\n                    break;\n            }\n        }\n    }\n}\n\nfunction preventTypeInDelimiter(delimiter: HTMLElement) {\n    delimiter.normalize();\n    const textNode = delimiter.firstChild as Node;\n    const index = textNode.nodeValue?.indexOf(ZERO_WIDTH_SPACE) ?? -1;\n    if (index >= 0) {\n        splitTextNode(<Text>textNode, index == 0 ? 1 : index, false /* returnFirstPart */);\n        let nodeToMove: Node | undefined;\n        delimiter.childNodes.forEach(node => {\n            if (node.nodeValue !== ZERO_WIDTH_SPACE) {\n                nodeToMove = node;\n            }\n        });\n        if (nodeToMove) {\n            delimiter.parentElement?.insertBefore(\n                nodeToMove,\n                delimiter.className == DelimiterClasses.DELIMITER_BEFORE\n                    ? delimiter\n                    : delimiter.nextSibling\n            );\n            const selection = nodeToMove.ownerDocument?.getSelection();\n\n            if (selection) {\n                selection.setPosition(\n                    nodeToMove,\n                    new Position(nodeToMove, PositionType.End).offset\n                );\n            }\n        }\n    }\n}\n\n/**\n * @internal\n */\nexport function normalizeDelimitersInEditor(editor: IEditor) {\n    removeInvalidDelimiters(editor.queryElements(DELIMITER_SELECTOR));\n    addDelimitersIfNeeded(editor.queryElements(INLINE_ENTITY_SELECTOR));\n}\n\nfunction addDelimitersIfNeeded(nodes: Element[] | NodeListOf<Element>) {\n    nodes.forEach(node => {\n        if (\n            isNodeOfType(node, 'ELEMENT_NODE') &&\n            isEntityElement(node) &&\n            !node.isContentEditable\n        ) {\n            addDelimiters(node.ownerDocument, node as HTMLElement);\n        }\n    });\n}\n\nfunction removeNode(el: Node | undefined | null) {\n    el?.parentElement?.removeChild(el);\n}\n\nfunction removeInvalidDelimiters(nodes: Element[] | NodeListOf<Element>) {\n    nodes.forEach(node => {\n        if (getDelimiterFromElement(node)) {\n            const sibling = node.classList.contains(DelimiterClasses.DELIMITER_BEFORE)\n                ? node.nextElementSibling\n                : node.previousElementSibling;\n            if (!(isNodeOfType(sibling, 'ELEMENT_NODE') && getEntityFromElement(sibling))) {\n                removeNode(node);\n            }\n        } else {\n            removeDelimiterAttr(node);\n        }\n    });\n}\n\nfunction removeDelimiterAttr(node: Element | undefined | null, checkEntity: boolean = true) {\n    if (!node) {\n        return;\n    }\n\n    const isAfter = node.classList.contains(DelimiterClasses.DELIMITER_AFTER);\n    const entitySibling = isAfter ? node.previousElementSibling : node.nextElementSibling;\n    if (checkEntity && entitySibling && isEntityElement(entitySibling)) {\n        return;\n    }\n\n    node.classList.remove(DelimiterClasses.DELIMITER_AFTER, DelimiterClasses.DELIMITER_BEFORE);\n\n    node.normalize();\n    node.childNodes.forEach(cn => {\n        const index = cn.textContent?.indexOf(ZERO_WIDTH_SPACE) ?? -1;\n        if (index >= 0) {\n            createRange(cn, index, cn, index + 1)?.deleteContents();\n        }\n    });\n}\n\nfunction handleCollapsedEnter(editor: IEditor, delimiter: HTMLElement) {\n    const isAfter = delimiter.classList.contains(DelimiterClasses.DELIMITER_AFTER);\n    const entity = !isAfter ? delimiter.nextSibling : delimiter.previousSibling;\n    const block = getBlock(editor, delimiter);\n\n    editor.runAsync(() => {\n        if (!block) {\n            return;\n        }\n        const blockToCheck = isAfter ? block.nextSibling : block.previousSibling;\n        if (blockToCheck && isNodeOfType(blockToCheck, 'ELEMENT_NODE')) {\n            const delimiters = blockToCheck.querySelectorAll(DELIMITER_SELECTOR);\n            // Check if the last or first delimiter still contain the delimiter class and remove it.\n            const delimiterToCheck = delimiters.item(isAfter ? 0 : delimiters.length - 1);\n            removeDelimiterAttr(delimiterToCheck);\n        }\n\n        if (entity && isEntityElement(entity)) {\n            const entityElement = entity as HTMLElement;\n            const { nextElementSibling, previousElementSibling } = entityElement;\n            [nextElementSibling, previousElementSibling].forEach(el => {\n                // Check if after Enter the ZWS got removed but we still have a element with the class\n                // Remove the attributes of the element if it is invalid now.\n                if (el && matchesSelector(el, DELIMITER_SELECTOR) && !getDelimiterFromElement(el)) {\n                    removeDelimiterAttr(el, false /* checkEntity */);\n                }\n            });\n\n            // Add delimiters to the entity if needed because on Enter we can sometimes lose the ZWS of the element.\n            addDelimiters(entityElement.ownerDocument, entityElement);\n        }\n    });\n}\n\nconst getPosition = (container: HTMLElement | null) => {\n    if (container && getDelimiterFromElement(container)) {\n        const isAfter = container.classList.contains(DelimiterClasses.DELIMITER_AFTER);\n        return new Position(container, isAfter ? PositionType.After : PositionType.Before);\n    }\n    return undefined;\n};\n\nfunction getBlock(editor: IEditor, element: Node | undefined) {\n    if (!element) {\n        return undefined;\n    }\n\n    let block = editor.getBlockElementAtNode(element)?.getStartNode();\n\n    while (block && (!isNodeOfType(block, 'ELEMENT_NODE') || !isBlockElement(block))) {\n        block = editor.contains(block.parentElement) ? block.parentElement! : undefined;\n    }\n\n    return block;\n}\n\nfunction handleSelectionNotCollapsed(editor: IEditor, range: Range, event: KeyboardEvent) {\n    const { startContainer, endContainer, startOffset, endOffset } = range;\n\n    const startElement = editor.getElementAtCursor(DELIMITER_SELECTOR, startContainer);\n    const endElement = editor.getElementAtCursor(DELIMITER_SELECTOR, endContainer);\n\n    const startUpdate = getPosition(startElement);\n    const endUpdate = getPosition(endElement);\n\n    if (startUpdate || endUpdate) {\n        editor.select(\n            startUpdate ?? new Position(startContainer, startOffset),\n            endUpdate ?? new Position(endContainer, endOffset)\n        );\n    }\n    editor.runAsync(aEditor => {\n        const delimiter = aEditor.getElementAtCursor(DELIMITER_SELECTOR);\n        if (delimiter) {\n            preventTypeInDelimiter(delimiter);\n            if (event.which === Keys.ENTER) {\n                removeDelimiterAttr(delimiter);\n            }\n        }\n    });\n}\n\nfunction handleKeyDownEvent(editor: IEditor, event: PluginKeyDownEvent) {\n    const range = editor.getSelectionRangeEx();\n    const { rawEvent } = event;\n    if (range.type != SelectionRangeTypes.Normal) {\n        return;\n    }\n\n    if (range.areAllCollapsed && (isCharacterValue(rawEvent) || rawEvent.which === Keys.ENTER)) {\n        const position = editor.getFocusedPosition()?.normalize();\n        if (!position) {\n            return;\n        }\n\n        const { element, node } = position;\n        const refNode = element == node ? element.childNodes.item(position.offset) : element;\n\n        const delimiter = editor.getElementAtCursor(DELIMITER_SELECTOR, refNode);\n        if (!delimiter) {\n            return;\n        }\n\n        if (rawEvent.which === Keys.ENTER) {\n            handleCollapsedEnter(editor, delimiter);\n        } else if (delimiter.firstChild?.nodeType == NodeType.Text) {\n            editor.runAsync(() => preventTypeInDelimiter(delimiter));\n        }\n    } else if (!range.areAllCollapsed && !rawEvent.shiftKey && rawEvent.which != Keys.SHIFT) {\n        const currentRange = range.ranges[0];\n        if (!currentRange) {\n            return;\n        }\n        handleSelectionNotCollapsed(editor, currentRange, rawEvent);\n    }\n}\n","export { ContentModelPastePlugin } from './paste/ContentModelPastePlugin';\nexport { ContentModelEditPlugin } from './edit/ContentModelEditPlugin';\nexport { EntityDelimiterPlugin } from './entityDelimiter/EntityDelimiterPlugin';\n","import addParser from './utils/addParser';\nimport { BorderKeys } from 'roosterjs-content-model-dom';\nimport { deprecatedBorderColorParser } from './utils/deprecatedColorParser';\nimport { getPasteSource } from './pasteSourceValidations/getPasteSource';\nimport { parseLink } from './utils/linkParser';\nimport { PastePropertyNames } from './pasteSourceValidations/constants';\nimport { PasteType as OldPasteType, PluginEventType } from 'roosterjs-editor-types';\nimport { processPastedContentFromExcel } from './Excel/processPastedContentFromExcel';\nimport { processPastedContentFromPowerPoint } from './PowerPoint/processPastedContentFromPowerPoint';\nimport { processPastedContentFromWordDesktop } from './WordDesktop/processPastedContentFromWordDesktop';\nimport { processPastedContentWacComponents } from './WacComponents/processPastedContentWacComponents';\nimport type { IContentModelEditor } from 'roosterjs-content-model-editor';\nimport type {\n    BorderFormat,\n    ContentModelBeforePasteEvent,\n    ContentModelBlockFormat,\n    ContentModelTableCellFormat,\n    FormatParser,\n    PasteType,\n} from 'roosterjs-content-model-types';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n// Map old PasteType to new PasteType\n// TODO: We can remove this once we have standalone editor\nconst PasteTypeMap: Record<OldPasteType, PasteType> = {\n    [OldPasteType.AsImage]: 'asImage',\n    [OldPasteType.AsPlainText]: 'asPlainText',\n    [OldPasteType.MergeFormat]: 'mergeFormat',\n    [OldPasteType.Normal]: 'normal',\n};\n\n/**\n * Paste plugin, handles BeforePaste event and reformat some special content, including:\n * 1. Content copied from Word\n * 2. Content copied from Excel\n * 3. Content copied from Word Online or OneNote Online\n * 4. Content copied from Power Point\n * (This class is still under development, and may still be changed in the future with some breaking changes)\n */\nexport class ContentModelPastePlugin implements EditorPlugin {\n    private editor: IContentModelEditor | null = null;\n\n    /**\n     * Construct a new instance of Paste class\n     * @param unknownTagReplacement Replace solution of unknown tags, default behavior is to replace with SPAN\n     * @param allowExcelNoBorderTable Allow table copied from Excel without border\n     */\n    constructor(private allowExcelNoBorderTable?: boolean) {}\n\n    /**\n     * Get name of this plugin\n     */\n    getName() {\n        return 'ContentModelPaste';\n    }\n\n    /**\n     * The first method that editor will call to a plugin when editor is initializing.\n     * It will pass in the editor instance, plugin should take this chance to save the\n     * editor reference so that it can call to any editor method or format API later.\n     * @param editor The editor object\n     */\n    initialize(editor: IEditor) {\n        // TODO: Later we may need a different interface for Content Model editor plugin\n        this.editor = editor as IContentModelEditor;\n    }\n\n    /**\n     * The last method that editor will call to a plugin before it is disposed.\n     * Plugin can take this chance to clear the reference to editor. After this method is\n     * called, plugin should not call to any editor method since it will result in error.\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Core method for a plugin. Once an event happens in editor, editor will call this\n     * method of each plugin to handle the event as long as the event is not handled\n     * exclusively by another plugin.\n     * @param event The event to handle:\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor || event.eventType != PluginEventType.BeforePaste) {\n            return;\n        }\n\n        const ev = event as ContentModelBeforePasteEvent;\n\n        if (!ev.domToModelOption) {\n            return;\n        }\n\n        const pasteSource = getPasteSource(ev, false);\n        const pasteType = PasteTypeMap[ev.pasteType];\n\n        switch (pasteSource) {\n            case 'wordDesktop':\n                processPastedContentFromWordDesktop(ev, this.editor.getTrustedHTMLHandler());\n                break;\n            case 'wacComponents':\n                processPastedContentWacComponents(ev);\n                break;\n            case 'excelOnline':\n            case 'excelDesktop':\n                if (pasteType === 'normal' || pasteType === 'mergeFormat') {\n                    // Handle HTML copied from Excel\n                    processPastedContentFromExcel(\n                        ev,\n                        this.editor.getTrustedHTMLHandler(),\n                        this.allowExcelNoBorderTable\n                    );\n                }\n                break;\n            case 'googleSheets':\n                ev.domToModelOption.additionalAllowedTags.push(\n                    PastePropertyNames.GOOGLE_SHEET_NODE_NAME\n                );\n                break;\n            case 'powerPointDesktop':\n                processPastedContentFromPowerPoint(ev, this.editor.getTrustedHTMLHandler());\n                break;\n        }\n\n        addParser(ev.domToModelOption, 'link', parseLink);\n        addParser(ev.domToModelOption, 'tableCell', deprecatedBorderColorParser);\n        addParser(ev.domToModelOption, 'tableCell', tableBorderParser);\n        addParser(ev.domToModelOption, 'table', deprecatedBorderColorParser);\n\n        if (pasteType === 'mergeFormat') {\n            addParser(ev.domToModelOption, 'block', blockElementParser);\n            addParser(ev.domToModelOption, 'listLevel', blockElementParser);\n        }\n    }\n}\n\n/**\n * For block elements that have background color style, remove the background color when user selects the merge current format\n * paste option\n */\nconst blockElementParser: FormatParser<ContentModelBlockFormat> = (\n    format: ContentModelBlockFormat,\n    element: HTMLElement\n) => {\n    if (element.style.backgroundColor) {\n        delete format.backgroundColor;\n    }\n};\n\nconst ElementBorderKeys = new Map<\n    keyof BorderFormat,\n    {\n        c: keyof CSSStyleDeclaration;\n        s: keyof CSSStyleDeclaration;\n        w: keyof CSSStyleDeclaration;\n    }\n>([\n    ['borderTop', { w: 'borderTopWidth', s: 'borderTopStyle', c: 'borderTopColor' }],\n    ['borderRight', { w: 'borderRightWidth', s: 'borderRightStyle', c: 'borderRightColor' }],\n    ['borderBottom', { w: 'borderBottomWidth', s: 'borderBottomStyle', c: 'borderBottomColor' }],\n    ['borderLeft', { w: 'borderLeftWidth', s: 'borderLeftStyle', c: 'borderLeftColor' }],\n]);\n\nfunction tableBorderParser(format: ContentModelTableCellFormat, element: HTMLElement): void {\n    BorderKeys.forEach(key => {\n        if (!format[key]) {\n            const styleSet = ElementBorderKeys.get(key);\n            if (\n                styleSet &&\n                element.style[styleSet.w] &&\n                element.style[styleSet.s] &&\n                !element.style[styleSet.c]\n            ) {\n                format[key] = `${element.style[styleSet.w]} ${element.style[styleSet.s]}`;\n            }\n        }\n    });\n}\n","import addParser from '../utils/addParser';\nimport { isNodeOfType, moveChildNodes } from 'roosterjs-content-model-dom';\nimport { setProcessor } from '../utils/setProcessor';\nimport type { TrustedHTMLHandler } from 'roosterjs-editor-types';\nimport type { ContentModelBeforePasteEvent } from 'roosterjs-content-model-types';\n\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\nconst DEFAULT_BORDER_STYLE = 'solid 1px #d4d4d4';\n\n/**\n * @internal\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\n * @param event The BeforePaste event\n */\n\nexport function processPastedContentFromExcel(\n    event: ContentModelBeforePasteEvent,\n    trustedHTMLHandler: TrustedHTMLHandler,\n    allowExcelNoBorderTable?: boolean\n) {\n    const { fragment, htmlBefore, clipboardData } = event;\n    const html = clipboardData.html ? excelHandler(clipboardData.html, htmlBefore) : undefined;\n\n    if (html && clipboardData.html != html) {\n        const doc = new DOMParser().parseFromString(trustedHTMLHandler(html), 'text/html');\n        moveChildNodes(fragment, doc?.body);\n    }\n\n    // For Excel Online\n    const firstChild = fragment.firstChild;\n    if (\n        isNodeOfType(firstChild, 'ELEMENT_NODE') &&\n        firstChild.tagName == 'div' &&\n        firstChild.firstChild\n    ) {\n        const tableFound = Array.from(firstChild.childNodes).every((child: Node) => {\n            // Tables pasted from Excel Online should be of the format: 0 to N META tags and 1 TABLE tag\n            const tagName = isNodeOfType(child, 'ELEMENT_NODE') && child.tagName;\n\n            return tagName == 'META'\n                ? true\n                : tagName == 'TABLE'\n                ? child == firstChild.lastChild\n                : false;\n        });\n\n        // Extract Table from Div\n        if (tableFound && firstChild.lastChild) {\n            event.fragment.replaceChildren(firstChild.lastChild);\n        }\n    }\n\n    addParser(event.domToModelOption, 'tableCell', (format, element) => {\n        if (!allowExcelNoBorderTable && element.style.borderStyle === 'none') {\n            format.borderBottom = DEFAULT_BORDER_STYLE;\n            format.borderLeft = DEFAULT_BORDER_STYLE;\n            format.borderRight = DEFAULT_BORDER_STYLE;\n            format.borderTop = DEFAULT_BORDER_STYLE;\n        }\n    });\n\n    setProcessor(event.domToModelOption, 'child', (group, element, context) => {\n        const segmentFormat = { ...context.segmentFormat };\n        if (group.blockGroupType === 'TableCell' && group.format.textColor) {\n            context.segmentFormat.textColor = group.format.textColor;\n        }\n\n        context.defaultElementProcessors.child(group, element, context);\n\n        if (group.blockGroupType === 'TableCell' && group.format.textColor) {\n            context.segmentFormat = segmentFormat;\n            delete group.format.textColor;\n        }\n    });\n}\n\n/**\n * @internal Export for test only\n * @param html Source html\n */\n\nexport function excelHandler(html: string, htmlBefore: string): string {\n    if (html.match(LAST_TD_END_REGEX)) {\n        const trMatch = htmlBefore.match(LAST_TR_REGEX);\n        const tr = trMatch ? trMatch[0] : '<TR>';\n        html = tr + html + '</TR>';\n    }\n    if (html.match(LAST_TR_END_REGEX)) {\n        const tableMatch = htmlBefore.match(LAST_TABLE_REGEX);\n        const table = tableMatch ? tableMatch[0] : '<TABLE>';\n        html = table + html + '</TABLE>';\n    }\n\n    return html;\n}\n","import { moveChildNodes } from 'roosterjs-content-model-dom';\nimport type { BeforePasteEvent, TrustedHTMLHandler } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Convert pasted content from PowerPoint\n * @param event The BeforePaste event\n */\n\nexport function processPastedContentFromPowerPoint(\n    event: BeforePasteEvent,\n    trustedHTMLHandler: TrustedHTMLHandler\n) {\n    const { fragment, clipboardData } = event;\n\n    if (clipboardData.html && !clipboardData.text && clipboardData.image) {\n        // It is possible that PowerPoint copied both image and HTML but not plain text.\n        // We always prefer HTML if any.\n        const doc = new DOMParser().parseFromString(\n            trustedHTMLHandler(clipboardData.html),\n            'text/html'\n        );\n\n        moveChildNodes(fragment, doc?.body);\n    }\n}\n","/**\n * @internal\n **/\nexport const WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES: string[] = [\n    'TableInsertRowGapBlank',\n    'TableColumnResizeHandle',\n    'TableCellTopBorderHandle',\n    'TableCellLeftBorderHandle',\n    'TableHoverColumnHandle',\n    'TableHoverRowHandle',\n];\n/**\n * @internal\n **/\nexport const BULLET_LIST_STYLE: string = 'BulletListStyle';\n/**\n * @internal\n **/\nexport const NUMBER_LIST_STYLE: string = 'NumberListStyle';\n/**\n * @internal\n **/\nexport const IMAGE_BORDER: string = 'WACImageBorder';\n/**\n * @internal\n **/\nexport const IMAGE_CONTAINER: string = 'WACImageContainer';\n/**\n * @internal\n **/\nexport const OUTLINE_ELEMENT: string = 'OutlineElement';\n/**\n * @internal\n **/\nexport const PARAGRAPH: string = 'Paragraph';\n/**\n * @internal\n **/\nexport const LIST_CONTAINER_ELEMENT_CLASS_NAME: string = 'ListContainerWrapper';\n/**\n * @internal\n **/\nexport const TABLE_CONTAINER: string = 'TableContainer';\n/**\n * @internal\n **/\nexport const COMMENT_HIGHLIGHT_CLASS: string = 'CommentHighlightRest';\n/**\n * @internal\n **/\nexport const COMMENT_HIGHLIGHT_CLICKED_CLASS: string = 'CommentHighlightClicked';\n/**\n * @internal\n **/\nexport const TEMP_ELEMENTS_CLASSES: string[] = [\n    ...WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES,\n    'ListMarkerWrappingSpan',\n];\n/**\n * @internal\n **/\nexport const WAC_IDENTIFY_SELECTOR: string =\n    `ul[class^=\"${BULLET_LIST_STYLE}\"]>.${OUTLINE_ELEMENT},ol[class^=\"${NUMBER_LIST_STYLE}\"]>.${OUTLINE_ELEMENT},span.${IMAGE_CONTAINER},span.${IMAGE_BORDER},.${COMMENT_HIGHLIGHT_CLASS},.${COMMENT_HIGHLIGHT_CLICKED_CLASS},` +\n    WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES.map(c => `table div[class^=\"${c}\"]`).join(',');\n","import addParser from '../utils/addParser';\nimport { setProcessor } from '../utils/setProcessor';\nimport {\n    COMMENT_HIGHLIGHT_CLASS,\n    COMMENT_HIGHLIGHT_CLICKED_CLASS,\n    LIST_CONTAINER_ELEMENT_CLASS_NAME,\n    TABLE_CONTAINER,\n    TEMP_ELEMENTS_CLASSES,\n    WAC_IDENTIFY_SELECTOR,\n} from './constants';\nimport type {\n    ContentModelBeforePasteEvent,\n    ContentModelBlockFormat,\n    ContentModelBlockGroup,\n    ContentModelListItemLevelFormat,\n    ContentModelSegmentFormat,\n    DomToModelContext,\n    ElementProcessor,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\nconst LIST_ELEMENT_TAGS = ['UL', 'OL', 'LI'];\nconst LIST_ELEMENT_SELECTOR = LIST_ELEMENT_TAGS.join(',');\n\nconst COMMENT_BG_COLOR_REST = 'rgba(209, 209, 209, 0.5)';\nconst COMMENTS_TEXT_HIGHLIGHT_CLICKED = 'rgba(197, 139, 204, 0.5)';\n\n/**\n * Wac components do not use sub and super tags, instead only add vertical align to a span.\n * This parser normalize the content for content model\n */\nconst wacSubSuperParser: FormatParser<ContentModelSegmentFormat> = (\n    format: ContentModelSegmentFormat,\n    element: HTMLElement\n): void => {\n    const verticalAlign = element.style.verticalAlign;\n    if (verticalAlign === 'super') {\n        format.superOrSubScriptSequence = 'super';\n    }\n    if (verticalAlign === 'sub') {\n        format.superOrSubScriptSequence = 'sub';\n    }\n};\n\n/**\n * This processor does:\n * 1) Remove the display and margin of the element.\n * 2) When an element should be ignored but should handle the child elements call the default child processor.\n * 3) Removes the End of Paragraph element to avoid empty lines, we should only remove this if the previous element of the EOP is an EmptyTextRun\n * 4) Finally call the default processor.\n * @returns\n */\nconst wacElementProcessor: ElementProcessor<HTMLElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext\n): void => {\n    const elementTag = element.tagName;\n\n    if (element.matches(WAC_IDENTIFY_SELECTOR)) {\n        element.style.removeProperty('display');\n        element.style.removeProperty('margin');\n    }\n\n    if (element.classList.contains(LIST_CONTAINER_ELEMENT_CLASS_NAME)) {\n        context.elementProcessors.child(group, element, context);\n        return;\n    }\n\n    if (TEMP_ELEMENTS_CLASSES.some(className => element.classList.contains(className))) {\n        return;\n    } else if (shouldClearListContext(elementTag, element, context)) {\n        const { listFormat } = context;\n        listFormat.levels = [];\n        listFormat.listParent = undefined;\n    }\n\n    context.defaultElementProcessors.element(group, element, context);\n};\n\n/**\n * This processor calls the default list processor and then sets the correct list level and list bullet.\n */\nconst wacLiElementProcessor: ElementProcessor<HTMLLIElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLLIElement,\n    context: DomToModelContext\n): void => {\n    context.defaultElementProcessors.li?.(group, element, context);\n    const { listFormat } = context;\n    const listParent = listFormat.listParent;\n    if (listParent) {\n        const lastblock = listParent.blocks[listParent.blocks.length - 1];\n        if (\n            lastblock.blockType == 'BlockGroup' &&\n            lastblock.blockGroupType == 'ListItem' &&\n            context.listFormat.listParent !== lastblock\n        ) {\n            const currentLevel = lastblock.levels[lastblock.levels.length - 1];\n\n            // Get item level from 'data-aria-level' attribute\n            const level = parseInt(element.getAttribute('data-aria-level') ?? '');\n            if (level > 0) {\n                if (level > lastblock.levels.length) {\n                    while (level != lastblock.levels.length) {\n                        lastblock.levels.push(currentLevel);\n                    }\n                } else {\n                    lastblock.levels.splice(level, lastblock.levels.length - 1);\n                    lastblock.levels[level - 1] = currentLevel;\n                }\n            }\n        }\n    }\n};\n\n/**\n * This parsers does:\n * 1) Sets the display for dummy item to undefined when the current style is block.\n * 2) Removes the Margin Left\n */\nconst wacListItemParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement\n): void => {\n    if (element.style.display === 'block') {\n        format.displayForDummyItem = undefined;\n    }\n\n    format.marginLeft = undefined;\n};\n\n/**\n * Wac usually adds padding to lists which is unwanted so remove it.\n */\nconst wacListLevelParser: FormatParser<ContentModelListItemLevelFormat> = (\n    format: ContentModelListItemLevelFormat\n): void => {\n    format.marginLeft = undefined;\n    format.paddingLeft = undefined;\n};\n\n/**\n * This function returns whether we need to clear the list format.\n * Word Online wraps lists inside divs to have this structure:\n *\n *  <div class='ListContainerWrapper'>\n *      <ol>...</ol>\n *  </div>\n *  <div>\n *      <p>...</p>\n *  <div>\n *  <div class='ListContainerWrapper'>\n *      <ol>...</ol>\n *  </div>\n *\n *  So if a elements is not contained inside of a list we should clear the list context to prevent normal text to be\n *  transformed into list\n *  For the above scenario, if we do not clear the format, the content inside of the second div would be transformed to a list too.\n */\nfunction shouldClearListContext(\n    elementTag: string,\n    element: HTMLElement,\n    context: DomToModelContext\n) {\n    return (\n        context.listFormat.levels.length > 0 &&\n        LIST_ELEMENT_TAGS.every(tag => tag != elementTag) &&\n        !element.closest(LIST_ELEMENT_SELECTOR)\n    );\n}\n\nconst wacCommentParser: FormatParser<ContentModelSegmentFormat> = (\n    format: ContentModelSegmentFormat,\n    element: HTMLElement\n): void => {\n    if (\n        (element.className.includes(COMMENT_HIGHLIGHT_CLASS) &&\n            element.style.backgroundColor == COMMENT_BG_COLOR_REST) ||\n        (element.className.includes(COMMENT_HIGHLIGHT_CLICKED_CLASS) &&\n            element.style.backgroundColor == COMMENTS_TEXT_HIGHLIGHT_CLICKED)\n    ) {\n        delete format.backgroundColor;\n    }\n};\n/**\n * @internal\n * Convert pasted content from Office Online\n * Once it is known that the document is from WAC\n * We need to remove the display property and margin from all the list item\n * @param ev ContentModelBeforePasteEvent\n */\nexport function processPastedContentWacComponents(ev: ContentModelBeforePasteEvent) {\n    addParser(ev.domToModelOption, 'segment', wacSubSuperParser);\n    addParser(ev.domToModelOption, 'listItemThread', wacListItemParser);\n    addParser(ev.domToModelOption, 'listLevel', wacListLevelParser);\n    addParser(ev.domToModelOption, 'container', wacBlockParser);\n    addParser(ev.domToModelOption, 'segment', wacCommentParser);\n\n    setProcessor(ev.domToModelOption, 'element', wacElementProcessor);\n    setProcessor(ev.domToModelOption, 'li', wacLiElementProcessor);\n    setProcessor(ev.domToModelOption, 'ol', wacListProcessor);\n    setProcessor(ev.domToModelOption, 'ul', wacListProcessor);\n}\n\n/**\n * List items from word have this format when using List items:\n * @example\n        <div>\n           <ol></ol>\n        </div>\n        <div>\n           <ol></ol>\n        </div>\n        <div>\n           <ol></ol>\n        </div>\n *  Due to this the div between each of the lists we need to restore the list context to use the previous list,\n *  otherwise it could create a new list instead under the same list element\n */\nconst wacListProcessor: ElementProcessor<HTMLOListElement | HTMLUListElement> = (\n    group: ContentModelBlockGroup,\n    element: HTMLOListElement | HTMLUListElement,\n    context: DomToModelContext\n): void => {\n    const lastBlock = group.blocks[group.blocks.length - 1];\n    const isWrappedInContainer = element.closest(`.${LIST_CONTAINER_ELEMENT_CLASS_NAME}`);\n    if (\n        isWrappedInContainer?.previousElementSibling?.classList.contains(\n            LIST_CONTAINER_ELEMENT_CLASS_NAME\n        )\n    ) {\n        if (lastBlock?.blockType === 'BlockGroup' && lastBlock.blockGroupType == 'ListItem') {\n            context.listFormat = {\n                threadItemCounts: [],\n                levels: lastBlock.levels,\n                listParent: group,\n            };\n        }\n    }\n    if (element.tagName.toUpperCase() === 'OL') {\n        context.defaultElementProcessors.ol?.(group, element as HTMLOListElement, context);\n    } else {\n        context.defaultElementProcessors.ul?.(group, element as HTMLUListElement, context);\n    }\n};\n\nconst wacBlockParser: FormatParser<ContentModelBlockFormat> = (\n    format: ContentModelBlockFormat,\n    element: HTMLElement\n) => {\n    if (element.classList.contains(TABLE_CONTAINER) && element.style.marginLeft.startsWith('-')) {\n        delete format.marginLeft;\n    }\n};\n","import { getObjectKeys } from 'roosterjs-content-model-dom';\nimport type { WordMetadata } from './WordMetadata';\nimport type { ContentModelBeforePasteEvent } from 'roosterjs-content-model-types';\n\nconst FORMATING_REGEX = /[\\n\\t'{}\"]+/g;\n\n/**\n * @internal\n * Word Desktop content has a style tag that contains data for the lists.\n * So this function query that style tag and extract the data from the innerHTML, since it is not available from the HTMLStyleElement.sheet.\n *\n * The format is like:\n * example of style element content\n * @list l0:level1 {\n * styleTag: styleValue;\n * ...\n * }\n *\n * To extract the data:\n * 1. Substring the value of the style selector, using @ index and { index\n * 2. Substring the value of the style rules by Substring the content between { and }\n * 3. Split the value of the rules using ; as separator { styleTag: styleValue; styleTag1: StyleValue1 } = ['styleTag: styleValue',  'styleTag1: StyleValue1']\n * 4. Split the value of the rule  using : as separator: styleTag: styleValue = [styleTag, styleValue]\n * 5. Save data in record and only use the required information.\n *\n */\nexport default function getStyleMetadata(\n    ev: ContentModelBeforePasteEvent,\n    trustedHTMLHandler: (val: string) => string\n) {\n    const metadataMap: Map<string, WordMetadata> = new Map();\n    const doc = new DOMParser().parseFromString(trustedHTMLHandler(ev.htmlBefore), 'text/html');\n    const styles = doc.querySelectorAll('style');\n\n    styles.forEach(style => {\n        const text = style?.innerHTML.trim() || '';\n\n        let index = 0;\n        while (index >= 0) {\n            const indexAt = text.indexOf('@', index + 1);\n            const indexCurlyEnd = text.indexOf('}', indexAt);\n            const indexCurlyStart = text.indexOf('{', indexAt);\n            index = indexAt;\n\n            // 1.\n            const metadataName = text\n                .substring(indexAt + 1, indexCurlyStart)\n                .replace(FORMATING_REGEX, '')\n                .replace('list', '')\n                .trimRight()\n                .trimLeft();\n\n            // 2.\n            const dataName = text\n                .substring(indexCurlyStart, indexCurlyEnd + 1)\n                .trimLeft()\n                .trimRight();\n            const record: Record<string, string> = {};\n\n            // 3.\n            const entries = dataName.split(';');\n            entries.forEach(entry => {\n                // 4.\n                const [key, value] = entry.split(':');\n                if (key && value) {\n                    const formatedKey = key.replace(FORMATING_REGEX, '').trimRight().trimLeft();\n                    const formatedValue = value.replace(FORMATING_REGEX, '').trimRight().trimLeft();\n                    // 5.\n                    record[formatedKey] = formatedValue;\n                }\n            });\n\n            const data: WordMetadata = {\n                'mso-level-number-format': record['mso-level-number-format'],\n                'mso-level-start-at': record['mso-level-start-at'],\n                'mso-level-text': record['mso-level-text'],\n            };\n            if (getObjectKeys(data).some(key => !!data[key])) {\n                metadataMap.set(metadataName, data);\n            }\n        }\n    });\n    return metadataMap;\n}\n","import addParser from '../utils/addParser';\nimport getStyleMetadata from './getStyleMetadata';\nimport { getStyles } from '../utils/getStyles';\nimport { processWordComments } from './processWordComments';\nimport { processWordList } from './processWordLists';\nimport { setProcessor } from '../utils/setProcessor';\nimport type { WordMetadata } from './WordMetadata';\nimport type {\n    ContentModelBeforePasteEvent,\n    ContentModelBlockFormat,\n    ContentModelListItemFormat,\n    ContentModelListItemLevelFormat,\n    DomToModelContext,\n    ElementProcessor,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\nconst PERCENTAGE_REGEX = /%/;\nconst DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE = 120;\n\n/**\n * @internal\n * Handles Pasted content when source is Word Desktop\n * @param ev ContentModelBeforePasteEvent\n */\nexport function processPastedContentFromWordDesktop(\n    ev: ContentModelBeforePasteEvent,\n    trustedHTMLHandler: (text: string) => string\n) {\n    const metadataMap: Map<string, WordMetadata> = getStyleMetadata(ev, trustedHTMLHandler);\n\n    setProcessor(ev.domToModelOption, 'element', wordDesktopElementProcessor(metadataMap));\n    addParser(ev.domToModelOption, 'block', removeNonValidLineHeight);\n    addParser(ev.domToModelOption, 'listLevel', listLevelParser);\n    addParser(ev.domToModelOption, 'listItemElement', listItemElementParser);\n}\n\nconst wordDesktopElementProcessor = (\n    metadataKey: Map<string, WordMetadata>\n): ElementProcessor<HTMLElement> => {\n    return (group, element, context) => {\n        const styles = getStyles(element);\n        // Process Word Lists or Word Commands, otherwise use the default processor on this element.\n        if (\n            !(\n                processWordList(styles, group, element, context, metadataKey) ||\n                processWordComments(styles, element)\n            )\n        ) {\n            context.defaultElementProcessors.element(group, element, context);\n        }\n    };\n};\n\nfunction removeNonValidLineHeight(\n    format: ContentModelBlockFormat,\n    element: HTMLElement,\n    context: DomToModelContext,\n    defaultStyle: Readonly<Partial<CSSStyleDeclaration>>\n): void {\n    //If the line height is less than the browser default line height, line between the text is going to be too narrow\n    let parsedLineHeight: number;\n    if (\n        PERCENTAGE_REGEX.test(element.style.lineHeight) &&\n        !isNaN((parsedLineHeight = parseInt(element.style.lineHeight))) &&\n        parsedLineHeight < DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE\n    ) {\n        format.lineHeight = defaultStyle.lineHeight;\n    }\n}\n\nfunction listLevelParser(\n    format: ContentModelListItemLevelFormat,\n    element: HTMLElement,\n    context: DomToModelContext,\n    defaultStyle: Readonly<Partial<CSSStyleDeclaration>>\n): void {\n    if (element.style.marginLeft != '') {\n        format.marginLeft = defaultStyle.marginLeft;\n    }\n\n    format.marginBottom = undefined;\n}\n\nconst listItemElementParser: FormatParser<ContentModelListItemFormat> = (\n    format: ContentModelListItemFormat,\n    element: HTMLElement\n): void => {\n    if (element.style.marginLeft) {\n        format.marginLeft = undefined;\n    }\n    if (element.style.marginRight) {\n        format.marginRight = undefined;\n    }\n};\n","import { isElementOfType } from 'roosterjs-content-model-dom';\n\nconst MSO_COMMENT_ANCHOR_HREF_REGEX = /#_msocom_/;\nconst MSO_SPECIAL_CHARACTER = 'mso-special-character';\nconst MSO_SPECIAL_CHARACTER_COMMENT = 'comment';\nconst MSO_ELEMENT = 'mso-element';\nconst MSO_ELEMENT_COMMENT_LIST = 'comment-list';\n\n/**\n * @internal\n * Check whether the element contain Word attributes related to comments and if it does we should no process\n * this element.\n * @returns\n */\nexport function processWordComments(styles: Record<string, string>, element: HTMLElement) {\n    return (\n        styles[MSO_SPECIAL_CHARACTER] == MSO_SPECIAL_CHARACTER_COMMENT ||\n        (isElementOfType(element, 'a') && MSO_COMMENT_ANCHOR_HREF_REGEX.test(element.href)) ||\n        styles[MSO_ELEMENT] == MSO_ELEMENT_COMMENT_LIST\n    );\n}\n","import { getListStyleTypeFromString, updateListMetadata } from 'roosterjs-content-model-core';\nimport type { WordMetadata } from './WordMetadata';\nimport {\n    addBlock,\n    createListItem,\n    createListLevel,\n    parseFormat,\n} from 'roosterjs-content-model-dom';\nimport type {\n    ContentModelBlockGroup,\n    ContentModelListItemLevelFormat,\n    ContentModelListLevel,\n    DomToModelContext,\n    DomToModelListFormat,\n    FormatParser,\n} from 'roosterjs-content-model-types';\n\n/** Word list metadata style name */\nconst MSO_LIST = 'mso-list';\nconst MSO_LIST_IGNORE = 'ignore';\nconst WORD_FIRST_LIST = 'l0';\n\nconst TEMPLATE_VALUE_REGEX = /%[0-9a-zA-Z]+/g;\n\ninterface WordDesktopListFormat extends DomToModelListFormat {\n    wordLevel?: number | '';\n    wordList?: string;\n    wordKnownLevels?: Map<string, ContentModelListLevel[]>;\n}\n\nconst BULLET_METADATA = 'bullet';\n/**\n * @internal\n * @param styles\n * @param group\n * @param element\n * @param context\n * @returns\n */\nexport function processWordList(\n    styles: Record<string, string>,\n    group: ContentModelBlockGroup,\n    element: HTMLElement,\n    context: DomToModelContext,\n    metadata: Map<string, WordMetadata>\n) {\n    const listFormat = context.listFormat as WordDesktopListFormat;\n    if (!listFormat.wordKnownLevels) {\n        listFormat.wordKnownLevels = new Map<string, ContentModelListLevel[]>();\n    }\n    const wordListStyle = styles[MSO_LIST] || '';\n\n    // If the element contains Ignore style, do not process it,\n    // Usually this element contains the fake bullet used in Word Desktop.\n    if (wordListStyle.toLowerCase() === MSO_LIST_IGNORE) {\n        return true;\n    }\n\n    const [lNumber, level] = wordListStyle.split(' ');\n    // Try get the list metadata from word, which follows this format: l1 level1 lfo2\n    // If we are able to get the level property means we can process this element to be a list\n    listFormat.wordLevel = level && parseInt(level.substr('level'.length));\n\n    listFormat.wordList = lNumber || WORD_FIRST_LIST;\n    if (listFormat.levels.length == 0) {\n        listFormat.levels =\n            (listFormat.wordList && listFormat.wordKnownLevels.get(listFormat.wordList)) || [];\n    }\n\n    if (wordListStyle && group && typeof listFormat.wordLevel === 'number') {\n        const { wordLevel, wordList } = listFormat;\n        // Retrieve the Fake bullet on the element and also the list type\n        const listMetadata = metadata.get(`${lNumber}:${level}`);\n        const listType =\n            listMetadata?.['mso-level-number-format']?.toLowerCase() != BULLET_METADATA\n                ? 'OL'\n                : 'UL';\n\n        // Create the new level of the list item and parse the format\n        const newLevel: ContentModelListLevel = createListLevel(listType);\n        parseFormat(element, context.formatParsers.listLevel, newLevel.format, context);\n\n        // If the list format is in a different level, update the array so we get the new item\n        // To be in the same level as the provided level metadata.\n        if (wordLevel > listFormat.levels.length) {\n            while (wordLevel != listFormat.levels.length) {\n                listFormat.levels.push(newLevel);\n            }\n        } else {\n            listFormat.levels.splice(wordLevel, listFormat.levels.length - 1);\n            listFormat.levels[wordLevel - 1] = newLevel;\n        }\n\n        listFormat.listParent = group;\n\n        processAsListItem(listFormat, context, element, group, listMetadata);\n\n        if (\n            listFormat.levels.length > 0 &&\n            listFormat.wordKnownLevels.get(wordList) != listFormat.levels\n        ) {\n            listFormat.wordKnownLevels.set(wordList, [...listFormat.levels]);\n        }\n        return true;\n    }\n\n    return false;\n}\n\nfunction processAsListItem(\n    listFormat: WordDesktopListFormat,\n    context: DomToModelContext,\n    element: HTMLElement,\n    group: ContentModelBlockGroup,\n    listMetadata: WordMetadata | undefined\n) {\n    const listLevel = listFormat.levels[listFormat.levels.length - 1];\n    const { listType } = listLevel;\n    const bullet = getBulletFromMetadata(listMetadata, listType);\n    if (bullet) {\n        updateListMetadata(listFormat.levels[listFormat.levels.length - 1], metadata =>\n            Object.assign({}, metadata, {\n                unorderedStyleType: listType == 'UL' ? bullet : undefined,\n                orderedStyleType: listType == 'OL' ? bullet : undefined,\n            })\n        );\n    }\n\n    const listItem = createListItem(listFormat.levels, context.segmentFormat);\n\n    parseFormat(element, context.formatParsers.segmentOnBlock, context.segmentFormat, context);\n    parseFormat(element, context.formatParsers.listItemElement, listItem.format, context);\n\n    if (listType == 'OL') {\n        parseFormat(\n            element,\n            [startNumberOverrideParser(listMetadata)],\n            listItem.levels[listItem.levels.length - 1].format,\n            context\n        );\n    }\n\n    context.elementProcessors.child(listItem, element, context);\n    addBlock(group, listItem);\n}\n\nfunction getBulletFromMetadata(listMetadata: WordMetadata | undefined, listType: 'OL' | 'UL') {\n    const templateType = listMetadata?.['mso-level-number-format'] || 'decimal';\n    let templateFinal: string;\n\n    if (listMetadata?.['mso-level-text']) {\n        let templateValue: string = '';\n        switch (templateType) {\n            case 'alpha-upper':\n                templateValue = 'UpperAlpha';\n                break;\n            case 'alpha-lower':\n                templateValue = 'LowerAlpha';\n                break;\n            case 'roman-lower':\n                templateValue = 'LowerRoman';\n                break;\n            case 'roman-upper':\n                templateValue = 'UpperRoman';\n                break;\n            default:\n                templateValue = 'Number';\n                break;\n        }\n        const template = (listMetadata['mso-level-text'] || '')\n            .replace('\\\\', '')\n            .replace('\"', '')\n            .replace(TEMPLATE_VALUE_REGEX, '${' + templateValue + '}');\n\n        templateFinal = '\"' + template + ' \"';\n    } else {\n        switch (templateType) {\n            case 'alpha-lower':\n                templateFinal = 'lower-alpha';\n                break;\n            case 'roman-lower':\n                templateFinal = 'lower-roman';\n                break;\n            case 'roman-upper':\n                templateFinal = 'upper-roman';\n                break;\n            default:\n                templateFinal = 'decimal';\n                break;\n        }\n    }\n\n    return getListStyleTypeFromString(listType, templateFinal);\n}\n\nfunction startNumberOverrideParser(\n    listMetadata: WordMetadata | undefined\n): FormatParser<ContentModelListItemLevelFormat> | null {\n    return (format, _, context) => {\n        const {\n            wordKnownLevels,\n            wordLevel,\n            wordList,\n            levels,\n        } = context.listFormat as WordDesktopListFormat;\n        if (typeof wordLevel === 'number' && wordList) {\n            const start = parseInt(listMetadata?.['mso-level-start-at'] || '1');\n            const knownLevel = wordKnownLevels?.get(wordList) || [];\n\n            if (start != undefined && !isNaN(start) && knownLevel.length != levels.length) {\n                format.startNumberOverride = start;\n            }\n        }\n    };\n}\n","import { WAC_IDENTIFY_SELECTOR } from '../WacComponents/constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\n/**\n * @internal\n * Check whether the fragment provided contain Wac Elements\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const documentContainWacElements: GetSourceFunction = props => {\n    const { fragment } = props;\n    return !!fragment.querySelector(WAC_IDENTIFY_SELECTOR);\n};\n","import { documentContainWacElements } from './documentContainWacElements';\nimport { isExcelDesktopDocument } from './isExcelDesktopDocument';\nimport { isExcelOnlineDocument } from './isExcelOnlineDocument';\nimport { isGoogleSheetDocument } from './isGoogleSheetDocument';\nimport { isPowerPointDesktopDocument } from './isPowerPointDesktopDocument';\nimport { isWordDesktopDocument } from './isWordDesktopDocument';\nimport { shouldConvertToSingleImage } from './shouldConvertToSingleImage';\nimport type { ClipboardData } from 'roosterjs-content-model-types';\nimport type { BeforePasteEvent } from 'roosterjs-editor-types';\n\n/**\n * @internal\n */\nexport type GetSourceInputParams = {\n    htmlAttributes: Record<string, string>;\n    fragment: DocumentFragment;\n    shouldConvertSingleImage: boolean;\n    clipboardData: ClipboardData;\n};\n\n/**\n * @internal\n * Represent the types of sources to handle in the Paste Plugin\n */\nexport type KnownPasteSourceType =\n    | 'wordDesktop'\n    | 'excelDesktop'\n    | 'excelOnline'\n    | 'powerPointDesktop'\n    | 'googleSheets'\n    | 'wacComponents'\n    | 'default'\n    | 'singleImage';\n\n/**\n * @internal\n */\nexport type GetSourceFunction = (props: GetSourceInputParams) => boolean;\n\nconst getSourceFunctions = new Map<KnownPasteSourceType, GetSourceFunction>([\n    ['wordDesktop', isWordDesktopDocument],\n    ['excelDesktop', isExcelDesktopDocument],\n    ['excelOnline', isExcelOnlineDocument],\n    ['powerPointDesktop', isPowerPointDesktopDocument],\n    ['wacComponents', documentContainWacElements],\n    ['googleSheets', isGoogleSheetDocument],\n    ['singleImage', shouldConvertToSingleImage],\n]);\n\n/**\n * @internal\n * This function tries to get the source of the Pasted content\n * @param event the before paste event\n * @param shouldConvertSingleImage Whether convert single image is enabled.\n * @returns The Type of pasted content, if no type found will return {KnownSourceType.Default}\n */\nexport function getPasteSource(\n    event: BeforePasteEvent,\n    shouldConvertSingleImage: boolean\n): KnownPasteSourceType {\n    const { htmlAttributes, clipboardData, fragment } = event;\n\n    let result: KnownPasteSourceType | null = null;\n    const param: GetSourceInputParams = {\n        htmlAttributes,\n        fragment,\n        shouldConvertSingleImage,\n        clipboardData,\n    };\n\n    getSourceFunctions.forEach((func, key) => {\n        if (!result && func(param)) {\n            result = key;\n        }\n    });\n\n    return result ?? 'default';\n}\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Excel Desktop documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isExcelDesktopDocument: GetSourceFunction = props => {\n    const { htmlAttributes } = props;\n    // The presence of this attribute confirms its origin from Excel Desktop\n    return htmlAttributes[PastePropertyNames.EXCEL_DESKTOP_ATTRIBUTE_NAME] == EXCEL_ATTRIBUTE_VALUE;\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\n// Excel Desktop also has this attribute\nconst EXCEL_ONLINE_ATTRIBUTE_VALUE = 'Excel.Sheet';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Excel Online documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isExcelOnlineDocument: GetSourceFunction = props => {\n    const { htmlAttributes } = props;\n    // The presence of Excel.Sheet confirms its origin from Excel, the absence of EXCEL_DESKTOP_ATTRIBUTE_NAME confirms it is from the Online version\n    return (\n        htmlAttributes[PastePropertyNames.PROG_ID_NAME] == EXCEL_ONLINE_ATTRIBUTE_VALUE &&\n        htmlAttributes[PastePropertyNames.EXCEL_DESKTOP_ATTRIBUTE_NAME] == undefined\n    );\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\n/**\n * @internal\n * Checks whether the fragment provided contain elements from Google sheets\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isGoogleSheetDocument: GetSourceFunction = props => {\n    const { fragment } = props;\n    return !!fragment.querySelector(PastePropertyNames.GOOGLE_SHEET_NODE_NAME);\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst POWERPOINT_ATTRIBUTE_VALUE = 'PowerPoint.Slide';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Power Point Desktop documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isPowerPointDesktopDocument: GetSourceFunction = props => {\n    return props.htmlAttributes[PastePropertyNames.PROG_ID_NAME] == POWERPOINT_ATTRIBUTE_VALUE;\n};\n","import { PastePropertyNames } from './constants';\nimport type { GetSourceFunction } from './getPasteSource';\n\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\nconst WORD_PROG_ID = 'Word.Document';\n\n/**\n * @internal\n * Checks whether the Array provided contains strings that identify Word Desktop documents\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const isWordDesktopDocument: GetSourceFunction = props => {\n    const { htmlAttributes } = props;\n    return (\n        htmlAttributes[WORD_ATTRIBUTE_NAME] == WORD_ATTRIBUTE_VALUE ||\n        htmlAttributes[PastePropertyNames.PROG_ID_NAME] == WORD_PROG_ID\n    );\n};\n","import type { GetSourceFunction } from './getPasteSource';\n\n/**\n * @internal\n * Checks whether the fragment only contains a single image to paste\n * and the editor have the ConvertSingleImageBody Experimental feature\n * @param props Properties related to the PasteEvent\n * @returns\n */\nexport const shouldConvertToSingleImage: GetSourceFunction = props => {\n    const { shouldConvertSingleImage, clipboardData } = props;\n    return (\n        shouldConvertSingleImage &&\n        clipboardData.htmlFirstLevelChildTags?.length == 1 &&\n        clipboardData.htmlFirstLevelChildTags[0] == 'IMG'\n    );\n};\n","import type {\n    ContentModelFormatMap,\n    DomToModelOption,\n    FormatParser,\n    FormatParsersPerCategory,\n} from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport default function addParser<TKey extends keyof FormatParsersPerCategory>(\n    domToModelOption: DomToModelOption,\n    entry: TKey,\n    additionalFormatParsers: FormatParser<ContentModelFormatMap[TKey]>\n) {\n    if (!domToModelOption.additionalFormatParsers) {\n        domToModelOption.additionalFormatParsers = {};\n    }\n    if (!domToModelOption.additionalFormatParsers[entry]) {\n        domToModelOption.additionalFormatParsers[entry] = [];\n    }\n\n    domToModelOption.additionalFormatParsers[entry]?.push(additionalFormatParsers);\n}\n","import { BorderKeys, DeprecatedColors } from 'roosterjs-content-model-dom';\nimport type { BorderFormat, FormatParser } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport const deprecatedBorderColorParser: FormatParser<BorderFormat> = (\n    format: BorderFormat\n): void => {\n    BorderKeys.forEach(key => {\n        const value = format[key];\n        let color: string = '';\n        if (\n            value &&\n            DeprecatedColors.some(dColor => value.indexOf(dColor) > -1 && (color = dColor))\n        ) {\n            const newValue = value.replace(color, '').trimRight();\n            format[key] = newValue;\n        }\n    });\n};\n","/**\n * @internal\n * Get CSS styles of a given element in name-value pair format\n * @param element The element to get styles from\n */\nexport function getStyles(element: HTMLElement): Record<string, string> {\n    const result: Record<string, string> = {};\n    const style = element?.getAttribute('style') || '';\n    style.split(';').forEach(pair => {\n        const valueIndex = pair.indexOf(':');\n        const name = pair.slice(0, valueIndex);\n        const value = pair.slice(valueIndex + 1);\n        if (name && value) {\n            result[name.trim()] = value.trim();\n        }\n    });\n    return result;\n}\n","import { isElementOfType } from 'roosterjs-content-model-dom';\nimport type { ContentModelHyperLinkFormat, FormatParser } from 'roosterjs-content-model-types';\n\nconst SUPPORTED_PROTOCOLS = ['http:', 'https:', 'notes:', 'mailto:', 'onenote:'];\nconst INVALID_LINKS_REGEX = /^file:\\/\\/\\/[a-zA-Z\\/]/i;\n\n/**\n * @internal\n */\nexport const parseLink: FormatParser<ContentModelHyperLinkFormat> = (format, element) => {\n    if (!isElementOfType(element, 'a')) {\n        return;\n    }\n\n    let url: URL | undefined;\n    try {\n        url = new URL(element.href);\n    } catch {\n        url = undefined;\n    }\n\n    if (\n        (url && SUPPORTED_PROTOCOLS.indexOf(url.protocol) === -1) ||\n        INVALID_LINKS_REGEX.test(element.href)\n    ) {\n        element.removeAttribute('href');\n        format.href = '';\n    }\n};\n","import type { DomToModelOption, ElementProcessorMap } from 'roosterjs-content-model-types';\n\n/**\n * @internal\n */\nexport function setProcessor<TKey extends keyof ElementProcessorMap>(\n    domToModelOption: DomToModelOption,\n    entry: TKey,\n    processorOverride: Partial<ElementProcessorMap>[TKey]\n) {\n    if (!domToModelOption.processorOverride) {\n        domToModelOption.processorOverride = {};\n    }\n\n    domToModelOption.processorOverride[entry] = processorOverride;\n}\n","import { ContentModelEditor } from 'roosterjs-content-model-editor';\nimport {\n    ContentModelEditPlugin,\n    ContentModelPastePlugin,\n    EntityDelimiterPlugin,\n} from 'roosterjs-content-model-plugins';\nimport type { EditorPlugin } from 'roosterjs-editor-types';\nimport type {\n    ContentModelEditorOptions,\n    IContentModelEditor,\n} from 'roosterjs-content-model-editor';\n\n/**\n * Create a Content Model Editor using the given options\n * @param contentDiv The html div element needed for creating the editor\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\n * ContentEdit, HyperLink and Paste, user don't need to add those.\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\n * @returns The ContentModelEditor instance\n */\nexport function createContentModelEditor(\n    contentDiv: HTMLDivElement,\n    additionalPlugins?: EditorPlugin[],\n    initialContent?: string\n): IContentModelEditor {\n    const plugins = additionalPlugins ? [...additionalPlugins] : [];\n    plugins.push(\n        new ContentModelPastePlugin(),\n        new ContentModelEditPlugin(),\n        new EntityDelimiterPlugin()\n    );\n\n    const options: ContentModelEditorOptions = {\n        plugins: plugins,\n        initialContent: initialContent,\n        defaultSegmentFormat: {\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\n            fontSize: '11pt',\n            textColor: '#000000',\n        },\n    };\n    return new ContentModelEditor(contentDiv, options);\n}\n","export { createContentModelEditor } from './createContentModelEditor';\nexport * from 'roosterjs-content-model-types';\nexport * from 'roosterjs-content-model-dom';\nexport * from 'roosterjs-content-model-core';\nexport * from 'roosterjs-content-model-api';\nexport * from 'roosterjs-content-model-editor';\nexport * from 'roosterjs-content-model-plugins';\n","module.exports = roosterjs;","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(2594);\n"],"names":["default","ResultMap","left","ltr","rtl","center","right","TableAlignMap","model","alignment","paragraphOrListItemOrTable","getOperationalBlocks","forEach","block","newAligment","format","direction","blockType","alignTable","textAlign","length","internalSetDirection","marginLeft","paddingLeft","setProperty","marginRight","paddingRight","key","value","isBlockGroupOfType","findListItemsInSameThread","item","levels","level","blocks","indentation","paragraphOrListItem","isIndent","lastLevel","newLevel","createListLevel","listType","startNumberOverride","push","pop","isRtl","originalValue","parseValueWithUnit","newValue","Math","ceil","floor","max","isQuote","tagName","paragraphOfQuote","every","blockAndParent","parent","unwrapBlock","createFormatContainer","target","current","areSameFormats","canMergeQuote","wrapBlockStep1","wrapBlockStep2","clearContainerFormat","path","containerPathIndex","getClosestAncestorBlockGroupIndex","container","containerIndex","indexOf","blockIndex","newContainer","splice","clearListFormat","listItem","clearBlockFormat","index","decorator","blocksToClear","segmentsToClear","tablesToClear","iterateSelections","tableContext","segments","colIndex","rowIndex","isWholeTableSelected","cell","rows","cells","isSelected","updateTableCellMetadata","isHeader","useBorderBox","find","x","clearTableCellFormat","includeListFormatHolder","marker","filter","segmentType","isOnlySelectionMarkerSelected","adjustWordSelection","some","isWholeBlockSelected","i","defaultSegmentFormat","link","textColor","code","clearSegmentsFormat","table","borderCollapse","updateTableMetadata","applyTableFormat","undefined","createTablesFormat","mergeValue","isFirst","pendingFormat","formatState","firstTableContext","firstBlock","px","isFirstImage","isFirstSegment","result","listItemIndex","retrieveStructureFormat","isMultilineSelection","paragraph","headingLevel","parseInt","substring","validHeadingLevel","marginBottom","marginTop","retrieveParagraphFormat","segment","extractedBorder","borderColor","borderWidth","borderStyle","modelFormat","Object","assign","italic","underline","fontWeight","mergedFormat","superOrSubscript","superOrSubScriptSequence","split","isBold","strikethrough","letterSpacing","fontFamily","fontSize","backgroundColor","lineHeight","retrieveSegmentFormat","canUnlink","canAddImageAltText","extractBorderValues","color","width","style","imageFormat","boxShadow","borderRadius","canMergeTableCell","tableFormat","isInTable","tableHasHeader","row","retrieveTableFormat","round","parseFloat","step1Result","blockToWrap","creator","canMerge","prevBlock","wrapper","createAndAdd","setParagraphNotImplicit","addBlock","unshift","nextBlock","entityModel","position","isBlock","focusAfterEntity","context","blockParent","deleteResult","deleteSelection","insertPoint","normalizeContentModel","pathIndex","child","directChild","blockGroupType","childIndex","blocksToInsert","nextParagraph","createParagraph","createBr","createSelectionMarker","setSelection","image","border","borderFormat","borderLeft","borderTop","borderBottom","borderRight","findListItems","group","pushNullIfNecessary","last","areListTypesCompatible","listItems","currentIndex","compareToIndex","currentLevels","compareToLevels","currentLevel","hasStartNumberOverride","levelLength","slice","currentItem","items","isOrderedList","filterListItems","shouldIgnoreBlock","paragraphOrListItems","alreadyInExpectedType","existingListItems","hasIgnoredParagraphBefore","itemIndex","segmentFormat","newListItem","createListItem","marginBlockEnd","marginBlockStart","isImplicit","firstMatcher","siblingMatcher","first","paragraphs","getSelectedParagraphs","changed","p","findIndex","shouldSplitTrailingSpace","text","trimRight","isTrailingSpace","splitTextSegment","textSegment","trailingSpace","newText","createText","trailingSpaceLink","trailingSpaceSegment","_","__","lastTextSegment","findDelimiter","moveRightward","word","offset","char","isPunctuation","isSpace","found","newSegmentLeft","newSegmentRight","markerBlock","tempSegments","markerSelectionIndex","currentSegment","selection","firstColumn","addSegment","operation","cachedElement","TextAlignValueMap","alignCellLeft","alignCellCenter","alignCellRight","VerticalAlignValueMap","alignCellTop","alignCellMiddle","alignCellBottom","alignTableCellInternal","callback","sel","getSelectedCells","firstRow","lastRow","lastColumn","verticalAlign","metadata","vAlignOverride","firstCol","lastCol","noSpanAbove","spanAbove","noSpanLeft","spanLeft","noDifferentBelowSpan","map","spanCount","getBelowSpanCount","a","noDifferentRightSpan","col","getRightSpanCount","columns","createTable","createTableCell","cellInNextCol","widths","collapseTableSelection","cellInNextRow","createEmptyParagraph","newPara","br","firstCell","shift","insertLeft","dataset","insertAbove","sourceRow","height","canMergeCells","mergingColIndex","newSelectedCol","mergingRowIndex","newSelectedRow","newCell","newWidth","belowRow","belowCell","newHeight","newRow","editor","focus","formatContentModel","setModelAlignment","apiName","setModelDirection","HeaderFontSizes","h1","h2","h3","h4","h5","h6","formatParagraphWithContentModel","para","tag","setModelIndentation","newPendingFormat","createParagraphDecorator","spacing","toString","DefaultQuoteFormat","BuildInQuoteFormat","quoteFormat","fullQuoteFormat","toggleModelBlockQuote","type","options","contentNode","wrapperDisplay","skipUndoSnapshot","getDocument","createElement","display","appendChild","createEntity","insertEntityModel","newEntities","selectionOverride","changeSource","ChangeSource","InsertEntity","getChangeData","id","isReadonly","clearModelFormat","reducedModelChildProcessor","nodeStack","selectionRootNode","getSelectionRootNode","root","startNode","node","contains","isNodeOfType","parentNode","createNodeStack","stackChild","getRegularSelectionOffsets","nodeStartOffset","nodeEndOffset","firstChild","nextSibling","getChildIndex","handleRegularSelection","processChildNode","defaultElementProcessors","getPendingFormat","createContentModel","processorOverride","manager","getSnapshotsManager","canUndo","hasNewContent","canMove","canRedo","isDarkMode","zoomScale","getZoomScale","retrieveModelFormatState","adjustSegmentSelection","ref","file","getDOMSelection","readFile","dataUrl","isDisposed","originalSrc","updateImageMetadata","src","previousSrc","alt","triggerPluginEvent","newSrc","insertImageWithSrc","createImage","doc","createContentModelDocument","mergeModel","mergeFormat","imageFileOrSrc","altText","margin","url","href","getSelectedSegments","firstSegment","join","URI_REGEX","MAILTO_REGEX","FTP_REGEX","anchorTitle","displayText","sanitizer","HtmlSanitizer","document","sanitize","getAttribute","checkXss","trim","matchLink","normalizedUrl","prefix","search","applyLinkPrefix","originalText","createLink","addLink","originalUrl","adjustTrailingSpaceSelection","CreateLink","onNodeCreated","modelElement","isChanged","getFirstSelectedListItem","updateListMetadata","setListType","newFormat","formatSegmentWithContentModel","capitalization","language","toLocaleLowerCase","toLocaleUpperCase","wordArray","charAt","regex","RegExp","replace","match","FONT_SIZES","change","sizeInPt","newSize","pt","changeBase","fontSizes","min","getNewFontSize","setFontSizeInternal","changeFontSizeInternal","lastParagraph","lastSegmentIndex","fontName","isTurningOn","DefaultCode","addCode","applyBorderFormat","positions","pos","borderOverride","tableModel","getFirstSelectedTable","perimeter","Top","Bottom","Left","Right","operations","allBorders","leftBorder","rightBorder","topBorder","bottomBorder","singleCol","singleRow","modifyPerimeter","alignTableCellHorizontally","alignTableCellVertically","deleteTableColumn","deleteTableRow","deleteTable","insertTableRow","insertTableColumn","mergeTableRow","mergeTableCells","mergeTableColumn","splitTableCellHorizontally","splitTableCellVertically","hasSelectionInBlock","ensureFocusableParagraphForTable","normalizeTable","hasMetadata","keepCellShade","insertPosition","createTableStructure","hasSelectionInBlockGroup","setTableCellBackgroundColor","setStyleCallback","toggleStyleCallback","segmentHasStyleCallback","includingFormatHolder","afterFormatCallback","segmentAndParagraphs","getSelectedSegmentsAndParagraphs","isCollapsedSelection","formatsAndSegments","isTurningOff","BulletListType","Min","Disc","Dash","Square","ShortArrow","LongArrow","UnfilledArrow","Hyphen","DoubleLongArrow","Circle","Max","AutoLink","Format","ImageResize","Paste","SetContent","Cut","Drop","SwitchToDarkMode","SwitchToLightMode","ListChain","Keyboard","NumberingListType","Decimal","DecimalDash","DecimalParenthesis","DecimalDoubleParenthesis","LowerAlpha","LowerAlphaParenthesis","LowerAlphaDoubleParenthesis","LowerAlphaDash","UpperAlpha","UpperAlphaParenthesis","UpperAlphaDoubleParenthesis","UpperAlphaDash","LowerRoman","LowerRomanParenthesis","LowerRomanDoubleParenthesis","LowerRomanDash","UpperRoman","UpperRomanParenthesis","UpperRomanDoubleParenthesis","UpperRomanDash","TableBorderFormat","Default","ListWithSideBorders","NoHeaderBorders","NoSideBorders","FirstColumnHeaderExternal","EspecialType1","EspecialType2","EspecialType3","Clear","addUndoSnapshot","core","canUndoByBackspace","entityStates","lifecycle","api","contentDiv","darkColorHandler","undo","shadowEditFragment","snapshot","html","innerHTML","knownColors","getKnownColorsCopy","createSnapshotSelection","snapshotsManager","addSnapshot","attachDomEvent","eventMap","disposers","getObjectKeys","pluginEventType","beforeDispatch","eventName","onEvent","event","triggerEvent","eventType","rawEvent","addEventListener","removeEventListener","option","cachedModel","cache","cloneModel","includeCachedElement","editorContext","createEditorContext","domToModelContext","createDomToModelContext","domToModelSettings","builtIn","customized","createDomToModelContextWithConfig","calculated","domToContentModel","internalCreateContentModel","cachedSelection","defaultFormat","addDelimiterForEntity","allowCacheElement","domIndexer","element","ownerDocument","defaultView","getComputedStyle","isRootRtl","checkRootRtl","originalWidth","getBoundingClientRect","visualWidth","offsetWidth","checkZoomScale","hasFocus","setDOMSelection","handlePendingFormat","range","collapsed","posContainer","startContainer","posOffset","startOffset","getChangedEntities","entity","concat","deletedEntities","entry","formatter","newImages","clearModelCache","isNested","shouldAddSnapshot","viewport","getVisibleViewport","maxWidth","handleImages","setContentModel","ignoreSelection","eventData","contentModel","source","data","additionalData","formatApiName","changedEntities","getSelection","rangeCount","getRangeAt","commonAncestorContainer","getNewSelection","scrollContainer","domEvent","elements","additionalRects","rects","top","bottom","rect","r","getIntersectedRect","activeElement","CloneOption","createDOMFromHtml","trustedHTMLHandler","DOMParser","parseFromString","paste","clipboardData","pasteType","modelBeforePaste","rawHtml","htmlFromClipboard","retrieveHtmlInfo","sourceFragment","createPasteFragment","body","eventResult","generatePasteOptionFromPlugins","convertInlineCss","fragment","globalCssRules","mergePasteContent","restoreUndoSnapshot","newContent","isRestoring","restoreSnapshotHTML","restoreSnapshotSelection","restoreSnapshotColors","modelToDomContext","createModelToDomContext","modelToDomSettings","createModelToDomContextWithConfig","contentModelToDom","CARET_CSS_RULE","setRangeSelection","createRange","selectNode","collapse","addRangeToSelection","addUniqueId","idPrefix","querySelectorAll","skipSelectionChangedEvent","editorSelector","skipReselectOnFocus","sheet","selectionStyleNode","selectionRules","rootSelector","imageSelectionBorderColor","tableId","parseTableCells","selectors","cont","indexes","toArray","childNodes","el","start","end","tdCount","midElement","ind","middleElSelector","currentRow","cellIndex","selector","handleTableSelected","cssRules","currentRules","buildTableCss","deleteRule","insertRule","newSelection","selectionRangeEx","switchShadowEdit","editorCore","isOn","createDocumentFragment","clonedRoot","cloneNode","moveChildNodes","selectionPath","allowedEventsInShadowEdit","pluginEvent","broadcast","plugins","plugin","onPluginEvent","willHandleEventExclusively","handledExclusively","onNativeSelectionChange","updateCachedModel","this","state","cacheModel","contentModelDomIndexer","getName","initialize","dispose","getState","shouldClearCache","invalidateCache","isInShadowEdit","forceUpdate","newRangeEx","areSameSelection","reconcileSelection","defaultPrevented","isCharacterValue","ContentModelCachePlugin","disposer","onPaste","isClipboardEvent","dataTransfer","preventDefault","extractClipboardItems","allowedCustomPasteType","then","processEntityColor","colorHandler","getDarkColorHandler","transformColor","tempDiv","e","copy","onCutCopy","cut","removeChild","isCut","cacheProcessor","pasteModel","preprocessTable","adjustSelectionForCopyCut","getTempDiv","selectionForCopy","newRange","elementToSelect","parentElement","childElementCount","domSelectionToRange","runAsync","cleanUpAndRestoreSelection","deleteEmptyList","overflow","userSelect","contentEditable","div","selectionMarker","tableCtxt","includes","isElementOfType","wrap","isContentEditable","removeAttribute","ContentModelCopyPastePlugin","hasDefaultFormat","getEnvironment","isAndroid","isComposing","isInIME","checkAndApplyPendingFormat","isCursorMovingKey","clearPendingFormat","applyDefaultFormat","canApplyPendingFormat","applyPendingFormat","ContentModelFormatPlugin","onDragStart","dragEvent","getElementAtCursor","onDrop","takeSnapshot","triggerContentChangedEvent","onScroll","onKeyboardEvent","stopPropagation","onInputEvent","onMouseDown","mouseUpEventListerAdded","onMouseUp","mouseDownX","pageX","mouseDownY","pageY","removeMouseUpEventListener","isClicking","onContextMenuEvent","allItems","searcher","getContentSearcherOfCursor","elementBeforeCursor","getInlineElementBefore","eventTargetNode","button","getContainerNode","contextMenuProviders","provider","getContextMenuItems","onCompositionStart","onCompositionEnd","isContextMenuProvider","eventHandlers","keypress","getEventHandler","keydown","keyup","mousedown","contextmenu","compositionstart","compositionend","dragstart","drop","input","DOMEventPlugin","ENTITY_ID_REGEX","EntityOperationMap","newEntity","overwrite","removeFromEnd","removeFromStart","replaceTemporaryContent","updateEntityState","click","entityMap","handleMouseUpEvent","handleContentChangedEvent","handleExtractContentWithDomEvent","isEntityElement","cmEvent","modifiedEntities","entityType","isFakeEntity","entityFormat","ensureUniqueId","className","generateEntityClassNames","canPersist","shouldPersist","mapEntry","isDeleted","entityState","findAllEntities","classList","name","parseEntityClassName","getAllEntityWrappers","exec","baseId","substr","newId","num","EntityPlugin","ContentEditableAttributeName","initializer","initialModel","createInitModel","adjustColor","doNotAdjustEditorColor","adjustContainerColor","inDarkMode","onExternalContentTransform","setColor","LifecyclePlugin","onFocus","onBlur","onKeyDownDocument","onMouseDownDocument","styleNode","head","env","isSafari","blur","getClickingImage","selectImage","selectBeforeImage","isModifierKey","shiftKey","setStart","SelectionPlugin","Backspace","Delete","Enter","createSnapshotsManager","lastKeyPress","ctrlKey","canUndoAutoComplete","onKeyDown","onKeyPress","clearRedoForInput","onContentChanged","onBeforeKeyboardEditing","evt","altKey","isCtrlOrMetaPressed","metaKey","clearRedo","isMac","UndoPlugin","createContentModelCachePlugin","createContentModelFormatPlugin","copyPaste","createContentModelCopyPastePlugin","createDOMEventPlugin","createLifecyclePlugin","createEntityPlugin","createSelectionPlugin","createUndoPlugin","removeAllRanges","addRange","getNewPendingFormat","markerFormat","isBlockElement","blockCount","previousBlock","previousSegment","subStr","sel1","sel2","r1","r2","endContainer","endOffset","isIndexedSegment","__roosterjsContentModel","Array","isArray","onSegment","segmentNode","reconcileNodeSelection","reconcileTextSelection","insertMarker","lastChild","isAfter","formatSegment","textNode","selectable","newSegments","txt","nodeValue","textSegments","middle","newLast","firstIndex","lastIndex","onParagraph","paragraphElement","previousText","onTable","tableElement","tableRows","oldSelection","marker1","marker2","isEmptyBlock","entities","ColorAttributeEnum","VARIABLE_REGEX","ColorAttributeName","HEX3_REGEX","HEX6_REGEX","RGB_REGEX","RGBA_REGEX","getDarkColor","values","registerColor","lightModeColor","darkModeColor","colorKey","parsedColor","parseColorValue","reset","removeProperty","isInDarkMode","startsWith","findLightColorFromDarkColor","darkColor","rgbSearch","parseColor","rgbCurrent","transformElementColor","fromDarkMode","toDarkMode","names","getPropertyValue","transformedColor","DarkColorHandlerImpl","snapshots","hasNewContentValue","totalSize","autoCompleteIndex","maxSize","step","newIndex","move","isAutoCompleteSnapshot","currentSnapshot","isSameSnapshot","getSnapshotLength","removeCount","removedSize","SnapshotsManagerImpl","defaultTrustHtmlHandler","getDarkColorFallback","unportedCoreApiMap","unportedCorePluginState","tempPlugins","userAgent","corePlugins","createStandaloneEditorCorePlugins","standaloneCoreApiMap","coreApiOverride","originalApi","environment","window","navigator","appVersion","test","createDomToModelSettings","createModelToDomSettings","getPluginState","tablePreProcessor","defaultDomToModelOptions","createDomToModelConfig","metadataAppliers","listItemMetadataApplier","listLevel","listLevelMetadataApplier","defaultModelToDomOptions","createModelToDomConfig","get","createModelFromHtml","deleteSegment","deleteBlock","combineBorderValue","normalizeText","createTableRanges","getSegmentTextFormat","redo","getListStyleTypeFromString","createStandaloneEditorCore","isOptional","minValue","maxValue","allowNull","itemDef","minLength","maxLength","propertyDef","NumberDefinition","createNumberDefinition","ImageMetadataFormatDefinition","createObjectDefinition","widthPx","heightPx","leftPercent","rightPercent","topPercent","bottomPercent","angleRad","createStringDefinition","naturalHeight","naturalWidth","updateMetadata","DefaultOrderedListStyles","DefaultUnorderedListStyles","OrderedMapPlaceholderRegex","RomanValues","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","OrderedMap","UnorderedMap","convertDecimalsToAlpha","decimal","isLowerCase","alpha","String","fromCharCode","toLowerCase","convertDecimalsToRoman","romanValue","timesRomanCharAppear","repeat","listMetadataDefinition","orderedStyleType","unorderedStyleType","shouldApplyToItem","listStyleType","getRawListStyleType","depth","bullet","metadataDefinition","applierFunction","template","listNumber","listFormat","threadItemCounts","list","TableCellMetadataFormatDefinition","bgColorOverride","createBooleanDefinition","NullStringDefinition","BooleanDefinition","TableFormatDefinition","topBorderColor","bottomBorderColor","verticalBorderColor","hasHeaderRow","headerRowColor","hasFirstColumn","hasBandedColumns","hasBandedRows","bgColorEven","bgColorOdd","tableBorderFormat","DeleteSelectionIteratingOptions","contentUnderSelectedTableCell","contentUnderSelectedGeneralElement","createInsertPoint","formatContext","insertMarkerIndex","lastTableContext","isForward","array","deleteLength","deleteState","pasteDisplayFormatParser","allowedTags","AllowedTags","additionalAllowedTags","disallowedTags","DisallowedTags","additionalDisallowedTags","sanitizedElement","sanitizeElement","removeStyle","processor","internalGeneralProcessor","span","createSanitizedElement","attributes","removeDisplayFlex","selectionRoot","isInSelection","shouldUseTableProcessor","tableProcessor","entityProcessor","iterateElements","transformer","includeSelf","isHTMLElement","htmlElement","nodeType","Node","ELEMENT_NODE","rootNode","BorderStyles","BorderSizeRegex","combinedBorder","v","CursorMovingKeys","Set","isCtrlKey","isAltKey","isMetaKey","has","removeUndefinedValues","textFormat","keys","FileReader","onload","onerror","readAsDataURL","SPACES_REGEX","charCodeAt","trs","tr","sourceCol","targetCol","td","colSpan","rowSpan","cloneModelWithFormat","cloneModelWithDataset","cloneBlockBase","cloneBlockGroupBase","handleCachedElement","zeroFontSize","cloneFormatContainer","cloneGeneralBlock","formatHolder","cloneSelectionMarker","cloneListLevel","cloneListItem","divider","cloneDivider","cloneEntity","newParagraph","cloneSegmentBase","general","cloneGeneralSegment","title","isSelectedAsImageSelection","cloneSegment","cloneParagraph","from","cloneTableCell","cloneTableRow","cloneTable","cloneBlock","newSegment","Error","newModel","blockGroupTypes","stopTypes","boldStyle","HeadingTags","mergeParagraph","markerPosition","mergeToCurrentParagraph","splitParagraph","segmentIndex","sourceKeys","mergeTable","newTable","j","k","leftCell","aboveCell","oldCell","newMarker","insertBlock","mergeList","newList","listParent","newParaFormat","paraIndex","applyDefaultFormatOption","mergeSegmentFormat","targetformat","sourceFormat","selections","collectSelections","deepFirst","findSequence","removeUnmeaningfulSelections","groupIndex","checkFirstParagraph","allSegments","resultPath","blockToDelete","replacement","segmentToDelete","preserveWhiteSpace","isWhiteSpacePreserved","isBackward","normalizeSingleSegment","normalizePreviousSegment","deleteSingleChar","additionalSteps","deleteExpandedSelection","isValidDeleteSelectionContext","mergeParagraphAfterDelete","internalIterateSelections","treatAllAsSelect","hasSelectedSegment","hasUnselectedSegment","newPath","handleGeneralContent","handleGeneralElement","setSelectionToBlockGroup","handleSelection","isGeneralSegment","setIsSelected","findCell","currentCell","setSelectionToTable","segmentsToDelete","setSelectionToSegment","setSelectionToBlock","DEFAULT_FORMAT","effectiveMetadata","metaOverrides","removeCellShade","overrides","bgColorOverrides","vAlignOverrides","borderOverrides","updateOverrides","clearCache","transparentBorderMatrix","BorderFormatters","alwaysUseTransparent","BorderKeys","getBorderStyleFromColor","formatCells","setBorderColor","setFirstColumnFormat","setHeaderRowFormat","hasSelection","getTableCellWidth","tryMoveBlocks","targetCell","sourceCell","s","White","Black","shouldRemoveColor","cellBackgroundColor","lightness","calculateLightness","colorValues","red","green","blue","isColorOverride","applyToSegments","setAdaptiveCellColor","removeAdaptiveCellColor","restoreSnapshot","getPath","previousSibling","isPreviousText","c","imageId","ContentHandlers","customValues","linkPreview","JSON","parse","types","files","pasteNativeEvent","Promise","all","kind","resolve","getAsFile","textType","getAllowedCustomType","getAsString","imageDataUri","setAttribute","img","line","lines","initialOffset","tIndex","lineBefore","lineAfter","tabCount","fill","transformTabCharacters","createTextNode","PasteTypeMap","asImage","asPlainText","normal","htmlBefore","htmlAfter","htmlAttributes","domToModelOption","additionalFormatParsers","formatParserOverride","sanitizingOption","elementCallbacks","attributeCallbacks","cssStyleCallbacks","additionalTagReplacements","additionalAllowedAttributes","additionalAllowedCssClasses","additionalDefaultStyleValues","additionalGlobalStyleNodes","additionalPredefinedCssForElement","preserveHtmlComments","unknownTagReplacement","EmptySegmentFormat","shouldMergeTable","customizedMerge","selectedSegment","createPasteEntityProcessor","createPasteGeneralProcessor","mergeOption","START_FRAGMENT","END_FRAGMENT","retrieveMetadata","querySelector","attr","meta","content","retrieveCssRules","styles","ruleIndex","rule","CSSRule","STYLE_RULE","selectorText","cssText","startIndex","endIndex","lastIndexOf","retrieveHtmlStrings","htmlFirstLevelChildTags","topLevelTags","retrieveTopLevelTags","tryGetEntityElement","refNode","currentNode","next","originalEntityElement","reuseCachedElement","insertBefore","markerNode","replaceChild","getPositionFromPath","snapshotSelection","domSelection","startPos","endPos","setEnd","VARIABLE_PREFIX","AllowedAttributes","DefaultStyleValue","padding","float","orphans","widows","styleCallbacks","attribute","processStyles","pairs","pair","valueIndex","isCssVariable","processCssVariable","newChild","defaultContentModelFormatMap","blockquote","pre","whiteSpace","blockElement","defaultHTMLStyleMap","address","article","aside","b","dd","dl","dt","em","fontStyle","fieldset","figcaption","figure","footer","form","header","hr","li","main","nav","ol","textDecoration","section","strike","strong","sub","sup","boxSizing","th","u","ul","config","blockFormat","blockDecorator","elementProcessors","defaultProcessorMap","formatParsers","buildFormatParsers","defaultFormatParsers","additionalParsersArray","combinedOverrides","defaultFormatKeysPerCategory","reduce","formatKey","parsers","linkProcessor","knownElementProcessor","brProcessor","codeProcessor","font","fontProcessor","imageProcessor","headingProcessor","hrProcessor","listItemProcessor","listProcessor","pProcessor","formatContainerProcessor","generalProcessor","textProcessor","elementProcessor","childProcessor","delimiter","delimiterProcessor","SegmentDecoratorTags","isSegmentDecorator","parseFormat","ContextStyles","addSelectionMarker","stackFormat","tryGetProcessorForEntity","isEntityDelimiter","tryGetProcessorForDelimiter","isBlockEntity","FontSizes","size","intSize","Number","isNaN","segmentOnBlock","getDefaultStyle","formatContainer","shouldFallbackToParagraph","generalBlockProcessor","createGeneralBlock","isSelectedBefore","generalSegmentProcessor","createGeneralSegment","addDecorators","blockProcessor","createDivider","FormatContainerTriggerStyles","ByPassFormatContainerTags","defaultStyle","bgcolor","shouldUseFormatContainer","segmentUnderLink","hasAttribute","listItemElement","listItemThread","currentBlocks","lastItem","listLevelThread","originalListParent","calcSizes","lastPos","tableSelection","hasTableSelection","tableBorder","columnPositions","rowPositions","tableRow","tbody","parentTag","hasSelectionBeforeCell","colEnd","rowEnd","needCalcWidth","needCalcHeight","segmentOnTableCell","cellFormat","tableCell","hasTd","spannedRow","hasSelectionAfterCell","heights","offsets","txtStartOffset","txtEndOffset","ensureParagraph","subText","addTextSegment","WhiteSpaceValuesNeedToHandle","textModel","hasSpacesOnly","f1","f2","keys1","keys2","currentContainer","BLOCK_DISPLAY_STYLES","parser","SkippedStylesForBlock","SkippedStylesForTable","stackFormatInternal","processType","linkFormat","codeFormat","decoratorFormat","stackLinkInternal","stackCodeInternal","ENTITY_INFO_NAME","ENTITY_TYPE_PREFIX","ENTITY_ID_PREFIX","ENTITY_READONLY_PREFIX","DELIMITER_BEFORE","DELIMITER_AFTER","isDelimiter","textContent","insertDelimiter","entityWrapper","nextElementSibling","previousElementSibling","delimiterAfter","delimiterBefore","obj","expectedType","EditingInfoDatasetName","definition","metadataString","validate","stringify","def","n1","n2","abs","keepExistingChildren","newElement","collection","call","wrapperTag","directionFormatHandler","dir","apply","displayFormatHandler","htmlAlignFormatHandler","htmlAlign","calcAlign","lineHeightFormatHandler","MarginKeys","marginFormatHandler","implicitFormat","PaddingKeys","paddingFormatHandler","defaultValue","textAlignFormatHandler","flexDirection","alignSelf","whiteSpaceFormatHandler","shouldSetValue","backgroundColorFormatHandler","getColor","borderBoxFormatHandler","BorderWidthKeys","borderFormatHandler","defaultWidth","boxShadowFormatHandler","datasetFormatHandler","floatFormatHandler","idFormatHandler","PercentageRegex","tryParseSize","attrName","attrValue","sizeFormatHandler","maxHeight","minWidth","minHeight","verticalAlignFormatHandler","wordBreakFormatHandler","wordBreak","defaultFormatHandlerMap","bold","boldFormatHandler","borderBox","fontFamilyFormatHandler","fontSizeFormatHandler","entityFormatHandler","italicFormatHandler","letterSpacingFormatHandler","linkFormatHandler","listItemThreadFormatHandler","listLevelThreadFormatHandler","listStyle","listStyleFormatHandler","strikeFormatHandler","superOrSubScript","superOrSubScriptFormatHandler","tableLayout","tableLayoutFormatHandler","tableSpacing","tableSpacingFormatHandler","textColorFormatHandler","textColorOnTableCell","textColorOnTableCellFormatHandler","underlineFormatHandler","styleBasedSegmentFormats","elementBasedSegmentFormats","sharedBlockFormats","sharedContainerFormats","styleBasedSegment","elementBasedSegment","tableCellBorder","defaultFormatAppliers","isEntity","isLiUnderOl","defaultStyles","displayForDummyItem","startNumber","listStylePosition","blockFontWeight","wrapAllChildNodes","isSuperOrSubScript","contextFont","knownFontSize","KnownFontSizes","endsWith","existingFontSize","normalizeFontSize","small","medium","large","rel","anchorId","relationship","anchorClass","reverse","implicitColor","BorderCollapsed","borderSpacing","DeprecatedColors","isBackground","effectiveColor","initial","justify","align","MarginValueRegex","getFontSize","currentSizeOrElement","styleInPt","ptToPx","currentSizePxOrElement","resultUnit","numStr","unit","normalValue","existingValue","addDelimiters","lastSegment","lastBlock","SPACE_TEXT_REGEX","isBlockEmpty","isBlockGroupEmpty","isSegmentEmpty","isBlockGroup","isSegment","WHITESPACE_PRE_VALUES","normalizeParagraph","secondLast","noMarkerSegments","normalizeAllSegments","markerIndex","prev","removeEmptyLinks","removeEmptySegments","SPACE","NONE_BREAK_SPACE","LEADING_SPACE_REGEX","TRAILING_SPACE_REGEX","resetNormalizeSegmentContext","ignoreLeadingSpaces","ignoreTrailingSpaces","lastInlineSegment","normalizeSegment","normalizeTextSegments","normalizeLastTextSegment","groupToUnwrap","rowCount","spanLeftOrColSpan","spanAboveOrRowSpan","calcPosition","modelHandlers","blockGroupChildren","startPosition","endPosition","imageSelection","extractSelectionRange","normalize","regularSelection","defaultContentModelHandlers","modelHandlerOverride","formatAppliers","buildFormatAppliers","formatApplierOverride","additionalFormatAppliers","defaultModelHandlers","additionalAppliersArray","appliers","handleBlock","handleBlockGroupChildren","handleBr","entityBlock","handleEntityBlock","entitySegment","handleEntitySegment","generalBlock","handleGeneralBlock","generalSegment","handleGeneralSegment","handleDivider","handleImage","handleList","handleListItem","handleParagraph","handleFormatContainer","handleSegment","segmentDecorator","handleSegmentDecorator","handleTable","handleText","handlers","childBlock","segmentNodes","handleSegmentCommon","applyFormat","after","before","PreChildFormat","imageModel","widthNum","heightNum","layer","stackLevel","itemLevel","editingInfo","applyMetadata","unwrap","needParagraphWrapper","formatOnWrapper","handleSegments","optimize","codeNode","tableNode","OptimizeTags","hasSameAttributes","element1","element2","attr1","attr2","removeUnnecessarySpan","mergeNode","newNode","applier","containerNode","tagNameOrFormat","coreApiMap","ensureTypeInContainer","getContent","getStyleBasedFormatState","insertNode","setContent","keyboardEvent","findClosestElementAncestor","Position","formatNode","getBlockElementAtNode","collapseToSingleElement","isNodeEmpty","brEl","append","shouldSetNodeStyles","safeInstanceOf","innerText","wasNodeJustCreatedByKeyboardEvent","updateCursor","replaceSelection","insertOnNewLine","mode","clonedNode","triggerExtractContentEvent","includeSelectionMarker","getTextContent","originalRange","getSelectionPath","getHtmlWithSelectionPath","styleTextColor","styleBackColor","getComputedStyles","backColor","textColors","backgroundColors","insertToRegionRoot","isBegin","getFirstLastBlockElement","getStartNode","getEndNode","isVoidHtmlElement","nodes","insertedNode","rangeToRestore","cloneRange","getInitialRange","deleteContents","getStart","region","getRegionsFromRange","isAtEnd","splitTextNode","splitParentNode","adjustInsertPositionRegionRoot","tempPos","adjustInsertPositionNewLine","adjustInsertPosition","nodeForCursor","contentChanged","restoreContentWithEntityPlaceholder","metadataFromContent","extractContentMetadata","convertMetadataToDOMSelection","selectContentMetadata","features","hasFunctionKey","ctrlOrMeta","isKeyDownEvent","getSelectionRange","which","feature","allowFunctionKeys","shouldHandleEvent","handleEvent","handledByEditFeature","EditPlugin","isContentModelSelectionChangedEvent","convertDomSelectionToRangeEx","EventTypeTranslatePlugin","normalizeTables","queryElements","normalizeTableFromEvent","prevElement","changeElementTag","tables","rangeEx","getSelectionRangeEx","ranges","isDOMChanged","getTagOfNode","colgroups","thead","colgroup","select","coordinates","NormalizeTablePlugin","corePluginOverride","eventTranslate","createEventTypeTranslatePlugin","edit","createEditPlugin","createNormalizeTablePlugin","createEditorCore","getCore","disposeErrorHandler","customData","deleteNode","replaceNode","existingNode","toNode","transformColorForDarkMode","transformToDarkColor","arg","scopeOrCallback","scope","Function","selectionEx","collapseNodes","canSplitParent","isEmpty","insertContent","allNodes","deleteSelectedContent","pasteAsText","applyCurrentFormat","pasteAsImage","tryGetFromCache","arg1","arg2","arg3","arg4","buildRangeEx","convertRangeExToDomSelection","getFocusedPosition","focusNode","focusOffset","startFrom","cacheGetEventData","isPositionAtBeginning","isPositionAtBeginningOf","getSelectedRegions","self","addDomEventHandler","nameOrMap","handler","eventsMap","eventsMapResult","handlerObj","undoState","getEntityState","getEnd","getUndoState","getScrollContainer","getCustomData","getter","getDefaultFormat","getBodyTraverser","ContentTraverser","createBodyTraverser","getSelectionTraverser","createSelectionTraverser","getBlockTraverser","createBlockTraverser","PositionContentSearcher","win","handle","requestAnimationFrame","cancelAnimationFrame","setEditorDomAttribute","getEditorDomAttribute","getRelativeDistanceToEditor","addScroll","editorRect","elementRect","y","scrollLeft","scrollTop","addContentEditFeature","removeContentEditFeature","featureSet","getPendableFormatState","forceGetStateFromDOM","setDarkModeState","nextDarkMode","startShadowEdit","stopShadowEdit","isFeatureEnabled","experimentalFeatures","getTrustedHTMLHandler","getSizeTransformer","sizeTransformer","setZoomScale","scale","oldValue","oldZoomScale","newZoomScale","ContentModelEditor","createCorePlugins","pluginState","additionalPlugins","initContent","initialContent","standaloneEditorCore","isSelectionRangeEx","lastCell","areAllCollapsed","isNodePosition","currentPosition","pendableKeys","PendableStyleCheckers","CssFalsyCheckers","queryCommandStateFromDOM","isUnderline","isItalic","isSubscript","isSuperscript","isStrikeThrough","isContentModelEditor","handleKeyDownEvent","keyboardDelete","keyboardInput","ContentModelEditPlugin","deleteAllSegmentBefore","getDeleteCollapsedSelection","segmentsWithoutBr","fixupBr","getLeafSiblingBlock","siblingSegment","forwardDeleteCollapsedSelection","backwardDeleteCollapsedSelection","DeleteWordState","getDeleteWordSelection","deleteNext","iterator","forward","punctuation","space","iterateSegments","curr","done","forwardDeleteWordSelection","backwardDeleteWordSelection","canDeleteBefore","canDeleteAfter","shouldDeleteWithContentModel","shouldDeleteAllSegmentsBefore","shouldDeleteWord","getDeleteSteps","handleKeyboardEventResult","shouldInputWithContentModel","isNext","DELIMITER_SELECTOR","ZERO_WIDTH_SPACE","INLINE_ENTITY_SELECTOR","getEntitySelector","normalizeDelimitersInEditor","addDelimitersIfNeeded","getDelimiterFromElement","removeNode","removeDelimiterAttr","getBlock","blockToCheck","delimiters","entityElement","matchesSelector","handleCollapsedEnter","preventTypeInDelimiter","currentRange","startElement","endElement","startUpdate","getPosition","endUpdate","aEditor","handleSelectionNotCollapsed","setPosition","sibling","getEntityFromElement","checkEntity","entitySibling","remove","cn","EntityDelimiterPlugin","ContentModelPastePlugin","allowExcelNoBorderTable","ev","pasteSource","getPasteSource","processPastedContentFromWordDesktop","processPastedContentWacComponents","processPastedContentFromExcel","processPastedContentFromPowerPoint","parseLink","deprecatedBorderColorParser","tableBorderParser","blockElementParser","ElementBorderKeys","Map","w","styleSet","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","DEFAULT_BORDER_STYLE","excelHandler","trMatch","tableMatch","replaceChildren","setProcessor","WORD_ONLINE_TABLE_TEMP_ELEMENT_CLASSES","BULLET_LIST_STYLE","NUMBER_LIST_STYLE","IMAGE_BORDER","IMAGE_CONTAINER","OUTLINE_ELEMENT","PARAGRAPH","LIST_CONTAINER_ELEMENT_CLASS_NAME","TABLE_CONTAINER","COMMENT_HIGHLIGHT_CLASS","COMMENT_HIGHLIGHT_CLICKED_CLASS","TEMP_ELEMENTS_CLASSES","WAC_IDENTIFY_SELECTOR","LIST_ELEMENT_TAGS","LIST_ELEMENT_SELECTOR","wacSubSuperParser","wacElementProcessor","elementTag","matches","closest","shouldClearListContext","wacLiElementProcessor","lastblock","wacListItemParser","wacListLevelParser","wacCommentParser","wacBlockParser","wacListProcessor","isWrappedInContainer","toUpperCase","FORMATING_REGEX","metadataMap","indexAt","indexCurlyEnd","indexCurlyStart","metadataName","trimLeft","dataName","record","formatedKey","formatedValue","set","PERCENTAGE_REGEX","wordDesktopElementProcessor","removeNonValidLineHeight","listLevelParser","listItemElementParser","metadataKey","getStyles","processWordList","processWordComments","parsedLineHeight","MSO_COMMENT_ANCHOR_HREF_REGEX","TEMPLATE_VALUE_REGEX","startNumberOverrideParser","listMetadata","wordKnownLevels","wordLevel","wordList","knownLevel","wordListStyle","lNumber","templateFinal","templateType","templateValue","getBulletFromMetadata","processAsListItem","documentContainWacElements","props","getSourceFunctions","isWordDesktopDocument","isExcelDesktopDocument","isExcelOnlineDocument","isPowerPointDesktopDocument","isGoogleSheetDocument","shouldConvertToSingleImage","shouldConvertSingleImage","param","func","dColor","SUPPORTED_PROTOCOLS","INVALID_LINKS_REGEX","URL","protocol","createContentModelEditor","module","exports","roosterjs","extendStatics","d","setPrototypeOf","__proto__","prototype","hasOwnProperty","__extends","TypeError","constructor","create","__assign","t","n","arguments","__rest","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","__esDecorate","ctor","descriptorIn","contextIn","initializers","extraInitializers","accept","f","descriptor","access","addInitializer","init","__runInitializers","thisArg","useValue","__propKey","__setFunctionName","description","configurable","__metadata","metadataValue","__awaiter","_arguments","P","generator","reject","fulfilled","rejected","__generator","g","label","sent","trys","ops","verb","Symbol","op","__createBinding","o","m","k2","__esModule","writable","enumerable","__exportStar","__values","__read","ar","error","__spread","__spreadArrays","il","jl","__spreadArray","to","pack","l","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__setModuleDefault","__importStar","mod","__importDefault","__classPrivateFieldGet","receiver","__classPrivateFieldSet","__classPrivateFieldIn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","prop","toStringTag","__webpack_exports__"],"sourceRoot":""}